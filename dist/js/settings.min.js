angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(e){var t=e.storageKey(),n=e.storage(),a=function(){var a=e.preferredLanguage();angular.isString(a)?e.use(a):n.put(t,e.use())};n?n.get(t)?e.use(n.get(t))["catch"](a):a():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY",function(e){var t,n,a,i,o,r,s,l,c,u,d,p,f,h,g,m={},v=[],b=e,y=[],$=!1,w="translate-cloak",x=!1,k=".",C="2.5.2",D=function(){var e,t,n=window.navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(e=0;e<n.languages.length;e++)if(t=n.languages[e],t&&t.length)return t;for(e=0;e<a.length;e++)if(t=n[a[e]],t&&t.length)return t;return null};D.displayName="angular-translate/service: getFirstBrowserLanguage";var T=function(){return(D()||"").split("-").join("_")};T.displayName="angular-translate/service: getLocale";var E=function(e,t){for(var n=0,a=e.length;a>n;n++)if(e[n]===t)return n;return-1},S=function(){return this.replace(/^\s+|\s+$/g,"")},O=function(e){for(var t=[],a=angular.lowercase(e),i=0,o=v.length;o>i;i++)t.push(angular.lowercase(v[i]));if(E(t,a)>-1)return e;if(n){var r;for(var s in n){var l=!1,c=Object.prototype.hasOwnProperty.call(n,s)&&angular.lowercase(s)===angular.lowercase(e);if("*"===s.slice(-1)&&(l=s.slice(0,-1)===e.slice(0,s.length-1)),(c||l)&&(r=n[s],E(t,angular.lowercase(r))>-1))return r}}var u=e.split("_");return u.length>1&&E(t,angular.lowercase(u[0]))>-1?u[0]:e},M=function(e,t){if(!e&&!t)return m;if(e&&!t){if(angular.isString(e))return m[e]}else angular.isObject(m[e])||(m[e]={}),angular.extend(m[e],P(t));return this};this.translations=M,this.cloakClassName=function(e){return e?(w=e,this):w};var P=function(e,t,n,a){var i,o,r,s;t||(t=[]),n||(n={});for(i in e)Object.prototype.hasOwnProperty.call(e,i)&&(s=e[i],angular.isObject(s)?P(s,t.concat(i),n,i):(o=t.length?""+t.join(k)+k+i:i,t.length&&i===a&&(r=""+t.join(k),n[r]="@:"+o),n[o]=s));return n};this.addInterpolation=function(e){return y.push(e),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(e){return u=e,this},this.useSanitizeValueStrategy=function(e){return $=e,this},this.preferredLanguage=function(e){return A(e),this};var A=function(e){return e&&(t=e),t};this.translationNotFoundIndicator=function(e){return this.translationNotFoundIndicatorLeft(e),this.translationNotFoundIndicatorRight(e),this},this.translationNotFoundIndicatorLeft=function(e){return e?(f=e,this):f},this.translationNotFoundIndicatorRight=function(e){return e?(h=e,this):h},this.fallbackLanguage=function(e){return I(e),this};var I=function(e){return e?(angular.isString(e)?(i=!0,a=[e]):angular.isArray(e)&&(i=!1,a=e),angular.isString(t)&&E(a,t)<0&&a.push(t),this):i?a[0]:a};this.use=function(e){if(e){if(!m[e]&&!d)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+e+"'");return o=e,this}return o};var L=function(e){return e?(b=e,void 0):l?l+b:b};this.storageKey=L,this.useUrlLoader=function(e,t){return this.useLoader("$translateUrlLoader",angular.extend({url:e},t))},this.useStaticFilesLoader=function(e){return this.useLoader("$translateStaticFilesLoader",e)},this.useLoader=function(e,t){return d=e,p=t||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(e){return s=e,this},this.storagePrefix=function(e){return e?(l=e,this):e},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(e){return c=e,this},this.usePostCompiling=function(e){return x=!!e,this},this.determinePreferredLanguage=function(e){var n=e&&angular.isFunction(e)?e():T();return t=v.length?O(n):n,this},this.registerAvailableLanguageKeys=function(e,t){return e?(v=e,t&&(n=t),this):v},this.useLoaderCache=function(e){return e===!1?g=void 0:e===!0?g=!0:"undefined"==typeof e?g="$translationCache":e&&(g=e),this},this.$get=["$log","$injector","$rootScope","$q",function(e,n,l,v){var k,D,T,F=n.get(u||"$translateDefaultInterpolation"),U=!1,N={},H={},V=function(e,n,i){if(angular.isArray(e)){var r=function(e){for(var t={},a=[],o=function(e){var a=v.defer(),o=function(n){t[e]=n,a.resolve([e,n])};return V(e,n,i).then(o,o),a.promise},r=0,s=e.length;s>r;r++)a.push(o(e[r]));return v.all(a).then(function(){return t})};return r(e)}var l=v.defer();e&&(e=S.apply(e));var c=function(){var e=t?H[t]:H[o];if(D=0,s&&!e){var n=k.get(b);if(e=H[n],a&&a.length){var i=E(a,n);D=0===i?1:0,E(a,t)<0&&a.push(t)}}return e}();return c?c.then(function(){Z(e,n,i).then(l.resolve,l.reject)},l.reject):Z(e,n,i).then(l.resolve,l.reject),l.promise},j=function(e){return f&&(e=[f,e].join(" ")),h&&(e=[e,h].join(" ")),e},R=function(e){o=e,l.$emit("$translateChangeSuccess",{language:e}),s&&k.put(V.storageKey(),o),F.setLocale(o),angular.forEach(N,function(e,t){N[t].setLocale(o)}),l.$emit("$translateChangeEnd",{language:e})},q=function(e){if(!e)throw"No language key specified for loading.";var t=v.defer();l.$emit("$translateLoadingStart",{language:e}),U=!0;var a=g;"string"==typeof a&&(a=n.get(a));var i=angular.extend({},p,{key:e,$http:angular.extend({},{cache:a},p.$http)});return n.get(d)(i).then(function(n){var a={};l.$emit("$translateLoadingSuccess",{language:e}),angular.isArray(n)?angular.forEach(n,function(e){angular.extend(a,P(e))}):angular.extend(a,P(n)),U=!1,t.resolve({key:e,table:a}),l.$emit("$translateLoadingEnd",{language:e})},function(e){l.$emit("$translateLoadingError",{language:e}),t.reject(e),l.$emit("$translateLoadingEnd",{language:e})}),t.promise};if(s&&(k=n.get(s),!k.get||!k.put))throw new Error("Couldn't use storage '"+s+"', missing get() or put() method!");angular.isFunction(F.useSanitizeValueStrategy)&&F.useSanitizeValueStrategy($),y.length&&angular.forEach(y,function(e){var a=n.get(e);a.setLocale(t||o),angular.isFunction(a.useSanitizeValueStrategy)&&a.useSanitizeValueStrategy($),N[a.getInterpolationIdentifier()]=a});var _=function(e){var t=v.defer();return Object.prototype.hasOwnProperty.call(m,e)?t.resolve(m[e]):H[e]?H[e].then(function(e){M(e.key,e.table),t.resolve(e.table)},t.reject):t.reject(),t.promise},B=function(e,t,n,a){var i=v.defer();return _(e).then(function(r){Object.prototype.hasOwnProperty.call(r,t)?(a.setLocale(e),i.resolve(a.interpolate(r[t],n)),a.setLocale(o)):i.reject()},i.reject),i.promise},z=function(e,t,n,a){var i,r=m[e];return r&&Object.prototype.hasOwnProperty.call(r,t)&&(a.setLocale(e),i=a.interpolate(r[t],n),a.setLocale(o)),i},W=function(e){if(c){var t=n.get(c)(e,o);return void 0!==t?t:e}return e},Y=function(e,t,n,i){var o=v.defer();if(e<a.length){var r=a[e];B(r,t,n,i).then(o.resolve,function(){Y(e+1,t,n,i).then(o.resolve)})}else o.resolve(W(t));return o.promise},G=function(e,t,n,i){var o;if(e<a.length){var r=a[e];o=z(r,t,n,i),o||(o=G(e+1,t,n,i))}return o},K=function(e,t,n){return Y(T>0?T:D,e,t,n)},Q=function(e,t,n){return G(T>0?T:D,e,t,n)},Z=function(e,t,n){var i=v.defer(),r=o?m[o]:m,s=n?N[n]:F;if(r&&Object.prototype.hasOwnProperty.call(r,e)){var l=r[e];"@:"===l.substr(0,2)?V(l.substr(2),t,n).then(i.resolve,i.reject):i.resolve(s.interpolate(l,t))}else{var u;c&&!U&&(u=W(e)),o&&a&&a.length?K(e,t,s).then(function(e){i.resolve(e)},function(e){i.reject(j(e))}):c&&!U&&u?i.resolve(u):i.reject(j(e))}return i.promise},X=function(e,t,n){var i,r=o?m[o]:m,s=n?N[n]:F;if(r&&Object.prototype.hasOwnProperty.call(r,e)){var l=r[e];i="@:"===l.substr(0,2)?X(l.substr(2),t,n):s.interpolate(l,t)}else{var u;c&&!U&&(u=W(e)),o&&a&&a.length?(D=0,i=Q(e,t,s)):i=c&&!U&&u?u:j(e)}return i};if(V.preferredLanguage=function(e){return e&&A(e),t},V.cloakClassName=function(){return w},V.fallbackLanguage=function(e){if(void 0!==e&&null!==e){if(I(e),d&&a&&a.length)for(var t=0,n=a.length;n>t;t++)H[a[t]]||(H[a[t]]=q(a[t]));V.use(V.use())}return i?a[0]:a},V.useFallbackLanguage=function(e){if(void 0!==e&&null!==e)if(e){var t=E(a,e);t>-1&&(T=t)}else T=0},V.proposedLanguage=function(){return r},V.storage=function(){return k},V.use=function(e){if(!e)return o;var t=v.defer();l.$emit("$translateChangeStart",{language:e});var n=O(e);return n&&(e=n),m[e]||!d||H[e]?(t.resolve(e),R(e)):(r=e,H[e]=q(e).then(function(n){return M(n.key,n.table),t.resolve(n.key),R(n.key),r===e&&(r=void 0),n},function(e){r===e&&(r=void 0),l.$emit("$translateChangeError",{language:e}),t.reject(e),l.$emit("$translateChangeEnd",{language:e})})),t.promise},V.storageKey=function(){return L()},V.isPostCompilingEnabled=function(){return x},V.refresh=function(e){function t(){i.resolve(),l.$emit("$translateRefreshEnd",{language:e})}function n(){i.reject(),l.$emit("$translateRefreshEnd",{language:e})}if(!d)throw new Error("Couldn't refresh translation table, no loader registered!");var i=v.defer();if(l.$emit("$translateRefreshStart",{language:e}),e)m[e]?q(e).then(function(n){M(n.key,n.table),e===o&&R(o),t()},n):n();else{var r=[],s={};if(a&&a.length)for(var c=0,u=a.length;u>c;c++)r.push(q(a[c])),s[a[c]]=!0;o&&!s[o]&&r.push(q(o)),v.all(r).then(function(e){angular.forEach(e,function(e){m[e.key]&&delete m[e.key],M(e.key,e.table)}),o&&R(o),t()})}return i.promise},V.instant=function(e,n,i){if(null===e||angular.isUndefined(e))return e;if(angular.isArray(e)){for(var r={},s=0,l=e.length;l>s;s++)r[e[s]]=V.instant(e[s],n,i);return r}if(angular.isString(e)&&e.length<1)return e;e&&(e=S.apply(e));var u,d=[];t&&d.push(t),o&&d.push(o),a&&a.length&&(d=d.concat(a));for(var p=0,f=d.length;f>p;p++){var h=d[p];if(m[h]&&"undefined"!=typeof m[h][e]&&(u=X(e,n,i)),"undefined"!=typeof u)break}return u||""===u||(u=F.interpolate(e,n),c&&!U&&(u=W(e))),u},V.versionInfo=function(){return C},V.loaderCache=function(){return g},d&&(angular.equals(m,{})&&V.use(V.use()),a&&a.length))for(var J=function(e){return M(e.key,e.table),l.$emit("$translateChangeEnd",{language:e.key}),e},et=0,tt=a.length;tt>et;et++)H[a[et]]=q(a[et]).then(J);return V}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(e){var t,n={},a="default",i=null,o={escaped:function(e){var t={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=angular.element("<div></div>").text(e[n]).html());return t}},r=function(e){var t;return t=angular.isFunction(o[i])?o[i](e):e};return n.setLocale=function(e){t=e},n.getInterpolationIdentifier=function(){return a},n.useSanitizeValueStrategy=function(e){return i=e,this},n.interpolate=function(t,n){return i&&(n=r(n)),e(t)(n||{})},n}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(e,t,n,a,i,o){return{restrict:"AE",scope:!0,compile:function(t,r){var s=r.translateValues?r.translateValues:void 0,l=r.translateInterpolation?r.translateInterpolation:void 0,c=t[0].outerHTML.match(/translate-value-+/i),u="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",d="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(t,p,f){t.interpolateParams={},t.preText="",t.postText="";var h={},g=function(e){if(angular.equals(e,"")||!angular.isDefined(e)){var a=p.text().match(u);angular.isArray(a)?(t.preText=a[1],t.postText=a[3],h.translate=n(a[2])(t.$parent),watcherMatches=p.text().match(d),angular.isArray(watcherMatches)&&watcherMatches[2]&&watcherMatches[2].length&&t.$watch(watcherMatches[2],function(e){h.translate=e,$()})):h.translate=p.text().replace(/^\s+|\s+$/g,"")}else h.translate=e;$()},m=function(e){f.$observe(e,function(t){h[e]=t,$()})};f.$observe("translate",function(e){g(e)});for(var v in f)f.hasOwnProperty(v)&&"translateAttr"===v.substr(0,13)&&m(v);if(f.$observe("translateDefault",function(e){t.defaultText=e}),s&&f.$observe("translateValues",function(e){e&&t.$parent.$watch(function(){angular.extend(t.interpolateParams,i(e)(t.$parent))})}),c){var b=function(e){f.$observe(e,function(n){var a=angular.lowercase(e.substr(14,1))+e.substr(15);t.interpolateParams[a]=n})};for(var y in f)Object.prototype.hasOwnProperty.call(f,y)&&"translateValue"===y.substr(0,14)&&"translateValues"!==y&&b(y)}var $=function(){for(var e in h)h.hasOwnProperty(e)&&h[e]&&w(e,h[e],t,t.interpolateParams)},w=function(t,n,a,i){e(n,i,l).then(function(e){x(e,a,!0,t)},function(e){x(e,a,!1,t)})},x=function(t,n,i,o){if("translate"===o){i||"undefined"==typeof n.defaultText||(t=n.defaultText),p.html(n.preText+t+n.postText);var s=e.isPostCompilingEnabled(),l="undefined"!=typeof r.translateCompile,c=l&&"false"!==r.translateCompile;(s&&!l||c)&&a(p.contents())(n)}else{i||"undefined"==typeof n.defaultText||(t=n.defaultText);var u=f.$attr[o].substr(15);p.attr(u,t)}};t.$watch("interpolateParams",$,!0);var k=o.$on("$translateChangeSuccess",$);p.text().length&&g(""),$(),t.$on("$destroy",k)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(e,t){return{compile:function(n){var a=function(){n.addClass(t.cloakClassName())},i=function(){n.removeClass(t.cloakClassName())},o=e.$on("$translateChangeEnd",function(){i(),o(),o=null});return a(),function(e,n,o){o.translateCloak&&o.translateCloak.length&&o.$observe("translateCloak",function(e){t(e).then(i,a)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(e,t){var n=function(n,a,i){return angular.isObject(a)||(a=e(a)(this)),t.instant(n,a,i)};return n.$stateful=!0,n}]),function(e,t){"use strict";function n(){this.$get=["$$sanitizeUri",function(e){return function(t){var n=[];return o(t,l(n,function(t,n){return!/^unsafe/.test(e(t,n))})),n.join("")}}]}function a(e){var n=[],a=l(n,t.noop);return a.chars(e),n.join("")}function i(e){var t,n={},a=e.split(",");for(t=0;t<a.length;t++)n[a[t]]=!0;return n}function o(e,n){function a(e,a,o,s){if(a=t.lowercase(a),C[a])for(;y.last()&&D[y.last()];)i("",y.last());k[a]&&y.last()==a&&i("",a),s=$[a]||!!s,s||y.push(a);var l={};o.replace(p,function(e,t,n,a,i){var o=n||a||i||"";l[t]=r(o)}),n.start&&n.start(a,l,s)}function i(e,a){var i,o=0;if(a=t.lowercase(a))for(o=y.length-1;o>=0&&y[o]!=a;o--);if(o>=0){for(i=y.length-1;i>=o;i--)n.end&&n.end(y[i]);y.length=o}}"string"!=typeof e&&(e=null===e||"undefined"==typeof e?"":""+e);var o,s,l,b,y=[],w=e;for(y.last=function(){return y[y.length-1]};e;){if(b="",s=!0,y.last()&&E[y.last()]?(e=e.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*"+y.last()+"[^>]*>","i"),function(e,t){return t=t.replace(g,"$1").replace(v,"$1"),n.chars&&n.chars(r(t)),""}),i("",y.last())):(0===e.indexOf("<!--")?(o=e.indexOf("--",4),o>=0&&e.lastIndexOf("-->",o)===o&&(n.comment&&n.comment(e.substring(4,o)),e=e.substring(o+3),s=!1)):m.test(e)?(l=e.match(m),l&&(e=e.replace(l[0],""),s=!1)):h.test(e)?(l=e.match(d),l&&(e=e.substring(l[0].length),l[0].replace(d,i),s=!1)):f.test(e)&&(l=e.match(u),l?(l[4]&&(e=e.substring(l[0].length),l[0].replace(u,a)),s=!1):(b+="<",e=e.substring(1))),s&&(o=e.indexOf("<"),b+=0>o?e:e.substring(0,o),e=0>o?"":e.substring(o),n.chars&&n.chars(r(b)))),e==w)throw c("badparse","The sanitizer was unable to parse the following block of html: {0}",e);w=e}i()}function r(e){return e?(I.innerHTML=e.replace(/</g,"&lt;"),I.textContent):""}function s(e){return e.replace(/&/g,"&amp;").replace(b,function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1);return"&#"+(1024*(t-55296)+(n-56320)+65536)+";"}).replace(y,function(e){return"&#"+e.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function l(e,n){var a=!1,i=t.bind(e,e.push);return{start:function(e,o,r){e=t.lowercase(e),!a&&E[e]&&(a=e),a||S[e]!==!0||(i("<"),i(e),t.forEach(o,function(a,o){var r=t.lowercase(o),l="img"===e&&"src"===r||"background"===r;A[r]!==!0||O[r]===!0&&!n(a,l)||(i(" "),i(o),i('="'),i(s(a)),i('"'))}),i(r?"/>":">"))},end:function(e){e=t.lowercase(e),a||S[e]!==!0||(i("</"),i(e),i(">")),e==a&&(a=!1)},chars:function(e){a||i(s(e))}}}var c=t.$$minErr("$sanitize"),u=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,d=/^<\/\s*([\w:-]+)[^>]*>/,p=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,f=/^</,h=/^<\//,g=/<!--(.*?)-->/g,m=/<!DOCTYPE([^>]*?)>/i,v=/<!\[CDATA\[(.*?)]]>/g,b=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,y=/([^\#-~| |!])/g,$=i("area,br,col,hr,img,wbr"),w=i("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),x=i("rp,rt"),k=t.extend({},x,w),C=t.extend({},w,i("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),D=t.extend({},x,i("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),T=i("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),E=i("script,style"),S=t.extend({},$,C,D,k,T),O=i("background,cite,href,longdesc,src,usemap,xlink:href"),M=i("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),P=i("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),A=t.extend({},O,P,M),I=document.createElement("pre");t.module("ngSanitize",[]).provider("$sanitize",n),t.module("ngSanitize").filter("linky",["$sanitize",function(e){var n=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/i,i=/^mailto:/i;return function(o,r){function s(e){e&&f.push(a(e))}function l(e,n){f.push("<a "),t.isDefined(r)&&f.push('target="',r,'" '),f.push('href="',e.replace(/"/g,"&quot;"),'">'),s(n),f.push("</a>")}if(!o)return o;for(var c,u,d,p=o,f=[];c=p.match(n);)u=c[0],c[2]||c[4]||(u=(c[3]?"http://":"mailto:")+u),d=c.index,s(p.substr(0,d)),l(u,c[0].replace(i,"")),p=p.substring(d+c[0].length);return s(p),e(f.join(""))}}])}(window,window.angular),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){return function(n){if(!n||!angular.isString(n.prefix)||!angular.isString(n.suffix))throw new Error("Couldn't load static files, no prefix or suffix specified!");var a=e.defer();return t(angular.extend({url:[n.prefix,n.key,n.suffix].join(""),method:"GET",params:""},n.$http)).success(function(e){a.resolve(e)}).error(function(){a.reject(n.key)}),a.promise}}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(e,t){function n(e,a){t(angular.extend({url:[e.prefix,e.key.toLowerCase(),e.suffix].join(""),method:"GET",params:""},e.$http)).success(function(e){a.resolve(e)}).error(function(){if(e.key.indexOf("_")>=0){var t=e.key.substr(0,e.key.lastIndexOf("_")),i=angular.extend({},e,{key:t});n(i,a)}else a.resolve("{}")})}return function(t){if(!t||!angular.isString(t.prefix)||!angular.isString(t.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var a=e.defer();return n(t,a),a.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(e,t,n){e.useStaticFilesLoader({prefix:t,suffix:n}),e.determinePreferredLanguage().fallbackLanguage("en")}]),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.affix"),o="object"==typeof t&&t;i||a.data("bs.affix",i=new n(this,o)),"string"==typeof t&&i[t]()})}var n=function(t,a){this.options=e.extend({},n.DEFAULTS,a),this.$target=e(this.options.target).on("scroll.bs.affix.data-api",e.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",e.proxy(this.checkPositionWithEventLoop,this)),this.$element=e(t),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.2.0",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var e=this.$target.scrollTop(),t=this.$element.offset();return this.pinnedOffset=t.top-e},n.prototype.checkPositionWithEventLoop=function(){setTimeout(e.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var t=e(document).height(),a=this.$target.scrollTop(),i=this.$element.offset(),o=this.options.offset,r=o.top,s=o.bottom;"object"!=typeof o&&(s=r=o),"function"==typeof r&&(r=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var l=null!=this.unpin&&a+this.unpin<=i.top?!1:null!=s&&i.top+this.$element.height()>=t-s?"bottom":null!=r&&r>=a?"top":!1;if(this.affixed!==l){null!=this.unpin&&this.$element.css("top","");var c="affix"+(l?"-"+l:""),u=e.Event(c+".bs.affix");this.$element.trigger(u),u.isDefaultPrevented()||(this.affixed=l,this.unpin="bottom"==l?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(c).trigger(e.Event(c.replace("affix","affixed"))),"bottom"==l&&this.$element.offset({top:t-this.$element.height()-s}))}}};var a=e.fn.affix;e.fn.affix=t,e.fn.affix.Constructor=n,e.fn.affix.noConflict=function(){return e.fn.affix=a,this},e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var n=e(this),a=n.data();a.offset=a.offset||{},a.offsetBottom&&(a.offset.bottom=a.offsetBottom),a.offsetTop&&(a.offset.top=a.offsetTop),t.call(n,a)})})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var n=e(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new a(this)),"string"==typeof t&&i[t].call(n)})}var n='[data-dismiss="alert"]',a=function(t){e(t).on("click",n,this.close)};a.VERSION="3.2.0",a.prototype.close=function(t){function n(){o.detach().trigger("closed.bs.alert").remove()}var a=e(this),i=a.attr("data-target");i||(i=a.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,""));var o=e(i);t&&t.preventDefault(),o.length||(o=a.hasClass("alert")?a:a.parent()),o.trigger(t=e.Event("close.bs.alert")),t.isDefaultPrevented()||(o.removeClass("in"),e.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",n).emulateTransitionEnd(150):n())};var i=e.fn.alert;e.fn.alert=t,e.fn.alert.Constructor=a,e.fn.alert.noConflict=function(){return e.fn.alert=i,this},e(document).on("click.bs.alert.data-api",n,a.prototype.close)}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.button"),o="object"==typeof t&&t;i||a.data("bs.button",i=new n(this,o)),"toggle"==t?i.toggle():t&&i.setState(t)})}var n=function(t,a){this.$element=e(t),this.options=e.extend({},n.DEFAULTS,a),this.isLoading=!1};n.VERSION="3.2.0",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(t){var n="disabled",a=this.$element,i=a.is("input")?"val":"html",o=a.data();t+="Text",null==o.resetText&&a.data("resetText",a[i]()),a[i](null==o[t]?this.options[t]:o[t]),setTimeout(e.proxy(function(){"loadingText"==t?(this.isLoading=!0,a.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,a.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var e=!0,t=this.$element.closest('[data-toggle="buttons"]');if(t.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?e=!1:t.find(".active").removeClass("active")),e&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}e&&this.$element.toggleClass("active")};var a=e.fn.button;e.fn.button=t,e.fn.button.Constructor=n,e.fn.button.noConflict=function(){return e.fn.button=a,this},e(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var a=e(n.target);a.hasClass("btn")||(a=a.closest(".btn")),t.call(a,"toggle"),n.preventDefault()})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.carousel"),o=e.extend({},n.DEFAULTS,a.data(),"object"==typeof t&&t),r="string"==typeof t?t:o.slide;i||a.data("bs.carousel",i=new n(this,o)),"number"==typeof t?i.to(t):r?i[r]():o.interval&&i.pause().cycle()})}var n=function(t,n){this.$element=e(t).on("keydown.bs.carousel",e.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",e.proxy(this.pause,this)).on("mouseleave.bs.carousel",e.proxy(this.cycle,this))};n.VERSION="3.2.0",n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},n.prototype.keydown=function(e){switch(e.which){case 37:this.prev();break;case 39:this.next();break;default:return}e.preventDefault()},n.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(e){return this.$items=e.parent().children(".item"),this.$items.index(e||this.$active)},n.prototype.to=function(t){var n=this,a=this.getItemIndex(this.$active=this.$element.find(".item.active"));return t>this.$items.length-1||0>t?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){n.to(t)}):a==t?this.pause().cycle():this.slide(t>a?"next":"prev",e(this.$items[t]))},n.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&e.support.transition&&(this.$element.trigger(e.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(t,n){var a=this.$element.find(".item.active"),i=n||a[t](),o=this.interval,r="next"==t?"left":"right",s="next"==t?"first":"last",l=this;if(!i.length){if(!this.options.wrap)return;i=this.$element.find(".item")[s]()}if(i.hasClass("active"))return this.sliding=!1;var c=i[0],u=e.Event("slide.bs.carousel",{relatedTarget:c,direction:r});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var d=e(this.$indicators.children()[this.getItemIndex(i)]);d&&d.addClass("active")}var p=e.Event("slid.bs.carousel",{relatedTarget:c,direction:r});return e.support.transition&&this.$element.hasClass("slide")?(i.addClass(t),i[0].offsetWidth,a.addClass(r),i.addClass(r),a.one("bsTransitionEnd",function(){i.removeClass([t,r].join(" ")).addClass("active"),a.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(p)},0)}).emulateTransitionEnd(1e3*a.css("transition-duration").slice(0,-1))):(a.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger(p)),o&&this.cycle(),this}};var a=e.fn.carousel;e.fn.carousel=t,e.fn.carousel.Constructor=n,e.fn.carousel.noConflict=function(){return e.fn.carousel=a,this},e(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(n){var a,i=e(this),o=e(i.attr("data-target")||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var r=e.extend({},o.data(),i.data()),s=i.attr("data-slide-to");s&&(r.interval=!1),t.call(o,r),s&&o.data("bs.carousel").to(s),n.preventDefault()}}),e(window).on("load",function(){e('[data-ride="carousel"]').each(function(){var n=e(this);t.call(n,n.data())})})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.collapse"),o=e.extend({},n.DEFAULTS,a.data(),"object"==typeof t&&t);!i&&o.toggle&&"show"==t&&(t=!t),i||a.data("bs.collapse",i=new n(this,o)),"string"==typeof t&&i[t]()})}var n=function(t,a){this.$element=e(t),this.options=e.extend({},n.DEFAULTS,a),this.transitioning=null,this.options.parent&&(this.$parent=e(this.options.parent)),this.options.toggle&&this.toggle()};n.VERSION="3.2.0",n.DEFAULTS={toggle:!0},n.prototype.dimension=function(){var e=this.$element.hasClass("width");return e?"width":"height"},n.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n=e.Event("show.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var a=this.$parent&&this.$parent.find("> .panel > .in");if(a&&a.length){var i=a.data("bs.collapse");if(i&&i.transitioning)return;t.call(a,"hide"),i||a.data("bs.collapse",null)}var o=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[o](0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[o](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return r.call(this);var s=e.camelCase(["scroll",o].join("-"));this.$element.one("bsTransitionEnd",e.proxy(r,this)).emulateTransitionEnd(350)[o](this.$element[0][s])}}},n.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var t=e.Event("hide.bs.collapse");if(this.$element.trigger(t),!t.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var a=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return e.support.transition?(this.$element[n](0).one("bsTransitionEnd",e.proxy(a,this)).emulateTransitionEnd(350),void 0):a.call(this)}}},n.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var a=e.fn.collapse;e.fn.collapse=t,e.fn.collapse.Constructor=n,e.fn.collapse.noConflict=function(){return e.fn.collapse=a,this},e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(n){var a,i=e(this),o=i.attr("data-target")||n.preventDefault()||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""),r=e(o),s=r.data("bs.collapse"),l=s?"toggle":i.data(),c=i.attr("data-parent"),u=c&&e(c);s&&s.transitioning||(u&&u.find('[data-toggle="collapse"][data-parent="'+c+'"]').not(i).addClass("collapsed"),i[r.hasClass("in")?"addClass":"removeClass"]("collapsed")),t.call(r,l)})}(jQuery),+function(e){"use strict";function t(t){t&&3===t.which||(e(i).remove(),e(o).each(function(){var a=n(e(this)),i={relatedTarget:this};a.hasClass("open")&&(a.trigger(t=e.Event("hide.bs.dropdown",i)),t.isDefaultPrevented()||a.removeClass("open").trigger("hidden.bs.dropdown",i))
}))}function n(t){var n=t.attr("data-target");n||(n=t.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var a=n&&e(n);return a&&a.length?a:t.parent()}function a(t){return this.each(function(){var n=e(this),a=n.data("bs.dropdown");a||n.data("bs.dropdown",a=new r(this)),"string"==typeof t&&a[t].call(n)})}var i=".dropdown-backdrop",o='[data-toggle="dropdown"]',r=function(t){e(t).on("click.bs.dropdown",this.toggle)};r.VERSION="3.2.0",r.prototype.toggle=function(a){var i=e(this);if(!i.is(".disabled, :disabled")){var o=n(i),r=o.hasClass("open");if(t(),!r){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&e('<div class="dropdown-backdrop"/>').insertAfter(e(this)).on("click",t);var s={relatedTarget:this};if(o.trigger(a=e.Event("show.bs.dropdown",s)),a.isDefaultPrevented())return;i.trigger("focus"),o.toggleClass("open").trigger("shown.bs.dropdown",s)}return!1}},r.prototype.keydown=function(t){if(/(38|40|27)/.test(t.keyCode)){var a=e(this);if(t.preventDefault(),t.stopPropagation(),!a.is(".disabled, :disabled")){var i=n(a),r=i.hasClass("open");if(!r||r&&27==t.keyCode)return 27==t.which&&i.find(o).trigger("focus"),a.trigger("click");var s=" li:not(.divider):visible a",l=i.find('[role="menu"]'+s+', [role="listbox"]'+s);if(l.length){var c=l.index(l.filter(":focus"));38==t.keyCode&&c>0&&c--,40==t.keyCode&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var s=e.fn.dropdown;e.fn.dropdown=a,e.fn.dropdown.Constructor=r,e.fn.dropdown.noConflict=function(){return e.fn.dropdown=s,this},e(document).on("click.bs.dropdown.data-api",t).on("click.bs.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.bs.dropdown.data-api",o,r.prototype.toggle).on("keydown.bs.dropdown.data-api",o+', [role="menu"], [role="listbox"]',r.prototype.keydown)}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.tab");i||a.data("bs.tab",i=new n(this)),"string"==typeof t&&i[t]()})}var n=function(t){this.element=e(t)};n.VERSION="3.2.0",n.prototype.show=function(){var t=this.element,n=t.closest("ul:not(.dropdown-menu)"),a=t.data("target");if(a||(a=t.attr("href"),a=a&&a.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var i=n.find(".active:last a")[0],o=e.Event("show.bs.tab",{relatedTarget:i});if(t.trigger(o),!o.isDefaultPrevented()){var r=e(a);this.activate(t.closest("li"),n),this.activate(r,r.parent(),function(){t.trigger({type:"shown.bs.tab",relatedTarget:i})})}}},n.prototype.activate=function(t,n,a){function i(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),t.addClass("active"),r?(t[0].offsetWidth,t.addClass("in")):t.removeClass("fade"),t.parent(".dropdown-menu")&&t.closest("li.dropdown").addClass("active"),a&&a()}var o=n.find("> .active"),r=a&&e.support.transition&&o.hasClass("fade");r?o.one("bsTransitionEnd",i).emulateTransitionEnd(150):i(),o.removeClass("in")};var a=e.fn.tab;e.fn.tab=t,e.fn.tab.Constructor=n,e.fn.tab.noConflict=function(){return e.fn.tab=a,this},e(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(n){n.preventDefault(),t.call(e(this),"show")})}(jQuery),+function(e){"use strict";function t(){var e=document.createElement("bootstrap"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in t)if(void 0!==e.style[n])return{end:t[n]};return!1}e.fn.emulateTransitionEnd=function(t){var n=!1,a=this;e(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||e(a).trigger(e.support.transition.end)};return setTimeout(i,t),this},e(function(){e.support.transition=t(),e.support.transition&&(e.event.special.bsTransitionEnd={bindType:e.support.transition.end,delegateType:e.support.transition.end,handle:function(t){return e(t.target).is(this)?t.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(e){"use strict";function t(n,a){var i=e.proxy(this.process,this);this.$body=e("body"),this.$scrollElement=e(n).is("body")?e(window):e(n),this.options=e.extend({},t.DEFAULTS,a),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",i),this.refresh(),this.process()}function n(n){return this.each(function(){var a=e(this),i=a.data("bs.scrollspy"),o="object"==typeof n&&n;i||a.data("bs.scrollspy",i=new t(this,o)),"string"==typeof n&&i[n]()})}t.VERSION="3.2.0",t.DEFAULTS={offset:10},t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},t.prototype.refresh=function(){var t="offset",n=0;e.isWindow(this.$scrollElement[0])||(t="position",n=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var a=this;this.$body.find(this.selector).map(function(){var a=e(this),i=a.data("target")||a.attr("href"),o=/^#./.test(i)&&e(i);return o&&o.length&&o.is(":visible")&&[[o[t]().top+n,i]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){a.offsets.push(this[0]),a.targets.push(this[1])})},t.prototype.process=function(){var e,t=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),a=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,r=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),t>=a)return r!=(e=o[o.length-1])&&this.activate(e);if(r&&t<=i[0])return r!=(e=o[0])&&this.activate(e);for(e=i.length;e--;)r!=o[e]&&t>=i[e]&&(!i[e+1]||t<=i[e+1])&&this.activate(o[e])},t.prototype.activate=function(t){this.activeTarget=t,e(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var n=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',a=e(n).parents("li").addClass("active");a.parent(".dropdown-menu").length&&(a=a.closest("li.dropdown").addClass("active")),a.trigger("activate.bs.scrollspy")};var a=e.fn.scrollspy;e.fn.scrollspy=n,e.fn.scrollspy.Constructor=t,e.fn.scrollspy.noConflict=function(){return e.fn.scrollspy=a,this},e(window).on("load.bs.scrollspy.data-api",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);n.call(t,t.data())})})}(jQuery),+function(e){"use strict";function t(t,a){return this.each(function(){var i=e(this),o=i.data("bs.modal"),r=e.extend({},n.DEFAULTS,i.data(),"object"==typeof t&&t);o||i.data("bs.modal",o=new n(this,r)),"string"==typeof t?o[t](a):r.show&&o.show(a)})}var n=function(t,n){this.options=n,this.$body=e(document.body),this.$element=e(t),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.2.0",n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)},n.prototype.show=function(t){var n=this,a=e.Event("show.bs.modal",{relatedTarget:t});this.$element.trigger(a),this.isShown||a.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this)),this.backdrop(function(){var a=e.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(n.$body),n.$element.show().scrollTop(0),a&&n.$element[0].offsetWidth,n.$element.addClass("in").attr("aria-hidden",!1),n.enforceFocus();var i=e.Event("shown.bs.modal",{relatedTarget:t});a?n.$element.find(".modal-dialog").one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(i)}).emulateTransitionEnd(300):n.$element.trigger("focus").trigger(i)}))},n.prototype.hide=function(t){t&&t.preventDefault(),t=e.Event("hide.bs.modal"),this.$element.trigger(t),this.isShown&&!t.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),e(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},n.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){this.$element[0]===e.target||this.$element.has(e.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",e.proxy(function(e){27==e.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},n.prototype.hideModal=function(){var e=this;this.$element.hide(),this.backdrop(function(){e.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(t){var n=this,a=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=e.support.transition&&a;if(this.$backdrop=e('<div class="modal-backdrop '+a+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){e.target===e.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!t)return;i?this.$backdrop.one("bsTransitionEnd",t).emulateTransitionEnd(150):t()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){n.removeBackdrop(),t&&t()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(150):o()}else t&&t()},n.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},n.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",e+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},n.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",this.$body.append(e);var t=e.offsetWidth-e.clientWidth;return this.$body[0].removeChild(e),t};var a=e.fn.modal;e.fn.modal=t,e.fn.modal.Constructor=n,e.fn.modal.noConflict=function(){return e.fn.modal=a,this},e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var a=e(this),i=a.attr("href"),o=e(a.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),r=o.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(i)&&i},o.data(),a.data());a.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(e){e.isDefaultPrevented()||o.one("hidden.bs.modal",function(){a.is(":visible")&&a.trigger("focus")})}),t.call(o,r,this)})}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.tooltip"),o="object"==typeof t&&t;(i||"destroy"!=t)&&(i||a.data("bs.tooltip",i=new n(this,o)),"string"==typeof t&&i[t]())})}var n=function(e,t){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",e,t)};n.VERSION="3.2.0",n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(t,n,a){this.enabled=!0,this.type=t,this.$element=e(n),this.options=this.getOptions(a),this.$viewport=this.options.viewport&&e(this.options.viewport.selector||this.options.viewport);for(var i=this.options.trigger.split(" "),o=i.length;o--;){var r=i[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this));else if("manual"!=r){var s="hover"==r?"mouseenter":"focusin",l="hover"==r?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,e.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,e.proxy(this.leave,this))}}this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(t){return t=e.extend({},this.getDefaults(),this.$element.data(),t),t.delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t},n.prototype.getDelegateOptions=function(){var t={},n=this.getDefaults();return this._options&&e.each(this._options,function(e,a){n[e]!=a&&(t[e]=a)}),t},n.prototype.enter=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show),void 0):n.show()},n.prototype.leave=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide),void 0):n.hide()},n.prototype.show=function(){var t=e.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(t);var n=e.contains(document.documentElement,this.$element[0]);if(t.isDefaultPrevented()||!n)return;var a=this,i=this.tip(),o=this.getUID(this.type);this.setContent(),i.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&i.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,i[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,l=s.test(r);l&&(r=r.replace(s,"")||"top"),i.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?i.appendTo(this.options.container):i.insertAfter(this.$element);var c=this.getPosition(),u=i[0].offsetWidth,d=i[0].offsetHeight;if(l){var p=r,f=this.$element.parent(),h=this.getPosition(f);r="bottom"==r&&c.top+c.height+d-h.scroll>h.height?"top":"top"==r&&c.top-h.scroll-d<0?"bottom":"right"==r&&c.right+u>h.width?"left":"left"==r&&c.left-u<h.left?"right":r,i.removeClass(p).addClass(r)}var g=this.getCalculatedOffset(r,c,u,d);this.applyPlacement(g,r);var m=function(){a.$element.trigger("shown.bs."+a.type),a.hoverState=null};e.support.transition&&this.$tip.hasClass("fade")?i.one("bsTransitionEnd",m).emulateTransitionEnd(150):m()}},n.prototype.applyPlacement=function(t,n){var a=this.tip(),i=a[0].offsetWidth,o=a[0].offsetHeight,r=parseInt(a.css("margin-top"),10),s=parseInt(a.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(s)&&(s=0),t.top=t.top+r,t.left=t.left+s,e.offset.setOffset(a[0],e.extend({using:function(e){a.css({top:Math.round(e.top),left:Math.round(e.left)})}},t),0),a.addClass("in");var l=a[0].offsetWidth,c=a[0].offsetHeight;"top"==n&&c!=o&&(t.top=t.top+o-c);var u=this.getViewportAdjustedDelta(n,t,l,c);u.left?t.left+=u.left:t.top+=u.top;var d=u.left?2*u.left-i+l:2*u.top-o+c,p=u.left?"left":"top",f=u.left?"offsetWidth":"offsetHeight";a.offset(t),this.replaceArrow(d,a[0][f],p)},n.prototype.replaceArrow=function(e,t,n){this.arrow().css(n,e?50*(1-e/t)+"%":"")},n.prototype.setContent=function(){var e=this.tip(),t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t),e.removeClass("fade in top bottom left right")},n.prototype.hide=function(){function t(){"in"!=n.hoverState&&a.detach(),n.$element.trigger("hidden.bs."+n.type)}var n=this,a=this.tip(),i=e.Event("hide.bs."+this.type);return this.$element.removeAttr("aria-describedby"),this.$element.trigger(i),i.isDefaultPrevented()?void 0:(a.removeClass("in"),e.support.transition&&this.$tip.hasClass("fade")?a.one("bsTransitionEnd",t).emulateTransitionEnd(150):t(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var e=this.$element;(e.attr("title")||"string"!=typeof e.attr("data-original-title"))&&e.attr("data-original-title",e.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(t){t=t||this.$element;var n=t[0],a="BODY"==n.tagName;return e.extend({},"function"==typeof n.getBoundingClientRect?n.getBoundingClientRect():null,{scroll:a?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop(),width:a?e(window).width():t.outerWidth(),height:a?e(window).height():t.outerHeight()},a?{top:0,left:0}:t.offset())},n.prototype.getCalculatedOffset=function(e,t,n,a){return"bottom"==e?{top:t.top+t.height,left:t.left+t.width/2-n/2}:"top"==e?{top:t.top-a,left:t.left+t.width/2-n/2}:"left"==e?{top:t.top+t.height/2-a/2,left:t.left-n}:{top:t.top+t.height/2-a/2,left:t.left+t.width}},n.prototype.getViewportAdjustedDelta=function(e,t,n,a){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport);if(/right|left/.test(e)){var s=t.top-o-r.scroll,l=t.top+o-r.scroll+a;s<r.top?i.top=r.top-s:l>r.top+r.height&&(i.top=r.top+r.height-l)}else{var c=t.left-o,u=t.left+o+n;c<r.left?i.left=r.left-c:u>r.width&&(i.left=r.left+r.width-u)}return i},n.prototype.getTitle=function(){var e,t=this.$element,n=this.options;return e=t.attr("data-original-title")||("function"==typeof n.title?n.title.call(t[0]):n.title)},n.prototype.getUID=function(e){do e+=~~(1e6*Math.random());while(document.getElementById(e));return e},n.prototype.tip=function(){return this.$tip=this.$tip||e(this.options.template)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(t){var n=this;t&&(n=e(t.currentTarget).data("bs."+this.type),n||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n))),n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var a=e.fn.tooltip;e.fn.tooltip=t,e.fn.tooltip.Constructor=n,e.fn.tooltip.noConflict=function(){return e.fn.tooltip=a,this}}(jQuery),+function(e){"use strict";function t(t){return this.each(function(){var a=e(this),i=a.data("bs.popover"),o="object"==typeof t&&t;(i||"destroy"!=t)&&(i||a.data("bs.popover",i=new n(this,o)),"string"==typeof t&&i[t]())})}var n=function(e,t){this.init("popover",e,t)};if(!e.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.2.0",n.DEFAULTS=e.extend({},e.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=e.extend({},e.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var e=this.tip(),t=this.getTitle(),n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t),e.find(".popover-content").empty()[this.options.html?"string"==typeof n?"html":"append":"text"](n),e.removeClass("fade top bottom left right in"),e.find(".popover-title").html()||e.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var e=this.$element,t=this.options;return e.attr("data-content")||("function"==typeof t.content?t.content.call(e[0]):t.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},n.prototype.tip=function(){return this.$tip||(this.$tip=e(this.options.template)),this.$tip};var a=e.fn.popover;e.fn.popover=t,e.fn.popover.Constructor=n,e.fn.popover.noConflict=function(){return e.fn.popover=a,this}}(jQuery),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.transition","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-html.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("collapse",["$animate",function(e){return{link:function(t,n,a){function i(){n.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),e.addClass(n,"in",{to:{height:n[0].scrollHeight+"px"}}).then(o)}function o(){n.removeClass("collapsing"),n.css({height:"auto"})}function r(){return n.hasClass("collapse")||n.hasClass("in")?(n.css({height:n[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),e.removeClass(n,"in",{to:{height:"0"}}).then(s),void 0):s()}function s(){n.css({height:"0"}),n.removeClass("collapsing"),n.addClass("collapse")}t.$watch(a.collapse,function(e){e?r():i()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(e,t,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(t.closeOthers)?e.$eval(t.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(e){e!==a&&(e.isOpen=!1)})},this.addGroup=function(e){var t=this;this.groups.push(e),e.$on("$destroy",function(){t.removeGroup(e)})},this.removeGroup=function(e){var t=this.groups.indexOf(e);-1!==t&&this.groups.splice(t,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",controllerAs:"accordion",transclude:!0,replace:!1,templateUrl:function(e,t){return t.templateUrl||"template/accordion/accordion.html"}}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/accordion/accordion-group.html"},scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(e){this.heading=e}},link:function(e,t,n,a){a.addGroup(e),e.openClass=n.openClass||"panel-open",e.panelClass=n.panelClass,e.$watch("isOpen",function(n){t.toggleClass(e.openClass,n),n&&a.closeOthers(e)}),e.toggleOpen=function(t){e.isDisabled||t&&32!==t.which||(e.isOpen=!e.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(e,t,n,a,i){a.setHeading(i(e,angular.noop))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(e,t,n,a){e.$watch(function(){return a[n.accordionTransclude]},function(e){e&&(t.find("span").html(""),t.find("span").append(e))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(e,t){e.closeable=!!t.close,this.close=e.close}]).directive("alert",function(){return{controller:"AlertController",controllerAs:"alert",templateUrl:function(e,t){return t.templateUrl||"template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}).directive("dismissOnTimeout",["$timeout",function(e){return{require:"alert",link:function(t,n,a,i){e(function(){i.close()},parseInt(a.dismissOnTimeout,10))}}}]),angular.module("ui.bootstrap.bindHtml",[]).value("$bindHtmlUnsafeSuppressDeprecated",!1).directive("bindHtmlUnsafe",["$log","$bindHtmlUnsafeSuppressDeprecated",function(e,t){return function(n,a,i){t||e.warn("bindHtmlUnsafe is now deprecated. Use ngBindHtml instead"),a.addClass("ng-binding").data("$binding",i.bindHtmlUnsafe),n.$watch(i.bindHtmlUnsafe,function(e){a.html(e||"")})}}]),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(e){this.activeClass=e.activeClass||"active",this.toggleEvent=e.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",controllerAs:"buttons",link:function(e,t,n,a){var i=a[0],o=a[1];t.find("input").css({display:"none"}),o.$render=function(){t.toggleClass(i.activeClass,angular.equals(o.$modelValue,e.$eval(n.btnRadio)))},t.bind(i.toggleEvent,function(){if(!n.disabled){var a=t.hasClass(i.activeClass);(!a||angular.isDefined(n.uncheckable))&&e.$apply(function(){o.$setViewValue(a?null:e.$eval(n.btnRadio)),o.$render()})}})}}}).directive("btnCheckbox",["$document",function(e){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",controllerAs:"button",link:function(t,n,a,i){function o(){return s(a.btnCheckboxTrue,!0)}function r(){return s(a.btnCheckboxFalse,!1)}function s(e,n){var a=t.$eval(e);return angular.isDefined(a)?a:n}var l=i[0],c=i[1];n.find("input").css({display:"none"}),c.$render=function(){n.toggleClass(l.activeClass,angular.equals(c.$modelValue,o()))},n.bind(l.toggleEvent,function(){a.disabled||t.$apply(function(){c.$setViewValue(n.hasClass(l.activeClass)?r():o()),c.$render()})}),n.on("keypress",function(i){a.disabled||32!==i.which||e[0].activeElement!==n[0]||t.$apply(function(){c.$setViewValue(n.hasClass(l.activeClass)?r():o()),c.$render()})})}}}]),angular.module("ui.bootstrap.carousel",[]).controller("CarouselController",["$scope","$element","$interval","$animate",function(e,t,n,a){function i(t,n,i){v||(angular.extend(t,{direction:i,active:!0}),angular.extend(d.currentSlide||{},{direction:i,active:!1}),a.enabled()&&!e.noTransition&&!e.$currentTransition&&t.$element&&d.slides.length>1&&(t.$element.data(g,t.direction),d.currentSlide&&d.currentSlide.$element&&d.currentSlide.$element.data(g,t.direction),e.$currentTransition=!0,f?a.on("addClass",t.$element,function(t,n){"close"===n&&(e.$currentTransition=null,a.off("addClass",t))}):t.$element.one("$animate:close",function(){e.$currentTransition=null})),d.currentSlide=t,m=n,r())}function o(e){if(angular.isUndefined(p[e].index))return p[e];{var t;p.length}for(t=0;t<p.length;++t)if(p[t].index==e)return p[t]}function r(){s();var t=+e.interval;!isNaN(t)&&t>0&&(c=n(l,t))}function s(){c&&(n.cancel(c),c=null)}function l(){var t=+e.interval;u&&!isNaN(t)&&t>0&&p.length?e.next():e.pause()}var c,u,d=this,p=d.slides=e.slides=[],f=angular.version.minor>=4,h="uib-noTransition",g="uib-slideDirection",m=-1;d.currentSlide=null;var v=!1;d.select=e.select=function(t,n){var a=e.indexOfSlide(t);void 0===n&&(n=a>d.getCurrentIndex()?"next":"prev"),t&&t!==d.currentSlide&&!e.$currentTransition&&i(t,a,n)},e.$on("$destroy",function(){v=!0}),d.getCurrentIndex=function(){return d.currentSlide&&angular.isDefined(d.currentSlide.index)?+d.currentSlide.index:m},e.indexOfSlide=function(e){return angular.isDefined(e.index)?+e.index:p.indexOf(e)},e.next=function(){var t=(d.getCurrentIndex()+1)%p.length;return 0===t&&e.noWrap()?(e.pause(),void 0):d.select(o(t),"next")},e.prev=function(){var t=d.getCurrentIndex()-1<0?p.length-1:d.getCurrentIndex()-1;return e.noWrap()&&t===p.length-1?(e.pause(),void 0):d.select(o(t),"prev")},e.isActive=function(e){return d.currentSlide===e},e.$watch("interval",r),e.$on("$destroy",s),e.play=function(){u||(u=!0,r())},e.pause=function(){e.noPause||(u=!1,s())},d.addSlide=function(t,n){t.$element=n,p.push(t),1===p.length||t.active?(d.select(p[p.length-1]),1==p.length&&e.play()):t.active=!1},d.removeSlide=function(e){angular.isDefined(e.index)&&p.sort(function(e,t){return+e.index>+t.index});var t=p.indexOf(e);p.splice(t,1),p.length>0&&e.active?t>=p.length?d.select(p[t-1]):d.select(p[t]):m>t&&m--,0===p.length&&(d.currentSlide=null)},e.$watch("noTransition",function(e){t.data(h,e)})}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",controllerAs:"carousel",require:"carousel",templateUrl:function(e,t){return t.templateUrl||"template/carousel/carousel.html"},scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/carousel/slide.html"},scope:{active:"=?",actual:"=?",index:"=?"},link:function(e,t,n,a){a.addSlide(e,t),e.$on("$destroy",function(){a.removeSlide(e)}),e.$watch("active",function(t){t&&a.select(e)})}}}).animation(".item",["$injector","$animate",function(e,t){function n(e,t,n){e.removeClass(t),n&&n()}var a="uib-noTransition",i="uib-slideDirection",o=null;return e.has("$animateCss")&&(o=e.get("$animateCss")),{beforeAddClass:function(e,r,s){if("active"==r&&e.parent()&&!e.parent().data(a)){var l=!1,c=e.data(i),u="next"==c?"left":"right",d=n.bind(this,e,u+" "+c,s);return e.addClass(c),o?o(e,{addClass:u}).start().done(d):t.addClass(e,u).then(function(){l||d(),s()}),function(){l=!0}}s()},beforeRemoveClass:function(e,r,s){if("active"===r&&e.parent()&&!e.parent().data(a)){var l=!1,c=e.data(i),u="next"==c?"left":"right",d=n.bind(this,e,u,s);return o?o(e,{addClass:u}).start().done(d):t.addClass(e,u).then(function(){l||d(),s()}),function(){l=!0}}s()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$log","$locale","orderByFilter",function(e,t,n){function a(e){var t=[],a=e.split("");return angular.forEach(r,function(n,i){var o=e.indexOf(i);if(o>-1){e=e.split(""),a[o]="("+n.regex+")",e[o]="$";for(var r=o+1,s=o+i.length;s>r;r++)a[r]="",e[r]="$";e=e.join(""),t.push({index:o,apply:n.apply})}}),{regex:new RegExp("^"+a.join("")+"$"),map:n(t,"index")}}function i(e,t,n){return 1>n?!1:1===t&&n>28?29===n&&(e%4===0&&e%100!==0||e%400===0):3===t||5===t||8===t||10===t?31>n:!0}var o=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.parsers={};var r={yyyy:{regex:"\\d{4}",apply:function(e){this.year=+e}},yy:{regex:"\\d{2}",apply:function(e){this.year=+e+2e3}},y:{regex:"\\d{1,4}",apply:function(e){this.year=+e}},MMMM:{regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)}},MMM:{regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(e){this.month=e-1}},M:{regex:"[1-9]|1[0-2]",apply:function(e){this.month=e-1
}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(e){this.date=+e}},EEEE:{regex:t.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:t.DATETIME_FORMATS.SHORTDAY.join("|")},HH:{regex:"(?:0|1)[0-9]|2[0-3]",apply:function(e){this.hours=+e}},hh:{regex:"0[0-9]|1[0-2]",apply:function(e){this.hours=+e}},H:{regex:"1?[0-9]|2[0-3]",apply:function(e){this.hours=+e}},h:{regex:"[0-9]|1[0-2]",apply:function(e){this.hours=+e}},mm:{regex:"[0-5][0-9]",apply:function(e){this.minutes=+e}},m:{regex:"[0-9]|[1-5][0-9]",apply:function(e){this.minutes=+e}},sss:{regex:"[0-9][0-9][0-9]",apply:function(e){this.milliseconds=+e}},ss:{regex:"[0-5][0-9]",apply:function(e){this.seconds=+e}},s:{regex:"[0-9]|[1-5][0-9]",apply:function(e){this.seconds=+e}},a:{regex:t.DATETIME_FORMATS.AMPMS.join("|"),apply:function(e){12===this.hours&&(this.hours=0),"PM"===e&&(this.hours+=12)}}};this.parse=function(n,r,s){if(!angular.isString(n)||!r)return n;r=t.DATETIME_FORMATS[r]||r,r=r.replace(o,"\\$&"),this.parsers[r]||(this.parsers[r]=a(r));var l=this.parsers[r],c=l.regex,u=l.map,d=n.match(c);if(d&&d.length){var p,f;angular.isDate(s)&&!isNaN(s.getTime())?p={year:s.getFullYear(),month:s.getMonth(),date:s.getDate(),hours:s.getHours(),minutes:s.getMinutes(),seconds:s.getSeconds(),milliseconds:s.getMilliseconds()}:(s&&e.warn("dateparser:","baseDate is not a valid date"),p={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var h=1,g=d.length;g>h;h++){var m=u[h-1];m.apply&&m.apply.call(p,d[h])}return i(p.year,p.month,p.date)&&(f=new Date(p.year,p.month,p.date,p.hours,p.minutes,p.seconds,p.milliseconds||0)),f}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(e,t){function n(e,n){return e.currentStyle?e.currentStyle[n]:t.getComputedStyle?t.getComputedStyle(e)[n]:e.style[n]}function a(e){return"static"===(n(e,"position")||"static")}var i=function(t){for(var n=e[0],i=t.offsetParent||n;i&&i!==n&&a(i);)i=i.offsetParent;return i||n};return{position:function(t){var n=this.offset(t),a={top:0,left:0},o=i(t[0]);o!=e[0]&&(a=this.offset(angular.element(o)),a.top+=o.clientTop-o.scrollTop,a.left+=o.clientLeft-o.scrollLeft);var r=t[0].getBoundingClientRect();return{width:r.width||t.prop("offsetWidth"),height:r.height||t.prop("offsetHeight"),top:n.top-a.top,left:n.left-a.left}},offset:function(n){var a=n[0].getBoundingClientRect();return{width:a.width||n.prop("offsetWidth"),height:a.height||n.prop("offsetHeight"),top:a.top+(t.pageYOffset||e[0].documentElement.scrollTop),left:a.left+(t.pageXOffset||e[0].documentElement.scrollLeft)}},positionElements:function(e,t,n,a){var i,o,r,s,l=n.split("-"),c=l[0],u=l[1]||"center";i=a?this.offset(e):this.position(e),o=t.prop("offsetWidth"),r=t.prop("offsetHeight");var d={center:function(){return i.left+i.width/2-o/2},left:function(){return i.left},right:function(){return i.left+i.width}},p={center:function(){return i.top+i.height/2-r/2},top:function(){return i.top},bottom:function(){return i.top+i.height}};switch(c){case"right":s={top:p[u](),left:d[c]()};break;case"left":s={top:p[u](),left:i.left-o};break;case"bottom":s={top:p[c](),left:d[u]()};break;default:s={top:i.top-r,left:d[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null,shortcutPropagation:!1}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","datepickerConfig","$datepickerSuppressError",function(e,t,n,a,i,o,r,s){var l=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRange","shortcutPropagation"],function(n,i){l[n]=angular.isDefined(t[n])?6>i?a(t[n])(e.$parent):e.$parent.$eval(t[n]):r[n]}),angular.forEach(["minDate","maxDate"],function(a){t[a]?e.$parent.$watch(n(t[a]),function(e){l[a]=e?new Date(e):null,l.refreshView()}):l[a]=r[a]?new Date(r[a]):null}),angular.forEach(["minMode","maxMode"],function(a){t[a]?e.$parent.$watch(n(t[a]),function(n){l[a]=angular.isDefined(n)?n:t[a],e[a]=l[a],("minMode"==a&&l.modes.indexOf(e.datepickerMode)<l.modes.indexOf(l[a])||"maxMode"==a&&l.modes.indexOf(e.datepickerMode)>l.modes.indexOf(l[a]))&&(e.datepickerMode=l[a])}):(l[a]=r[a]||null,e[a]=l[a])}),e.datepickerMode=e.datepickerMode||r.datepickerMode,e.uniqueId="datepicker-"+e.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined(t.initDate)?(this.activeDate=e.$parent.$eval(t.initDate)||new Date,e.$parent.$watch(t.initDate,function(e){e&&(c.$isEmpty(c.$modelValue)||c.$invalid)&&(l.activeDate=e,l.refreshView())})):this.activeDate=new Date,e.isActive=function(t){return 0===l.compare(t.date,l.activeDate)?(e.activeDateId=t.uid,!0):!1},this.init=function(e){c=e,c.$render=function(){l.render()}},this.render=function(){if(c.$viewValue){var e=new Date(c.$viewValue),t=!isNaN(e);t?this.activeDate=e:s||i.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var e=c.$viewValue?new Date(c.$viewValue):null;c.$setValidity("dateDisabled",!e||this.element&&!this.isDisabled(e))}},this.createDateObject=function(e,t){var n=c.$viewValue?new Date(c.$viewValue):null;return{date:e,label:o(e,t),selected:n&&0===this.compare(e,n),disabled:this.isDisabled(e),current:0===this.compare(e,new Date),customClass:this.customClass(e)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||t.dateDisabled&&e.dateDisabled({date:n,mode:e.datepickerMode})},this.customClass=function(t){return e.customClass({date:t,mode:e.datepickerMode})},this.split=function(e,t){for(var n=[];e.length>0;)n.push(e.splice(0,t));return n},this.fixTimeZone=function(e){var t=e.getHours();e.setHours(23===t?t+2:0)},e.select=function(t){if(e.datepickerMode===l.minMode){var n=c.$viewValue?new Date(c.$viewValue):new Date(0,0,0,0,0,0,0);n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),c.$setViewValue(n),c.$render()}else l.activeDate=t,e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)-1]},e.move=function(e){var t=l.activeDate.getFullYear()+e*(l.step.years||0),n=l.activeDate.getMonth()+e*(l.step.months||0);l.activeDate.setFullYear(t,n,1),l.refreshView()},e.toggleMode=function(t){t=t||1,e.datepickerMode===l.maxMode&&1===t||e.datepickerMode===l.minMode&&-1===t||(e.datepickerMode=l.modes[l.modes.indexOf(e.datepickerMode)+t])},e.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){l.element[0].focus()};e.$on("datepicker.focus",u),e.keydown=function(t){var n=e.keys[t.which];if(n&&!t.shiftKey&&!t.altKey)if(t.preventDefault(),l.shortcutPropagation||t.stopPropagation(),"enter"===n||"space"===n){if(l.isDisabled(l.activeDate))return;e.select(l.activeDate),u()}else!t.ctrlKey||"up"!==n&&"down"!==n?(l.handleKeyDown(n,t),l.refreshView()):(e.toggleMode("up"===n?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:function(e,t){return t.templateUrl||"template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["datepicker","^ngModel"],controller:"DatepickerController",controllerAs:"datepicker",link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}).directive("daypicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(t,n,a,i){function o(e,t){return 1!==t||e%4!==0||e%100===0&&e%400!==0?l[t]:29}function r(e,t){for(var n,a=new Array(t),o=new Date(e),r=0;t>r;)n=new Date(o),i.fixTimeZone(n),a[r++]=n,o.setDate(o.getDate()+1);return a}function s(e){var t=new Date(e);t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1}t.showWeeks=i.showWeeks,i.step={months:1},i.element=n;var l=[31,28,31,30,31,30,31,31,30,31,30,31];i._refreshView=function(){var n=i.activeDate.getFullYear(),a=i.activeDate.getMonth(),o=new Date(n,a,1),l=i.startingDay-o.getDay(),c=l>0?7-l:-l,u=new Date(o);c>0&&u.setDate(-c+1);for(var d=r(u,42),p=0;42>p;p++)d[p]=angular.extend(i.createDateObject(d[p],i.formatDay),{secondary:d[p].getMonth()!==a,uid:t.uniqueId+"-"+p});t.labels=new Array(7);for(var f=0;7>f;f++)t.labels[f]={abbr:e(d[f].date,i.formatDayHeader),full:e(d[f].date,"EEEE")};if(t.title=e(i.activeDate,i.formatDayTitle),t.rows=i.split(d,7),t.showWeeks){t.weekNumbers=[];for(var h=(11-i.startingDay)%7,g=t.rows.length,m=0;g>m;m++)t.weekNumbers.push(s(t.rows[m][h].date))}},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())},i.handleKeyDown=function(e){var t=i.activeDate.getDate();if("left"===e)t-=1;else if("up"===e)t-=7;else if("right"===e)t+=1;else if("down"===e)t+=7;else if("pageup"===e||"pagedown"===e){var n=i.activeDate.getMonth()+("pageup"===e?-1:1);i.activeDate.setMonth(n,1),t=Math.min(o(i.activeDate.getFullYear(),i.activeDate.getMonth()),t)}else"home"===e?t=1:"end"===e&&(t=o(i.activeDate.getFullYear(),i.activeDate.getMonth()));i.activeDate.setDate(t)},i.refreshView()}}}]).directive("monthpicker",["dateFilter",function(e){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(t,n,a,i){i.step={years:1},i.element=n,i._refreshView=function(){for(var n,a=new Array(12),o=i.activeDate.getFullYear(),r=0;12>r;r++)n=new Date(o,r,1),i.fixTimeZone(n),a[r]=angular.extend(i.createDateObject(n,i.formatMonth),{uid:t.uniqueId+"-"+r});t.title=e(i.activeDate,i.formatMonthTitle),t.rows=i.split(a,3)},i.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth())-new Date(t.getFullYear(),t.getMonth())},i.handleKeyDown=function(e){var t=i.activeDate.getMonth();if("left"===e)t-=1;else if("up"===e)t-=3;else if("right"===e)t+=1;else if("down"===e)t+=3;else if("pageup"===e||"pagedown"===e){var n=i.activeDate.getFullYear()+("pageup"===e?-1:1);i.activeDate.setFullYear(n)}else"home"===e?t=0:"end"===e&&(t=11);i.activeDate.setMonth(t)},i.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(e,t,n,a){function i(e){return parseInt((e-1)/o,10)*o+1}var o=a.yearRange;a.step={years:o},a.element=t,a._refreshView=function(){for(var t,n=new Array(o),r=0,s=i(a.activeDate.getFullYear());o>r;r++)t=new Date(s+r,0,1),a.fixTimeZone(t),n[r]=angular.extend(a.createDateObject(t,a.formatYear),{uid:e.uniqueId+"-"+r});e.title=[n[0].label,n[o-1].label].join(" - "),e.rows=a.split(n,5)},a.compare=function(e,t){return e.getFullYear()-t.getFullYear()},a.handleKeyDown=function(e){var t=a.activeDate.getFullYear();"left"===e?t-=1:"up"===e?t-=5:"right"===e?t+=1:"down"===e?t+=5:"pageup"===e||"pagedown"===e?t+=("pageup"===e?-1:1)*a.step.years:"home"===e?t=i(a.activeDate.getFullYear()):"end"===e&&(t=i(a.activeDate.getFullYear())+o-1),a.activeDate.setFullYear(t)},a.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"template/datepicker/popup.html",datepickerTemplateUrl:"template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0,onOpenFocus:!0}).directive("datepickerPopup",["$compile","$parse","$document","$rootScope","$position","dateFilter","dateParser","datepickerPopupConfig","$timeout",function(e,t,n,a,i,o,r,s,l){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(c,u,d,p){function f(e){return e.replace(/([A-Z])/g,function(e){return"-"+e.toLowerCase()})}function h(e){if(angular.isNumber(e)&&(e=new Date(e)),e){if(angular.isDate(e)&&!isNaN(e))return e;if(angular.isString(e)){var t=r.parse(e,m,c.date);return isNaN(t)?void 0:t}return void 0}return null}function g(e,t){var n=e||t;if(!d.ngRequired&&!n)return!0;if(angular.isNumber(n)&&(n=new Date(n)),n){if(angular.isDate(n)&&!isNaN(n))return!0;if(angular.isString(n)){var a=r.parse(n,m);return!isNaN(a)}return!1}return!0}var m,v=angular.isDefined(d.closeOnDateSelection)?c.$parent.$eval(d.closeOnDateSelection):s.closeOnDateSelection,b=angular.isDefined(d.datepickerAppendToBody)?c.$parent.$eval(d.datepickerAppendToBody):s.appendToBody,y=angular.isDefined(d.onOpenFocus)?c.$parent.$eval(d.onOpenFocus):s.onOpenFocus,$=angular.isDefined(d.datepickerPopupTemplateUrl)?d.datepickerPopupTemplateUrl:s.datepickerPopupTemplateUrl,w=angular.isDefined(d.datepickerTemplateUrl)?d.datepickerTemplateUrl:s.datepickerTemplateUrl,x={};c.showButtonBar=angular.isDefined(d.showButtonBar)?c.$parent.$eval(d.showButtonBar):s.showButtonBar,c.getText=function(e){return c[e+"Text"]||s[e+"Text"]},c.isDisabled=function(e){return"today"===e&&(e=new Date),c.watchData.minDate&&c.compare(e,x.minDate)<0||c.watchData.maxDate&&c.compare(e,x.maxDate)>0},c.compare=function(e,t){return new Date(e.getFullYear(),e.getMonth(),e.getDate())-new Date(t.getFullYear(),t.getMonth(),t.getDate())};var k=!1;if(s.html5Types[d.type]?(m=s.html5Types[d.type],k=!0):(m=d.datepickerPopup||s.datepickerPopup,d.$observe("datepickerPopup",function(e){var t=e||s.datepickerPopup;if(t!==m&&(m=t,p.$modelValue=null,!m))throw new Error("datepickerPopup must have a date format specified.")})),!m)throw new Error("datepickerPopup must have a date format specified.");if(k&&d.datepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");var C=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");C.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":$});var D=angular.element(C.children()[0]);if(D.attr("template-url",w),k&&"month"===d.type&&(D.attr("datepicker-mode",'"month"'),D.attr("min-mode","month")),d.datepickerOptions){var T=c.$parent.$eval(d.datepickerOptions);T&&T.initDate&&(c.initDate=T.initDate,D.attr("init-date","initDate"),delete T.initDate),angular.forEach(T,function(e,t){D.attr(f(t),e)})}c.watchData={},angular.forEach(["minMode","maxMode","minDate","maxDate","datepickerMode","initDate","shortcutPropagation"],function(e){if(d[e]){var n=t(d[e]);if(c.$parent.$watch(n,function(t){c.watchData[e]=t,("minDate"===e||"maxDate"===e)&&(x[e]=new Date(t))}),D.attr(f(e),"watchData."+e),"datepickerMode"===e){var a=n.assign;c.$watch("watchData."+e,function(e,t){angular.isFunction(a)&&e!==t&&a(c.$parent,e)})}}}),d.dateDisabled&&D.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),d.showWeeks&&D.attr("show-weeks",d.showWeeks),d.customClass&&D.attr("custom-class","customClass({ date: date, mode: mode })"),k?p.$formatters.push(function(e){return c.date=e,e}):(p.$$parserName="date",p.$validators.date=g,p.$parsers.unshift(h),p.$formatters.push(function(e){return c.date=e,p.$isEmpty(e)?e:o(e,m)})),c.dateSelection=function(e){angular.isDefined(e)&&(c.date=e);var t=c.date?o(c.date,m):null;u.val(t),p.$setViewValue(t),v&&(c.isOpen=!1,u[0].focus())},p.$viewChangeListeners.push(function(){c.date=r.parse(p.$viewValue,m,c.date)});var E=function(e){!c.isOpen||u[0].contains(e.target)||C[0].contains(e.target)||c.$apply(function(){c.isOpen=!1})},S=function(e){27===e.which&&c.isOpen?(e.preventDefault(),e.stopPropagation(),c.$apply(function(){c.isOpen=!1}),u[0].focus()):40!==e.which||c.isOpen||(e.preventDefault(),e.stopPropagation(),c.$apply(function(){c.isOpen=!0}))};u.bind("keydown",S),c.keydown=function(e){27===e.which&&(c.isOpen=!1,u[0].focus())},c.$watch("isOpen",function(e){e?(c.position=b?i.offset(u):i.position(u),c.position.top=c.position.top+u.prop("offsetHeight"),l(function(){y&&c.$broadcast("datepicker.focus"),n.bind("click",E)},0,!1)):n.unbind("click",E)}),c.select=function(e){if("today"===e){var t=new Date;angular.isDate(c.date)?(e=new Date(c.date),e.setFullYear(t.getFullYear(),t.getMonth(),t.getDate())):e=new Date(t.setHours(0,0,0,0))}c.dateSelection(e)},c.close=function(){c.isOpen=!1,u[0].focus()};var O=e(C)(c);C.remove(),b?n.find("body").append(O):u.after(O),c.$on("$destroy",function(){c.isOpen===!0&&(a.$$phase||c.$apply(function(){c.isOpen=!1})),O.remove(),u.unbind("keydown",S),n.unbind("click",E)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document","$rootScope",function(e,t){var n=null;this.open=function(t){n||(e.bind("click",a),e.bind("keydown",i)),n&&n!==t&&(n.isOpen=!1),n=t},this.close=function(t){n===t&&(n=null,e.unbind("click",a),e.unbind("keydown",i))};var a=function(e){if(n&&(!e||"disabled"!==n.getAutoClose())){var a=n.getToggleElement();if(!(e&&a&&a[0].contains(e.target))){var i=n.getDropdownElement();e&&"outsideClick"===n.getAutoClose()&&i&&i[0].contains(e.target)||(n.isOpen=!1,t.$$phase||n.$apply())}}},i=function(e){27===e.which?(n.focusToggleElement(),a()):n.isKeynavEnabled()&&/(38|40)/.test(e.which)&&n.isOpen&&(e.preventDefault(),e.stopPropagation(),n.focusDropdownEntry(e.which))}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate","$position","$document","$compile","$templateRequest",function(e,t,n,a,i,o,r,s,l,c){var u,d,p=this,f=e.$new(),h=a.openClass,g=angular.noop,m=t.onToggle?n(t.onToggle):angular.noop,v=!1,b=!1,y=s.find("body");this.init=function(a){p.$element=a,t.isOpen&&(d=n(t.isOpen),g=d.assign,e.$watch(d,function(e){f.isOpen=!!e})),v=angular.isDefined(t.dropdownAppendToBody),b=angular.isDefined(t.keyboardNav),v&&p.dropdownMenu&&(y.append(p.dropdownMenu),y.addClass("dropdown"),a.on("$destroy",function(){p.dropdownMenu.remove()}))},this.toggle=function(e){return f.isOpen=arguments.length?!!e:!f.isOpen},this.isOpen=function(){return f.isOpen},f.getToggleElement=function(){return p.toggleElement},f.getAutoClose=function(){return t.autoClose||"always"},f.getElement=function(){return p.$element},f.isKeynavEnabled=function(){return b},f.focusDropdownEntry=function(e){var t=p.dropdownMenu?angular.element(p.dropdownMenu).find("a"):angular.element(p.$element).find("ul").eq(0).find("a");switch(e){case 40:p.selectedOption=angular.isNumber(p.selectedOption)?p.selectedOption===t.length-1?p.selectedOption:p.selectedOption+1:0;break;case 38:p.selectedOption=angular.isNumber(p.selectedOption)?0===p.selectedOption?0:p.selectedOption-1:t.length-1}t[p.selectedOption].focus()},f.getDropdownElement=function(){return p.dropdownMenu},f.focusToggleElement=function(){p.toggleElement&&p.toggleElement[0].focus()},f.$watch("isOpen",function(t,n){if(v&&p.dropdownMenu){var a=r.positionElements(p.$element,p.dropdownMenu,"bottom-left",!0),s={top:a.top+"px",display:t?"block":"none"},d=p.dropdownMenu.hasClass("dropdown-menu-right");d?(s.left="auto",s.right=window.innerWidth-(a.left+p.$element.prop("offsetWidth"))+"px"):(s.left=a.left+"px",s.right="auto"),p.dropdownMenu.css(s)}var b=v?y:p.$element;if(o[t?"addClass":"removeClass"](b,h).then(function(){angular.isDefined(t)&&t!==n&&m(e,{open:!!t})}),t)p.dropdownMenuTemplateUrl&&c(p.dropdownMenuTemplateUrl).then(function(e){u=f.$new(),l(e.trim())(u,function(e){var t=e;p.dropdownMenu.replaceWith(t),p.dropdownMenu=t})}),f.focusToggleElement(),i.open(f);else{if(p.dropdownMenuTemplateUrl){u&&u.$destroy();var $=angular.element('<ul class="dropdown-menu"></ul>');p.dropdownMenu.replaceWith($),p.dropdownMenu=$}i.close(f),p.selectedOption=null}angular.isFunction(g)&&g(e,t)}),e.$on("$locationChangeSuccess",function(){"disabled"!==f.getAutoClose()&&(f.isOpen=!1)});var $=e.$on("$destroy",function(){f.$destroy()});f.$on("$destroy",$)}]).directive("dropdown",function(){return{controller:"DropdownController",link:function(e,t,n,a){a.init(t),t.addClass("dropdown")}}}).directive("dropdownMenu",function(){return{restrict:"AC",require:"?^dropdown",link:function(e,t,n,a){if(a){var i=n.templateUrl;i&&(a.dropdownMenuTemplateUrl=i),a.dropdownMenu||(a.dropdownMenu=t)}}}}).directive("keyboardNav",function(){return{restrict:"A",require:"?^dropdown",link:function(e,t,n,a){t.bind("keydown",function(e){if(-1!==[38,40].indexOf(e.which)){e.preventDefault(),e.stopPropagation();var t=a.dropdownMenu.find("a");switch(e.which){case 40:a.selectedOption=angular.isNumber(a.selectedOption)?a.selectedOption===t.length-1?a.selectedOption:a.selectedOption+1:0;break;case 38:a.selectedOption=angular.isNumber(a.selectedOption)?0===a.selectedOption?0:a.selectedOption-1:t.length-1}t[a.selectedOption].focus()}})}}}).directive("dropdownToggle",function(){return{require:"?^dropdown",link:function(e,t,n,a){if(a){t.addClass("dropdown-toggle"),a.toggleElement=t;var i=function(i){i.preventDefault(),t.hasClass("disabled")||n.disabled||e.$apply(function(){a.toggle()})};t.bind("click",i),t.attr({"aria-haspopup":!0,"aria-expanded":!1}),e.$watch(a.isOpen,function(e){t.attr("aria-expanded",!!e)}),e.$on("$destroy",function(){t.unbind("click",i)})}}}}),angular.module("ui.bootstrap.modal",[]).factory("$$stackedMap",function(){return{createNew:function(){var e=[];return{add:function(t,n){e.push({key:t,value:n})},get:function(t){for(var n=0;n<e.length;n++)if(t==e[n].key)return e[n]},keys:function(){for(var t=[],n=0;n<e.length;n++)t.push(e[n].key);return t},top:function(){return e[e.length-1]},remove:function(t){for(var n=-1,a=0;a<e.length;a++)if(t==e[a].key){n=a;break}return e.splice(n,1)[0]},removeTop:function(){return e.splice(e.length-1,1)[0]},length:function(){return e.length}}}}}).factory("$$multiMap",function(){return{createNew:function(){var e={};return{entries:function(){return Object.keys(e).map(function(t){return{key:t,value:e[t]}})},get:function(t){return e[t]},hasKey:function(t){return!!e[t]},keys:function(){return Object.keys(e)},put:function(t,n){e[t]||(e[t]=[]),e[t].push(n)},remove:function(t,n){var a=e[t];if(a){var i=a.indexOf(n);-1!==i&&a.splice(i,1),a.length||delete e[t]}}}}}}).directive("modalBackdrop",["$animate","$injector","$modalStack",function(e,t,n){function a(t,a,o){o.modalInClass&&(i?i(a,{addClass:o.modalInClass}).start():e.addClass(a,o.modalInClass),t.$on(n.NOW_CLOSING_EVENT,function(t,n){var r=n();i?i(a,{removeClass:o.modalInClass}).start().then(r):e.removeClass(a,o.modalInClass).then(r)}))}var i=null;return t.has("$animateCss")&&(i=t.get("$animateCss")),{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(e,t){return e.addClass(t.backdropClass),a}}}]).directive("modalWindow",["$modalStack","$q","$animate","$injector",function(e,t,n,a){var i=null;return a.has("$animateCss")&&(i=a.get("$animateCss")),{restrict:"EA",scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(e,t){return t.templateUrl||"template/modal/window.html"},link:function(a,o,r){o.addClass(r.windowClass||""),a.size=r.size,a.close=function(t){var n=e.getTop();n&&n.value.backdrop&&"static"!==n.value.backdrop&&t.target===t.currentTarget&&(t.preventDefault(),t.stopPropagation(),e.dismiss(n.key,"backdrop click"))},a.$isRendered=!0;var s=t.defer();r.$observe("modalRender",function(e){"true"==e&&s.resolve()}),s.promise.then(function(){var s=null;r.modalInClass&&(s=i?i(o,{addClass:r.modalInClass}).start():n.addClass(o,r.modalInClass),a.$on(e.NOW_CLOSING_EVENT,function(e,t){var a=t();i?i(o,{removeClass:r.modalInClass}).start().then(a):n.removeClass(o,r.modalInClass).then(a)})),t.when(s).then(function(){var e=o[0].querySelectorAll("[autofocus]");e.length?e[0].focus():o[0].focus()});var l=e.getTop();l&&e.modalRendered(l.key)})}}}]).directive("modalAnimationClass",[function(){return{compile:function(e,t){t.modalAnimation&&e.addClass(t.modalAnimationClass)}}}]).directive("modalTransclude",function(){return{link:function(e,t,n,a,i){i(e.$parent,function(e){t.empty(),t.append(e)})}}}).factory("$modalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$injector","$$multiMap","$$stackedMap",function(e,t,n,a,i,o,r,s,l){function c(){for(var e=-1,t=y.keys(),n=0;n<t.length;n++)y.get(t[n]).value.backdrop&&(e=n);return e}function u(e,t){var a=n.find("body").eq(0),i=y.get(e).value;y.remove(e),p(i.modalDomEl,i.modalScope,function(){var t=i.openedClass||b;$.remove(t,e),a.toggleClass(t,$.hasKey(t))}),d(),t&&t.focus?t.focus():a.focus()}function d(){if(g&&-1==c()){var e=m;p(g,m,function(){e=null}),g=void 0,m=void 0}}function p(t,n,a){function i(){i.done||(i.done=!0,h?h(t,{event:"leave"}).start().then(function(){t.remove()}):e.leave(t),n.$destroy(),a&&a())}var r,s=null,l=function(){return r||(r=o.defer(),s=r.promise),function(){r.resolve()}};return n.$broadcast(w.NOW_CLOSING_EVENT,l),o.when(s).then(i)}function f(e,t,n){return!e.value.modalScope.$broadcast("modal.closing",t,n).defaultPrevented}var h=null;r.has("$animateCss")&&(h=r.get("$animateCss"));var g,m,v,b="modal-open",y=l.createNew(),$=s.createNew(),w={NOW_CLOSING_EVENT:"modal.stack.now-closing"},x=0,k="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return i.$watch(c,function(e){m&&(m.index=e)}),n.bind("keydown",function(e){if(e.isDefaultPrevented())return e;var t=y.top();if(t&&t.value.keyboard)switch(e.which){case 27:e.preventDefault(),i.$apply(function(){w.dismiss(t.key,"escape key press")});break;case 9:w.loadFocusElementList(t);var n=!1;e.shiftKey?w.isFocusInFirstItem(e)&&(n=w.focusLastFocusableElement()):w.isFocusInLastItem(e)&&(n=w.focusFirstFocusableElement()),n&&(e.preventDefault(),e.stopPropagation())}}),w.open=function(e,t){var o=n[0].activeElement,r=t.openedClass||b;y.add(e,{deferred:t.deferred,renderDeferred:t.renderDeferred,modalScope:t.scope,backdrop:t.backdrop,keyboard:t.keyboard,openedClass:t.openedClass}),$.put(r,e);var s=n.find("body").eq(0),l=c();if(l>=0&&!g){m=i.$new(!0),m.index=l;var u=angular.element('<div modal-backdrop="modal-backdrop"></div>');u.attr("backdrop-class",t.backdropClass),t.animation&&u.attr("modal-animation","true"),g=a(u)(m),s.append(g)}var d=angular.element('<div modal-window="modal-window"></div>');d.attr({"template-url":t.windowTemplateUrl,"window-class":t.windowClass,size:t.size,index:y.length()-1,animate:"animate"}).html(t.content),t.animation&&d.attr("modal-animation","true");var p=a(d)(t.scope);y.top().value.modalDomEl=p,y.top().value.modalOpener=o,s.append(p),s.addClass(r),w.clearFocusListCache()},w.close=function(e,t){var n=y.get(e);return n&&f(n,t,!0)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.resolve(t),u(e,n.value.modalOpener),!0):!n},w.dismiss=function(e,t){var n=y.get(e);return n&&f(n,t,!1)?(n.value.modalScope.$$uibDestructionScheduled=!0,n.value.deferred.reject(t),u(e,n.value.modalOpener),!0):!n},w.dismissAll=function(e){for(var t=this.getTop();t&&this.dismiss(t.key,e);)t=this.getTop()},w.getTop=function(){return y.top()},w.modalRendered=function(e){var t=y.get(e);t&&t.value.renderDeferred.resolve()},w.focusFirstFocusableElement=function(){return v.length>0?(v[0].focus(),!0):!1},w.focusLastFocusableElement=function(){return v.length>0?(v[v.length-1].focus(),!0):!1},w.isFocusInFirstItem=function(e){return v.length>0?(e.target||e.srcElement)==v[0]:!1},w.isFocusInLastItem=function(e){return v.length>0?(e.target||e.srcElement)==v[v.length-1]:!1},w.clearFocusListCache=function(){v=[],x=0},w.loadFocusElementList=function(e){if((void 0===v||!v.length0)&&e){var t=e.value.modalDomEl;t&&t.length&&(v=t[0].querySelectorAll(k))}},w}]).provider("$modal",function(){var e={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$templateRequest","$controller","$modalStack",function(t,n,a,i,o,r){function s(e){return e.template?a.when(e.template):i(angular.isFunction(e.templateUrl)?e.templateUrl():e.templateUrl)}function l(e){var n=[];return angular.forEach(e,function(e){angular.isFunction(e)||angular.isArray(e)?n.push(a.when(t.invoke(e))):angular.isString(e)?n.push(a.when(t.get(e))):n.push(a.when(e))}),n}var c={},u=null;return c.getPromiseChain=function(){return u},c.open=function(t){var i=a.defer(),c=a.defer(),d=a.defer(),p={result:i.promise,opened:c.promise,rendered:d.promise,close:function(e){return r.close(p,e)},dismiss:function(e){return r.dismiss(p,e)}};if(t=angular.extend({},e.options,t),t.resolve=t.resolve||{},!t.template&&!t.templateUrl)throw new Error("One of template or templateUrl options is required.");var f,h=a.all([s(t)].concat(l(t.resolve)));return f=u=a.all([u]).then(function(){return h},function(){return h}).then(function(e){var a=(t.scope||n).$new();a.$close=p.close,a.$dismiss=p.dismiss,a.$on("$destroy",function(){a.$$uibDestructionScheduled||a.$dismiss("$uibUnscheduledDestruction")});var s,l={},u=1;t.controller&&(l.$scope=a,l.$modalInstance=p,angular.forEach(t.resolve,function(t,n){l[n]=e[u++]}),s=o(t.controller,l),t.controllerAs&&(t.bindToController&&angular.extend(s,a),a[t.controllerAs]=s)),r.open(p,{scope:a,deferred:i,renderDeferred:d,content:e[0],animation:t.animation,backdrop:t.backdrop,keyboard:t.keyboard,backdropClass:t.backdropClass,windowClass:t.windowClass,windowTemplateUrl:t.windowTemplateUrl,size:t.size,openedClass:t.openedClass}),c.resolve(!0)},function(e){c.reject(e),i.reject(e)}).finally(function(){u===f&&(u=null)}),p},c}]};return e}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(e,t,n){var a=this,i={$setViewValue:angular.noop},o=t.numPages?n(t.numPages).assign:angular.noop;this.init=function(r,s){i=r,this.config=s,i.$render=function(){a.render()},t.itemsPerPage?e.$parent.$watch(n(t.itemsPerPage),function(t){a.itemsPerPage=parseInt(t,10),e.totalPages=a.calculateTotalPages()}):this.itemsPerPage=s.itemsPerPage,e.$watch("totalItems",function(){e.totalPages=a.calculateTotalPages()}),e.$watch("totalPages",function(t){o(e.$parent,t),e.page>t?e.selectPage(t):i.$render()})},this.calculateTotalPages=function(){var t=this.itemsPerPage<1?1:Math.ceil(e.totalItems/this.itemsPerPage);return Math.max(t||0,1)},this.render=function(){e.page=parseInt(i.$viewValue,10)||1},e.selectPage=function(t,n){n&&n.preventDefault();var a=!e.ngDisabled||!n;a&&e.page!==t&&t>0&&t<=e.totalPages&&(n&&n.target&&n.target.blur(),i.$setViewValue(t),i.$render())},e.getText=function(t){return e[t+"Text"]||a.config[t+"Text"]},e.noPrevious=function(){return 1===e.page},e.noNext=function(){return e.page===e.totalPages}}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(e,t){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["pagination","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"template/pagination/pagination.html"},replace:!0,link:function(n,a,i,o){function r(e,t,n){return{number:e,text:t,active:n}}function s(e,t){var n=[],a=1,i=t,o=angular.isDefined(u)&&t>u;o&&(d?(a=Math.max(e-Math.floor(u/2),1),i=a+u-1,i>t&&(i=t,a=i-u+1)):(a=(Math.ceil(e/u)-1)*u+1,i=Math.min(a+u-1,t)));for(var s=a;i>=s;s++){var l=r(s,s,s===e);
n.push(l)}if(o&&!d){if(a>1){var c=r(a-1,"...",!1);n.unshift(c)}if(t>i){var p=r(i+1,"...",!1);n.push(p)}}return n}var l=o[0],c=o[1];if(c){var u=angular.isDefined(i.maxSize)?n.$parent.$eval(i.maxSize):t.maxSize,d=angular.isDefined(i.rotate)?n.$parent.$eval(i.rotate):t.rotate;n.boundaryLinks=angular.isDefined(i.boundaryLinks)?n.$parent.$eval(i.boundaryLinks):t.boundaryLinks,n.directionLinks=angular.isDefined(i.directionLinks)?n.$parent.$eval(i.directionLinks):t.directionLinks,l.init(c,t),i.maxSize&&n.$parent.$watch(e(i.maxSize),function(e){u=parseInt(e,10),l.render()});var p=l.render;l.render=function(){p(),n.page>0&&n.page<=n.totalPages&&(n.pages=s(n.page,n.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(e){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["pager","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(e,t){return t.templateUrl||"template/pagination/pager.html"},replace:!0,link:function(t,n,a,i){var o=i[0],r=i[1];r&&(t.align=angular.isDefined(a.align)?t.$parent.$eval(a.align):e.align,o.init(r,e))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function e(e){var t=/[A-Z]/g,n="-";return e.replace(t,function(e,t){return(t?n:"")+e.toLowerCase()})}var t={placement:"top",animation:!0,popupDelay:0,useContentExp:!1},n={mouseenter:"mouseleave",click:"click",focus:"blur",none:""},a={};this.options=function(e){angular.extend(a,e)},this.setTriggers=function(e){angular.extend(n,e)},this.$get=["$window","$compile","$timeout","$document","$position","$interpolate","$rootScope","$parse",function(i,o,r,s,l,c,u,d){return function(i,p,f,h){function g(e){var t=(e||h.trigger||f).split(" "),a=t.map(function(e){return n[e]||e});return{show:t,hide:a}}h=angular.extend({},t,a,h);var m=e(i),v=c.startSymbol(),b=c.endSymbol(),y="<div "+m+'-popup title="'+v+"title"+b+'" '+(h.useContentExp?'content-exp="contentExp()" ':'content="'+v+"content"+b+'" ')+'placement="'+v+"placement"+b+'" popup-class="'+v+"popupClass"+b+'" animation="animation" is-open="isOpen"origin-scope="origScope" ></div>';return{restrict:"EA",compile:function(){var e=o(y);return function(t,n,a){function o(){I.isOpen?f():c()}function c(){(!A||t.$eval(a[p+"Enable"]))&&($(),I.popupDelay?S||(S=r(m,I.popupDelay,!1)):m())}function f(){v(),u.$$phase||u.$digest()}function m(){return S=null,E&&(r.cancel(E),E=null),(h.useContentExp?I.contentExp():I.content)?(b(),I.isOpen=!0,F&&F.assign(I.origScope,I.isOpen),u.$$phase||I.$apply(),D.css({display:"block"}),U(),void 0):angular.noop}function v(){I.isOpen=!1,F&&F.assign(I.origScope,I.isOpen),r.cancel(S),S=null,r.cancel(O),O=null,I.animation?E||(E=r(y,500)):y()}function b(){D&&y(),T=I.$new(),D=e(T,function(e){M?s.find("body").append(e):n.after(e)}),h.useContentExp&&(T.$watch("contentExp()",function(e){!e&&I.isOpen&&v()}),T.$watch(function(){L||(L=!0,T.$$postDigest(function(){L=!1,I.isOpen&&U()}))}))}function y(){E=null,D&&(D.remove(),D=null),T&&(T.$destroy(),T=null)}function $(){w(),x(),k()}function w(){I.popupClass=a[p+"Class"]}function x(){var e=a[p+"Placement"];I.placement=angular.isDefined(e)?e:h.placement}function k(){var e=a[p+"PopupDelay"],t=parseInt(e,10);I.popupDelay=isNaN(t)?h.popupDelay:t}function C(){var e=a[p+"Trigger"];N(),P=g(e),"none"!==P.show&&P.show.forEach(function(e,t){e===P.hide[t]?n[0].addEventListener(e,o):e&&(n[0].addEventListener(e,c),n[0].addEventListener(P.hide[t],f))})}var D,T,E,S,O,M=angular.isDefined(h.appendToBody)?h.appendToBody:!1,P=g(void 0),A=angular.isDefined(a[p+"Enable"]),I=t.$new(!0),L=!1,F=angular.isDefined(a[p+"IsOpen"])?d(a[p+"IsOpen"]):!1,U=function(){D&&(O||(O=r(function(){D.css({top:0,left:0,width:"auto",height:"auto"});var e=l.position(D),t=l.positionElements(n,D,I.placement,M);t.top+="px",t.left+="px",t.width=e.width+"px",t.height=e.height+"px",D.css(t),O=null},0,!1)))};I.origScope=t,I.isOpen=!1,I.contentExp=function(){return t.$eval(a[i])},h.useContentExp||a.$observe(i,function(e){I.content=e,!e&&I.isOpen?v():U()}),a.$observe("disabled",function(e){S&&e&&(r.cancel(S),S=null),e&&I.isOpen&&v()}),a.$observe(p+"Title",function(e){I.title=e,U()}),a.$observe(p+"Placement",function(){I.isOpen&&(x(),U())}),F&&t.$watch(F,function(e){e!==I.isOpen&&o()});var N=function(){P.show.forEach(function(e){n.unbind(e,c)}),P.hide.forEach(function(e){n.unbind(e,f)})};C();var H=t.$eval(a[p+"Animation"]);I.animation=angular.isDefined(H)?!!H:h.animation;var V=t.$eval(a[p+"AppendToBody"]);M=angular.isDefined(V)?V:M,M&&t.$on("$locationChangeSuccess",function(){I.isOpen&&v()}),t.$on("$destroy",function(){r.cancel(E),r.cancel(S),r.cancel(O),N(),y(),I=null})}}}}}]}).directive("tooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(e,t,n,a){return{link:function(i,o,r){var s,l,c,u=i.$eval(r.tooltipTemplateTranscludeScope),d=0,p=function(){l&&(l.remove(),l=null),s&&(s.$destroy(),s=null),c&&(e.leave(c).then(function(){l=null}),l=c,c=null)};i.$watch(t.parseAsResourceUrl(r.tooltipTemplateTransclude),function(t){var r=++d;t?(a(t,!0).then(function(a){if(r===d){var i=u.$new(),l=a,f=n(l)(i,function(t){p(),e.enter(t,o)});s=i,c=f,s.$emit("$includeContentLoaded",t)}},function(){r===d&&(p(),i.$emit("$includeContentError",t))}),i.$emit("$includeContentRequested",t)):p()}),i.$on("$destroy",p)}}}]).directive("tooltipClasses",function(){return{restrict:"A",link:function(e,t,n){e.placement&&t.addClass(e.placement),e.popupClass&&t.addClass(e.popupClass),e.animation()&&t.addClass(n.tooltipAnimationClass)}}}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(e){return e("tooltip","tooltip","mouseenter")}]).directive("tooltipTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html"}}).directive("tooltipTemplate",["$tooltip",function(e){return e("tooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html"}}).directive("tooltipHtml",["$tooltip",function(e){return e("tooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).value("tooltipHtmlUnsafeSuppressDeprecated",!1).directive("tooltipHtmlUnsafe",["$tooltip","tooltipHtmlUnsafeSuppressDeprecated","$log",function(e,t,n){return t||n.warn("tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead."),e("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverTemplatePopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html"}}).directive("popoverTemplate",["$tooltip",function(e){return e("popoverTemplate","popover","click",{useContentExp:!0})}]).directive("popoverHtmlPopup",function(){return{restrict:"EA",replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover-html.html"}}).directive("popoverHtml",["$tooltip",function(e){return e("popoverHtml","popover","click",{useContentExp:!0})}]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(e){return e("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).value("$progressSuppressWarning",!1).controller("ProgressController",["$scope","$attrs","progressConfig",function(e,t,n){var a=this,i=angular.isDefined(t.animate)?e.$parent.$eval(t.animate):n.animate;this.bars=[],e.max=angular.isDefined(e.max)?e.max:n.max,this.addBar=function(t,n){i||n.css({transition:"none"}),this.bars.push(t),t.max=e.max,t.$watch("value",function(){t.recalculatePercentage()}),t.recalculatePercentage=function(){t.percent=+(100*t.value/t.max).toFixed(2);var e=a.bars.reduce(function(e,t){return e+t.percent},0);e>100&&(t.percent-=e-100)},t.$on("$destroy",function(){n=null,a.removeBar(t)})},this.removeBar=function(e){this.bars.splice(this.bars.indexOf(e),1)},e.$watch("max",function(){a.bars.forEach(function(t){t.max=e.max,t.recalculatePercentage()})})}]).directive("uibProgress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"uibProgress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html"}}).directive("progress",["$log","$progressSuppressWarning",function(e,t){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html",link:function(){t&&e.warn("progress is now deprecated. Use uib-progress instead")}}}]).directive("uibBar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(e,t,n,a){a.addBar(e,t)}}}).directive("bar",["$log","$progressSuppressWarning",function(e,t){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(n,a,i,o){t&&e.warn("bar is now deprecated. Use uib-bar instead"),o.addBar(n,a)}}}]).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(e,t,n,a){a.addBar(e,angular.element(t.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null,titles:["one","two","three","four","five"]}).controller("RatingController",["$scope","$attrs","ratingConfig",function(e,t,n){var a={$setViewValue:angular.noop};this.init=function(i){a=i,a.$render=this.render,a.$formatters.push(function(e){return angular.isNumber(e)&&e<<0!==e&&(e=Math.round(e)),e}),this.stateOn=angular.isDefined(t.stateOn)?e.$parent.$eval(t.stateOn):n.stateOn,this.stateOff=angular.isDefined(t.stateOff)?e.$parent.$eval(t.stateOff):n.stateOff;var o=angular.isDefined(t.titles)?e.$parent.$eval(t.titles):n.titles;this.titles=angular.isArray(o)&&o.length>0?o:n.titles;var r=angular.isDefined(t.ratingStates)?e.$parent.$eval(t.ratingStates):new Array(angular.isDefined(t.max)?e.$parent.$eval(t.max):n.max);e.range=this.buildTemplateObjects(r)},this.buildTemplateObjects=function(e){for(var t=0,n=e.length;n>t;t++)e[t]=angular.extend({index:t},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(t)},e[t]);return e},this.getTitle=function(e){return e>=this.titles.length?e+1:this.titles[e]},e.rate=function(t){!e.readonly&&t>=0&&t<=e.range.length&&(a.$setViewValue(a.$viewValue===t?0:t),a.$render())},e.enter=function(t){e.readonly||(e.value=t),e.onHover({value:t})},e.reset=function(){e.value=a.$viewValue,e.onLeave()},e.onKeydown=function(t){/(37|38|39|40)/.test(t.which)&&(t.preventDefault(),t.stopPropagation(),e.rate(e.value+(38===t.which||39===t.which?1:-1)))},this.render=function(){e.value=a.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(e,t,n,a){var i=a[0],o=a[1];i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(e){var t=this,n=t.tabs=e.tabs=[];t.select=function(e){angular.forEach(n,function(t){t.active&&t!==e&&(t.active=!1,t.onDeselect(),e.selectCalled=!1)}),e.active=!0,e.selectCalled||(e.onSelect(),e.selectCalled=!0)},t.addTab=function(e){n.push(e),1===n.length&&e.active!==!1?e.active=!0:e.active?t.select(e):e.active=!1},t.removeTab=function(e){var i=n.indexOf(e);if(e.active&&n.length>1&&!a){var o=i==n.length-1?i-1:i+1;t.select(n[o])}n.splice(i,1)};var a;e.$on("$destroy",function(){a=!0})}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(e,t,n){e.vertical=angular.isDefined(n.vertical)?e.$parent.$eval(n.vertical):!1,e.justified=angular.isDefined(n.justified)?e.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse","$log",function(e,t){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},link:function(n,a,i,o,r){n.$watch("active",function(e){e&&o.select(n)}),n.disabled=!1,i.disable&&n.$parent.$watch(e(i.disable),function(e){n.disabled=!!e}),i.disabled&&(t.warn('Use of "disabled" attribute has been deprecated, please use "disable"'),n.$parent.$watch(e(i.disabled),function(e){n.disabled=!!e})),n.select=function(){n.disabled||(n.active=!0)},o.addTab(n),n.$on("$destroy",function(){o.removeTab(n)}),n.$transcludeFn=r}}}]).directive("tabHeadingTransclude",function(){return{restrict:"A",require:"^tab",link:function(e,t){e.$watch("headingElement",function(e){e&&(t.html(""),t.append(e))})}}}).directive("tabContentTransclude",function(){function e(e){return e.tagName&&(e.hasAttribute("tab-heading")||e.hasAttribute("data-tab-heading")||e.hasAttribute("x-tab-heading")||"tab-heading"===e.tagName.toLowerCase()||"data-tab-heading"===e.tagName.toLowerCase()||"x-tab-heading"===e.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(t,n,a){var i=t.$eval(a.tabContentTransclude);i.$transcludeFn(i.$parent,function(t){angular.forEach(t,function(t){e(t)?i.headingElement=t:n.append(t)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(e,t,n,a,i,o){function r(){var t=parseInt(e.hours,10),n=e.showMeridian?t>0&&13>t:t>=0&&24>t;return n?(e.showMeridian&&(12===t&&(t=0),e.meridian===m[1]&&(t+=12)),t):void 0}function s(){var t=parseInt(e.minutes,10);return t>=0&&60>t?t:void 0}function l(e){return angular.isDefined(e)&&e.toString().length<2?"0"+e:e.toString()}function c(e){u(),g.$setViewValue(new Date(h)),d(e)}function u(){g.$setValidity("time",!0),e.invalidHours=!1,e.invalidMinutes=!1}function d(t){var n=h.getHours(),a=h.getMinutes();e.showMeridian&&(n=0===n||12===n?12:n%12),e.hours="h"===t?n:l(n),"m"!==t&&(e.minutes=l(a)),e.meridian=h.getHours()<12?m[0]:m[1]}function p(e,t){var n=new Date(e.getTime()+6e4*t),a=new Date(e);return a.setHours(n.getHours(),n.getMinutes()),a}function f(e){h=p(h,e),c()}var h=new Date,g={$setViewValue:angular.noop},m=angular.isDefined(t.meridians)?e.$parent.$eval(t.meridians):o.meridians||i.DATETIME_FORMATS.AMPMS;this.init=function(n,a){g=n,g.$render=this.render,g.$formatters.unshift(function(e){return e?new Date(e):null});var i=a.eq(0),r=a.eq(1),s=angular.isDefined(t.mousewheel)?e.$parent.$eval(t.mousewheel):o.mousewheel;s&&this.setupMousewheelEvents(i,r);var l=angular.isDefined(t.arrowkeys)?e.$parent.$eval(t.arrowkeys):o.arrowkeys;l&&this.setupArrowkeyEvents(i,r),e.readonlyInput=angular.isDefined(t.readonlyInput)?e.$parent.$eval(t.readonlyInput):o.readonlyInput,this.setupInputEvents(i,r)};var v=o.hourStep;t.hourStep&&e.$parent.$watch(n(t.hourStep),function(e){v=parseInt(e,10)});var b=o.minuteStep;t.minuteStep&&e.$parent.$watch(n(t.minuteStep),function(e){b=parseInt(e,10)});var y;e.$parent.$watch(n(t.min),function(e){var t=new Date(e);y=isNaN(t)?void 0:t});var $;e.$parent.$watch(n(t.max),function(e){var t=new Date(e);$=isNaN(t)?void 0:t}),e.noIncrementHours=function(){var e=p(h,60*v);return e>$||h>e&&y>e},e.noDecrementHours=function(){var e=p(h,60*-v);return y>e||e>h&&e>$},e.noIncrementMinutes=function(){var e=p(h,b);return e>$||h>e&&y>e},e.noDecrementMinutes=function(){var e=p(h,-b);return y>e||e>h&&e>$},e.noToggleMeridian=function(){return h.getHours()<13?p(h,720)>$:p(h,-720)<y},e.showMeridian=o.showMeridian,t.showMeridian&&e.$parent.$watch(n(t.showMeridian),function(t){if(e.showMeridian=!!t,g.$error.time){var n=r(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(h.setHours(n),c())}else d()}),this.setupMousewheelEvents=function(t,n){var a=function(e){e.originalEvent&&(e=e.originalEvent);var t=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||t>0};t.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementHours():e.decrementHours()),t.preventDefault()}),n.bind("mousewheel wheel",function(t){e.$apply(a(t)?e.incrementMinutes():e.decrementMinutes()),t.preventDefault()})},this.setupArrowkeyEvents=function(t,n){t.bind("keydown",function(t){38===t.which?(t.preventDefault(),e.incrementHours(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementHours(),e.$apply())}),n.bind("keydown",function(t){38===t.which?(t.preventDefault(),e.incrementMinutes(),e.$apply()):40===t.which&&(t.preventDefault(),e.decrementMinutes(),e.$apply())})},this.setupInputEvents=function(t,n){if(e.readonlyInput)return e.updateHours=angular.noop,e.updateMinutes=angular.noop,void 0;var a=function(t,n){g.$setViewValue(null),g.$setValidity("time",!1),angular.isDefined(t)&&(e.invalidHours=t),angular.isDefined(n)&&(e.invalidMinutes=n)};e.updateHours=function(){var e=r(),t=s();angular.isDefined(e)&&angular.isDefined(t)?(h.setHours(e),y>h||h>$?a(!0):c("h")):a(!0)},t.bind("blur",function(){!e.invalidHours&&e.hours<10&&e.$apply(function(){e.hours=l(e.hours)})}),e.updateMinutes=function(){var e=s(),t=r();angular.isDefined(e)&&angular.isDefined(t)?(h.setMinutes(e),y>h||h>$?a(void 0,!0):c("m")):a(void 0,!0)},n.bind("blur",function(){!e.invalidMinutes&&e.minutes<10&&e.$apply(function(){e.minutes=l(e.minutes)})})},this.render=function(){var t=g.$viewValue;isNaN(t)?(g.$setValidity("time",!1),a.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(h=t),y>h||h>$?(g.$setValidity("time",!1),e.invalidHours=!0,e.invalidMinutes=!0):u(),d())},e.showSpinners=angular.isDefined(t.showSpinners)?e.$parent.$eval(t.showSpinners):o.showSpinners,e.incrementHours=function(){e.noIncrementHours()||f(60*v)},e.decrementHours=function(){e.noDecrementHours()||f(60*-v)},e.incrementMinutes=function(){e.noIncrementMinutes()||f(b)},e.decrementMinutes=function(){e.noDecrementMinutes()||f(-b)},e.toggleMeridian=function(){e.noToggleMeridian()||f(720*(h.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(e,t){return t.templateUrl||"template/timepicker/timepicker.html"},link:function(e,t,n,a){var i=a[0],o=a[1];o&&i.init(o,t.find("input"))}}}),angular.module("ui.bootstrap.transition",[]).value("$transitionSuppressDeprecated",!1).factory("$transition",["$q","$timeout","$rootScope","$log","$transitionSuppressDeprecated",function(e,t,n,a,i){function o(e){for(var t in e)if(void 0!==s.style[t])return e[t]}i||a.warn("$transition is now deprecated. Use $animate from ngAnimate instead.");var r=function(a,i,o){o=o||{};var s=e.defer(),l=r[o.animation?"animationEndEventName":"transitionEndEventName"],c=function(){n.$apply(function(){a.unbind(l,c),s.resolve(a)})};return l&&a.bind(l,c),t(function(){angular.isString(i)?a.addClass(i):angular.isFunction(i)?i(a):angular.isObject(i)&&a.css(i),l||s.resolve(a)}),s.promise.cancel=function(){l&&a.unbind(l,c),s.reject("Transition cancelled")},s.promise},s=document.createElement("trans"),l={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},c={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return r.transitionEndEventName=o(l),r.animationEndEventName=o(c),r}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position"]).factory("typeaheadParser",["$parse",function(e){var t=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(t);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:e(a[4]),viewMapper:e(a[2]||a[1]),modelMapper:e(a[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$window","$rootScope","$position","typeaheadParser",function(e,t,n,a,i,o,r,s,l){var c=[9,13,27,38,40],u=200;return{require:["ngModel","^?ngModelOptions"],link:function(d,p,f,h){function g(){U.moveInProgress||(U.moveInProgress=!0,U.$digest()),B&&a.cancel(B),B=a(function(){U.matches.length&&m(),U.moveInProgress=!1,U.$digest()},u)}function m(){U.position=O?s.offset(p):s.position(p),U.position.top+=p.prop("offsetHeight")}var v=h[0],b=h[1],y=d.$eval(f.typeaheadMinLength);y||0===y||(y=1);var $,w,x=d.$eval(f.typeaheadWaitMs)||0,k=d.$eval(f.typeaheadEditable)!==!1,C=t(f.typeaheadLoading).assign||angular.noop,D=t(f.typeaheadOnSelect),T=angular.isDefined(f.typeaheadSelectOnBlur)?d.$eval(f.typeaheadSelectOnBlur):!1,E=t(f.typeaheadNoResults).assign||angular.noop,S=f.typeaheadInputFormatter?t(f.typeaheadInputFormatter):void 0,O=f.typeaheadAppendToBody?d.$eval(f.typeaheadAppendToBody):!1,M=d.$eval(f.typeaheadFocusFirst)!==!1,P=f.typeaheadSelectOnExact?d.$eval(f.typeaheadSelectOnExact):!1,A=t(f.ngModel),I=t(f.ngModel+"($$$p)"),L=function(e,t){return angular.isFunction(A(d))&&b&&b.$options&&b.$options.getterSetter?I(e,{$$$p:t}):A.assign(e,t)},F=l.parse(f.typeahead),U=d.$new(),N=d.$on("$destroy",function(){U.$destroy()});U.$on("$destroy",N);var H="typeahead-"+U.$id+"-"+Math.floor(1e4*Math.random());p.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":H});var V=angular.element("<div typeahead-popup></div>");V.attr({id:H,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(f.typeaheadTemplateUrl)&&V.attr("template-url",f.typeaheadTemplateUrl),angular.isDefined(f.typeaheadPopupTemplateUrl)&&V.attr("popup-template-url",f.typeaheadPopupTemplateUrl);var j=function(){U.matches=[],U.activeIdx=-1,p.attr("aria-expanded",!1)},R=function(e){return H+"-option-"+e};U.$watch("activeIdx",function(e){0>e?p.removeAttr("aria-activedescendant"):p.attr("aria-activedescendant",R(e))});var q=function(e,t){return U.matches.length>t&&e?e.toUpperCase()===U.matches[t].label.toUpperCase():!1},_=function(e){var t={$viewValue:e};C(d,!0),E(d,!1),n.when(F.source(d,t)).then(function(n){var a=e===v.$viewValue;if(a&&$)if(n&&n.length>0){U.activeIdx=M?0:-1,E(d,!1),U.matches.length=0;for(var i=0;i<n.length;i++)t[F.itemName]=n[i],U.matches.push({id:R(i),label:F.viewMapper(U,t),model:n[i]});U.query=e,m(),p.attr("aria-expanded",!0),P&&1===U.matches.length&&q(e,0)&&U.select(0)}else j(),E(d,!0);a&&C(d,!1)},function(){j(),C(d,!1),E(d,!0)})};O&&(angular.element(o).bind("resize",g),i.find("body").bind("scroll",g));var B;U.moveInProgress=!1,j(),U.query=void 0;var z,W=function(e){z=a(function(){_(e)},x)},Y=function(){z&&a.cancel(z)};v.$parsers.unshift(function(e){return $=!0,0===y||e&&e.length>=y?x>0?(Y(),W(e)):_(e):(C(d,!1),Y(),j()),k?e:e?(v.$setValidity("editable",!1),void 0):(v.$setValidity("editable",!0),null)}),v.$formatters.push(function(e){var t,n,a={};return k||v.$setValidity("editable",!0),S?(a.$model=e,S(d,a)):(a[F.itemName]=e,t=F.viewMapper(d,a),a[F.itemName]=void 0,n=F.viewMapper(d,a),t!==n?t:e)}),U.select=function(e){var t,n,i={};w=!0,i[F.itemName]=n=U.matches[e].model,t=F.modelMapper(d,i),L(d,t),v.$setValidity("editable",!0),v.$setValidity("parse",!0),D(d,{$item:n,$model:t,$label:F.viewMapper(d,i)}),j(),U.$eval(f.typeaheadFocusOnSelect)!==!1&&a(function(){p[0].focus()},0,!1)},p.bind("keydown",function(e){if(0!==U.matches.length&&-1!==c.indexOf(e.which)){if(-1===U.activeIdx&&(9===e.which||13===e.which))return j(),U.$digest(),void 0;e.preventDefault(),40===e.which?(U.activeIdx=(U.activeIdx+1)%U.matches.length,U.$digest()):38===e.which?(U.activeIdx=(U.activeIdx>0?U.activeIdx:U.matches.length)-1,U.$digest()):13===e.which||9===e.which?U.$apply(function(){U.select(U.activeIdx)}):27===e.which&&(e.stopPropagation(),j(),U.$digest())}}),p.bind("blur",function(){T&&U.matches.length&&-1!==U.activeIdx&&!w&&(w=!0,U.$apply(function(){U.select(U.activeIdx)})),$=!1,w=!1});var G=function(e){p[0]!==e.target&&3!==e.which&&0!==U.matches.length&&(j(),r.$$phase||U.$digest())};i.bind("click",G),d.$on("$destroy",function(){i.unbind("click",G),O&&K.remove(),V.remove()});var K=e(V)(U);O?i.find("body").append(K):p.after(K)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:function(e,t){return t.popupTemplateUrl||"template/typeahead/typeahead-popup.html"},link:function(e,t,n){e.templateUrl=n.templateUrl,e.isOpen=function(){return e.matches.length>0},e.isActive=function(t){return e.active==t},e.selectActive=function(t){e.active=t},e.selectMatch=function(t){e.select({activeIdx:t})}}}}).directive("typeaheadMatch",["$templateRequest","$compile","$parse",function(e,t,n){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(a,i,o){var r=n(o.templateUrl)(a.$parent)||"template/typeahead/typeahead-match.html";e(r).then(function(e){t(e.trim())(a,function(e){i.replaceWith(e)})})}}}]).filter("typeaheadHighlight",["$sce","$injector","$log",function(e,t,n){function a(e){return e.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function i(e){return/<.*>/g.test(e)}var o;return o=t.has("$sanitize"),function(t,r){return!o&&i(t)&&n.warn("Unsafe use of typeahead please use ngSanitize"),t=r?(""+t).replace(new RegExp(a(r),"gi"),"<strong>$&</strong>"):t,o||(t=e.trustAsHtml(t)),t}}]),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion-group.html",'<div class="panel {{panelClass || \'panel-default\'}}">\n  <div class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(e){e.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(e){e.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close($event)">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(e){e.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(e){e.put("template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')
}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(e){e.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(e){e.put("template/modal/backdrop.html",'<div class="modal-backdrop"\n     modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(e){e.put("template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    modal-animation-class="fade"\n    modal-in-class="in"\n	ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" modal-transclude></div></div>\n</div>\n')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(e){e.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(e){e.put("template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("template/popover/popover-html.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover-template.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(e){e.put("template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(e){e.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" style="min-width: 0;" ng-transclude></div>\n</div>\n')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(e){e.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" ></i>\n</span>\n')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(e){e.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(e){e.put("template/timepicker/timepicker.html",'<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2">\n      </td>\n      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-match.html",'<a href tabindex="-1" ng-bind-html="match.label | typeaheadHighlight:query"></a>\n')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(e){e.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),function(){"use strict";angular.module("angularLoad",[]).service("angularLoad",["$document","$q","$timeout",function(e,t,n){function a(e){var a={};return function(i){if("undefined"==typeof a[i]){var o=t.defer(),r=e(i);r.onload=r.onreadystatechange=function(e){r.readyState&&"complete"!==r.readyState&&"loaded"!==r.readyState||n(function(){o.resolve(e)})},r.onerror=function(e){n(function(){o.reject(e)})},a[i]=o.promise}return a[i]}}var i=e[0];this.loadScript=a(function(e){var t=i.createElement("script");return t.src=e,i.body.appendChild(t),t}),this.loadCSS=a(function(e){var t=i.createElement("link");return t.rel="stylesheet",t.type="text/css",t.href=e,i.head.appendChild(t),t})}])}(),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(e,t){t.addClass("fa"),t.addClass("fa-question-circle"),t.addClass("fa-lg")}}}])}(),function(){"use strict";angular.module("risevision.widget.common.scroll-setting",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("scrollSetting",["$templateCache",function(e){return{restrict:"E",scope:{scroll:"="},template:e.get("_angular/scroll-setting/scroll-setting.html"),transclude:!1,link:function(e){e.defaultSetting={by:"none",speed:"medium",pause:5,pud:10},e.defaults=function(e){if(e)for(var t=1,n=arguments.length;n>t;t++){var a=arguments[t];for(var i in a)void 0===e[i]&&(e[i]=a[i])}return e},e.$watch("scroll",function(t){e.defaults(t,e.defaultSetting)})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.scroll-setting")}catch(t){e=angular.module("risevision.widget.common.scroll-setting",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/scroll-setting/scroll-setting.html",'<div class="row">\n  <div class="col-md-3">\n    <div class="form-group">\n      <label class="control-label">{{"scroll.heading" | translate}}</label>\n      <select id="scroll-by" ng-model="scroll.by" class="form-control">\n        <option value="none">{{\'scroll.by.none\' | translate}}</option>\n        <option value="continuous">{{\'scroll.by.continuous\' | translate}}</option>\n        <option value="page">{{\'scroll.by.page\' | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-3" ng-show="scroll.by != \'none\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.speed.label\' | translate}}</label>\n      <select id="scroll-speed" ng-model="scroll.speed" class="form-control">\n        <option value="slowest">{{\'scroll.speed.slowest\' | translate}}</option>\n        <option value="slow">{{\'scroll.speed.slow\' | translate}}</option>\n        <option value="medium">{{\'scroll.speed.medium\' | translate}}</option>\n        <option value="fast">{{\'scroll.speed.fast\' | translate}}</option>\n        <option value="fastest">{{\'scroll.speed.fastest\' | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-3" ng-show="scroll.by != \'none\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.pause.label\' | translate}}</label>\n      <div class="input-group">\n        <input id="scroll-pause" type="number" ng-model="scroll.pause" class="form-control" />\n        <span class="input-group-addon">{{\'common.units.seconds\' | translate}}</span>\n      </div>\n    </div>\n  </div>\n  <div class="col-md-3" ng-show="scroll.by != \'none\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.pud.label\' | translate}}</label>\n      <span popover="{{\'scroll.pud.tooltip\' | translate}}" popover-trigger="click"\n        popover-placement="right" rv-tooltip></span>\n      <div class="input-group">\n        <input id="scroll-pud" type="number" ng-model="scroll.pud" class="form-control" />\n        <span class="input-group-addon">{{\'common.units.seconds\' | translate}}</span>\n      </div>\n    </div>\n  </div>\n</div>\n')}])}(),angular.module("ui.tinymce",[]).value("uiTinymceConfig",{}).directive("uiTinymce",["$rootScope","$compile","$timeout","$window","$sce","uiTinymceConfig",function(e,t,n,a,i,o){o=o||{};var r=0,s="ui-tinymce";return o.baseUrl&&(tinymce.baseURL=o.baseUrl),{require:["ngModel","^?form"],link:function(l,c,u,d){function p(e){e?(f(),g&&g.getBody().setAttribute("contenteditable",!1)):(f(),g&&!g.settings.readonly&&g.getBody().setAttribute("contenteditable",!0))}function f(){g||(g=tinymce.get(u.id))}if(a.tinymce){var h,g,m=d[0],v=d[1]||null,b={},y=function(t){var n=t.getContent({format:b.format}).trim();n=i.trustAsHtml(n),m.$setViewValue(n),e.$$phase||l.$apply()};u.$set("id",s+"-"+r++),h={},angular.extend(h,l.$eval(u.uiTinymce));var $={setup:function(e){e.on("init",function(){m.$render(),m.$setPristine(),v&&v.$setPristine()}),e.on("ExecCommand",function(){e.save(),y(e)}),e.on("change NodeChange",function(){e.save(),y(e)}),e.on("blur",function(){c[0].blur()}),e.on("ObjectResized",function(){e.save(),y(e)}),e.on("remove",function(){c.remove()}),h.setup&&h.setup(e,{updateView:y})},format:h.format||"html",selector:"#"+u.id};angular.extend(b,o,h,$),n(function(){b.baseURL&&(tinymce.baseURL=b.baseURL),tinymce.init(b),p(l.$eval(u.ngDisabled))}),m.$formatters.unshift(function(e){return e?i.trustAsHtml(e):""}),m.$parsers.unshift(function(e){return e?i.getTrustedHtml(e):""}),m.$render=function(){f();var e=m.$viewValue?i.getTrustedHtml(m.$viewValue):"";g&&g.getDoc()&&(g.setContent(e),g.fire("change"))},u.$observe("disabled",p),l.$on("$tinymce:refresh",function(e,n){var a=u.id;if(angular.isUndefined(n)||n===a){var i=c.parent(),o=c.clone();o.removeAttr("id"),o.removeAttr("style"),o.removeAttr("aria-hidden"),tinymce.execCommand("mceRemoveEditor",!1,a),i.append(t(o)(l))}}),l.$on("$destroy",function(){f(),g&&(g.remove(),g=null)})}}}}]),function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("urlField",["$templateCache","$log",function(e,t){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",fileType:"@"},template:e.get("_angular/url-field/url-field.html"),link:function(e,n,a,i){function o(e,t){var n,a=e.toLowerCase();switch(t){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,o=n.length;o>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function r(){if("undefined"!==e.fileType&&"undefined"!==e.url&&"image"===e.fileType){var t=new Image;t.onload=function(){e.valid=!0,e.$apply()},t.onerror=function(){e.valid=!1,e.invalidType=e.fileType,e.$apply()},t.src=e.url}}function s(t){var n,a;return n=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===t.indexOf("://")&&(t="http://"+t),a=n.test(t),a&&"undefined"!=typeof e.fileType?(a=o(t,e.fileType),a||(e.invalidType=e.fileType)):e.invalidType="url",a&&r(),a}e.doValidation=!0,e.forcedValid=!1,e.valid=!0,e.invalidType="url",e.allowInitEmpty="undefined"!=typeof a.initEmpty,e.blur=function(){e.$emit("urlFieldBlur")},e.$watch("url",function(t){"undefined"!=typeof t&&null!==t&&(""!==t&&e.allowInitEmpty&&(e.allowInitEmpty=!1),e.doValidation&&!e.allowInitEmpty&&(e.valid=s(e.url)))}),e.$watch("valid",function(e){i&&(t.info("Calling $setValidity() on parent controller"),i.$setValidity("valid",e))}),e.$watch("doValidation",function(t){"undefined"!=typeof e.url&&(t?(e.forcedValid=!1,e.allowInitEmpty||(e.valid=s(e.url))):(e.forcedValid=!0,e.valid=!0))})}}}])}(),function(e){try{e=angular.module("risevision.widget.common.url-field")}catch(t){e=angular.module("risevision.widget.common.url-field",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div>\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url"> {{"url.validate.label" | translate}}\n    </label>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(e){return{restrict:"E",scope:{save:"&",cancel:"&",disableSave:"&"},template:e.get("_angular/widget-button-toolbar/widget-button-toolbar.html")}}])}(),function(e){try{e=angular.module("risevision.widget.common.widget-button-toolbar")}catch(t){e=angular.module("risevision.widget.common.widget-button-toolbar",[])}e.run(["$templateCache",function(e){"use strict";e.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="pull-right">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times icon-right"></i>\n  </button>\n</div>\n')}])}(),angular.module("risevision.widget.text.settings",["angularLoad","risevision.common.i18n","risevision.widget.common","risevision.widget.common.widget-button-toolbar","risevision.widget.common.tooltip","risevision.widget.common.scroll-setting","risevision.widget.common.url-field","ui.tinymce"]),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={};angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(e,t,n,a){e.settings={params:{},additionalParams:{}},e.alerts=[],e.getAdditionalParam=function(t,n){var a=e.settings.additionalParams[t];return angular.isUndefined(a)?n:a},e.setAdditionalParam=function(t,n){e.settings.additionalParams[t]=n},e.loadAdditionalParams=function(){n.getAdditionalParams().then(function(t){e.settings.additionalParams=t,e.$broadcast("loadAdditionalParams",t)},function(e){alert(e)})},e.setAdditionalParams=function(t,n){e.settings.additionalParams[t]=n},e.saveSettings=function(){e.alerts=[],e.$broadcast("collectAdditionalParams"),t.saveSettings(e.settings).then(function(){},function(t){e.alerts=t.alerts})},e.closeSettings=function(){a.closeSettings().then(function(){},function(t){e.alerts=t.alerts})},e.settings.params=n.getParams(),e.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(e,t){e.$watchCollection("alerts",function(e,n){e.length>0&&0===n.length&&$("body").animate({scrollTop:t.offset().top},"fast")})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(e,t,n){var a={getStorageUrlData:function(e){function a(e){return-1!==e.indexOf(t)?"file":-1!==e.indexOf(n)?"folder":null}function i(e){var t=e.split("risemedialibrary-");return t[1].slice(0,t[1].indexOf("/"))}var o,r,s,l,c={};if("file"===a(e))o=e.split(t)[1],o=decodeURIComponent(o.slice(o.indexOf("/")+1)),r=o.split("/"),c.companyId=i(e),c.fileName=r.pop(),c.folder=r.length>0?r.join("/"):"",""!==c.folder&&(c.folder+="/");else if("folder"===a(e)){s=e.split("?");for(var u=0;u<s.length;u++)if(l=s[u].split("="),"prefix"===l[0]&&"undefined"!=typeof l[1]&&""!==l[1]){c.companyId=i(e),c.folder=decodeURIComponent(l[1]),c.fileName="";break}}return c}};return a}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(e){return e.gadgets}]),angular.module("risevision.widget.common").factory("googleFontLoader",["$http","angularLoad",function(e,t){function n(){for(var e="",n="",a="",o=[],r=!1,s=",sans-serif;",l="//fonts.googleapis.com/css?family=",c=["Buda","Coda Caption","Open Sans Condensed","UnifrakturCook","Molle"],u=0;u<i.length;u++)e=i[u],-1===c.indexOf(e)&&(a=l+e,t.loadCSS(a),o.push(a),/\s/.test(e)&&(r=!0),n+=r?e+"='"+e+"'"+s:e+"="+e+s);return{fonts:n,urls:o}}var a={},i=[];return a.getGoogleFonts=function(){return 0===i.length?e.get("https://www.googleapis.com/webfonts/v1/webfonts?key=AIzaSyBXxVK_IOV7LNQMuVVo_l7ZvN53ejN86zY&sort=alpha",{cache:!0}).then(function(e){var t=null;if(e.data&&e.data.items){for(var a=0,o=e.data.items.length;o>a;a++)t=e.data.items[a],t.subsets&&1===t.subsets.length&&"khmer"===t.subsets[0].toLowerCase()||i.push(t.family);return n()}}):n()},a.getFontsUsed=function(e){var t=[];return angular.forEach(i,function(n){-1!==e.indexOf(n)&&t.push(n)}),t},a}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(e,t){var n=t.defer();e.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(e.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(e){var t={isImage:function(t){var n=e.defer(),a=new Image;return a.onload=function(){n.resolve(!0)},a.onerror=function(){n.resolve(!1)},a.src=t,n.promise}};return t}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(e,t,n,a){function i(e){var t=angular.copy(e);return delete t.params.id,delete t.params.companyId,delete t.params.rsW,delete t.params.rsH,t}this.saveSettings=function(o,r){var s=e.defer(),l=[],c="";o=i(o),r&&(l=r(o)),l.length>0&&(t.debug("Validation failed.",l),s.reject({alerts:l})),o.params.hasOwnProperty("layoutURL")&&(c+=o.params.layoutURL+"?",delete o.params.layoutURL),c+=a.encodeParams(o.params);var u=a.encodeAdditionalParams(o.additionalParams);return n.rpc.call("","rscmd_saveSettings",function(e){t.debug("encoded settings",JSON.stringify(e)),t.debug("Settings saved. ",o),s.resolve(e)},{params:c,additionalParams:u}),s.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(e,t,n,a,i,o){this.getAdditionalParams=function(){var i=e.defer(),r=o.additionalParams||{};return t.rpc.call("","rscmd_getAdditionalParams",function(e){e=e?a.parseAdditionalParams(e):{},n.debug("getAdditionalParams returns ",e),i.resolve($.extend(!0,r,e))}),i.promise},this.getParams=function(){var e=o.params||{};return angular.extend(e,a.parseParams(i.location.search))}}]).service("settingsParser",[function(){function e(e){return 0===e.indexOf("up_")?e.slice(3):null}this.parseAdditionalParams=function(e){return e?JSON.parse(e):{}},this.encodeAdditionalParams=function(e){return JSON.stringify(e)},this.encodeParams=function(e){var t=[];for(var n in e)if(e.hasOwnProperty(n)){var a;a="object"==typeof e[n]?JSON.stringify(e[n]):e[n],t.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return t.join("&")},this.parseParams=function(t){"?"===t[0]&&(t=t.slice(1));for(var n={},a=t.split("&"),i=0;i<a.length;i++){var o=a[i].split("="),r=e(decodeURIComponent(o[0]));if(r)try{n[r]=JSON.parse(decodeURIComponent(o[1]))}catch(s){n[r]=decodeURIComponent(o[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(e,t,n){this.closeSettings=function(){var t=e.defer();return n.rpc.call("","rscmd_closeSettings",function(){t.resolve(!0)}),t.promise}}]).value("defaultSettings",{}),function(e){"use strict";e.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(e,t){var n,a=e.defer(),i={get:function(){return n||(n=a.promise,t.google.visualization?a.resolve(t.google.visualization):t.google.setOnLoadCallback(function(){a.resolve(t.google.visualization)})),n}};return i}])}(angular),angular.module("risevision.widget.text.settings").controller("textSettingsController",["$scope","$rootScope","$log","$window","$timeout","googleFontLoader","FONT_SIZES","FONT_FAMILIES",function(e,t,n,a,i,o,r,s){function l(e,n){switch(n.command){case"FontName":if(m)return;if("custom"===n.value)return t.$broadcast("showCustom"),void 0}}function c(e,t){e.focus(),e.formatter.toggle("lineHeight",{value:t}),e.nodeChanged()}function u(e){var t,n,a=null;if(t=e.selection.getNode(),!m&&"SPAN"===t.nodeName&&w){if(a=e.dom.getStyle(t,"line-height"),!a){n=e.dom.getParents(t);for(var i=0;i<n.length;i+=1)if("SPAN"===n[i].nodeName&&e.dom.getStyle(n[i],"line-height")){a=e.dom.getStyle(n[i],"line-height");break}}a&&w.value(a.toString())}}function d(){e.tinymceOptions={plugins:"code colorpicker textcolor wordcount",skin_url:"//s3.amazonaws.com/rise-common/styles/tinymce/rise",font_formats:g(),formats:{fontsize:{inline:"span",split:!1,styles:{fontSize:"%value"}},lineHeight:{inline:"span",styles:{lineHeight:"%value"}},paragraph:{block:"p",styles:{margin:"0"}}},content_css:b,style_formats_merge:!0,fontsize_formats:r,min_height:175,menubar:!1,toolbar1:"fontselect fontsizeselect | forecolor backcolor | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist indent outdent lineheight | removeformat code",setup:function(t){t.addButton("lineheight",{type:"listbox",text:"Line Height",title:"Line Height",icon:!1,values:[{text:"Single",value:"1"},{text:"Double",value:"2"}],onselect:function(){c(t,this.value())},onPostRender:function(){w=this}}),t.on("init",function(){var n=document.querySelector(".mce-container-body").offsetWidth,a=x.getInt("rsW");a>n?document.querySelector(".mce-edit-area iframe").contentDocument.body.style.width=a+"px":document.querySelector(".mce-edit-area iframe").style.width=a+"px",p(t),m?(f(e.settings.additionalParams.customFonts.fonts),t.execCommand("FontName",!1,"verdana,geneva,sans-serif"),t.execCommand("FontSize",!1,"24px"),t.formatter.apply("paragraph"),t.formatter.register("lineHeight",{inline:"span",styles:{lineHeight:"%value"}}),w.value("2"),w.value("1"),c(t,"1")):(t.selection.select(t.getBody(),!0),t.selection.collapse(!1),y&&(t.execCommand("FontName",!1,y.replace(/'/g,"\\'").toLowerCase()+",sans-serif"),y="")),m=!1
}),t.on("ExecCommand",function(e){l(t,e)}),t.on("NodeChange",function(){u(t)})},init_instance_callback:function(e){var t=e.formatter.apply,n=e.formatter.remove;e.formatter.apply=function(n,a,i){var o={command:n,value:a.value};t(n,a,i),e.fire("ExecCommand",o)},e.formatter.remove=function(t,a,i){var o={command:t,value:a&&a.value?a.value:null};n(t,a,i),e.fire("ExecCommand",o)}}}}function p(t){var n=t.getDoc();e.settings.additionalParams.customFonts.fonts.length>0&&i(function a(){var t=n.styleSheets[0];t?angular.forEach(e.settings.additionalParams.customFonts.fonts,function(e){var n="font-family: "+e.family.replace(/'/g,"")+"; src: url('"+e.url.replace(/'/g,"\\'")+"');";t.addRule("@font-face",n)}):a()},200)}function f(e,t){function n(){t&&"function"==typeof t&&t()}Array.isArray(e)&&e.length>0?i(function a(){var t=document.styleSheets[0];t?angular.forEach(e,function(e){var n="font-family: "+e.family.replace(/'/g,"").toLowerCase()+"; src: url('"+e.url.replace(/'/g,"\\'")+"');";t.addRule("@font-face",n)}):a()},200):n()}function h(){var t="";return angular.forEach(e.settings.additionalParams.customFonts.fonts,function(e){t+=e.family+"="+e.family.replace(/'/g,"").toLowerCase()+",sans-serif;"}),t}function g(){return"Add Custom Font=custom;"+h()+s+v}var m=!0,v="",b=[],y="",w=null,x=new gadgets.Prefs;e.processFonts=function(){var t,n=document.createElement("div"),a="";n.innerHTML=e.settings.additionalParams.data,t=$(n),angular.forEach(t.find("span"),function(e){var t=$(e).css("font-family");t=t.replace(/[']/g,"").split(",")[0],-1===a.indexOf(t)&&(a+=t+",")}),e.settings.additionalParams.googleFonts=o.getFontsUsed(a),e.$parent.saveSettings()},e.$watch("tinymceOptions.font_formats",function(t){"undefined"!=typeof t&&(m||e.$broadcast("$tinymce:refresh"))}),e.$watch("settings.additionalParams.customFonts.fonts",function(e){"undefined"!=typeof e&&m&&o.getGoogleFonts().then(function(e){null!==e&&(v=e.fonts,b=e.urls,d())},function(e){n.warn(e),d()})}),e.$on("customFontLoaded",function(t,n){f([n]),y=n.family.replace(/'/g,""),e.settings.additionalParams.customFonts.fonts.push(n),e.tinymceOptions.font_formats=g()})}]).value("defaultSettings",{params:{},additionalParams:{data:"",customFonts:{formats:"",fonts:[]},googleFonts:[],scroll:{}}}),angular.module("risevision.widget.text.settings").directive("customFont",["$log",function(){return{restrict:"A",link:function(e,t){function n(){var t=null;return e.url?(t=decodeURI(e.url.trim()),t.split("/").pop().split(".")[0]):null}var a=$(t);e.url="",e.addFont=function(){var t,i=n();i&&(t=e.url.trim(),e.$emit("customFontLoaded",{family:i,url:t})),a.modal("hide")},e.$on("showCustom",function(){a.modal("show")})}}}]),angular.module("risevision.widget.text.settings").constant("FONT_FAMILIES","Andale Mono=andale mono,monospace;Arial=arial,helvetica,sans-serif;Arial Black=arial black,sans-serif;Book Antiqua=book antiqua,palatino,serif;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier,monospace;Georgia=georgia,palatino,serif;Helvetica=helvetica,arial,sans-serif;Impact=impact,sans-serif;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco,monospace;Times New Roman=times new roman,times,serif;Trebuchet MS=trebuchet ms,geneva,sans-serif;Verdana=verdana,geneva,sans-serif;Webdings=webdings;Wingdings=wingdings,zapf dingbats;").constant("FONT_SIZES","8px 9px 10px 11px 12px 14px 18px 24px 30px 36px 48px 60px 72px 96px");
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3NldHRpbmdzLm1pbi5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJHRyYW5zbGF0ZSIsImtleSIsInN0b3JhZ2VLZXkiLCJzdG9yYWdlIiwiZmFsbGJhY2tGcm9tSW5jb3JyZWN0U3RvcmFnZVZhbHVlIiwicHJlZmVycmVkIiwicHJlZmVycmVkTGFuZ3VhZ2UiLCJpc1N0cmluZyIsInVzZSIsInB1dCIsImdldCIsInByb3ZpZGVyIiwiJFNUT1JBR0VfS0VZIiwiJHByZWZlcnJlZExhbmd1YWdlIiwiJGxhbmd1YWdlS2V5QWxpYXNlcyIsIiRmYWxsYmFja0xhbmd1YWdlIiwiJGZhbGxiYWNrV2FzU3RyaW5nIiwiJHVzZXMiLCIkbmV4dExhbmciLCIkc3RvcmFnZUZhY3RvcnkiLCIkc3RvcmFnZVByZWZpeCIsIiRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSIsIiRpbnRlcnBvbGF0aW9uRmFjdG9yeSIsIiRsb2FkZXJGYWN0b3J5IiwiJGxvYWRlck9wdGlvbnMiLCIkbm90Rm91bmRJbmRpY2F0b3JMZWZ0IiwiJG5vdEZvdW5kSW5kaWNhdG9yUmlnaHQiLCJsb2FkZXJDYWNoZSIsIiR0cmFuc2xhdGlvblRhYmxlIiwiJGF2YWlsYWJsZUxhbmd1YWdlS2V5cyIsIiRzdG9yYWdlS2V5IiwiJGludGVycG9sYXRvckZhY3RvcmllcyIsIiRpbnRlcnBvbGF0aW9uU2FuaXRpemF0aW9uU3RyYXRlZ3kiLCIkY2xvYWtDbGFzc05hbWUiLCIkcG9zdENvbXBpbGluZ0VuYWJsZWQiLCJORVNURURfT0JKRUNUX0RFTElNSVRFUiIsInZlcnNpb24iLCJnZXRGaXJzdEJyb3dzZXJMYW5ndWFnZSIsImkiLCJsYW5ndWFnZSIsIm5hdiIsIndpbmRvdyIsIm5hdmlnYXRvciIsImJyb3dzZXJMYW5ndWFnZVByb3BlcnR5S2V5cyIsImlzQXJyYXkiLCJsYW5ndWFnZXMiLCJsZW5ndGgiLCJkaXNwbGF5TmFtZSIsImdldExvY2FsZSIsInNwbGl0Iiwiam9pbiIsImluZGV4T2YiLCJhcnJheSIsInNlYXJjaEVsZW1lbnQiLCJsZW4iLCJ0cmltIiwidGhpcyIsInJlcGxhY2UiLCJuZWdvdGlhdGVMb2NhbGUiLCJhdmFpbCIsImxvY2FsZSIsImxvd2VyY2FzZSIsIm4iLCJwdXNoIiwiYWxpYXMiLCJsYW5nS2V5QWxpYXMiLCJoYXNXaWxkY2FyZEtleSIsImhhc0V4YWN0S2V5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2xpY2UiLCJwYXJ0cyIsInRyYW5zbGF0aW9ucyIsImxhbmdLZXkiLCJ0cmFuc2xhdGlvblRhYmxlIiwiaXNPYmplY3QiLCJleHRlbmQiLCJmbGF0T2JqZWN0IiwiY2xvYWtDbGFzc05hbWUiLCJuYW1lIiwiZGF0YSIsInBhdGgiLCJyZXN1bHQiLCJwcmV2S2V5Iiwia2V5V2l0aFBhdGgiLCJrZXlXaXRoU2hvcnRQYXRoIiwidmFsIiwiY29uY2F0IiwiYWRkSW50ZXJwb2xhdGlvbiIsImZhY3RvcnkiLCJ1c2VNZXNzYWdlRm9ybWF0SW50ZXJwb2xhdGlvbiIsInVzZUludGVycG9sYXRpb24iLCJ1c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kiLCJ2YWx1ZSIsInNldHVwUHJlZmVycmVkTGFuZ3VhZ2UiLCJ0cmFuc2xhdGlvbk5vdEZvdW5kSW5kaWNhdG9yIiwiaW5kaWNhdG9yIiwidHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnQiLCJ0cmFuc2xhdGlvbk5vdEZvdW5kSW5kaWNhdG9yUmlnaHQiLCJmYWxsYmFja0xhbmd1YWdlIiwiZmFsbGJhY2tTdGFjayIsIkVycm9yIiwidXNlVXJsTG9hZGVyIiwidXJsIiwib3B0aW9ucyIsInVzZUxvYWRlciIsInVzZVN0YXRpY0ZpbGVzTG9hZGVyIiwibG9hZGVyRmFjdG9yeSIsInVzZUxvY2FsU3RvcmFnZSIsInVzZVN0b3JhZ2UiLCJ1c2VDb29raWVTdG9yYWdlIiwic3RvcmFnZUZhY3RvcnkiLCJzdG9yYWdlUHJlZml4IiwicHJlZml4IiwidXNlTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckxvZyIsInVzZU1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIiLCJ1c2VQb3N0Q29tcGlsaW5nIiwiZGV0ZXJtaW5lUHJlZmVycmVkTGFuZ3VhZ2UiLCJmbiIsImlzRnVuY3Rpb24iLCJyZWdpc3RlckF2YWlsYWJsZUxhbmd1YWdlS2V5cyIsImxhbmd1YWdlS2V5cyIsImFsaWFzZXMiLCJ1c2VMb2FkZXJDYWNoZSIsImNhY2hlIiwidW5kZWZpbmVkIiwiJGdldCIsIiRsb2ciLCIkaW5qZWN0b3IiLCIkcm9vdFNjb3BlIiwiJHEiLCJTdG9yYWdlIiwiZmFsbGJhY2tJbmRleCIsInN0YXJ0RmFsbGJhY2tJdGVyYXRpb24iLCJkZWZhdWx0SW50ZXJwb2xhdG9yIiwicGVuZGluZ0xvYWRlciIsImludGVycG9sYXRvckhhc2hNYXAiLCJsYW5nUHJvbWlzZXMiLCJ0cmFuc2xhdGlvbklkIiwiaW50ZXJwb2xhdGVQYXJhbXMiLCJpbnRlcnBvbGF0aW9uSWQiLCJ0cmFuc2xhdGVBbGwiLCJ0cmFuc2xhdGlvbklkcyIsInJlc3VsdHMiLCJwcm9taXNlcyIsInRyYW5zbGF0ZSIsImRlZmVycmVkIiwiZGVmZXIiLCJyZWdhcmRsZXNzIiwicmVzb2x2ZSIsInRoZW4iLCJwcm9taXNlIiwiYyIsImFsbCIsImFwcGx5IiwicHJvbWlzZVRvV2FpdEZvciIsImluZGV4IiwiZGV0ZXJtaW5lVHJhbnNsYXRpb24iLCJyZWplY3QiLCJhcHBseU5vdEZvdW5kSW5kaWNhdG9ycyIsInVzZUxhbmd1YWdlIiwiJGVtaXQiLCJzZXRMb2NhbGUiLCJmb3JFYWNoIiwiaW50ZXJwb2xhdG9yIiwiaWQiLCJsb2FkQXN5bmMiLCJsb2FkZXJPcHRpb25zIiwiJGh0dHAiLCJ0YWJsZSIsImludGVycG9sYXRvckZhY3RvcnkiLCJnZXRJbnRlcnBvbGF0aW9uSWRlbnRpZmllciIsImdldFRyYW5zbGF0aW9uVGFibGUiLCJnZXRGYWxsYmFja1RyYW5zbGF0aW9uIiwiSW50ZXJwb2xhdG9yIiwiaW50ZXJwb2xhdGUiLCJnZXRGYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudCIsInRyYW5zbGF0ZUJ5SGFuZGxlciIsInJlc3VsdFN0cmluZyIsInJlc29sdmVGb3JGYWxsYmFja0xhbmd1YWdlIiwiZmFsbGJhY2tMYW5ndWFnZUluZGV4IiwicmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2VJbnN0YW50IiwiZmFsbGJhY2tUcmFuc2xhdGlvbiIsImZhbGxiYWNrVHJhbnNsYXRpb25JbnN0YW50IiwidHJhbnNsYXRpb24iLCJzdWJzdHIiLCJtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyVHJhbnNsYXRpb24iLCJfdHJhbnNsYXRpb25JZCIsImRldGVybWluZVRyYW5zbGF0aW9uSW5zdGFudCIsInVzZUZhbGxiYWNrTGFuZ3VhZ2UiLCJsYW5nS2V5UG9zaXRpb24iLCJwcm9wb3NlZExhbmd1YWdlIiwiYWxpYXNlZEtleSIsImlzUG9zdENvbXBpbGluZ0VuYWJsZWQiLCJyZWZyZXNoIiwidGFibGVzIiwibG9hZGluZ0tleXMiLCJ0YWJsZURhdGEiLCJpbnN0YW50IiwiaXNVbmRlZmluZWQiLCJwb3NzaWJsZUxhbmdLZXlzIiwiaiIsImQiLCJwb3NzaWJsZUxhbmdLZXkiLCJ2ZXJzaW9uSW5mbyIsImVxdWFscyIsInByb2Nlc3NBc3luY1Jlc3VsdCIsIiRpbnRlcnBvbGF0ZSIsIiRsb2NhbGUiLCIkdHJhbnNsYXRlSW50ZXJwb2xhdG9yIiwiJGlkZW50aWZpZXIiLCIkc2FuaXRpemVWYWx1ZVN0cmF0ZWd5Iiwic2FuaXRpemVWYWx1ZVN0cmF0ZWdpZXMiLCJlc2NhcGVkIiwicGFyYW1zIiwiZWxlbWVudCIsInRleHQiLCJodG1sIiwic2FuaXRpemVQYXJhbXMiLCJzdHJpbmciLCJjb25zdGFudCIsImRpcmVjdGl2ZSIsIiRjb21waWxlIiwiJHBhcnNlIiwicmVzdHJpY3QiLCJzY29wZSIsImNvbXBpbGUiLCJ0RWxlbWVudCIsInRBdHRyIiwidHJhbnNsYXRlVmFsdWVzRXhpc3QiLCJ0cmFuc2xhdGVWYWx1ZXMiLCJ0cmFuc2xhdGVJbnRlcnBvbGF0aW9uIiwidHJhbnNsYXRlVmFsdWVFeGlzdCIsIm91dGVySFRNTCIsIm1hdGNoIiwiaW50ZXJwb2xhdGVSZWdFeHAiLCJzdGFydFN5bWJvbCIsImVuZFN5bWJvbCIsIndhdGNoZXJSZWdFeHAiLCJpRWxlbWVudCIsImlBdHRyIiwicHJlVGV4dCIsInBvc3RUZXh0Iiwib2JzZXJ2ZUVsZW1lbnRUcmFuc2xhdGlvbiIsImlzRGVmaW5lZCIsImludGVycG9sYXRlTWF0Y2hlcyIsIiRwYXJlbnQiLCJ3YXRjaGVyTWF0Y2hlcyIsIiR3YXRjaCIsIm5ld1ZhbHVlIiwidXBkYXRlVHJhbnNsYXRpb25zIiwib2JzZXJ2ZUF0dHJpYnV0ZVRyYW5zbGF0aW9uIiwidHJhbnNsYXRlQXR0ciIsIiRvYnNlcnZlIiwiZGVmYXVsdFRleHQiLCJvYnNlcnZlVmFsdWVBdHRyaWJ1dGUiLCJhdHRyTmFtZSIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyIiwidXBkYXRlVHJhbnNsYXRpb24iLCJhcHBseVRyYW5zbGF0aW9uIiwic3VjY2Vzc2Z1bCIsImdsb2JhbGx5RW5hYmxlZCIsImxvY2FsbHlEZWZpbmVkIiwidHJhbnNsYXRlQ29tcGlsZSIsImxvY2FsbHlFbmFibGVkIiwiY29udGVudHMiLCIkYXR0ciIsInVuYmluZCIsIiRvbiIsImFwcGx5Q2xvYWsiLCJhZGRDbGFzcyIsInJlbW92ZUNsb2FrIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVMaXN0ZW5lciIsInRyYW5zbGF0ZUNsb2FrIiwiZmlsdGVyIiwidHJhbnNsYXRlRmlsdGVyIiwiaW50ZXJwb2xhdGlvbiIsIiRzdGF0ZWZ1bCIsIiRTYW5pdGl6ZVByb3ZpZGVyIiwiJCRzYW5pdGl6ZVVyaSIsImJ1ZiIsImh0bWxQYXJzZXIiLCJodG1sU2FuaXRpemVXcml0ZXIiLCJ1cmkiLCJpc0ltYWdlIiwidGVzdCIsInNhbml0aXplVGV4dCIsImNoYXJzIiwid3JpdGVyIiwibm9vcCIsIm1ha2VNYXAiLCJzdHIiLCJvYmoiLCJpdGVtcyIsImhhbmRsZXIiLCJwYXJzZVN0YXJ0VGFnIiwidGFnIiwidGFnTmFtZSIsInJlc3QiLCJ1bmFyeSIsImJsb2NrRWxlbWVudHMiLCJzdGFjayIsImxhc3QiLCJpbmxpbmVFbGVtZW50cyIsInBhcnNlRW5kVGFnIiwib3B0aW9uYWxFbmRUYWdFbGVtZW50cyIsInZvaWRFbGVtZW50cyIsImF0dHJzIiwiQVRUUl9SRUdFWFAiLCJkb3VibGVRdW90ZWRWYWx1ZSIsInNpbmdsZVF1b3RlZFZhbHVlIiwidW5xdW90ZWRWYWx1ZSIsImRlY29kZUVudGl0aWVzIiwic3RhcnQiLCJwb3MiLCJlbmQiLCJzcGVjaWFsRWxlbWVudHMiLCJSZWdFeHAiLCJDT01NRU5UX1JFR0VYUCIsIkNEQVRBX1JFR0VYUCIsImxhc3RJbmRleE9mIiwiY29tbWVudCIsInN1YnN0cmluZyIsIkRPQ1RZUEVfUkVHRVhQIiwiQkVHSU5HX0VORF9UQUdFX1JFR0VYUCIsIkVORF9UQUdfUkVHRVhQIiwiQkVHSU5fVEFHX1JFR0VYUCIsIlNUQVJUX1RBR19SRUdFWFAiLCIkc2FuaXRpemVNaW5FcnIiLCJoaWRkZW5QcmUiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImVuY29kZUVudGl0aWVzIiwiU1VSUk9HQVRFX1BBSVJfUkVHRVhQIiwiaGkiLCJjaGFyQ29kZUF0IiwibG93IiwiTk9OX0FMUEhBTlVNRVJJQ19SRUdFWFAiLCJ1cmlWYWxpZGF0b3IiLCJpZ25vcmUiLCJvdXQiLCJiaW5kIiwidmFsaWRFbGVtZW50cyIsImxrZXkiLCJ2YWxpZEF0dHJzIiwidXJpQXR0cnMiLCIkJG1pbkVyciIsIm9wdGlvbmFsRW5kVGFnQmxvY2tFbGVtZW50cyIsIm9wdGlvbmFsRW5kVGFnSW5saW5lRWxlbWVudHMiLCJzdmdFbGVtZW50cyIsImh0bWxBdHRycyIsInN2Z0F0dHJzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiJHNhbml0aXplIiwiTElOS1lfVVJMX1JFR0VYUCIsIk1BSUxUT19SRUdFWFAiLCJ0YXJnZXQiLCJhZGRUZXh0IiwiYWRkTGluayIsInJhdyIsInN1ZmZpeCIsIm1ldGhvZCIsInN1Y2Nlc3MiLCJlcnJvciIsImxvYWRUcmFuc2xhdGlvbkZpbGUiLCJ0b0xvd2VyQ2FzZSIsIm9wdHMiLCJjb25maWciLCIkdHJhbnNsYXRlUHJvdmlkZXIiLCJMT0NBTEVTX1BSRUZJWCIsIkxPQ0FMRVNfU1VGSVgiLCIkIiwiUGx1Z2luIiwib3B0aW9uIiwiZWFjaCIsIiR0aGlzIiwiQWZmaXgiLCJERUZBVUxUUyIsIiR0YXJnZXQiLCJvbiIsInByb3h5IiwiY2hlY2tQb3NpdGlvbiIsImNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wIiwiJGVsZW1lbnQiLCJhZmZpeGVkIiwidW5waW4iLCJwaW5uZWRPZmZzZXQiLCJWRVJTSU9OIiwiUkVTRVQiLCJvZmZzZXQiLCJnZXRQaW5uZWRPZmZzZXQiLCJzY3JvbGxUb3AiLCJwb3NpdGlvbiIsInRvcCIsInNldFRpbWVvdXQiLCJpcyIsInNjcm9sbEhlaWdodCIsImhlaWdodCIsIm9mZnNldFRvcCIsIm9mZnNldEJvdHRvbSIsImJvdHRvbSIsImFmZml4IiwiY3NzIiwiYWZmaXhUeXBlIiwiZSIsIkV2ZW50IiwidHJpZ2dlciIsImlzRGVmYXVsdFByZXZlbnRlZCIsIm9sZCIsIkNvbnN0cnVjdG9yIiwibm9Db25mbGljdCIsIiRzcHkiLCJqUXVlcnkiLCJBbGVydCIsImRpc21pc3MiLCJlbCIsImNsb3NlIiwicmVtb3ZlRWxlbWVudCIsImRldGFjaCIsInJlbW92ZSIsInNlbGVjdG9yIiwicHJldmVudERlZmF1bHQiLCJoYXNDbGFzcyIsInBhcmVudCIsInN1cHBvcnQiLCJ0cmFuc2l0aW9uIiwib25lIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJhbGVydCIsIkJ1dHRvbiIsInRvZ2dsZSIsInNldFN0YXRlIiwiaXNMb2FkaW5nIiwibG9hZGluZ1RleHQiLCJzdGF0ZSIsIiRlbCIsInJlc2V0VGV4dCIsInJlbW92ZUF0dHIiLCJjaGFuZ2VkIiwiY2xvc2VzdCIsIiRpbnB1dCIsImZpbmQiLCJwcm9wIiwidG9nZ2xlQ2xhc3MiLCJidXR0b24iLCIkYnRuIiwiQ2Fyb3VzZWwiLCJhY3Rpb24iLCJzbGlkZSIsInRvIiwiaW50ZXJ2YWwiLCJwYXVzZSIsImN5Y2xlIiwia2V5ZG93biIsIiRpbmRpY2F0b3JzIiwicGF1c2VkIiwic2xpZGluZyIsIiRhY3RpdmUiLCIkaXRlbXMiLCJ3cmFwIiwid2hpY2giLCJwcmV2IiwibmV4dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsImdldEl0ZW1JbmRleCIsIml0ZW0iLCJjaGlsZHJlbiIsInRoYXQiLCJhY3RpdmVJbmRleCIsInR5cGUiLCIkbmV4dCIsImlzQ3ljbGluZyIsImRpcmVjdGlvbiIsImZhbGxiYWNrIiwicmVsYXRlZFRhcmdldCIsInNsaWRlRXZlbnQiLCIkbmV4dEluZGljYXRvciIsInNsaWRFdmVudCIsIm9mZnNldFdpZHRoIiwiY2Fyb3VzZWwiLCJocmVmIiwic2xpZGVJbmRleCIsIiRjYXJvdXNlbCIsIkNvbGxhcHNlIiwidHJhbnNpdGlvbmluZyIsImRpbWVuc2lvbiIsImhhc1dpZHRoIiwic2hvdyIsInN0YXJ0RXZlbnQiLCJhY3RpdmVzIiwiaGFzRGF0YSIsImNvbXBsZXRlIiwic2Nyb2xsU2l6ZSIsImNhbWVsQ2FzZSIsImhpZGUiLCJvZmZzZXRIZWlnaHQiLCJjb2xsYXBzZSIsIm5vdCIsImNsZWFyTWVudXMiLCJiYWNrZHJvcCIsImdldFBhcmVudCIsIkRyb3Bkb3duIiwiaXNBY3RpdmUiLCJkb2N1bWVudEVsZW1lbnQiLCJpbnNlcnRBZnRlciIsImtleUNvZGUiLCJzdG9wUHJvcGFnYXRpb24iLCJkZXNjIiwiZXEiLCJkcm9wZG93biIsIlRhYiIsIiR1bCIsInByZXZpb3VzIiwiYWN0aXZhdGUiLCJjb250YWluZXIiLCJjYWxsYmFjayIsInRhYiIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc0VuZEV2ZW50TmFtZXMiLCJXZWJraXRUcmFuc2l0aW9uIiwiTW96VHJhbnNpdGlvbiIsIk9UcmFuc2l0aW9uIiwic3R5bGUiLCJkdXJhdGlvbiIsImNhbGxlZCIsImV2ZW50Iiwic3BlY2lhbCIsImJzVHJhbnNpdGlvbkVuZCIsImJpbmRUeXBlIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwiaGFuZGxlT2JqIiwiYXJndW1lbnRzIiwiU2Nyb2xsU3B5IiwicHJvY2VzcyIsIiRib2R5IiwiJHNjcm9sbEVsZW1lbnQiLCJvZmZzZXRzIiwidGFyZ2V0cyIsImFjdGl2ZVRhcmdldCIsImdldFNjcm9sbEhlaWdodCIsIk1hdGgiLCJtYXgiLCJvZmZzZXRNZXRob2QiLCJvZmZzZXRCYXNlIiwiaXNXaW5kb3ciLCJzZWxmIiwibWFwIiwiJGhyZWYiLCJzb3J0IiwiYSIsImIiLCJtYXhTY3JvbGwiLCJwYXJlbnRzVW50aWwiLCJhY3RpdmUiLCJwYXJlbnRzIiwic2Nyb2xsc3B5IiwiX3JlbGF0ZWRUYXJnZXQiLCJNb2RhbCIsImJvZHkiLCIkYmFja2Ryb3AiLCJpc1Nob3duIiwic2Nyb2xsYmFyV2lkdGgiLCJyZW1vdGUiLCJsb2FkIiwia2V5Ym9hcmQiLCJjaGVja1Njcm9sbGJhciIsInNldFNjcm9sbGJhciIsImVzY2FwZSIsImFwcGVuZFRvIiwiZW5mb3JjZUZvY3VzIiwicmVzZXRTY3JvbGxiYXIiLCJvZmYiLCJoaWRlTW9kYWwiLCJoYXMiLCJyZW1vdmVCYWNrZHJvcCIsImFuaW1hdGUiLCJkb0FuaW1hdGUiLCJjdXJyZW50VGFyZ2V0IiwiZm9jdXMiLCJjYWxsYmFja1JlbW92ZSIsImNsaWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsIm1lYXN1cmVTY3JvbGxiYXIiLCJib2R5UGFkIiwicGFyc2VJbnQiLCJzY3JvbGxEaXYiLCJjbGFzc05hbWUiLCJhcHBlbmQiLCJyZW1vdmVDaGlsZCIsIm1vZGFsIiwic2hvd0V2ZW50IiwiVG9vbHRpcCIsImVuYWJsZWQiLCJ0aW1lb3V0IiwiaG92ZXJTdGF0ZSIsImluaXQiLCJhbmltYXRpb24iLCJwbGFjZW1lbnQiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJ2aWV3cG9ydCIsInBhZGRpbmciLCJnZXRPcHRpb25zIiwiJHZpZXdwb3J0IiwidHJpZ2dlcnMiLCJldmVudEluIiwiZXZlbnRPdXQiLCJlbnRlciIsImxlYXZlIiwiX29wdGlvbnMiLCJmaXhUaXRsZSIsImdldERlZmF1bHRzIiwiZ2V0RGVsZWdhdGVPcHRpb25zIiwiZGVmYXVsdHMiLCJjb25zdHJ1Y3RvciIsImNsZWFyVGltZW91dCIsImhhc0NvbnRlbnQiLCJpbkRvbSIsImNvbnRhaW5zIiwiJHRpcCIsInRpcCIsInRpcElkIiwiZ2V0VUlEIiwic2V0Q29udGVudCIsImF1dG9Ub2tlbiIsImF1dG9QbGFjZSIsImxlZnQiLCJkaXNwbGF5IiwiZ2V0UG9zaXRpb24iLCJhY3R1YWxXaWR0aCIsImFjdHVhbEhlaWdodCIsIm9yZ1BsYWNlbWVudCIsInBhcmVudERpbSIsInNjcm9sbCIsInJpZ2h0Iiwid2lkdGgiLCJjYWxjdWxhdGVkT2Zmc2V0IiwiZ2V0Q2FsY3VsYXRlZE9mZnNldCIsImFwcGx5UGxhY2VtZW50IiwibWFyZ2luVG9wIiwibWFyZ2luTGVmdCIsImlzTmFOIiwic2V0T2Zmc2V0IiwidXNpbmciLCJwcm9wcyIsInJvdW5kIiwiZGVsdGEiLCJnZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEiLCJhcnJvd0RlbHRhIiwiYXJyb3dQb3NpdGlvbiIsImFycm93T2Zmc2V0UG9zaXRpb24iLCJyZXBsYWNlQXJyb3ciLCJhcnJvdyIsImdldFRpdGxlIiwiJGUiLCJpc0JvZHkiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvdXRlcldpZHRoIiwib3V0ZXJIZWlnaHQiLCJ2aWV3cG9ydFBhZGRpbmciLCJ2aWV3cG9ydERpbWVuc2lvbnMiLCJ0b3BFZGdlT2Zmc2V0IiwiYm90dG9tRWRnZU9mZnNldCIsImxlZnRFZGdlT2Zmc2V0IiwicmlnaHRFZGdlT2Zmc2V0IiwibyIsInJhbmRvbSIsImdldEVsZW1lbnRCeUlkIiwiJGFycm93IiwidmFsaWRhdGUiLCJwYXJlbnROb2RlIiwiZW5hYmxlIiwiZGlzYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJkZXN0cm95IiwicmVtb3ZlRGF0YSIsInRvb2x0aXAiLCJQb3BvdmVyIiwiY29udGVudCIsImdldENvbnRlbnQiLCJlbXB0eSIsInBvcG92ZXIiLCIkYW5pbWF0ZSIsImxpbmsiLCJleHBhbmQiLCJleHBhbmREb25lIiwiY29sbGFwc2VEb25lIiwic2hvdWxkQ29sbGFwc2UiLCJjbG9zZU90aGVycyIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCIkYXR0cnMiLCJhY2NvcmRpb25Db25maWciLCJncm91cHMiLCJvcGVuR3JvdXAiLCIkZXZhbCIsImdyb3VwIiwiaXNPcGVuIiwiYWRkR3JvdXAiLCJncm91cFNjb3BlIiwicmVtb3ZlR3JvdXAiLCJzcGxpY2UiLCJjb250cm9sbGVyQXMiLCJ0cmFuc2NsdWRlIiwidGVtcGxhdGVVcmwiLCJyZXF1aXJlIiwiaGVhZGluZyIsImlzRGlzYWJsZWQiLCJzZXRIZWFkaW5nIiwiYWNjb3JkaW9uQ3RybCIsIm9wZW5DbGFzcyIsInBhbmVsQ2xhc3MiLCJ0b2dnbGVPcGVuIiwiJGV2ZW50IiwiYWNjb3JkaW9uR3JvdXBDdHJsIiwiYWNjb3JkaW9uVHJhbnNjbHVkZSIsImNsb3NlYWJsZSIsIiR0aW1lb3V0IiwiYWxlcnRDdHJsIiwiZGlzbWlzc09uVGltZW91dCIsIiRiaW5kSHRtbFVuc2FmZVN1cHByZXNzRGVwcmVjYXRlZCIsIndhcm4iLCJiaW5kSHRtbFVuc2FmZSIsImFjdGl2ZUNsYXNzIiwidG9nZ2xlRXZlbnQiLCJidXR0b25Db25maWciLCJjdHJscyIsImJ1dHRvbnNDdHJsIiwibmdNb2RlbEN0cmwiLCIkcmVuZGVyIiwiJG1vZGVsVmFsdWUiLCJidG5SYWRpbyIsImRpc2FibGVkIiwidW5jaGVja2FibGUiLCIkYXBwbHkiLCIkc2V0Vmlld1ZhbHVlIiwiJGRvY3VtZW50IiwiZ2V0VHJ1ZVZhbHVlIiwiZ2V0Q2hlY2tib3hWYWx1ZSIsImJ0bkNoZWNrYm94VHJ1ZSIsImdldEZhbHNlVmFsdWUiLCJidG5DaGVja2JveEZhbHNlIiwiYXR0cmlidXRlVmFsdWUiLCJkZWZhdWx0VmFsdWUiLCJhY3RpdmVFbGVtZW50IiwiJGludGVydmFsIiwiZ29OZXh0IiwiZGVzdHJveWVkIiwiY3VycmVudFNsaWRlIiwibm9UcmFuc2l0aW9uIiwiJGN1cnJlbnRUcmFuc2l0aW9uIiwic2xpZGVzIiwiU0xJREVfRElSRUNUSU9OIiwiTkVXX0FOSU1BVEUiLCJwaGFzZSIsImN1cnJlbnRJbmRleCIsInJlc3RhcnRUaW1lciIsImdldFNsaWRlQnlJbmRleCIsInJlc2V0VGltZXIiLCJjdXJyZW50SW50ZXJ2YWwiLCJ0aW1lckZuIiwiY2FuY2VsIiwiaXNQbGF5aW5nIiwibWlub3IiLCJOT19UUkFOU0lUSU9OIiwic2VsZWN0IiwibmV4dFNsaWRlIiwibmV4dEluZGV4IiwiaW5kZXhPZlNsaWRlIiwiZ2V0Q3VycmVudEluZGV4IiwibmV3SW5kZXgiLCJub1dyYXAiLCJwbGF5Iiwibm9QYXVzZSIsImFkZFNsaWRlIiwicmVtb3ZlU2xpZGUiLCJhY3R1YWwiLCJjYXJvdXNlbEN0cmwiLCIkYW5pbWF0ZUNzcyIsImJlZm9yZUFkZENsYXNzIiwiZG9uZSIsInN0b3BwZWQiLCJkaXJlY3Rpb25DbGFzcyIsInJlbW92ZUNsYXNzRm4iLCJiZWZvcmVSZW1vdmVDbGFzcyIsInNlcnZpY2UiLCJvcmRlckJ5RmlsdGVyIiwiY3JlYXRlUGFyc2VyIiwiZm9ybWF0IiwicmVnZXgiLCJmb3JtYXRDb2RlVG9SZWdleCIsImNvZGUiLCJpc1ZhbGlkIiwieWVhciIsIm1vbnRoIiwiZGF0ZSIsIlNQRUNJQUxfQ0hBUkFDVEVSU19SRUdFWFAiLCJwYXJzZXJzIiwieXl5eSIsInl5IiwieSIsIk1NTU0iLCJEQVRFVElNRV9GT1JNQVRTIiwiTU9OVEgiLCJNTU0iLCJTSE9SVE1PTlRIIiwiTU0iLCJNIiwiZGQiLCJFRUVFIiwiREFZIiwiRUVFIiwiU0hPUlREQVkiLCJISCIsImhvdXJzIiwiaGgiLCJIIiwiaCIsIm1tIiwibWludXRlcyIsIm0iLCJzc3MiLCJtaWxsaXNlY29uZHMiLCJzcyIsInNlY29uZHMiLCJzIiwiQU1QTVMiLCJwYXJzZSIsImlucHV0IiwiYmFzZURhdGUiLCJwYXJzZXIiLCJmaWVsZHMiLCJkdCIsImlzRGF0ZSIsImdldFRpbWUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJtYXBwZXIiLCJEYXRlIiwiJHdpbmRvdyIsImdldFN0eWxlIiwiY3NzcHJvcCIsImN1cnJlbnRTdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJpc1N0YXRpY1Bvc2l0aW9uZWQiLCJwYXJlbnRPZmZzZXRFbCIsImRvY0RvbUVsIiwib2Zmc2V0UGFyZW50IiwiZWxCQ1IiLCJvZmZzZXRQYXJlbnRCQ1IiLCJvZmZzZXRQYXJlbnRFbCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxMZWZ0IiwiYm91bmRpbmdDbGllbnRSZWN0IiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsInBvc2l0aW9uRWxlbWVudHMiLCJob3N0RWwiLCJ0YXJnZXRFbCIsInBvc2l0aW9uU3RyIiwiYXBwZW5kVG9Cb2R5IiwiaG9zdEVsUG9zIiwidGFyZ2V0RWxXaWR0aCIsInRhcmdldEVsSGVpZ2h0IiwidGFyZ2V0RWxQb3MiLCJwb3NpdGlvblN0clBhcnRzIiwicG9zMCIsInBvczEiLCJzaGlmdFdpZHRoIiwiY2VudGVyIiwic2hpZnRIZWlnaHQiLCJmb3JtYXREYXkiLCJmb3JtYXRNb250aCIsImZvcm1hdFllYXIiLCJmb3JtYXREYXlIZWFkZXIiLCJmb3JtYXREYXlUaXRsZSIsImZvcm1hdE1vbnRoVGl0bGUiLCJkYXRlcGlja2VyTW9kZSIsIm1pbk1vZGUiLCJtYXhNb2RlIiwic2hvd1dlZWtzIiwic3RhcnRpbmdEYXkiLCJ5ZWFyUmFuZ2UiLCJtaW5EYXRlIiwibWF4RGF0ZSIsInNob3J0Y3V0UHJvcGFnYXRpb24iLCJkYXRlRmlsdGVyIiwiZGF0ZXBpY2tlckNvbmZpZyIsIiRkYXRlcGlja2VyU3VwcHJlc3NFcnJvciIsIm1vZGVzIiwicmVmcmVzaFZpZXciLCJ1bmlxdWVJZCIsIiRpZCIsImZsb29yIiwiaW5pdERhdGUiLCJhY3RpdmVEYXRlIiwiJGlzRW1wdHkiLCIkaW52YWxpZCIsImRhdGVPYmplY3QiLCJjb21wYXJlIiwiYWN0aXZlRGF0ZUlkIiwidWlkIiwibmdNb2RlbEN0cmxfIiwicmVuZGVyIiwiJHZpZXdWYWx1ZSIsIl9yZWZyZXNoVmlldyIsIiRzZXRWYWxpZGl0eSIsImNyZWF0ZURhdGVPYmplY3QiLCJtb2RlbCIsImxhYmVsIiwic2VsZWN0ZWQiLCJjdXJyZW50IiwiY3VzdG9tQ2xhc3MiLCJkYXRlRGlzYWJsZWQiLCJtb2RlIiwiYXJyIiwic2l6ZSIsImFycmF5cyIsImZpeFRpbWVab25lIiwic2V0SG91cnMiLCJzZXRGdWxsWWVhciIsIm1vdmUiLCJzdGVwIiwieWVhcnMiLCJtb250aHMiLCJ0b2dnbGVNb2RlIiwia2V5cyIsMTMsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsImZvY3VzRWxlbWVudCIsImV2dCIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiY3RybEtleSIsImhhbmRsZUtleURvd24iLCJkYXRlcGlja2VyQ3RybCIsImN0cmwiLCJnZXREYXlzSW5Nb250aCIsIkRBWVNfSU5fTU9OVEgiLCJnZXREYXRlcyIsInN0YXJ0RGF0ZSIsImRhdGVzIiwiQXJyYXkiLCJzZXREYXRlIiwiZ2V0SVNPODYwMVdlZWtOdW1iZXIiLCJjaGVja0RhdGUiLCJnZXREYXkiLCJ0aW1lIiwic2V0TW9udGgiLCJmaXJzdERheU9mTW9udGgiLCJkaWZmZXJlbmNlIiwibnVtRGlzcGxheWVkRnJvbVByZXZpb3VzTW9udGgiLCJmaXJzdERhdGUiLCJkYXlzIiwic2Vjb25kYXJ5IiwibGFiZWxzIiwiYWJiciIsImZ1bGwiLCJyb3dzIiwid2Vla051bWJlcnMiLCJ0aHVyc2RheUluZGV4IiwibnVtV2Vla3MiLCJjdXJXZWVrIiwiZGF0ZTEiLCJkYXRlMiIsIm1pbiIsImdldFN0YXJ0aW5nWWVhciIsInJhbmdlIiwiZGF0ZXBpY2tlclBvcHVwIiwiZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmwiLCJkYXRlcGlja2VyVGVtcGxhdGVVcmwiLCJodG1sNVR5cGVzIiwiZGF0ZXRpbWUtbG9jYWwiLCJjdXJyZW50VGV4dCIsImNsZWFyVGV4dCIsImNsb3NlVGV4dCIsImNsb3NlT25EYXRlU2VsZWN0aW9uIiwic2hvd0J1dHRvbkJhciIsIm9uT3BlbkZvY3VzIiwiJHBvc2l0aW9uIiwiZGF0ZVBhcnNlciIsImRhdGVwaWNrZXJQb3B1cENvbmZpZyIsIm5nTW9kZWwiLCJjYW1lbHRvRGFzaCIsIiQxIiwicGFyc2VEYXRlIiwidmlld1ZhbHVlIiwiaXNOdW1iZXIiLCJkYXRlRm9ybWF0IiwidmFsaWRhdG9yIiwibW9kZWxWYWx1ZSIsIm5nUmVxdWlyZWQiLCJkYXRlcGlja2VyQXBwZW5kVG9Cb2R5IiwiZ2V0VGV4dCIsIndhdGNoRGF0YSIsImlzSHRtbDVEYXRlSW5wdXQiLCJuZXdEYXRlRm9ybWF0IiwicG9wdXBFbCIsIm5nLW1vZGVsIiwibmctY2hhbmdlIiwidGVtcGxhdGUtdXJsIiwiZGF0ZXBpY2tlckVsIiwiZGF0ZXBpY2tlck9wdGlvbnMiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJhc3NpZ24iLCJvbGR2YWx1ZSIsIiRmb3JtYXR0ZXJzIiwiJCRwYXJzZXJOYW1lIiwiJHZhbGlkYXRvcnMiLCIkcGFyc2VycyIsInVuc2hpZnQiLCJkYXRlU2VsZWN0aW9uIiwiJHZpZXdDaGFuZ2VMaXN0ZW5lcnMiLCJkb2N1bWVudENsaWNrQmluZCIsImlucHV0S2V5ZG93bkJpbmQiLCIkYnJvYWRjYXN0IiwidG9kYXkiLCIkcG9wdXAiLCJhZnRlciIsIiQkcGhhc2UiLCJvcGVuU2NvcGUiLCJvcGVuIiwiZHJvcGRvd25TY29wZSIsImNsb3NlRHJvcGRvd24iLCJrZXliaW5kRmlsdGVyIiwiZ2V0QXV0b0Nsb3NlIiwidG9nZ2xlRWxlbWVudCIsImdldFRvZ2dsZUVsZW1lbnQiLCJkcm9wZG93bkVsZW1lbnQiLCJnZXREcm9wZG93bkVsZW1lbnQiLCJmb2N1c1RvZ2dsZUVsZW1lbnQiLCJpc0tleW5hdkVuYWJsZWQiLCJmb2N1c0Ryb3Bkb3duRW50cnkiLCJkcm9wZG93bkNvbmZpZyIsImRyb3Bkb3duU2VydmljZSIsIiR0ZW1wbGF0ZVJlcXVlc3QiLCJ0ZW1wbGF0ZVNjb3BlIiwiZ2V0SXNPcGVuIiwiJG5ldyIsInNldElzT3BlbiIsInRvZ2dsZUludm9rZXIiLCJvblRvZ2dsZSIsImtleW5hdkVuYWJsZWQiLCJkcm9wZG93bkFwcGVuZFRvQm9keSIsImtleWJvYXJkTmF2IiwiZHJvcGRvd25NZW51IiwiYXV0b0Nsb3NlIiwiZ2V0RWxlbWVudCIsImVsZW1zIiwic2VsZWN0ZWRPcHRpb24iLCJ3YXNPcGVuIiwicmlnaHRhbGlnbiIsIm9wZW5Db250YWluZXIiLCJkcm9wZG93bk1lbnVUZW1wbGF0ZVVybCIsInRwbENvbnRlbnQiLCJuZXdFbCIsInJlcGxhY2VXaXRoIiwiJGRlc3Ryb3kiLCJvZmZEZXN0cm95IiwiZHJvcGRvd25DdHJsIiwidHBsVXJsIiwidG9nZ2xlRHJvcGRvd24iLCJhcmlhLWhhc3BvcHVwIiwiYXJpYS1leHBhbmRlZCIsImNyZWF0ZU5ldyIsImFkZCIsImlkeCIsInJlbW92ZVRvcCIsImVudHJpZXMiLCJoYXNLZXkiLCJ2YWx1ZXMiLCIkbW9kYWxTdGFjayIsImxpbmtGbiIsIm1vZGFsSW5DbGFzcyIsIk5PV19DTE9TSU5HX0VWRU5UIiwic2V0SXNBc3luYyIsInRBdHRycyIsImJhY2tkcm9wQ2xhc3MiLCJ3aW5kb3dDbGFzcyIsImdldFRvcCIsIiRpc1JlbmRlcmVkIiwibW9kYWxSZW5kZXJEZWZlck9iaiIsImFuaW1hdGlvblByb21pc2UiLCJ3aGVuIiwiaW5wdXRzV2l0aEF1dG9mb2N1cyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtb2RhbFJlbmRlcmVkIiwibW9kYWxBbmltYXRpb24iLCJtb2RhbEFuaW1hdGlvbkNsYXNzIiwiJHRyYW5zY2x1ZGUiLCJjbG9uZSIsIiQkbXVsdGlNYXAiLCIkJHN0YWNrZWRNYXAiLCJiYWNrZHJvcEluZGV4IiwidG9wQmFja2Ryb3BJbmRleCIsIm9wZW5lZCIsIm9wZW5lZFdpbmRvd3MiLCJyZW1vdmVNb2RhbFdpbmRvdyIsIm1vZGFsSW5zdGFuY2UiLCJlbGVtZW50VG9SZWNlaXZlRm9jdXMiLCJtb2RhbFdpbmRvdyIsInJlbW92ZUFmdGVyQW5pbWF0ZSIsIm1vZGFsRG9tRWwiLCJtb2RhbFNjb3BlIiwibW9kYWxCb2R5Q2xhc3MiLCJvcGVuZWRDbGFzcyIsIk9QRU5FRF9NT0RBTF9DTEFTUyIsIm9wZW5lZENsYXNzZXMiLCJjaGVja1JlbW92ZUJhY2tkcm9wIiwiYmFja2Ryb3BEb21FbCIsImJhY2tkcm9wU2NvcGVSZWYiLCJiYWNrZHJvcFNjb3BlIiwiZG9tRWwiLCJhZnRlckFuaW1hdGluZyIsImFzeW5jRGVmZXJyZWQiLCJhc3luY1Byb21pc2UiLCJicm9hZGNhc3RDbG9zaW5nIiwicmVzdWx0T3JSZWFzb24iLCJjbG9zaW5nIiwiZGVmYXVsdFByZXZlbnRlZCIsImZvY3VzYWJsZUVsZW1lbnRMaXN0IiwiZm9jdXNJbmRleCIsInRhYmFiYmxlU2VsZWN0b3IiLCJuZXdCYWNrZHJvcEluZGV4IiwibG9hZEZvY3VzRWxlbWVudExpc3QiLCJmb2N1c0NoYW5nZWQiLCJpc0ZvY3VzSW5GaXJzdEl0ZW0iLCJmb2N1c0xhc3RGb2N1c2FibGVFbGVtZW50IiwiaXNGb2N1c0luTGFzdEl0ZW0iLCJmb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudCIsIm1vZGFsT3BlbmVyIiwicmVuZGVyRGVmZXJyZWQiLCJjdXJyQmFja2Ryb3BJbmRleCIsImFuZ3VsYXJCYWNrZ3JvdW5kRG9tRWwiLCJhbmd1bGFyRG9tRWwiLCJ3aW5kb3dUZW1wbGF0ZVVybCIsIndpbmRvdy1jbGFzcyIsImNsZWFyRm9jdXNMaXN0Q2FjaGUiLCIkJHVpYkRlc3RydWN0aW9uU2NoZWR1bGVkIiwicmVhc29uIiwiZGlzbWlzc0FsbCIsInRvcE1vZGFsIiwic3JjRWxlbWVudCIsImxlbmd0aDAiLCJtb2RhbERvbUUxIiwiJG1vZGFsUHJvdmlkZXIiLCIkY29udHJvbGxlciIsImdldFRlbXBsYXRlUHJvbWlzZSIsImdldFJlc29sdmVQcm9taXNlcyIsInJlc29sdmVzIiwicHJvbWlzZXNBcnIiLCJpbnZva2UiLCIkbW9kYWwiLCJwcm9taXNlQ2hhaW4iLCJnZXRQcm9taXNlQ2hhaW4iLCJtb2RhbE9wdGlvbnMiLCJtb2RhbFJlc3VsdERlZmVycmVkIiwibW9kYWxPcGVuZWREZWZlcnJlZCIsIm1vZGFsUmVuZGVyRGVmZXJyZWQiLCJyZW5kZXJlZCIsInNhbWVQcm9taXNlIiwidGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZSIsInRwbEFuZFZhcnMiLCIkY2xvc2UiLCIkZGlzbWlzcyIsImN0cmxJbnN0YW5jZSIsImN0cmxMb2NhbHMiLCJyZXNvbHZlSXRlciIsIiRtb2RhbEluc3RhbmNlIiwiYmluZFRvQ29udHJvbGxlciIsImZpbmFsbHkiLCJzZXROdW1QYWdlcyIsIm51bVBhZ2VzIiwiaXRlbXNQZXJQYWdlIiwidG90YWxQYWdlcyIsImNhbGN1bGF0ZVRvdGFsUGFnZXMiLCJwYWdlIiwic2VsZWN0UGFnZSIsImNlaWwiLCJ0b3RhbEl0ZW1zIiwiY2xpY2tBbGxvd2VkIiwibmdEaXNhYmxlZCIsImJsdXIiLCJub1ByZXZpb3VzIiwibm9OZXh0IiwiYm91bmRhcnlMaW5rcyIsImRpcmVjdGlvbkxpbmtzIiwiZmlyc3RUZXh0IiwicHJldmlvdXNUZXh0IiwibmV4dFRleHQiLCJsYXN0VGV4dCIsInJvdGF0ZSIsInBhZ2luYXRpb25Db25maWciLCJtYWtlUGFnZSIsIm51bWJlciIsImdldFBhZ2VzIiwiY3VycmVudFBhZ2UiLCJwYWdlcyIsInN0YXJ0UGFnZSIsImVuZFBhZ2UiLCJpc01heFNpemVkIiwibWF4U2l6ZSIsInByZXZpb3VzUGFnZVNldCIsIm5leHRQYWdlU2V0IiwicGFnaW5hdGlvbkN0cmwiLCJvcmlnaW5hbFJlbmRlciIsImFsaWduIiwicGFnZXJDb25maWciLCJzbmFrZV9jYXNlIiwicmVnZXhwIiwic2VwYXJhdG9yIiwibGV0dGVyIiwiZGVmYXVsdE9wdGlvbnMiLCJwb3B1cERlbGF5IiwidXNlQ29udGVudEV4cCIsInRyaWdnZXJNYXAiLCJtb3VzZWVudGVyIiwiY2xpY2siLCJub25lIiwiZ2xvYmFsT3B0aW9ucyIsInNldFRyaWdnZXJzIiwiZGVmYXVsdFRyaWdnZXJTaG93IiwiZ2V0VHJpZ2dlcnMiLCJkaXJlY3RpdmVOYW1lIiwic3RhcnRTeW0iLCJlbmRTeW0iLCJ0b29sdGlwTGlua2VyIiwidG9nZ2xlVG9vbHRpcEJpbmQiLCJ0dFNjb3BlIiwiaGlkZVRvb2x0aXBCaW5kIiwic2hvd1Rvb2x0aXBCaW5kIiwiaGFzRW5hYmxlRXhwIiwicHJlcGFyZVRvb2x0aXAiLCJwb3B1cFRpbWVvdXQiLCIkZGlnZXN0IiwidHJhbnNpdGlvblRpbWVvdXQiLCJjb250ZW50RXhwIiwiY3JlYXRlVG9vbHRpcCIsImlzT3BlbkV4cCIsIm9yaWdTY29wZSIsInBvc2l0aW9uVG9vbHRpcCIsInBvc2l0aW9uVGltZW91dCIsInJlbW92ZVRvb2x0aXAiLCJ0b29sdGlwTGlua2VkU2NvcGUiLCJyZXBvc2l0aW9uU2NoZWR1bGVkIiwiJCRwb3N0RGlnZXN0IiwicHJlcFBvcHVwQ2xhc3MiLCJwcmVwUGxhY2VtZW50IiwicHJlcFBvcHVwRGVsYXkiLCJwb3B1cENsYXNzIiwicHJlcFRyaWdnZXJzIiwidW5yZWdpc3RlclRyaWdnZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsInR0Qm94IiwidHRDc3MiLCJhcHBlbmRUb0JvZHlWYWwiLCIkc2NlIiwiZWxlbSIsImN1cnJlbnRTY29wZSIsInByZXZpb3VzRWxlbWVudCIsImN1cnJlbnRFbGVtZW50IiwidG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZVNjb3BlIiwiY2hhbmdlQ291bnRlciIsImNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQiLCJwYXJzZUFzUmVzb3VyY2VVcmwiLCJ0b29sdGlwVGVtcGxhdGVUcmFuc2NsdWRlIiwic3JjIiwidGhpc0NoYW5nZUlkIiwicmVzcG9uc2UiLCJuZXdTY29wZSIsInRvb2x0aXBBbmltYXRpb25DbGFzcyIsIiR0b29sdGlwIiwib3JpZ2luU2NvcGUiLCJ0b29sdGlwSHRtbFVuc2FmZVN1cHByZXNzRGVwcmVjYXRlZCIsInByb2dyZXNzQ29uZmlnIiwiYmFycyIsImFkZEJhciIsImJhciIsInJlY2FsY3VsYXRlUGVyY2VudGFnZSIsInBlcmNlbnQiLCJ0b0ZpeGVkIiwidG90YWxQZXJjZW50YWdlIiwicmVkdWNlIiwidG90YWwiLCJyZW1vdmVCYXIiLCIkcHJvZ3Jlc3NTdXBwcmVzc1dhcm5pbmciLCJwcm9ncmVzc0N0cmwiLCJzdGF0ZU9uIiwic3RhdGVPZmYiLCJ0aXRsZXMiLCJyYXRpbmdDb25maWciLCJ0bXBUaXRsZXMiLCJyYXRpbmdTdGF0ZXMiLCJidWlsZFRlbXBsYXRlT2JqZWN0cyIsInN0YXRlcyIsInJhdGUiLCJyZWFkb25seSIsIm9uSG92ZXIiLCJyZXNldCIsIm9uTGVhdmUiLCJvbktleWRvd24iLCJyYXRpbmdDdHJsIiwidGFicyIsInNlbGVjdGVkVGFiIiwib25EZXNlbGVjdCIsInNlbGVjdENhbGxlZCIsIm9uU2VsZWN0IiwiYWRkVGFiIiwicmVtb3ZlVGFiIiwibmV3QWN0aXZlSW5kZXgiLCJ2ZXJ0aWNhbCIsImp1c3RpZmllZCIsImVsbSIsInRhYnNldEN0cmwiLCIkdHJhbnNjbHVkZUZuIiwiaXNUYWJIZWFkaW5nIiwibm9kZSIsImhhc0F0dHJpYnV0ZSIsInRhYkNvbnRlbnRUcmFuc2NsdWRlIiwiaGVhZGluZ0VsZW1lbnQiLCJob3VyU3RlcCIsIm1pbnV0ZVN0ZXAiLCJzaG93TWVyaWRpYW4iLCJtZXJpZGlhbnMiLCJyZWFkb25seUlucHV0IiwibW91c2V3aGVlbCIsImFycm93a2V5cyIsInNob3dTcGlubmVycyIsInRpbWVwaWNrZXJDb25maWciLCJnZXRIb3Vyc0Zyb21UZW1wbGF0ZSIsInZhbGlkIiwibWVyaWRpYW4iLCJnZXRNaW51dGVzRnJvbVRlbXBsYXRlIiwicGFkIiwidG9TdHJpbmciLCJrZXlib2FyZENoYW5nZSIsIm1ha2VWYWxpZCIsInVwZGF0ZVRlbXBsYXRlIiwiaW52YWxpZEhvdXJzIiwiaW52YWxpZE1pbnV0ZXMiLCJhZGRNaW51dGVzIiwibmV3RGF0ZSIsImFkZE1pbnV0ZXNUb1NlbGVjdGVkIiwiaW5wdXRzIiwiaG91cnNJbnB1dEVsIiwibWludXRlc0lucHV0RWwiLCJzZXR1cE1vdXNld2hlZWxFdmVudHMiLCJzZXR1cEFycm93a2V5RXZlbnRzIiwic2V0dXBJbnB1dEV2ZW50cyIsIm5vSW5jcmVtZW50SG91cnMiLCJpbmNyZW1lbnRlZFNlbGVjdGVkIiwibm9EZWNyZW1lbnRIb3VycyIsImRlY3JlbWVudGVkU2VsZWN0ZWQiLCJub0luY3JlbWVudE1pbnV0ZXMiLCJub0RlY3JlbWVudE1pbnV0ZXMiLCJub1RvZ2dsZU1lcmlkaWFuIiwiJGVycm9yIiwiaXNTY3JvbGxpbmdVcCIsIm9yaWdpbmFsRXZlbnQiLCJ3aGVlbERlbHRhIiwiZGVsdGFZIiwiZGV0YWlsIiwiaW5jcmVtZW50SG91cnMiLCJkZWNyZW1lbnRIb3VycyIsImluY3JlbWVudE1pbnV0ZXMiLCJkZWNyZW1lbnRNaW51dGVzIiwidXBkYXRlSG91cnMiLCJ1cGRhdGVNaW51dGVzIiwiaW52YWxpZGF0ZSIsInNldE1pbnV0ZXMiLCJ0b2dnbGVNZXJpZGlhbiIsInRpbWVwaWNrZXJDdHJsIiwiJHRyYW5zaXRpb25TdXBwcmVzc0RlcHJlY2F0ZWQiLCJmaW5kRW5kRXZlbnROYW1lIiwiZW5kRXZlbnROYW1lcyIsInRyYW5zRWxlbWVudCIsIiR0cmFuc2l0aW9uIiwiZW5kRXZlbnROYW1lIiwidHJhbnNpdGlvbkVuZEhhbmRsZXIiLCJ0cmFuc2l0aW9uRW5kRXZlbnROYW1lcyIsImFuaW1hdGlvbkVuZEV2ZW50TmFtZXMiLCJ0cmFuc2l0aW9uRW5kRXZlbnROYW1lIiwiYW5pbWF0aW9uRW5kRXZlbnROYW1lIiwiVFlQRUFIRUFEX1JFR0VYUCIsIml0ZW1OYW1lIiwic291cmNlIiwidmlld01hcHBlciIsIm1vZGVsTWFwcGVyIiwidHlwZWFoZWFkUGFyc2VyIiwiSE9UX0tFWVMiLCJldmVudERlYm91bmNlVGltZSIsIm9yaWdpbmFsU2NvcGUiLCJmaXJlUmVjYWxjdWxhdGluZyIsIm1vdmVJblByb2dyZXNzIiwidGltZW91dEV2ZW50UHJvbWlzZSIsIm1hdGNoZXMiLCJyZWNhbGN1bGF0ZVBvc2l0aW9uIiwibW9kZWxDdHJsIiwibmdNb2RlbE9wdGlvbnMiLCJtaW5MZW5ndGgiLCJ0eXBlYWhlYWRNaW5MZW5ndGgiLCJoYXNGb2N1cyIsIndhaXRUaW1lIiwidHlwZWFoZWFkV2FpdE1zIiwiaXNFZGl0YWJsZSIsInR5cGVhaGVhZEVkaXRhYmxlIiwiaXNMb2FkaW5nU2V0dGVyIiwidHlwZWFoZWFkTG9hZGluZyIsIm9uU2VsZWN0Q2FsbGJhY2siLCJ0eXBlYWhlYWRPblNlbGVjdCIsImlzU2VsZWN0T25CbHVyIiwidHlwZWFoZWFkU2VsZWN0T25CbHVyIiwiaXNOb1Jlc3VsdHNTZXR0ZXIiLCJ0eXBlYWhlYWROb1Jlc3VsdHMiLCJpbnB1dEZvcm1hdHRlciIsInR5cGVhaGVhZElucHV0Rm9ybWF0dGVyIiwidHlwZWFoZWFkQXBwZW5kVG9Cb2R5IiwiZm9jdXNGaXJzdCIsInR5cGVhaGVhZEZvY3VzRmlyc3QiLCJzZWxlY3RPbkV4YWN0IiwidHlwZWFoZWFkU2VsZWN0T25FeGFjdCIsInBhcnNlZE1vZGVsIiwiaW52b2tlTW9kZWxTZXR0ZXIiLCIkc2V0TW9kZWxWYWx1ZSIsIiRvcHRpb25zIiwiZ2V0dGVyU2V0dGVyIiwiJCQkcCIsInBhcnNlclJlc3VsdCIsInR5cGVhaGVhZCIsInBvcHVwSWQiLCJhcmlhLWF1dG9jb21wbGV0ZSIsImFyaWEtb3ducyIsInBvcFVwRWwiLCJtb3ZlLWluLXByb2dyZXNzIiwicXVlcnkiLCJ0eXBlYWhlYWRUZW1wbGF0ZVVybCIsInR5cGVhaGVhZFBvcHVwVGVtcGxhdGVVcmwiLCJyZXNldE1hdGNoZXMiLCJhY3RpdmVJZHgiLCJnZXRNYXRjaElkIiwiaW5wdXRJc0V4YWN0TWF0Y2giLCJpbnB1dFZhbHVlIiwidG9VcHBlckNhc2UiLCJnZXRNYXRjaGVzQXN5bmMiLCJsb2NhbHMiLCJvbkN1cnJlbnRSZXF1ZXN0IiwidGltZW91dFByb21pc2UiLCJzY2hlZHVsZVNlYXJjaFdpdGhUaW1lb3V0IiwiY2FuY2VsUHJldmlvdXNUaW1lb3V0IiwiY2FuZGlkYXRlVmlld1ZhbHVlIiwiZW1wdHlWaWV3VmFsdWUiLCIkbW9kZWwiLCIkaXRlbSIsIiRsYWJlbCIsInR5cGVhaGVhZEZvY3VzT25TZWxlY3QiLCJkaXNtaXNzQ2xpY2tIYW5kbGVyIiwicG9wdXBUZW1wbGF0ZVVybCIsIm1hdGNoSWR4Iiwic2VsZWN0QWN0aXZlIiwic2VsZWN0TWF0Y2giLCJjbG9uZWRFbGVtZW50IiwiZXNjYXBlUmVnZXhwIiwicXVlcnlUb0VzY2FwZSIsImNvbnRhaW5zSHRtbCIsIm1hdGNoSXRlbSIsImlzU2FuaXRpemVQcmVzZW50IiwidHJ1c3RBc0h0bWwiLCIkdGVtcGxhdGVDYWNoZSIsIiQkY3NwIiwicHJlcGVuZCIsImxvYWRlciIsIm9ubG9hZCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJvbmVycm9yIiwibG9hZFNjcmlwdCIsInNjcmlwdCIsImFwcGVuZENoaWxkIiwibG9hZENTUyIsInJlbCIsImhlYWQiLCJkZWZhdWx0U2V0dGluZyIsImJ5Iiwic3BlZWQiLCJwdWQiLCJlcnIiLCJ1aVRpbnltY2VDb25maWciLCJnZW5lcmF0ZWRJZHMiLCJJRF9BVFRSIiwiYmFzZVVybCIsInRpbnltY2UiLCJiYXNlVVJMIiwidG9nZ2xlRGlzYWJsZSIsImVuc3VyZUluc3RhbmNlIiwidGlueUluc3RhbmNlIiwiZ2V0Qm9keSIsInNldHRpbmdzIiwiZXhwcmVzc2lvbiIsImZvcm0iLCJ1cGRhdGVWaWV3IiwiZWRpdG9yIiwiJHNldCIsInVpVGlueW1jZSIsInNldHVwT3B0aW9ucyIsInNldHVwIiwiZWQiLCIkc2V0UHJpc3RpbmUiLCJzYXZlIiwiZ2V0VHJ1c3RlZEh0bWwiLCJnZXREb2MiLCJmaXJlIiwiZWlkIiwicGFyZW50RWxlbWVudCIsImV4ZWNDb21tYW5kIiwiaGlkZUxhYmVsIiwiZmlsZVR5cGUiLCJoYXNWYWxpZEV4dGVuc2lvbiIsImV4dGVuc2lvbnMiLCJ0ZXN0VXJsIiwidGVzdEltYWdlIiwiaW1hZ2UiLCJJbWFnZSIsImludmFsaWRUeXBlIiwidXJsUmVnRXhwIiwiZG9WYWxpZGF0aW9uIiwiZm9yY2VkVmFsaWQiLCJhbGxvd0luaXRFbXB0eSIsImluaXRFbXB0eSIsImluZm8iLCJkaXNhYmxlU2F2ZSIsInNldHRpbmdzU2F2ZXIiLCJzZXR0aW5nc0dldHRlciIsInNldHRpbmdzQ2xvc2VyIiwiYWRkaXRpb25hbFBhcmFtcyIsImFsZXJ0cyIsImdldEFkZGl0aW9uYWxQYXJhbSIsImRlZmF1bHRWYWwiLCJzZXRBZGRpdGlvbmFsUGFyYW0iLCJsb2FkQWRkaXRpb25hbFBhcmFtcyIsImdldEFkZGl0aW9uYWxQYXJhbXMiLCJzZXRBZGRpdGlvbmFsUGFyYW1zIiwic2F2ZVNldHRpbmdzIiwiY2xvc2VTZXR0aW5ncyIsImdldFBhcmFtcyIsIiRlbG0iLCIkd2F0Y2hDb2xsZWN0aW9uIiwibmV3QWxlcnRzIiwib2xkQWxlcnRzIiwiU1RPUkFHRV9GSUxFX1VSTF9CQVNFIiwiU1RPUkFHRV9GT0xERVJfVVJMX0JBU0UiLCJnZXRTdG9yYWdlVXJsRGF0YSIsImdldFN0b3JhZ2VUeXBlIiwic3RvcmFnZVVybCIsImdldENvbXBhbnlJZCIsInAiLCJwYWlyIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY29tcGFueUlkIiwiZmlsZU5hbWUiLCJwb3AiLCJmb2xkZXIiLCJnYWRnZXRzIiwiYW5ndWxhckxvYWQiLCJsb2FkRm9udHMiLCJmYW1pbHkiLCJmb250cyIsInVybHMiLCJzcGFjZXMiLCJmb250QmFzZVVybCIsImV4Y2x1ZGUiLCJhbGxGb250cyIsImdldEdvb2dsZUZvbnRzIiwicmVzcCIsInN1YnNldHMiLCJnZXRGb250c1VzZWQiLCJmYW1pbHlMaXN0IiwiZm9udHNVc2VkIiwiaTE4biIsImZhbGxiYWNrTG5nIiwicmVzR2V0UGF0aCIsImdhZGdldHNBcGkiLCJzZXR0aW5nc1BhcnNlciIsInByb2Nlc3NTZXR0aW5ncyIsIm5ld1NldHRpbmdzIiwiY29weSIsInJzVyIsInJzSCIsImRlYnVnIiwibGF5b3V0VVJMIiwiZW5jb2RlUGFyYW1zIiwiYWRkaXRpb25hbFBhcmFtc1N0ciIsImVuY29kZUFkZGl0aW9uYWxQYXJhbXMiLCJycGMiLCJKU09OIiwic3RyaW5naWZ5IiwiZGVmYXVsdFNldHRpbmdzIiwiZGVmYXVsdEFkZGl0aW9uYWxQYXJhbXMiLCJwYXJzZUFkZGl0aW9uYWxQYXJhbXMiLCJkZWZhdWx0UGFyYW1zIiwicGFyc2VQYXJhbXMiLCJsb2NhdGlvbiIsInNlYXJjaCIsInN0cmlwUHJlZml4IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicGFyYW1zU3RyIiwidmFycyIsImdvb2dsZSIsInZpc3VhbGl6YXRpb24iLCJzZXRPbkxvYWRDYWxsYmFjayIsImdvb2dsZUZvbnRMb2FkZXIiLCJGT05UX1NJWkVTIiwiRk9OVF9GQU1JTElFUyIsImluaXRDb21tYW5kcyIsImFyZ3MiLCJjb21tYW5kIiwiX2lzTG9hZGluZyIsImFwcGx5TGluZUhlaWdodCIsImZvcm1hdHRlciIsIm5vZGVDaGFuZ2VkIiwidXBkYXRlTGluZUhlaWdodCIsInNlbGVjdGVkTm9kZSIsInNlbGVjdGVkTm9kZVBhcmVudHMiLCJzZWxlY3Rpb24iLCJnZXROb2RlIiwibm9kZU5hbWUiLCJfbGluZUhlaWdodFRvb2wiLCJkb20iLCJnZXRQYXJlbnRzIiwiaW5pdFRpbnlNQ0UiLCJ0aW55bWNlT3B0aW9ucyIsInBsdWdpbnMiLCJza2luX3VybCIsImZvbnRfZm9ybWF0cyIsImdldEZvbnRGb3JtYXRzIiwiZm9ybWF0cyIsImZvbnRzaXplIiwiaW5saW5lIiwic3R5bGVzIiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwicGFyYWdyYXBoIiwiYmxvY2siLCJtYXJnaW4iLCJjb250ZW50X2NzcyIsIl9nb29nbGVGb250VXJscyIsInN0eWxlX2Zvcm1hdHNfbWVyZ2UiLCJmb250c2l6ZV9mb3JtYXRzIiwibWluX2hlaWdodCIsIm1lbnViYXIiLCJ0b29sYmFyMSIsImFkZEJ1dHRvbiIsImljb24iLCJvbnNlbGVjdCIsIm9uUG9zdFJlbmRlciIsIm1jZUNvbnRhaW5lckRpdldpZHRoIiwicXVlcnlTZWxlY3RvciIsInBsYWNlaG9sZGVyV2lkdGgiLCJfcHJlZnMiLCJnZXRJbnQiLCJjb250ZW50RG9jdW1lbnQiLCJhZGRDdXN0b21Gb250c1RvRnJhbWUiLCJhZGRDdXN0b21Gb250c1RvRG9jdW1lbnQiLCJjdXN0b21Gb250cyIsInJlZ2lzdGVyIiwiX2N1c3RvbUZvbnRUb1NlbGVjdCIsImluaXRfaW5zdGFuY2VfY2FsbGJhY2siLCJvbGRBcHBseSIsIm9sZFJlbW92ZSIsImRvYyIsImdldFNoZWV0Iiwic2hlZXQiLCJzdHlsZVNoZWV0cyIsImZvbnQiLCJydWxlIiwiYWRkUnVsZSIsImNiIiwiZ2V0Q3VzdG9tRm9udEZvcm1hdHMiLCJfZ29vZ2xlRm9udHMiLCJQcmVmcyIsInByb2Nlc3NGb250cyIsIiR3cmFwcGVyIiwid3JhcHBlciIsImZhbWlsaWVzIiwic3BhbiIsImdvb2dsZUZvbnRzIiwiZ2V0RmFtaWx5IiwiZGVjb2RlVVJJIiwiYWRkRm9udCJdLCJtYXBwaW5ncyI6IkFBWUFBLFFBQVFDLE9BQU8sMEJBQTJCLE9BRXpDQyxLQUFLLGFBQWMsU0FBVUMsR0FFNUIsR0FBSUMsR0FBTUQsRUFBV0UsYUFDakJDLEVBQVVILEVBQVdHLFVBRXJCQyxFQUFvQyxXQUN0QyxHQUFJQyxHQUFZTCxFQUFXTSxtQkFDdkJULFNBQVFVLFNBQVNGLEdBQ25CTCxFQUFXUSxJQUFJSCxHQUlmRixFQUFRTSxJQUFJUixFQUFLRCxFQUFXUSxPQUk1QkwsR0FDR0EsRUFBUU8sSUFBSVQsR0FHZkQsRUFBV1EsSUFBSUwsRUFBUU8sSUFBSVQsSUFBTSxTQUFTRyxHQUYxQ0EsSUFJT1AsUUFBUVUsU0FBU1AsRUFBV00sc0JBQ3JDTixFQUFXUSxJ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QUVadGtCLEdBQU9qbEIsSUFBTSxHQWdCYmlsQixFQUFPby9CLFFBQVUsV0FDZixHQUNFcmtELEdBREUwOEMsRUFBU3lILEdBR1R6SCxLQUNGMThDLEVBQU1pbEIsRUFBT2psQixJQUFJbEQsT0FFakJtb0IsRUFBT3ZoQixNQUFNLG9CQUFxQmc1QyxPQUFPQSxFQUFRMThDLElBQUlBLEtBR3ZEK1UsRUFBSTRKLE1BQU0sU0FHWnNHLEVBQU8zYSxJQUFJLGFBQWMsV0FDdkJ5SyxFQUFJNEosTUFBTSxlQU10QnZsQixRQUFRQyxPQUFPLG1DQUNaZ08sU0FBUyxnQkFDUix5a0JBaUJEQSxTQUFTLGFBQ1IiLCJmaWxlIjoianMvc2V0dGluZ3MubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBhbmd1bGFyLXRyYW5zbGF0ZSAtIHYyLjUuMiAtIDIwMTQtMTItMTBcbiAqIGh0dHA6Ly9naXRodWIuY29tL2FuZ3VsYXItdHJhbnNsYXRlL2FuZ3VsYXItdHJhbnNsYXRlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQgOyBMaWNlbnNlZCBNSVRcbiAqL1xuLyoqXG4gKiBAbmdkb2Mgb3ZlcnZpZXdcbiAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBtYWluIG1vZHVsZSB3aGljaCBob2xkcyBldmVyeXRoaW5nIHRvZ2V0aGVyLlxuICovXG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScsIFsnbmcnXSlcblxuLnJ1bihbJyR0cmFuc2xhdGUnLCBmdW5jdGlvbiAoJHRyYW5zbGF0ZSkge1xuXG4gIHZhciBrZXkgPSAkdHJhbnNsYXRlLnN0b3JhZ2VLZXkoKSxcbiAgICAgIHN0b3JhZ2UgPSAkdHJhbnNsYXRlLnN0b3JhZ2UoKTtcblxuICB2YXIgZmFsbGJhY2tGcm9tSW5jb3JyZWN0U3RvcmFnZVZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByZWZlcnJlZCA9ICR0cmFuc2xhdGUucHJlZmVycmVkTGFuZ3VhZ2UoKTtcbiAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhwcmVmZXJyZWQpKSB7XG4gICAgICAkdHJhbnNsYXRlLnVzZShwcmVmZXJyZWQpO1xuICAgICAgLy8gJHRyYW5zbGF0ZS51c2UoKSB3aWxsIGFsc28gcmVtZW1iZXIgdGhlIGxhbmd1YWdlLlxuICAgICAgLy8gU28sIHdlIGRvbid0IG5lZWQgdG8gY2FsbCBzdG9yYWdlLnB1dCgpIGhlcmUuXG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3JhZ2UucHV0KGtleSwgJHRyYW5zbGF0ZS51c2UoKSk7XG4gICAgfVxuICB9O1xuXG4gIGlmIChzdG9yYWdlKSB7XG4gICAgaWYgKCFzdG9yYWdlLmdldChrZXkpKSB7XG4gICAgICBmYWxsYmFja0Zyb21JbmNvcnJlY3RTdG9yYWdlVmFsdWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHRyYW5zbGF0ZS51c2Uoc3RvcmFnZS5nZXQoa2V5KSlbJ2NhdGNoJ10oZmFsbGJhY2tGcm9tSW5jb3JyZWN0U3RvcmFnZVZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYW5ndWxhci5pc1N0cmluZygkdHJhbnNsYXRlLnByZWZlcnJlZExhbmd1YWdlKCkpKSB7XG4gICAgJHRyYW5zbGF0ZS51c2UoJHRyYW5zbGF0ZS5wcmVmZXJyZWRMYW5ndWFnZSgpKTtcbiAgfVxufV0pO1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAkdHJhbnNsYXRlUHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gcmVnaXN0ZXIgdHJhbnNsYXRpb24tdGFibGVzLCBhc3luY2hyb25vdXMgbG9hZGVyc1xuICogYW5kIHNpbWlsYXIgdG8gY29uZmlndXJlIHRyYW5zbGF0aW9uIGJlaGF2aW9yIGRpcmVjdGx5IGluc2lkZSBvZiBhIG1vZHVsZS5cbiAqXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJykucHJvdmlkZXIoJyR0cmFuc2xhdGUnLCBbJyRTVE9SQUdFX0tFWScsIGZ1bmN0aW9uICgkU1RPUkFHRV9LRVkpIHtcblxuICB2YXIgJHRyYW5zbGF0aW9uVGFibGUgPSB7fSxcbiAgICAgICRwcmVmZXJyZWRMYW5ndWFnZSxcbiAgICAgICRhdmFpbGFibGVMYW5ndWFnZUtleXMgPSBbXSxcbiAgICAgICRsYW5ndWFnZUtleUFsaWFzZXMsXG4gICAgICAkZmFsbGJhY2tMYW5ndWFnZSxcbiAgICAgICRmYWxsYmFja1dhc1N0cmluZyxcbiAgICAgICR1c2VzLFxuICAgICAgJG5leHRMYW5nLFxuICAgICAgJHN0b3JhZ2VGYWN0b3J5LFxuICAgICAgJHN0b3JhZ2VLZXkgPSAkU1RPUkFHRV9LRVksXG4gICAgICAkc3RvcmFnZVByZWZpeCxcbiAgICAgICRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSxcbiAgICAgICRpbnRlcnBvbGF0aW9uRmFjdG9yeSxcbiAgICAgICRpbnRlcnBvbGF0b3JGYWN0b3JpZXMgPSBbXSxcbiAgICAgICRpbnRlcnBvbGF0aW9uU2FuaXRpemF0aW9uU3RyYXRlZ3kgPSBmYWxzZSxcbiAgICAgICRsb2FkZXJGYWN0b3J5LFxuICAgICAgJGNsb2FrQ2xhc3NOYW1lID0gJ3RyYW5zbGF0ZS1jbG9haycsXG4gICAgICAkbG9hZGVyT3B0aW9ucyxcbiAgICAgICRub3RGb3VuZEluZGljYXRvckxlZnQsXG4gICAgICAkbm90Rm91bmRJbmRpY2F0b3JSaWdodCxcbiAgICAgICRwb3N0Q29tcGlsaW5nRW5hYmxlZCA9IGZhbHNlLFxuICAgICAgTkVTVEVEX09CSkVDVF9ERUxJTUlURVIgPSAnLicsXG4gICAgICBsb2FkZXJDYWNoZTtcblxuICB2YXIgdmVyc2lvbiA9ICcyLjUuMic7XG5cbiAgLy8gdHJpZXMgdG8gZGV0ZXJtaW5lIHRoZSBicm93c2VycyBsYW5ndWFnZVxuICB2YXIgZ2V0Rmlyc3RCcm93c2VyTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG5hdiA9IHdpbmRvdy5uYXZpZ2F0b3IsXG4gICAgICAgIGJyb3dzZXJMYW5ndWFnZVByb3BlcnR5S2V5cyA9IFsnbGFuZ3VhZ2UnLCAnYnJvd3Nlckxhbmd1YWdlJywgJ3N5c3RlbUxhbmd1YWdlJywgJ3VzZXJMYW5ndWFnZSddLFxuICAgICAgICBpLFxuICAgICAgICBsYW5ndWFnZTtcblxuICAgIC8vIHN1cHBvcnQgZm9yIEhUTUwgNS4xIFwibmF2aWdhdG9yLmxhbmd1YWdlc1wiXG4gICAgaWYgKGFuZ3VsYXIuaXNBcnJheShuYXYubGFuZ3VhZ2VzKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG5hdi5sYW5ndWFnZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGFuZ3VhZ2UgPSBuYXYubGFuZ3VhZ2VzW2ldO1xuICAgICAgICBpZiAobGFuZ3VhZ2UgJiYgbGFuZ3VhZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGxhbmd1YWdlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydCBmb3Igb3RoZXIgd2VsbCBrbm93biBwcm9wZXJ0aWVzIGluIGJyb3dzZXJzXG4gICAgZm9yIChpID0gMDsgaSA8IGJyb3dzZXJMYW5ndWFnZVByb3BlcnR5S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGFuZ3VhZ2UgPSBuYXZbYnJvd3Nlckxhbmd1YWdlUHJvcGVydHlLZXlzW2ldXTtcbiAgICAgIGlmIChsYW5ndWFnZSAmJiBsYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGxhbmd1YWdlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuICBnZXRGaXJzdEJyb3dzZXJMYW5ndWFnZS5kaXNwbGF5TmFtZSA9ICdhbmd1bGFyLXRyYW5zbGF0ZS9zZXJ2aWNlOiBnZXRGaXJzdEJyb3dzZXJMYW5ndWFnZSc7XG5cbiAgLy8gdHJpZXMgdG8gZGV0ZXJtaW5lIHRoZSBicm93c2VycyBsb2NhbGVcbiAgdmFyIGdldExvY2FsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKGdldEZpcnN0QnJvd3Nlckxhbmd1YWdlKCkgfHwgJycpLnNwbGl0KCctJykuam9pbignXycpO1xuICB9O1xuICBnZXRMb2NhbGUuZGlzcGxheU5hbWUgPSAnYW5ndWxhci10cmFuc2xhdGUvc2VydmljZTogZ2V0TG9jYWxlJztcblxuICAvKipcbiAgICogQG5hbWUgaW5kZXhPZlxuICAgKiBAcHJpdmF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogaW5kZXhPZiBwb2x5ZmlsbC4gS2luZGEgc29ydGEuXG4gICAqXG4gICAqIEBwYXJhbSB7YXJyYXl9IGFycmF5IEFycmF5IHRvIHNlYXJjaCBpbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNlYXJjaEVsZW1lbnQgRWxlbWVudCB0byBzZWFyY2ggZm9yLlxuICAgKlxuICAgKiBAcmV0dXJucyB7aW50fSBJbmRleCBvZiBzZWFyY2ggZWxlbWVudC5cbiAgICovXG4gIHZhciBpbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIHNlYXJjaEVsZW1lbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChhcnJheVtpXSA9PT0gc2VhcmNoRWxlbWVudCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSB0cmltXG4gICAqIEBwcml2YXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiB0cmltIHBvbHlmaWxsXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBzdHJpbmcgc3RyaXBwZWQgb2Ygd2hpdGVzcGFjZSBmcm9tIGJvdGggZW5kc1xuICAgKi9cbiAgdmFyIHRyaW0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJyk7XG4gIH07XG5cbiAgdmFyIG5lZ290aWF0ZUxvY2FsZSA9IGZ1bmN0aW9uIChwcmVmZXJyZWQpIHtcblxuICAgIHZhciBhdmFpbCA9IFtdLFxuICAgICAgICBsb2NhbGUgPSBhbmd1bGFyLmxvd2VyY2FzZShwcmVmZXJyZWQpLFxuICAgICAgICBpID0gMCxcbiAgICAgICAgbiA9ICRhdmFpbGFibGVMYW5ndWFnZUtleXMubGVuZ3RoO1xuXG4gICAgZm9yICg7IGkgPCBuOyBpKyspIHtcbiAgICAgIGF2YWlsLnB1c2goYW5ndWxhci5sb3dlcmNhc2UoJGF2YWlsYWJsZUxhbmd1YWdlS2V5c1tpXSkpO1xuICAgIH1cblxuICAgIGlmIChpbmRleE9mKGF2YWlsLCBsb2NhbGUpID4gLTEpIHtcbiAgICAgIHJldHVybiBwcmVmZXJyZWQ7XG4gICAgfVxuXG4gICAgaWYgKCRsYW5ndWFnZUtleUFsaWFzZXMpIHtcbiAgICAgIHZhciBhbGlhcztcbiAgICAgIGZvciAodmFyIGxhbmdLZXlBbGlhcyBpbiAkbGFuZ3VhZ2VLZXlBbGlhc2VzKSB7XG4gICAgICAgIHZhciBoYXNXaWxkY2FyZEtleSA9IGZhbHNlO1xuICAgICAgICB2YXIgaGFzRXhhY3RLZXkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoJGxhbmd1YWdlS2V5QWxpYXNlcywgbGFuZ0tleUFsaWFzKSAmJlxuICAgICAgICAgIGFuZ3VsYXIubG93ZXJjYXNlKGxhbmdLZXlBbGlhcykgPT09IGFuZ3VsYXIubG93ZXJjYXNlKHByZWZlcnJlZCk7XG5cbiAgICAgICAgaWYgKGxhbmdLZXlBbGlhcy5zbGljZSgtMSkgPT09ICcqJykge1xuICAgICAgICAgIGhhc1dpbGRjYXJkS2V5ID0gbGFuZ0tleUFsaWFzLnNsaWNlKDAsIC0xKSA9PT0gcHJlZmVycmVkLnNsaWNlKDAsIGxhbmdLZXlBbGlhcy5sZW5ndGgtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhc0V4YWN0S2V5IHx8IGhhc1dpbGRjYXJkS2V5KSB7XG4gICAgICAgICAgYWxpYXMgPSAkbGFuZ3VhZ2VLZXlBbGlhc2VzW2xhbmdLZXlBbGlhc107XG4gICAgICAgICAgaWYgKGluZGV4T2YoYXZhaWwsIGFuZ3VsYXIubG93ZXJjYXNlKGFsaWFzKSkgPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFsaWFzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwYXJ0cyA9IHByZWZlcnJlZC5zcGxpdCgnXycpO1xuXG4gICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEgJiYgaW5kZXhPZihhdmFpbCwgYW5ndWxhci5sb3dlcmNhc2UocGFydHNbMF0pKSA+IC0xKSB7XG4gICAgICByZXR1cm4gcGFydHNbMF07XG4gICAgfVxuXG4gICAgLy8gSWYgZXZlcnl0aGluZyBmYWlscywganVzdCByZXR1cm4gdGhlIHByZWZlcnJlZCwgdW5jaGFuZ2VkLlxuICAgIHJldHVybiBwcmVmZXJyZWQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN0cmFuc2xhdGlvbnNcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZWdpc3RlcnMgYSBuZXcgdHJhbnNsYXRpb24gdGFibGUgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGtleS5cbiAgICpcbiAgICogVG8gcmVnaXN0ZXIgYSB0cmFuc2xhdGlvbiB0YWJsZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UsIHBhc3MgYSBkZWZpbmVkIGxhbmd1YWdlXG4gICAqIGtleSBhcyBmaXJzdCBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIDxwcmU+XG4gICAqICAvLyByZWdpc3RlciB0cmFuc2xhdGlvbiB0YWJsZSBmb3IgbGFuZ3VhZ2U6ICdkZV9ERSdcbiAgICogICR0cmFuc2xhdGVQcm92aWRlci50cmFuc2xhdGlvbnMoJ2RlX0RFJywge1xuICAgKiAgICAnR1JFRVRJTkcnOiAnSGFsbG8gV2VsdCEnXG4gICAqICB9KTtcbiAgICpcbiAgICogIC8vIHJlZ2lzdGVyIGFub3RoZXIgb25lXG4gICAqICAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25zKCdlbl9VUycsIHtcbiAgICogICAgJ0dSRUVUSU5HJzogJ0hlbGxvIHdvcmxkISdcbiAgICogIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogV2hlbiByZWdpc3RlcmluZyBtdWx0aXBsZSB0cmFuc2xhdGlvbiB0YWJsZXMgZm9yIGZvciB0aGUgc2FtZSBsYW5ndWFnZSBrZXksXG4gICAqIHRoZSBhY3R1YWwgdHJhbnNsYXRpb24gdGFibGUgZ2V0cyBleHRlbmRlZC4gVGhpcyBhbGxvd3MgeW91IHRvIGRlZmluZSBtb2R1bGVcbiAgICogc3BlY2lmaWMgdHJhbnNsYXRpb24gd2hpY2ggb25seSBnZXQgYWRkZWQsIG9uY2UgYSBzcGVjaWZpYyBtb2R1bGUgaXMgbG9hZGVkIGluXG4gICAqIHlvdXIgYXBwLlxuICAgKlxuICAgKiBJbnZva2luZyB0aGlzIG1ldGhvZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIHRoZSB0cmFuc2xhdGlvbiB0YWJsZSB3aGljaCB3YXNcbiAgICogcmVnaXN0ZXJlZCB3aXRoIG5vIGxhbmd1YWdlIGtleS4gSW52b2tpbmcgaXQgd2l0aCBhIGxhbmd1YWdlIGtleSByZXR1cm5zIHRoZVxuICAgKiByZWxhdGVkIHRyYW5zbGF0aW9uIHRhYmxlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEEgbGFuZ3VhZ2Uga2V5LlxuICAgKiBAcGFyYW0ge29iamVjdH0gdHJhbnNsYXRpb25UYWJsZSBBIHBsYWluIG9sZCBKYXZhU2NyaXB0IG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSB0cmFuc2xhdGlvbiB0YWJsZS5cbiAgICpcbiAgICovXG4gIHZhciB0cmFuc2xhdGlvbnMgPSBmdW5jdGlvbiAobGFuZ0tleSwgdHJhbnNsYXRpb25UYWJsZSkge1xuXG4gICAgaWYgKCFsYW5nS2V5ICYmICF0cmFuc2xhdGlvblRhYmxlKSB7XG4gICAgICByZXR1cm4gJHRyYW5zbGF0aW9uVGFibGU7XG4gICAgfVxuXG4gICAgaWYgKGxhbmdLZXkgJiYgIXRyYW5zbGF0aW9uVGFibGUpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGxhbmdLZXkpKSB7XG4gICAgICAgIHJldHVybiAkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFhbmd1bGFyLmlzT2JqZWN0KCR0cmFuc2xhdGlvblRhYmxlW2xhbmdLZXldKSkge1xuICAgICAgICAkdHJhbnNsYXRpb25UYWJsZVtsYW5nS2V5XSA9IHt9O1xuICAgICAgfVxuICAgICAgYW5ndWxhci5leHRlbmQoJHRyYW5zbGF0aW9uVGFibGVbbGFuZ0tleV0sIGZsYXRPYmplY3QodHJhbnNsYXRpb25UYWJsZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB0aGlzLnRyYW5zbGF0aW9ucyA9IHRyYW5zbGF0aW9ucztcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI2Nsb2FrQ2xhc3NOYW1lXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogTGV0J3MgeW91IGNoYW5nZSB0aGUgY2xhc3MgbmFtZSBmb3IgYHRyYW5zbGF0ZS1jbG9ha2AgZGlyZWN0aXZlLlxuICAgKiBEZWZhdWx0IGNsYXNzIG5hbWUgaXMgYHRyYW5zbGF0ZS1jbG9ha2AuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIHRyYW5zbGF0ZS1jbG9hayBjbGFzcyBuYW1lXG4gICAqL1xuICB0aGlzLmNsb2FrQ2xhc3NOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIHJldHVybiAkY2xvYWtDbGFzc05hbWU7XG4gICAgfVxuICAgICRjbG9ha0NsYXNzTmFtZSA9IG5hbWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuYW1lIGZsYXRPYmplY3RcbiAgICogQHByaXZhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEZsYXRzIGFuIG9iamVjdC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIHRvIGZsYXR0ZW4gZ2l2ZW4gdHJhbnNsYXRpb24gZGF0YSB3aXRoXG4gICAqIG5hbWVzcGFjZXMsIHNvIHRoZXkgYXJlIGxhdGVyIGFjY2Vzc2libGUgdmlhIGRvdCBub3RhdGlvbi5cbiAgICovXG4gIHZhciBmbGF0T2JqZWN0ID0gZnVuY3Rpb24gKGRhdGEsIHBhdGgsIHJlc3VsdCwgcHJldktleSkge1xuICAgIHZhciBrZXksIGtleVdpdGhQYXRoLCBrZXlXaXRoU2hvcnRQYXRoLCB2YWw7XG5cbiAgICBpZiAoIXBhdGgpIHtcbiAgICAgIHBhdGggPSBbXTtcbiAgICB9XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgIHJlc3VsdCA9IHt9O1xuICAgIH1cbiAgICBmb3IgKGtleSBpbiBkYXRhKSB7XG4gICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdmFsID0gZGF0YVtrZXldO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNPYmplY3QodmFsKSkge1xuICAgICAgICBmbGF0T2JqZWN0KHZhbCwgcGF0aC5jb25jYXQoa2V5KSwgcmVzdWx0LCBrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5V2l0aFBhdGggPSBwYXRoLmxlbmd0aCA/ICgnJyArIHBhdGguam9pbihORVNURURfT0JKRUNUX0RFTElNSVRFUikgKyBORVNURURfT0JKRUNUX0RFTElNSVRFUiArIGtleSkgOiBrZXk7XG4gICAgICAgIGlmKHBhdGgubGVuZ3RoICYmIGtleSA9PT0gcHJldktleSl7XG4gICAgICAgICAgLy8gQ3JlYXRlIHNob3J0Y3V0IHBhdGggKGZvby5iYXIgPT0gZm9vLmJhci5iYXIpXG4gICAgICAgICAga2V5V2l0aFNob3J0UGF0aCA9ICcnICsgcGF0aC5qb2luKE5FU1RFRF9PQkpFQ1RfREVMSU1JVEVSKTtcbiAgICAgICAgICAvLyBMaW5rIGl0IHRvIG9yaWdpbmFsIHBhdGhcbiAgICAgICAgICByZXN1bHRba2V5V2l0aFNob3J0UGF0aF0gPSAnQDonICsga2V5V2l0aFBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0W2tleVdpdGhQYXRoXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI2FkZEludGVycG9sYXRpb25cbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBBZGRzIGludGVycG9sYXRpb24gc2VydmljZXMgdG8gYW5ndWxhci10cmFuc2xhdGUsIHNvIGl0IGNhbiBtYW5hZ2UgdGhlbS5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGZhY3RvcnkgSW50ZXJwb2xhdGlvbiBzZXJ2aWNlIGZhY3RvcnlcbiAgICovXG4gIHRoaXMuYWRkSW50ZXJwb2xhdGlvbiA9IGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgJGludGVycG9sYXRvckZhY3Rvcmllcy5wdXNoKGZhY3RvcnkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjdXNlTWVzc2FnZUZvcm1hdEludGVycG9sYXRpb25cbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbmFsaXR5IG9mIG1lc3NhZ2Vmb3JtYXQuanMuXG4gICAqIFRoaXMgaXMgdXNlZnVsIHdoZW4gaGF2aW5nIGhpZ2ggbGV2ZWwgcGx1cmFsaXphdGlvbiBhbmQgZ2VuZGVyIHNlbGVjdGlvbi5cbiAgICovXG4gIHRoaXMudXNlTWVzc2FnZUZvcm1hdEludGVycG9sYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlSW50ZXJwb2xhdGlvbignJHRyYW5zbGF0ZU1lc3NhZ2VGb3JtYXRJbnRlcnBvbGF0aW9uJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VJbnRlcnBvbGF0aW9uXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgYW5ndWxhci10cmFuc2xhdGUgd2hpY2ggaW50ZXJwb2xhdGlvbiBzdHlsZSB0byB1c2UgYXMgZGVmYXVsdCwgYXBwbGljYXRpb24td2lkZS5cbiAgICogU2ltcGx5IHBhc3MgYSBmYWN0b3J5L3NlcnZpY2UgbmFtZS4gVGhlIGludGVycG9sYXRpb24gc2VydmljZSBoYXMgdG8gaW1wbGVtZW50XG4gICAqIHRoZSBjb3JyZWN0IGludGVyZmFjZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZhY3RvcnkgSW50ZXJwb2xhdGlvbiBzZXJ2aWNlIG5hbWUuXG4gICAqL1xuICB0aGlzLnVzZUludGVycG9sYXRpb24gPSBmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICRpbnRlcnBvbGF0aW9uRmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VTYW5pdGl6ZVN0cmF0ZWd5XG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2ltcGx5IHNldHMgYSBzYW5pdGF0aW9uIHN0cmF0ZWd5IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSBTdHJhdGVneSB0eXBlLlxuICAgKi9cbiAgdGhpcy51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAkaW50ZXJwb2xhdGlvblNhbml0aXphdGlvblN0cmF0ZWd5ID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3ByZWZlcnJlZExhbmd1YWdlXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgdGhlIG1vZHVsZSB3aGljaCBvZiB0aGUgcmVnaXN0ZXJlZCB0cmFuc2xhdGlvbiB0YWJsZXMgdG8gdXNlIGZvciB0cmFuc2xhdGlvblxuICAgKiBhdCBpbml0aWFsIHN0YXJ0dXAgYnkgcGFzc2luZyBhIGxhbmd1YWdlIGtleS4gU2ltaWxhciB0byBgJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZWBcbiAgICogb25seSB0aGF0IGl0IHNheXMgd2hpY2ggbGFuZ3VhZ2UgdG8gKipwcmVmZXIqKi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmdLZXkgQSBsYW5ndWFnZSBrZXkuXG4gICAqXG4gICAqL1xuICB0aGlzLnByZWZlcnJlZExhbmd1YWdlID0gZnVuY3Rpb24obGFuZ0tleSkge1xuICAgIHNldHVwUHJlZmVycmVkTGFuZ3VhZ2UobGFuZ0tleSk7XG4gICAgcmV0dXJuIHRoaXM7XG5cbiAgfTtcbiAgdmFyIHNldHVwUHJlZmVycmVkTGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ0tleSkge1xuICAgIGlmIChsYW5nS2V5KSB7XG4gICAgICAkcHJlZmVycmVkTGFuZ3VhZ2UgPSBsYW5nS2V5O1xuICAgIH1cbiAgICByZXR1cm4gJHByZWZlcnJlZExhbmd1YWdlO1xuICB9O1xuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3RyYW5zbGF0aW9uTm90Rm91bmRJbmRpY2F0b3JcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuIGluZGljYXRvciB3aGljaCBpcyB1c2VkIHdoZW4gYSB0cmFuc2xhdGlvbiBpc24ndCBmb3VuZC4gRS5nLiB3aGVuXG4gICAqIHNldHRpbmcgdGhlIGluZGljYXRvciBhcyAnWCcgYW5kIG9uZSB0cmllcyB0byB0cmFuc2xhdGUgYSB0cmFuc2xhdGlvbiBpZFxuICAgKiBjYWxsZWQgYE5PVF9GT1VORGAsIHRoaXMgd2lsbCByZXN1bHQgaW4gYFggTk9UX0ZPVU5EIFhgLlxuICAgKlxuICAgKiBJbnRlcm5hbGx5IHRoaXMgbWV0aG9kcyBzZXRzIGEgbGVmdCBpbmRpY2F0b3IgYW5kIGEgcmlnaHQgaW5kaWNhdG9yIHVzaW5nXG4gICAqIGAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnQoKWAgYW5kXG4gICAqIGAkdHJhbnNsYXRlUHJvdmlkZXIudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvclJpZ2h0KClgLlxuICAgKlxuICAgKiAqKk5vdGUqKjogVGhlc2UgbWV0aG9kcyBhdXRvbWF0aWNhbGx5IGFkZCBhIHdoaXRlc3BhY2UgYmV0d2VlbiB0aGUgaW5kaWNhdG9yc1xuICAgKiBhbmQgdGhlIHRyYW5zbGF0aW9uIGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5kaWNhdG9yIEFuIGluZGljYXRvciwgY291bGQgYmUgYW55IHN0cmluZy5cbiAgICovXG4gIHRoaXMudHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvciA9IGZ1bmN0aW9uIChpbmRpY2F0b3IpIHtcbiAgICB0aGlzLnRyYW5zbGF0aW9uTm90Rm91bmRJbmRpY2F0b3JMZWZ0KGluZGljYXRvcik7XG4gICAgdGhpcy50cmFuc2xhdGlvbk5vdEZvdW5kSW5kaWNhdG9yUmlnaHQoaW5kaWNhdG9yKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjdHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnRcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuIGluZGljYXRvciB3aGljaCBpcyB1c2VkIHdoZW4gYSB0cmFuc2xhdGlvbiBpc24ndCBmb3VuZCBsZWZ0IHRvIHRoZVxuICAgKiB0cmFuc2xhdGlvbiBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGluZGljYXRvciBBbiBpbmRpY2F0b3IuXG4gICAqL1xuICB0aGlzLnRyYW5zbGF0aW9uTm90Rm91bmRJbmRpY2F0b3JMZWZ0ID0gZnVuY3Rpb24gKGluZGljYXRvcikge1xuICAgIGlmICghaW5kaWNhdG9yKSB7XG4gICAgICByZXR1cm4gJG5vdEZvdW5kSW5kaWNhdG9yTGVmdDtcbiAgICB9XG4gICAgJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCA9IGluZGljYXRvcjtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjdHJhbnNsYXRpb25Ob3RGb3VuZEluZGljYXRvckxlZnRcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuIGluZGljYXRvciB3aGljaCBpcyB1c2VkIHdoZW4gYSB0cmFuc2xhdGlvbiBpc24ndCBmb3VuZCByaWdodCB0byB0aGVcbiAgICogdHJhbnNsYXRpb24gaWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpbmRpY2F0b3IgQW4gaW5kaWNhdG9yLlxuICAgKi9cbiAgdGhpcy50cmFuc2xhdGlvbk5vdEZvdW5kSW5kaWNhdG9yUmlnaHQgPSBmdW5jdGlvbiAoaW5kaWNhdG9yKSB7XG4gICAgaWYgKCFpbmRpY2F0b3IpIHtcbiAgICAgIHJldHVybiAkbm90Rm91bmRJbmRpY2F0b3JSaWdodDtcbiAgICB9XG4gICAgJG5vdEZvdW5kSW5kaWNhdG9yUmlnaHQgPSBpbmRpY2F0b3I7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNmYWxsYmFja0xhbmd1YWdlXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgdGhlIG1vZHVsZSB3aGljaCBvZiB0aGUgcmVnaXN0ZXJlZCB0cmFuc2xhdGlvbiB0YWJsZXMgdG8gdXNlIHdoZW4gbWlzc2luZyB0cmFuc2xhdGlvbnNcbiAgICogYXQgaW5pdGlhbCBzdGFydHVwIGJ5IHBhc3NpbmcgYSBsYW5ndWFnZSBrZXkuIFNpbWlsYXIgdG8gYCR0cmFuc2xhdGVQcm92aWRlciN1c2VgXG4gICAqIG9ubHkgdGhhdCBpdCBzYXlzIHdoaWNoIGxhbmd1YWdlIHRvICoqZmFsbGJhY2sqKi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8fGFycmF5fSBsYW5nS2V5IEEgbGFuZ3VhZ2Uga2V5LlxuICAgKlxuICAgKi9cbiAgdGhpcy5mYWxsYmFja0xhbmd1YWdlID0gZnVuY3Rpb24gKGxhbmdLZXkpIHtcbiAgICBmYWxsYmFja1N0YWNrKGxhbmdLZXkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBmYWxsYmFja1N0YWNrID0gZnVuY3Rpb24gKGxhbmdLZXkpIHtcbiAgICBpZiAobGFuZ0tleSkge1xuICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcobGFuZ0tleSkpIHtcbiAgICAgICAgJGZhbGxiYWNrV2FzU3RyaW5nID0gdHJ1ZTtcbiAgICAgICAgJGZhbGxiYWNrTGFuZ3VhZ2UgPSBbIGxhbmdLZXkgXTtcbiAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0FycmF5KGxhbmdLZXkpKSB7XG4gICAgICAgICRmYWxsYmFja1dhc1N0cmluZyA9IGZhbHNlO1xuICAgICAgICAkZmFsbGJhY2tMYW5ndWFnZSA9IGxhbmdLZXk7XG4gICAgICB9XG4gICAgICBpZiAoYW5ndWxhci5pc1N0cmluZygkcHJlZmVycmVkTGFuZ3VhZ2UpICAmJiBpbmRleE9mKCRmYWxsYmFja0xhbmd1YWdlLCAkcHJlZmVycmVkTGFuZ3VhZ2UpIDwgMCkge1xuICAgICAgICAkZmFsbGJhY2tMYW5ndWFnZS5wdXNoKCRwcmVmZXJyZWRMYW5ndWFnZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJGZhbGxiYWNrV2FzU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiAkZmFsbGJhY2tMYW5ndWFnZVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAkZmFsbGJhY2tMYW5ndWFnZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXQgd2hpY2ggdHJhbnNsYXRpb24gdGFibGUgdG8gdXNlIGZvciB0cmFuc2xhdGlvbiBieSBnaXZlbiBsYW5ndWFnZSBrZXkuIFdoZW5cbiAgICogdHJ5aW5nIHRvICd1c2UnIGEgbGFuZ3VhZ2Ugd2hpY2ggaXNuJ3QgcHJvdmlkZWQsIGl0J2xsIHRocm93IGFuIGVycm9yLlxuICAgKlxuICAgKiBZb3UgYWN0dWFsbHkgZG9uJ3QgaGF2ZSB0byB1c2UgdGhpcyBtZXRob2Qgc2luY2UgYCR0cmFuc2xhdGVQcm92aWRlciNwcmVmZXJyZWRMYW5ndWFnZWBcbiAgICogZG9lcyB0aGUgam9iIHRvby5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmdLZXkgQSBsYW5ndWFnZSBrZXkuXG4gICAqL1xuICB0aGlzLnVzZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgaWYgKGxhbmdLZXkpIHtcbiAgICAgIGlmICghJHRyYW5zbGF0aW9uVGFibGVbbGFuZ0tleV0gJiYgKCEkbG9hZGVyRmFjdG9yeSkpIHtcbiAgICAgICAgLy8gb25seSB0aHJvdyBhbiBlcnJvciwgd2hlbiBub3QgbG9hZGluZyB0cmFuc2xhdGlvbiBkYXRhIGFzeW5jaHJvbm91c2x5XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIiR0cmFuc2xhdGVQcm92aWRlciBjb3VsZG4ndCBmaW5kIHRyYW5zbGF0aW9uVGFibGUgZm9yIGxhbmdLZXk6ICdcIiArIGxhbmdLZXkgKyBcIidcIik7XG4gICAgICB9XG4gICAgICAkdXNlcyA9IGxhbmdLZXk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuICR1c2VzO1xuICB9O1xuXG4gLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNzdG9yYWdlS2V5XG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgdGhlIG1vZHVsZSB3aGljaCBrZXkgbXVzdCByZXByZXNlbnQgdGhlIGNob29zZWQgbGFuZ3VhZ2UgYnkgYSB1c2VyIGluIHRoZSBzdG9yYWdlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IEEga2V5IGZvciB0aGUgc3RvcmFnZS5cbiAgICovXG4gIHZhciBzdG9yYWdlS2V5ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkpIHtcbiAgICAgIGlmICgkc3RvcmFnZVByZWZpeCkge1xuICAgICAgICByZXR1cm4gJHN0b3JhZ2VQcmVmaXggKyAkc3RvcmFnZUtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAkc3RvcmFnZUtleTtcbiAgICB9XG4gICAgJHN0b3JhZ2VLZXkgPSBrZXk7XG4gIH07XG5cbiAgdGhpcy5zdG9yYWdlS2V5ID0gc3RvcmFnZUtleTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZVVybExvYWRlclxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRlbGxzIGFuZ3VsYXItdHJhbnNsYXRlIHRvIHVzZSBgJHRyYW5zbGF0ZVVybExvYWRlcmAgZXh0ZW5zaW9uIHNlcnZpY2UgYXMgbG9hZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVybFxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICovXG4gIHRoaXMudXNlVXJsTG9hZGVyID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnVzZUxvYWRlcignJHRyYW5zbGF0ZVVybExvYWRlcicsIGFuZ3VsYXIuZXh0ZW5kKHsgdXJsOiB1cmwgfSwgb3B0aW9ucykpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjdXNlU3RhdGljRmlsZXNMb2FkZXJcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgYCR0cmFuc2xhdGVTdGF0aWNGaWxlc0xvYWRlcmAgZXh0ZW5zaW9uIHNlcnZpY2UgYXMgbG9hZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdD19IG9wdGlvbnMgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICovXG4gIHRoaXMudXNlU3RhdGljRmlsZXNMb2FkZXIgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnVzZUxvYWRlcignJHRyYW5zbGF0ZVN0YXRpY0ZpbGVzTG9hZGVyJywgb3B0aW9ucyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VMb2FkZXJcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgYW55IG90aGVyIHNlcnZpY2UgYXMgbG9hZGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9hZGVyRmFjdG9yeSBGYWN0b3J5IG5hbWUgdG8gdXNlXG4gICAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0aW9ucyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgKi9cbiAgdGhpcy51c2VMb2FkZXIgPSBmdW5jdGlvbiAobG9hZGVyRmFjdG9yeSwgb3B0aW9ucykge1xuICAgICRsb2FkZXJGYWN0b3J5ID0gbG9hZGVyRmFjdG9yeTtcbiAgICAkbG9hZGVyT3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VMb2NhbFN0b3JhZ2VcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgYCR0cmFuc2xhdGVMb2NhbFN0b3JhZ2VgIHNlcnZpY2UgYXMgc3RvcmFnZSBsYXllci5cbiAgICpcbiAgICovXG4gIHRoaXMudXNlTG9jYWxTdG9yYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZVN0b3JhZ2UoJyR0cmFuc2xhdGVMb2NhbFN0b3JhZ2UnKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZUNvb2tpZVN0b3JhZ2VcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgYCR0cmFuc2xhdGVDb29raWVTdG9yYWdlYCBzZXJ2aWNlIGFzIHN0b3JhZ2UgbGF5ZXIuXG4gICAqL1xuICB0aGlzLnVzZUNvb2tpZVN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlU3RvcmFnZSgnJHRyYW5zbGF0ZUNvb2tpZVN0b3JhZ2UnKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZVN0b3JhZ2VcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZWxscyBhbmd1bGFyLXRyYW5zbGF0ZSB0byB1c2UgY3VzdG9tIHNlcnZpY2UgYXMgc3RvcmFnZSBsYXllci5cbiAgICovXG4gIHRoaXMudXNlU3RvcmFnZSA9IGZ1bmN0aW9uIChzdG9yYWdlRmFjdG9yeSkge1xuICAgICRzdG9yYWdlRmFjdG9yeSA9IHN0b3JhZ2VGYWN0b3J5O1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXIjc3RvcmFnZVByZWZpeFxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgcHJlZml4IGZvciBzdG9yYWdlIGtleS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCBTdG9yYWdlIGtleSBwcmVmaXhcbiAgICovXG4gIHRoaXMuc3RvcmFnZVByZWZpeCA9IGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBpZiAoIXByZWZpeCkge1xuICAgICAgcmV0dXJuIHByZWZpeDtcbiAgICB9XG4gICAgJHN0b3JhZ2VQcmVmaXggPSBwcmVmaXg7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyTG9nXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGVsbHMgYW5ndWxhci10cmFuc2xhdGUgdG8gdXNlIGJ1aWx0LWluIGxvZyBoYW5kbGVyIHdoZW4gdHJ5aW5nIHRvIHRyYW5zbGF0ZVxuICAgKiBhIHRyYW5zbGF0aW9uIElkIHdoaWNoIGRvZXNuJ3QgZXhpc3QuXG4gICAqXG4gICAqIFRoaXMgaXMgYWN0dWFsbHkgYSBzaG9ydGN1dCBtZXRob2QgZm9yIGB1c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyKClgLlxuICAgKlxuICAgKi9cbiAgdGhpcy51c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyTG9nID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZU1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIoJyR0cmFuc2xhdGVNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyTG9nJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRXhwZWN0cyBhIGZhY3RvcnkgbmFtZSB3aGljaCBsYXRlciBnZXRzIGluc3RhbnRpYXRlZCB3aXRoIGAkaW5qZWN0b3JgLlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgdXNlZCB0byB0ZWxsIGFuZ3VsYXItdHJhbnNsYXRlIHRvIHVzZSBhIGN1c3RvbVxuICAgKiBtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyLiBKdXN0IGJ1aWxkIGEgZmFjdG9yeSB3aGljaCByZXR1cm5zIGEgZnVuY3Rpb25cbiAgICogYW5kIGV4cGVjdHMgYSB0cmFuc2xhdGlvbiBpZCBhcyBhcmd1bWVudC5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogPHByZT5cbiAgICogIGFwcC5jb25maWcoZnVuY3Rpb24gKCR0cmFuc2xhdGVQcm92aWRlcikge1xuICAgKiAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlcignY3VzdG9tSGFuZGxlcicpO1xuICAgKiAgfSk7XG4gICAqXG4gICAqICBhcHAuZmFjdG9yeSgnY3VzdG9tSGFuZGxlcicsIGZ1bmN0aW9uIChkZXAxLCBkZXAyKSB7XG4gICAqICAgIHJldHVybiBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCkge1xuICAgKiAgICAgIC8vIHNvbWV0aGluZyB3aXRoIHRyYW5zbGF0aW9uSWQgYW5kIGRlcDEgYW5kIGRlcDJcbiAgICogICAgfTtcbiAgICogIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZhY3RvcnkgRmFjdG9yeSBuYW1lXG4gICAqL1xuICB0aGlzLnVzZU1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIgPSBmdW5jdGlvbiAoZmFjdG9yeSkge1xuICAgICRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSA9IGZhY3Rvcnk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciN1c2VQb3N0Q29tcGlsaW5nXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSWYgcG9zdCBjb21waWxpbmcgaXMgZW5hYmxlZCwgYWxsIHRyYW5zbGF0ZWQgdmFsdWVzIHdpbGwgYmUgcHJvY2Vzc2VkXG4gICAqIGFnYWluIHdpdGggQW5ndWxhckpTJyAkY29tcGlsZS5cbiAgICpcbiAgICogRXhhbXBsZTpcbiAgICogPHByZT5cbiAgICogIGFwcC5jb25maWcoZnVuY3Rpb24gKCR0cmFuc2xhdGVQcm92aWRlcikge1xuICAgKiAgICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlUG9zdENvbXBpbGluZyh0cnVlKTtcbiAgICogIH0pO1xuICAgKiA8L3ByZT5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZhY3RvcnkgRmFjdG9yeSBuYW1lXG4gICAqL1xuICB0aGlzLnVzZVBvc3RDb21waWxpbmcgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAkcG9zdENvbXBpbGluZ0VuYWJsZWQgPSAhKCF2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZVxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRlbGxzIGFuZ3VsYXItdHJhbnNsYXRlIHRvIHRyeSB0byBkZXRlcm1pbmUgb24gaXRzIG93biB3aGljaCBsYW5ndWFnZSBrZXlcbiAgICogdG8gc2V0IGFzIHByZWZlcnJlZCBsYW5ndWFnZS4gV2hlbiBgZm5gIGlzIGdpdmVuLCBhbmd1bGFyLXRyYW5zbGF0ZSB1c2VzIGl0XG4gICAqIHRvIGRldGVybWluZSBhIGxhbmd1YWdlIGtleSwgb3RoZXJ3aXNlIGl0IHVzZXMgdGhlIGJ1aWx0LWluIGBnZXRMb2NhbGUoKWBcbiAgICogbWV0aG9kLlxuICAgKlxuICAgKiBUaGUgYGdldExvY2FsZSgpYCByZXR1cm5zIGEgbGFuZ3VhZ2Uga2V5IGluIHRoZSBmb3JtYXQgYFtsYW5nXV9bY291bnRyeV1gIG9yXG4gICAqIGBbbGFuZ11gIGRlcGVuZGluZyBvbiB3aGF0IHRoZSBicm93c2VyIHByb3ZpZGVzLlxuICAgKlxuICAgKiBVc2UgdGhpcyBtZXRob2QgYXQgeW91ciBvd24gcmlzaywgc2luY2Ugbm90IGFsbCBicm93c2VycyByZXR1cm4gYSB2YWxpZFxuICAgKiBsb2NhbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gZm4gRnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGEgYnJvd3NlcidzIGxvY2FsZVxuICAgKi9cbiAgdGhpcy5kZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZSA9IGZ1bmN0aW9uIChmbikge1xuXG4gICAgdmFyIGxvY2FsZSA9IChmbiAmJiBhbmd1bGFyLmlzRnVuY3Rpb24oZm4pKSA/IGZuKCkgOiBnZXRMb2NhbGUoKTtcblxuICAgIGlmICghJGF2YWlsYWJsZUxhbmd1YWdlS2V5cy5sZW5ndGgpIHtcbiAgICAgICRwcmVmZXJyZWRMYW5ndWFnZSA9IGxvY2FsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHByZWZlcnJlZExhbmd1YWdlID0gbmVnb3RpYXRlTG9jYWxlKGxvY2FsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNyZWdpc3RlckF2YWlsYWJsZUxhbmd1YWdlS2V5c1xuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlUHJvdmlkZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIHNldCBvZiBsYW5ndWFnZSBrZXlzIHRoZSBhcHAgd2lsbCB3b3JrIHdpdGguIFVzZSB0aGlzIG1ldGhvZCBpblxuICAgKiBjb21iaW5hdGlvbiB3aXRoXG4gICAqIHtAbGluayBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZSBkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZX0uXG4gICAqIFdoZW4gYXZhaWxhYmxlIGxhbmd1YWdlcyBrZXlzIGFyZSByZWdpc3RlcmVkLCBhbmd1bGFyLXRyYW5zbGF0ZVxuICAgKiB0cmllcyB0byBmaW5kIHRoZSBiZXN0IGZpdHRpbmcgbGFuZ3VhZ2Uga2V5IGRlcGVuZGluZyBvbiB0aGUgYnJvd3NlcnMgbG9jYWxlLFxuICAgKiBjb25zaWRlcmluZyB5b3VyIGxhbmd1YWdlIGtleSBjb252ZW50aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbGFuZ3VhZ2VLZXlzIEFycmF5IG9mIGxhbmd1YWdlIGtleXMgdGhlIHlvdXIgYXBwIHdpbGwgdXNlXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gYWxpYXNlcyBBbGlhcyBtYXAuXG4gICAqL1xuICB0aGlzLnJlZ2lzdGVyQXZhaWxhYmxlTGFuZ3VhZ2VLZXlzID0gZnVuY3Rpb24gKGxhbmd1YWdlS2V5cywgYWxpYXNlcykge1xuICAgIGlmIChsYW5ndWFnZUtleXMpIHtcbiAgICAgICRhdmFpbGFibGVMYW5ndWFnZUtleXMgPSBsYW5ndWFnZUtleXM7XG4gICAgICBpZiAoYWxpYXNlcykge1xuICAgICAgICAkbGFuZ3VhZ2VLZXlBbGlhc2VzID0gYWxpYXNlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gJGF2YWlsYWJsZUxhbmd1YWdlS2V5cztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI3VzZUxvYWRlckNhY2hlXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXJzIGEgY2FjaGUgZm9yIGludGVybmFsICRodHRwIGJhc2VkIGxvYWRlcnMuXG4gICAqIHtAbGluayBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVQcm92aWRlciNkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZSBkZXRlcm1pbmVQcmVmZXJyZWRMYW5ndWFnZX0uXG4gICAqIFdoZW4gZmFsc2UgdGhlIGNhY2hlIHdpbGwgYmUgZGlzYWJsZWQgKGRlZmF1bHQpLiBXaGVuIHRydWUgb3IgdW5kZWZpbmVkXG4gICAqIHRoZSBjYWNoZSB3aWxsIGJlIGEgZGVmYXVsdCAoc2VlICRjYWNoZUZhY3RvcnkpLiBXaGVuIGFuIG9iamVjdCBpdCB3aWxsXG4gICAqIGJlIHRyZWF0IGFzIGEgY2FjaGUgb2JqZWN0IGl0c2VsZjogdGhlIHVzYWdlIGlzICRodHRwKHtjYWNoZTogY2FjaGV9KVxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gY2FjaGUgYm9vbGVhbiwgc3RyaW5nIG9yIGNhY2hlLW9iamVjdFxuICAgKi9cbiAgdGhpcy51c2VMb2FkZXJDYWNoZSA9IGZ1bmN0aW9uIChjYWNoZSkge1xuICAgIGlmIChjYWNoZSA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGRpc2FibGUgY2FjaGVcbiAgICAgIGxvYWRlckNhY2hlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoY2FjaGUgPT09IHRydWUpIHtcbiAgICAgIC8vIGVuYWJsZSBjYWNoZSB1c2luZyBBSlMgZGVmYXVsdHNcbiAgICAgIGxvYWRlckNhY2hlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZihjYWNoZSkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlbmFibGUgY2FjaGUgdXNpbmcgZGVmYXVsdFxuICAgICAgbG9hZGVyQ2FjaGUgPSAnJHRyYW5zbGF0aW9uQ2FjaGUnO1xuICAgIH0gZWxzZSBpZiAoY2FjaGUpIHtcbiAgICAgIC8vIGVuYWJsZSBjYWNoZSB1c2luZyBnaXZlbiBvbmUgKHNlZSAkY2FjaGVGYWN0b3J5KVxuICAgICAgbG9hZGVyQ2FjaGUgPSBjYWNoZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBvYmplY3RcbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlXG4gICAqIEByZXF1aXJlcyAkaW50ZXJwb2xhdGVcbiAgICogQHJlcXVpcmVzICRsb2dcbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICogQHJlcXVpcmVzICRxXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgYCR0cmFuc2xhdGVgIHNlcnZpY2UgaXMgdGhlIGFjdHVhbCBjb3JlIG9mIGFuZ3VsYXItdHJhbnNsYXRlLiBJdCBleHBlY3RzIGEgdHJhbnNsYXRpb24gaWRcbiAgICogYW5kIG9wdGlvbmFsIGludGVycG9sYXRlIHBhcmFtZXRlcnMgdG8gdHJhbnNsYXRlIGNvbnRlbnRzLlxuICAgKlxuICAgKiA8cHJlPlxuICAgKiAgJHRyYW5zbGF0ZSgnSEVBRExJTkVfVEVYVCcpLnRoZW4oZnVuY3Rpb24gKHRyYW5zbGF0aW9uKSB7XG4gICAqICAgICRzY29wZS50cmFuc2xhdGVkVGV4dCA9IHRyYW5zbGF0aW9uO1xuICAgKiAgfSk7XG4gICAqIDwvcHJlPlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xhcnJheX0gdHJhbnNsYXRpb25JZCBBIHRva2VuIHdoaWNoIHJlcHJlc2VudHMgYSB0cmFuc2xhdGlvbiBpZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGNhbiBiZSBvcHRpb25hbGx5IGFuIGFycmF5IG9mIHRyYW5zbGF0aW9uIGlkcyB3aGljaFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRzIHRoYXQgdGhlIGZ1bmN0aW9uIHJldHVybnMgYW4gb2JqZWN0IHdoZXJlIGVhY2gga2V5XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIHRoZSB0cmFuc2xhdGlvbiBpZCBhbmQgdGhlIHZhbHVlIHRoZSB0cmFuc2xhdGlvbi5cbiAgICogQHBhcmFtIHtvYmplY3Q9fSBpbnRlcnBvbGF0ZVBhcmFtcyBBbiBvYmplY3QgaGFzaCBmb3IgZHluYW1pYyB2YWx1ZXNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGludGVycG9sYXRpb25JZCBUaGUgaWQgb2YgdGhlIGludGVycG9sYXRpb24gdG8gdXNlXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IHByb21pc2VcbiAgICovXG4gIHRoaXMuJGdldCA9IFtcbiAgICAnJGxvZycsXG4gICAgJyRpbmplY3RvcicsXG4gICAgJyRyb290U2NvcGUnLFxuICAgICckcScsXG4gICAgZnVuY3Rpb24gKCRsb2csICRpbmplY3RvciwgJHJvb3RTY29wZSwgJHEpIHtcblxuICAgICAgdmFyIFN0b3JhZ2UsXG4gICAgICAgICAgZGVmYXVsdEludGVycG9sYXRvciA9ICRpbmplY3Rvci5nZXQoJGludGVycG9sYXRpb25GYWN0b3J5IHx8ICckdHJhbnNsYXRlRGVmYXVsdEludGVycG9sYXRpb24nKSxcbiAgICAgICAgICBwZW5kaW5nTG9hZGVyID0gZmFsc2UsXG4gICAgICAgICAgaW50ZXJwb2xhdG9ySGFzaE1hcCA9IHt9LFxuICAgICAgICAgIGxhbmdQcm9taXNlcyA9IHt9LFxuICAgICAgICAgIGZhbGxiYWNrSW5kZXgsXG4gICAgICAgICAgc3RhcnRGYWxsYmFja0l0ZXJhdGlvbjtcblxuICAgICAgdmFyICR0cmFuc2xhdGUgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCkge1xuXG4gICAgICAgIC8vIER1Y2sgZGV0ZWN0aW9uOiBJZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgYW4gYXJyYXksIGEgYnVuY2ggb2YgdHJhbnNsYXRpb25zIHdhcyByZXF1ZXN0ZWQuXG4gICAgICAgIC8vIFRoZSByZXN1bHQgaXMgYW4gb2JqZWN0LlxuICAgICAgICBpZiAoYW5ndWxhci5pc0FycmF5KHRyYW5zbGF0aW9uSWQpKSB7XG4gICAgICAgICAgLy8gSW5zcGlyZWQgYnkgUS5hbGxTZXR0bGVkIGJ5IEtyaXMgS293YWxcbiAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EvYmxvYi9iMGZhNzI5ODA3MTdkYzIwMmZmYzNjYmYwM2I5MzZlMTBlYmJiOWQ3L3EuanMjTDE1NTMtMTU2M1xuICAgICAgICAgIC8vIFRoaXMgdHJhbnNmb3JtcyBhbGwgcHJvbWlzZXMgcmVnYXJkbGVzcyByZXNvbHZlZCBvciByZWplY3RlZFxuICAgICAgICAgIHZhciB0cmFuc2xhdGVBbGwgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZHMpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHRzID0ge307IC8vIHN0b3JpbmcgdGhlIGFjdHVhbCByZXN1bHRzXG4gICAgICAgICAgICB2YXIgcHJvbWlzZXMgPSBbXTsgLy8gcHJvbWlzZXMgdG8gd2FpdCBmb3JcbiAgICAgICAgICAgIC8vIFdyYXBzIHRoZSBwcm9taXNlIGEpIGJlaW5nIGFsd2F5cyByZXNvbHZlZCBhbmQgYikgc3RvcmluZyB0aGUgbGluayBpZC0+dmFsdWVcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGUgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCkge1xuICAgICAgICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgICB2YXIgcmVnYXJkbGVzcyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdHNbdHJhbnNsYXRpb25JZF0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKFt0cmFuc2xhdGlvbklkLCB2YWx1ZV0pO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBjYXJlIHdoZXRoZXIgdGhlIHByb21pc2Ugd2FzIHJlc29sdmVkIG9yIHJlamVjdGVkOyBqdXN0IHN0b3JlIHRoZSB2YWx1ZXNcbiAgICAgICAgICAgICAgJHRyYW5zbGF0ZSh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKS50aGVuKHJlZ2FyZGxlc3MsIHJlZ2FyZGxlc3MpO1xuICAgICAgICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgYyA9IHRyYW5zbGF0aW9uSWRzLmxlbmd0aDsgaSA8IGM7IGkrKykge1xuICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHRyYW5zbGF0ZSh0cmFuc2xhdGlvbklkc1tpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gd2FpdCBmb3IgYWxsIChpbmNsdWRpbmcgc3RvcmluZyB0byByZXN1bHRzKVxuICAgICAgICAgICAgcmV0dXJuICRxLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIHJldHVybiB0aGUgcmVzdWx0c1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0ZUFsbCh0cmFuc2xhdGlvbklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgLy8gdHJpbSBvZmYgYW55IHdoaXRlc3BhY2VcbiAgICAgICAgaWYgKHRyYW5zbGF0aW9uSWQpIHtcbiAgICAgICAgICB0cmFuc2xhdGlvbklkID0gdHJpbS5hcHBseSh0cmFuc2xhdGlvbklkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwcm9taXNlVG9XYWl0Rm9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgcHJvbWlzZSA9ICRwcmVmZXJyZWRMYW5ndWFnZSA/XG4gICAgICAgICAgICBsYW5nUHJvbWlzZXNbJHByZWZlcnJlZExhbmd1YWdlXSA6XG4gICAgICAgICAgICBsYW5nUHJvbWlzZXNbJHVzZXNdO1xuXG4gICAgICAgICAgZmFsbGJhY2tJbmRleCA9IDA7XG5cbiAgICAgICAgICBpZiAoJHN0b3JhZ2VGYWN0b3J5ICYmICFwcm9taXNlKSB7XG4gICAgICAgICAgICAvLyBsb29rcyBsaWtlIHRoZXJlJ3Mgbm8gcGVuZGluZyBwcm9taXNlIGZvciAkcHJlZmVycmVkTGFuZ3VhZ2Ugb3JcbiAgICAgICAgICAgIC8vICR1c2VzLiBNYXliZSB0aGVyZSdzIG9uZSBwZW5kaW5nIGZvciBhIGxhbmd1YWdlIHRoYXQgY29tZXMgZnJvbVxuICAgICAgICAgICAgLy8gc3RvcmFnZS5cbiAgICAgICAgICAgIHZhciBsYW5nS2V5ID0gU3RvcmFnZS5nZXQoJHN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgcHJvbWlzZSA9IGxhbmdQcm9taXNlc1tsYW5nS2V5XTtcblxuICAgICAgICAgICAgaWYgKCRmYWxsYmFja0xhbmd1YWdlICYmICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGluZGV4T2YoJGZhbGxiYWNrTGFuZ3VhZ2UsIGxhbmdLZXkpO1xuICAgICAgICAgICAgICAgIC8vIG1heWJlIHRoZSBsYW5ndWFnZSBmcm9tIHN0b3JhZ2UgaXMgYWxzbyBkZWZpbmVkIGFzIGZhbGxiYWNrIGxhbmd1YWdlXG4gICAgICAgICAgICAgICAgLy8gd2UgaW5jcmVhc2UgdGhlIGZhbGxiYWNrIGxhbmd1YWdlIGluZGV4IHRvIG5vdCBzZWFyY2ggaW4gdGhhdCBsYW5ndWFnZVxuICAgICAgICAgICAgICAgIC8vIGFzIGZhbGxiYWNrLCBzaW5jZSBpdCdzIHByb2JhYmx5IHRoZSBmaXJzdCB1c2VkIGxhbmd1YWdlXG4gICAgICAgICAgICAgICAgLy8gaW4gdGhhdCBjYXNlIHRoZSBpbmRleCBzdGFydHMgYWZ0ZXIgdGhlIGZpcnN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICBmYWxsYmFja0luZGV4ID0gKGluZGV4ID09PSAwKSA/IDEgOiAwO1xuXG4gICAgICAgICAgICAgICAgLy8gYnV0IHdlIGNhbiBtYWtlIHN1cmUgdG8gQUxXQVlTIGZhbGxiYWNrIHRvIHByZWZlcnJlZCBsYW5ndWFnZSBhdCBsZWFzdFxuICAgICAgICAgICAgICAgIGlmIChpbmRleE9mKCRmYWxsYmFja0xhbmd1YWdlLCAkcHJlZmVycmVkTGFuZ3VhZ2UpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgJGZhbGxiYWNrTGFuZ3VhZ2UucHVzaCgkcHJlZmVycmVkTGFuZ3VhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICAgIH0oKSk7XG5cbiAgICAgICAgaWYgKCFwcm9taXNlVG9XYWl0Rm9yKSB7XG4gICAgICAgICAgLy8gbm8gcHJvbWlzZSB0byB3YWl0IGZvcj8gb2theS4gVGhlbiB0aGVyZSdzIG5vIGxvYWRlciByZWdpc3RlcmVkXG4gICAgICAgICAgLy8gbm9yIGlzIGEgb25lIHBlbmRpbmcgZm9yIGxhbmd1YWdlIHRoYXQgY29tZXMgZnJvbSBzdG9yYWdlLlxuICAgICAgICAgIC8vIFdlIGNhbiBqdXN0IHRyYW5zbGF0ZS5cbiAgICAgICAgICBkZXRlcm1pbmVUcmFuc2xhdGlvbih0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKS50aGVuKGRlZmVycmVkLnJlc29sdmUsIGRlZmVycmVkLnJlamVjdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvbWlzZVRvV2FpdEZvci50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRldGVybWluZVRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQpLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgICAgICB9LCBkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmFtZSBhcHBseU5vdEZvdW5kSW5kaWNhdG9yc1xuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEFwcGxpZXMgbm90IGZvdW50IGluZGljYXRvcnMgdG8gZ2l2ZW4gdHJhbnNsYXRpb24gaWQsIGlmIG5lZWRlZC5cbiAgICAgICAqIFRoaXMgZnVuY3Rpb24gZ2V0cyBvbmx5IGV4ZWN1dGVkLCBpZiBhIHRyYW5zbGF0aW9uIGlkIGRvZXNuJ3QgZXhpc3QsXG4gICAgICAgKiB3aGljaCBpcyB3aHkgYSB0cmFuc2xhdGlvbiBpZCBpcyBleHBlY3RlZCBhcyBhcmd1bWVudC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHJhbnNsYXRpb25JZCBUcmFuc2xhdGlvbiBpZC5cbiAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFNhbWUgYXMgZ2l2ZW4gdHJhbnNsYXRpb24gaWQgYnV0IGFwcGxpZWQgd2l0aCBub3QgZm91bmRcbiAgICAgICAqIGluZGljYXRvcnMuXG4gICAgICAgKi9cbiAgICAgIHZhciBhcHBseU5vdEZvdW5kSW5kaWNhdG9ycyA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgIC8vIGFwcGx5aW5nIG5vdEZvdW5kSW5kaWNhdG9yc1xuICAgICAgICBpZiAoJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCkge1xuICAgICAgICAgIHRyYW5zbGF0aW9uSWQgPSBbJG5vdEZvdW5kSW5kaWNhdG9yTGVmdCwgdHJhbnNsYXRpb25JZF0uam9pbignICcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkbm90Rm91bmRJbmRpY2F0b3JSaWdodCkge1xuICAgICAgICAgIHRyYW5zbGF0aW9uSWQgPSBbdHJhbnNsYXRpb25JZCwgJG5vdEZvdW5kSW5kaWNhdG9yUmlnaHRdLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25JZDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5hbWUgdXNlTGFuZ3VhZ2VcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBNYWtlcyBhY3R1YWwgdXNlIG9mIGEgbGFuZ3VhZ2UgYnkgc2V0dGluZyBhIGdpdmVuIGxhbmd1YWdlIGtleSBhcyB1c2VkXG4gICAgICAgKiBsYW5ndWFnZSBhbmQgaW5mb3JtcyByZWdpc3RlcmVkIGludGVycG9sYXRvcnMgdG8gYWxzbyB1c2UgdGhlIGdpdmVuXG4gICAgICAgKiBrZXkgYXMgbG9jYWxlLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7a2V5fSBMb2NhbGUga2V5LlxuICAgICAgICovXG4gICAgICB2YXIgdXNlTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICR1c2VzID0ga2V5O1xuICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlQ2hhbmdlU3VjY2VzcycsIHtsYW5ndWFnZToga2V5fSk7XG5cbiAgICAgICAgaWYgKCRzdG9yYWdlRmFjdG9yeSkge1xuICAgICAgICAgIFN0b3JhZ2UucHV0KCR0cmFuc2xhdGUuc3RvcmFnZUtleSgpLCAkdXNlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW5mb3JtIGRlZmF1bHQgaW50ZXJwb2xhdG9yXG4gICAgICAgIGRlZmF1bHRJbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKCR1c2VzKTtcbiAgICAgICAgLy8gaW5mb3JtIGFsbCBvdGhlcnMgdG9vIVxuICAgICAgICBhbmd1bGFyLmZvckVhY2goaW50ZXJwb2xhdG9ySGFzaE1hcCwgZnVuY3Rpb24gKGludGVycG9sYXRvciwgaWQpIHtcbiAgICAgICAgICBpbnRlcnBvbGF0b3JIYXNoTWFwW2lkXS5zZXRMb2NhbGUoJHVzZXMpO1xuICAgICAgICB9KTtcbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUNoYW5nZUVuZCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuYW1lIGxvYWRBc3luY1xuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIEtpY2tzIG9mIHJlZ2lzdGVyZWQgYXN5bmMgbG9hZGVyIHVzaW5nIGAkaW5qZWN0b3JgIGFuZCBhcHBsaWVzIGV4aXN0aW5nXG4gICAgICAgKiBsb2FkZXIgb3B0aW9ucy4gV2hlbiByZXNvbHZlZCwgaXQgdXBkYXRlcyB0cmFuc2xhdGlvbiB0YWJsZXMgYWNjb3JkaW5nbHlcbiAgICAgICAqIG9yIHJlamVjdHMgd2l0aCBnaXZlbiBsYW5ndWFnZSBrZXkuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBMYW5ndWFnZSBrZXkuXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBBIHByb21pc2UuXG4gICAgICAgKi9cbiAgICAgIHZhciBsb2FkQXN5bmMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgdGhyb3cgJ05vIGxhbmd1YWdlIGtleSBzcGVjaWZpZWQgZm9yIGxvYWRpbmcuJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZUxvYWRpbmdTdGFydCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICAgIHBlbmRpbmdMb2FkZXIgPSB0cnVlO1xuXG4gICAgICAgIHZhciBjYWNoZSA9IGxvYWRlckNhY2hlO1xuICAgICAgICBpZiAodHlwZW9mKGNhY2hlKSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAvLyBnZXR0aW5nIG9uLWRlbWFuZCBpbnN0YW5jZSBvZiBsb2FkZXJcbiAgICAgICAgICBjYWNoZSA9ICRpbmplY3Rvci5nZXQoY2FjaGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvYWRlck9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgJGxvYWRlck9wdGlvbnMsIHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAkaHR0cDogYW5ndWxhci5leHRlbmQoe30sIHtcbiAgICAgICAgICAgIGNhY2hlOiBjYWNoZVxuICAgICAgICAgIH0sICRsb2FkZXJPcHRpb25zLiRodHRwKVxuICAgICAgICB9KTtcblxuICAgICAgICAkaW5qZWN0b3IuZ2V0KCRsb2FkZXJGYWN0b3J5KShsb2FkZXJPcHRpb25zKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgdmFyIHRyYW5zbGF0aW9uVGFibGUgPSB7fTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ1N1Y2Nlc3MnLCB7bGFuZ3VhZ2U6IGtleX0pO1xuXG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEsIGZ1bmN0aW9uICh0YWJsZSkge1xuICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCh0cmFuc2xhdGlvblRhYmxlLCBmbGF0T2JqZWN0KHRhYmxlKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQodHJhbnNsYXRpb25UYWJsZSwgZmxhdE9iamVjdChkYXRhKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBlbmRpbmdMb2FkZXIgPSBmYWxzZTtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgdGFibGU6IHRyYW5zbGF0aW9uVGFibGVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ0VuZCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ0Vycm9yJywge2xhbmd1YWdlOiBrZXl9KTtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoa2V5KTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlTG9hZGluZ0VuZCcsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIGlmICgkc3RvcmFnZUZhY3RvcnkpIHtcbiAgICAgICAgU3RvcmFnZSA9ICRpbmplY3Rvci5nZXQoJHN0b3JhZ2VGYWN0b3J5KTtcblxuICAgICAgICBpZiAoIVN0b3JhZ2UuZ2V0IHx8ICFTdG9yYWdlLnB1dCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGRuXFwndCB1c2Ugc3RvcmFnZSBcXCcnICsgJHN0b3JhZ2VGYWN0b3J5ICsgJ1xcJywgbWlzc2luZyBnZXQoKSBvciBwdXQoKSBtZXRob2QhJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgYWRkaXRpb25hbCBzZXR0aW5nc1xuICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihkZWZhdWx0SW50ZXJwb2xhdG9yLnVzZVNhbml0aXplVmFsdWVTdHJhdGVneSkpIHtcbiAgICAgICAgZGVmYXVsdEludGVycG9sYXRvci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3koJGludGVycG9sYXRpb25TYW5pdGl6YXRpb25TdHJhdGVneSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHdlIGhhdmUgYWRkaXRpb25hbCBpbnRlcnBvbGF0aW9ucyB0aGF0IHdlcmUgYWRkZWQgdmlhXG4gICAgICAvLyAkdHJhbnNsYXRlUHJvdmlkZXIuYWRkSW50ZXJwb2xhdGlvbigpLCB3ZSBoYXZlIHRvIG1hcCdlbVxuICAgICAgaWYgKCRpbnRlcnBvbGF0b3JGYWN0b3JpZXMubGVuZ3RoKSB7XG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkaW50ZXJwb2xhdG9yRmFjdG9yaWVzLCBmdW5jdGlvbiAoaW50ZXJwb2xhdG9yRmFjdG9yeSkge1xuICAgICAgICAgIHZhciBpbnRlcnBvbGF0b3IgPSAkaW5qZWN0b3IuZ2V0KGludGVycG9sYXRvckZhY3RvcnkpO1xuICAgICAgICAgIC8vIHNldHRpbmcgaW5pdGlhbCBsb2NhbGUgZm9yIGVhY2ggaW50ZXJwb2xhdGlvbiBzZXJ2aWNlXG4gICAgICAgICAgaW50ZXJwb2xhdG9yLnNldExvY2FsZSgkcHJlZmVycmVkTGFuZ3VhZ2UgfHwgJHVzZXMpO1xuICAgICAgICAgIC8vIGFwcGx5IGFkZGl0aW9uYWwgc2V0dGluZ3NcbiAgICAgICAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKGludGVycG9sYXRvci51c2VTYW5pdGl6ZVZhbHVlU3RyYXRlZ3kpKSB7XG4gICAgICAgICAgICBpbnRlcnBvbGF0b3IudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5KCRpbnRlcnBvbGF0aW9uU2FuaXRpemF0aW9uU3RyYXRlZ3kpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBtYWtlJ2VtIHJlY29nbml6YWJsZSB0aHJvdWdoIGlkXG4gICAgICAgICAgaW50ZXJwb2xhdG9ySGFzaE1hcFtpbnRlcnBvbGF0b3IuZ2V0SW50ZXJwb2xhdGlvbklkZW50aWZpZXIoKV0gPSBpbnRlcnBvbGF0b3I7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIEBuYW1lIGdldFRyYW5zbGF0aW9uVGFibGVcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSB0cmFuc2xhdGlvbiB0YWJsZVxuICAgICAgICogb3IgaXMgcmVqZWN0ZWQgaWYgYW4gZXJyb3Igb2NjdXJyZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIGxhbmdLZXlcbiAgICAgICAqIEByZXR1cm5zIHtRLnByb21pc2V9XG4gICAgICAgKi9cbiAgICAgIHZhciBnZXRUcmFuc2xhdGlvblRhYmxlID0gZnVuY3Rpb24gKGxhbmdLZXkpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCgkdHJhbnNsYXRpb25UYWJsZSwgbGFuZ0tleSkpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCR0cmFuc2xhdGlvblRhYmxlW2xhbmdLZXldKTtcbiAgICAgICAgfSBlbHNlIGlmIChsYW5nUHJvbWlzZXNbbGFuZ0tleV0pIHtcbiAgICAgICAgICBsYW5nUHJvbWlzZXNbbGFuZ0tleV0udGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgdHJhbnNsYXRpb25zKGRhdGEua2V5LCBkYXRhLnRhYmxlKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YS50YWJsZSk7XG4gICAgICAgICAgfSwgZGVmZXJyZWQucmVqZWN0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5hbWUgZ2V0RmFsbGJhY2tUcmFuc2xhdGlvblxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgd2lsbCByZXNvbHZlIHRvIHRoZSB0cmFuc2xhdGlvblxuICAgICAgICogb3IgYmUgcmVqZWN0ZWQgaWYgbm8gdHJhbnNsYXRpb24gd2FzIGZvdW5kIGZvciB0aGUgbGFuZ3VhZ2UuXG4gICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGN1cnJlbnRseSBvbmx5IHVzZWQgZm9yIGZhbGxiYWNrIGxhbmd1YWdlIHRyYW5zbGF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBsYW5nS2V5IFRoZSBsYW5ndWFnZSB0byB0cmFuc2xhdGUgdG8uXG4gICAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb25JZFxuICAgICAgICogQHBhcmFtIGludGVycG9sYXRlUGFyYW1zXG4gICAgICAgKiBAcGFyYW0gSW50ZXJwb2xhdG9yXG4gICAgICAgKiBAcmV0dXJucyB7US5wcm9taXNlfVxuICAgICAgICovXG4gICAgICB2YXIgZ2V0RmFsbGJhY2tUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uIChsYW5nS2V5LCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgZ2V0VHJhbnNsYXRpb25UYWJsZShsYW5nS2V5KS50aGVuKGZ1bmN0aW9uICh0cmFuc2xhdGlvblRhYmxlKSB7XG4gICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0cmFuc2xhdGlvblRhYmxlLCB0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgICAgSW50ZXJwb2xhdG9yLnNldExvY2FsZShsYW5nS2V5KTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoSW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHRyYW5zbGF0aW9uVGFibGVbdHJhbnNsYXRpb25JZF0sIGludGVycG9sYXRlUGFyYW1zKSk7XG4gICAgICAgICAgICBJbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKCR1c2VzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVmZXJyZWQucmVqZWN0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBkZWZlcnJlZC5yZWplY3QpO1xuXG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmFtZSBnZXRGYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudFxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgYSB0cmFuc2xhdGlvblxuICAgICAgICogVGhpcyBmdW5jdGlvbiBpcyBjdXJyZW50bHkgb25seSB1c2VkIGZvciBmYWxsYmFjayBsYW5ndWFnZSB0cmFuc2xhdGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gbGFuZ0tleSBUaGUgbGFuZ3VhZ2UgdG8gdHJhbnNsYXRlIHRvLlxuICAgICAgICogQHBhcmFtIHRyYW5zbGF0aW9uSWRcbiAgICAgICAqIEBwYXJhbSBpbnRlcnBvbGF0ZVBhcmFtc1xuICAgICAgICogQHBhcmFtIEludGVycG9sYXRvclxuICAgICAgICogQHJldHVybnMge3N0cmluZ30gdHJhbnNsYXRpb25cbiAgICAgICAqL1xuICAgICAgdmFyIGdldEZhbGxiYWNrVHJhbnNsYXRpb25JbnN0YW50ID0gZnVuY3Rpb24gKGxhbmdLZXksIHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpIHtcbiAgICAgICAgdmFyIHJlc3VsdCwgdHJhbnNsYXRpb25UYWJsZSA9ICR0cmFuc2xhdGlvblRhYmxlW2xhbmdLZXldO1xuXG4gICAgICAgIGlmICh0cmFuc2xhdGlvblRhYmxlICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0cmFuc2xhdGlvblRhYmxlLCB0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgIEludGVycG9sYXRvci5zZXRMb2NhbGUobGFuZ0tleSk7XG4gICAgICAgICAgcmVzdWx0ID0gSW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHRyYW5zbGF0aW9uVGFibGVbdHJhbnNsYXRpb25JZF0sIGludGVycG9sYXRlUGFyYW1zKTtcbiAgICAgICAgICBJbnRlcnBvbGF0b3Iuc2V0TG9jYWxlKCR1c2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5hbWUgdHJhbnNsYXRlQnlIYW5kbGVyXG4gICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICpcbiAgICAgICAqIFRyYW5zbGF0ZSBieSBtaXNzaW5nIHRyYW5zbGF0aW9uIGhhbmRsZXIuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHRyYW5zbGF0aW9uSWRcbiAgICAgICAqIEByZXR1cm5zIHRyYW5zbGF0aW9uIGNyZWF0ZWQgYnkgJG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIgb3IgdHJhbnNsYXRpb25JZCBpcyAkbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlciBpc1xuICAgICAgICogYWJzZW50XG4gICAgICAgKi9cbiAgICAgIHZhciB0cmFuc2xhdGVCeUhhbmRsZXIgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCkge1xuICAgICAgICAvLyBJZiB3ZSBoYXZlIGEgaGFuZGxlciBmYWN0b3J5IC0gd2UgbWlnaHQgYWxzbyBjYWxsIGl0IGhlcmUgdG8gZGV0ZXJtaW5lIGlmIGl0IHByb3ZpZGVzXG4gICAgICAgIC8vIGEgZGVmYXVsdCB0ZXh0IGZvciBhIHRyYW5zbGF0aW9uaWQgdGhhdCBjYW4ndCBiZSBmb3VuZCBhbnl3aGVyZSBpbiBvdXIgdGFibGVzXG4gICAgICAgIGlmICgkbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckZhY3RvcnkpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0U3RyaW5nID0gJGluamVjdG9yLmdldCgkbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckZhY3RvcnkpKHRyYW5zbGF0aW9uSWQsICR1c2VzKTtcbiAgICAgICAgICBpZiAocmVzdWx0U3RyaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHRTdHJpbmc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2xhdGlvbklkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25JZDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmFtZSByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZVxuICAgICAgICogQHByaXZhdGVcbiAgICAgICAqXG4gICAgICAgKiBSZWN1cnNpdmUgaGVscGVyIGZ1bmN0aW9uIGZvciBmYWxsYmFja1RyYW5zbGF0aW9uIHRoYXQgd2lsbCBzZXF1ZW50aWFsbHkgbG9va1xuICAgICAgICogZm9yIGEgdHJhbnNsYXRpb24gaW4gdGhlIGZhbGxiYWNrTGFuZ3VhZ2VzIHN0YXJ0aW5nIHdpdGggZmFsbGJhY2tMYW5ndWFnZUluZGV4LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSBmYWxsYmFja0xhbmd1YWdlSW5kZXhcbiAgICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbklkXG4gICAgICAgKiBAcGFyYW0gaW50ZXJwb2xhdGVQYXJhbXNcbiAgICAgICAqIEBwYXJhbSBJbnRlcnBvbGF0b3JcbiAgICAgICAqIEByZXR1cm5zIHtRLnByb21pc2V9IFByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgdG8gdGhlIHRyYW5zbGF0aW9uLlxuICAgICAgICovXG4gICAgICB2YXIgcmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoZmFsbGJhY2tMYW5ndWFnZUluZGV4LCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgaWYgKGZhbGxiYWNrTGFuZ3VhZ2VJbmRleCA8ICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBsYW5nS2V5ID0gJGZhbGxiYWNrTGFuZ3VhZ2VbZmFsbGJhY2tMYW5ndWFnZUluZGV4XTtcbiAgICAgICAgICBnZXRGYWxsYmFja1RyYW5zbGF0aW9uKGxhbmdLZXksIHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBJbnRlcnBvbGF0b3IpLnRoZW4oXG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAvLyBMb29rIGluIHRoZSBuZXh0IGZhbGxiYWNrIGxhbmd1YWdlIGZvciBhIHRyYW5zbGF0aW9uLlxuICAgICAgICAgICAgICAvLyBJdCBkZWxheXMgdGhlIHJlc29sdmluZyBieSBwYXNzaW5nIGFub3RoZXIgcHJvbWlzZSB0byByZXNvbHZlLlxuICAgICAgICAgICAgICByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZShmYWxsYmFja0xhbmd1YWdlSW5kZXggKyAxLCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKS50aGVuKGRlZmVycmVkLnJlc29sdmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTm8gdHJhbnNsYXRpb24gZm91bmQgaW4gYW55IGZhbGxiYWNrIGxhbmd1YWdlXG4gICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cmFuc2xhdGVCeUhhbmRsZXIodHJhbnNsYXRpb25JZCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmFtZSByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZUluc3RhbnRcbiAgICAgICAqIEBwcml2YXRlXG4gICAgICAgKlxuICAgICAgICogUmVjdXJzaXZlIGhlbHBlciBmdW5jdGlvbiBmb3IgZmFsbGJhY2tUcmFuc2xhdGlvbiB0aGF0IHdpbGwgc2VxdWVudGlhbGx5IGxvb2tcbiAgICAgICAqIGZvciBhIHRyYW5zbGF0aW9uIGluIHRoZSBmYWxsYmFja0xhbmd1YWdlcyBzdGFydGluZyB3aXRoIGZhbGxiYWNrTGFuZ3VhZ2VJbmRleC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0gZmFsbGJhY2tMYW5ndWFnZUluZGV4XG4gICAgICAgKiBAcGFyYW0gdHJhbnNsYXRpb25JZFxuICAgICAgICogQHBhcmFtIGludGVycG9sYXRlUGFyYW1zXG4gICAgICAgKiBAcGFyYW0gSW50ZXJwb2xhdG9yXG4gICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSB0cmFuc2xhdGlvblxuICAgICAgICovXG4gICAgICB2YXIgcmVzb2x2ZUZvckZhbGxiYWNrTGFuZ3VhZ2VJbnN0YW50ID0gZnVuY3Rpb24gKGZhbGxiYWNrTGFuZ3VhZ2VJbmRleCwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcikge1xuICAgICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICAgIGlmIChmYWxsYmFja0xhbmd1YWdlSW5kZXggPCAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICB2YXIgbGFuZ0tleSA9ICRmYWxsYmFja0xhbmd1YWdlW2ZhbGxiYWNrTGFuZ3VhZ2VJbmRleF07XG4gICAgICAgICAgcmVzdWx0ID0gZ2V0RmFsbGJhY2tUcmFuc2xhdGlvbkluc3RhbnQobGFuZ0tleSwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcik7XG4gICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc29sdmVGb3JGYWxsYmFja0xhbmd1YWdlSW5zdGFudChmYWxsYmFja0xhbmd1YWdlSW5kZXggKyAxLCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNsYXRlcyB3aXRoIHRoZSB1c2FnZSBvZiB0aGUgZmFsbGJhY2sgbGFuZ3VhZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbklkXG4gICAgICAgKiBAcGFyYW0gaW50ZXJwb2xhdGVQYXJhbXNcbiAgICAgICAqIEBwYXJhbSBJbnRlcnBvbGF0b3JcbiAgICAgICAqIEByZXR1cm5zIHtRLnByb21pc2V9IFByb21pc2UsIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zbGF0aW9uLlxuICAgICAgICovXG4gICAgICB2YXIgZmFsbGJhY2tUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgIC8vIFN0YXJ0IHdpdGggdGhlIGZhbGxiYWNrTGFuZ3VhZ2Ugd2l0aCBpbmRleCAwXG4gICAgICAgIHJldHVybiByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZSgoc3RhcnRGYWxsYmFja0l0ZXJhdGlvbj4wID8gc3RhcnRGYWxsYmFja0l0ZXJhdGlvbiA6IGZhbGxiYWNrSW5kZXgpLCB0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKTtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogVHJhbnNsYXRlcyB3aXRoIHRoZSB1c2FnZSBvZiB0aGUgZmFsbGJhY2sgbGFuZ3VhZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB0cmFuc2xhdGlvbklkXG4gICAgICAgKiBAcGFyYW0gaW50ZXJwb2xhdGVQYXJhbXNcbiAgICAgICAqIEBwYXJhbSBJbnRlcnBvbGF0b3JcbiAgICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHRyYW5zbGF0aW9uXG4gICAgICAgKi9cbiAgICAgIHZhciBmYWxsYmFja1RyYW5zbGF0aW9uSW5zdGFudCA9IGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKSB7XG4gICAgICAgIC8vIFN0YXJ0IHdpdGggdGhlIGZhbGxiYWNrTGFuZ3VhZ2Ugd2l0aCBpbmRleCAwXG4gICAgICAgIHJldHVybiByZXNvbHZlRm9yRmFsbGJhY2tMYW5ndWFnZUluc3RhbnQoKHN0YXJ0RmFsbGJhY2tJdGVyYXRpb24+MCA/IHN0YXJ0RmFsbGJhY2tJdGVyYXRpb24gOiBmYWxsYmFja0luZGV4KSwgdHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcik7XG4gICAgICB9O1xuXG4gICAgICB2YXIgZGV0ZXJtaW5lVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCkge1xuXG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgdmFyIHRhYmxlID0gJHVzZXMgPyAkdHJhbnNsYXRpb25UYWJsZVskdXNlc10gOiAkdHJhbnNsYXRpb25UYWJsZSxcbiAgICAgICAgICAgIEludGVycG9sYXRvciA9IChpbnRlcnBvbGF0aW9uSWQpID8gaW50ZXJwb2xhdG9ySGFzaE1hcFtpbnRlcnBvbGF0aW9uSWRdIDogZGVmYXVsdEludGVycG9sYXRvcjtcblxuICAgICAgICAvLyBpZiB0aGUgdHJhbnNsYXRpb24gaWQgZXhpc3RzLCB3ZSBjYW4ganVzdCBpbnRlcnBvbGF0ZSBpdFxuICAgICAgICBpZiAodGFibGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhYmxlLCB0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IHRhYmxlW3RyYW5zbGF0aW9uSWRdO1xuXG4gICAgICAgICAgLy8gSWYgdXNpbmcgbGluaywgcmVydW4gJHRyYW5zbGF0ZSB3aXRoIGxpbmtlZCB0cmFuc2xhdGlvbklkIGFuZCByZXR1cm4gaXRcbiAgICAgICAgICBpZiAodHJhbnNsYXRpb24uc3Vic3RyKDAsIDIpID09PSAnQDonKSB7XG5cbiAgICAgICAgICAgICR0cmFuc2xhdGUodHJhbnNsYXRpb24uc3Vic3RyKDIpLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKVxuICAgICAgICAgICAgICAudGhlbihkZWZlcnJlZC5yZXNvbHZlLCBkZWZlcnJlZC5yZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKEludGVycG9sYXRvci5pbnRlcnBvbGF0ZSh0cmFuc2xhdGlvbiwgaW50ZXJwb2xhdGVQYXJhbXMpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJUcmFuc2xhdGlvbjtcbiAgICAgICAgICAvLyBmb3IgbG9nZ2luZyBwdXJwb3NlcyBvbmx5IChhcyBpbiAkdHJhbnNsYXRlTWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckxvZyksIHZhbHVlIGlzIG5vdCByZXR1cm5lZCB0byBwcm9taXNlXG4gICAgICAgICAgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSAmJiAhcGVuZGluZ0xvYWRlcikge1xuICAgICAgICAgICAgbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlclRyYW5zbGF0aW9uID0gdHJhbnNsYXRlQnlIYW5kbGVyKHRyYW5zbGF0aW9uSWQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIHNpbmNlIHdlIGNvdWxkbid0IHRyYW5zbGF0ZSB0aGUgaW5pdGFsIHJlcXVlc3RlZCB0cmFuc2xhdGlvbiBpZCxcbiAgICAgICAgICAvLyB3ZSB0cnkgaXQgbm93IHdpdGggb25lIG9yIG1vcmUgZmFsbGJhY2sgbGFuZ3VhZ2VzLCBpZiBmYWxsYmFjayBsYW5ndWFnZShzKSBpc1xuICAgICAgICAgIC8vIGNvbmZpZ3VyZWQuXG4gICAgICAgICAgaWYgKCR1c2VzICYmICRmYWxsYmFja0xhbmd1YWdlICYmICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgICAgZmFsbGJhY2tUcmFuc2xhdGlvbih0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgSW50ZXJwb2xhdG9yKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh0cmFuc2xhdGlvbikge1xuICAgICAgICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cmFuc2xhdGlvbik7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKF90cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoYXBwbHlOb3RGb3VuZEluZGljYXRvcnMoX3RyYW5zbGF0aW9uSWQpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSAmJiAhcGVuZGluZ0xvYWRlciAmJiBtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyVHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIC8vIGxvb2tzIGxpa2UgdGhlIHJlcXVlc3RlZCB0cmFuc2xhdGlvbiBpZCBkb2Vzbid0IGV4aXN0cy5cbiAgICAgICAgICAgIC8vIE5vdywgaWYgdGhlcmUgaXMgYSByZWdpc3RlcmVkIGhhbmRsZXIgZm9yIG1pc3NpbmcgdHJhbnNsYXRpb25zIGFuZCBub1xuICAgICAgICAgICAgLy8gYXN5bmNMb2FkZXIgaXMgcGVuZGluZywgd2UgZXhlY3V0ZSB0aGUgaGFuZGxlclxuICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyVHJhbnNsYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoYXBwbHlOb3RGb3VuZEluZGljYXRvcnModHJhbnNsYXRpb25JZCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBkZXRlcm1pbmVUcmFuc2xhdGlvbkluc3RhbnQgPSBmdW5jdGlvbiAodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCkge1xuXG4gICAgICAgIHZhciByZXN1bHQsIHRhYmxlID0gJHVzZXMgPyAkdHJhbnNsYXRpb25UYWJsZVskdXNlc10gOiAkdHJhbnNsYXRpb25UYWJsZSxcbiAgICAgICAgICAgIEludGVycG9sYXRvciA9IChpbnRlcnBvbGF0aW9uSWQpID8gaW50ZXJwb2xhdG9ySGFzaE1hcFtpbnRlcnBvbGF0aW9uSWRdIDogZGVmYXVsdEludGVycG9sYXRvcjtcblxuICAgICAgICAvLyBpZiB0aGUgdHJhbnNsYXRpb24gaWQgZXhpc3RzLCB3ZSBjYW4ganVzdCBpbnRlcnBvbGF0ZSBpdFxuICAgICAgICBpZiAodGFibGUgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhYmxlLCB0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgIHZhciB0cmFuc2xhdGlvbiA9IHRhYmxlW3RyYW5zbGF0aW9uSWRdO1xuXG4gICAgICAgICAgLy8gSWYgdXNpbmcgbGluaywgcmVydW4gJHRyYW5zbGF0ZSB3aXRoIGxpbmtlZCB0cmFuc2xhdGlvbklkIGFuZCByZXR1cm4gaXRcbiAgICAgICAgICBpZiAodHJhbnNsYXRpb24uc3Vic3RyKDAsIDIpID09PSAnQDonKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBkZXRlcm1pbmVUcmFuc2xhdGlvbkluc3RhbnQodHJhbnNsYXRpb24uc3Vic3RyKDIpLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gSW50ZXJwb2xhdG9yLmludGVycG9sYXRlKHRyYW5zbGF0aW9uLCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyVHJhbnNsYXRpb247XG4gICAgICAgICAgLy8gZm9yIGxvZ2dpbmcgcHVycG9zZXMgb25seSAoYXMgaW4gJHRyYW5zbGF0ZU1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJMb2cpLCB2YWx1ZSBpcyBub3QgcmV0dXJuZWQgdG8gcHJvbWlzZVxuICAgICAgICAgIGlmICgkbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckZhY3RvcnkgJiYgIXBlbmRpbmdMb2FkZXIpIHtcbiAgICAgICAgICAgIG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJUcmFuc2xhdGlvbiA9IHRyYW5zbGF0ZUJ5SGFuZGxlcih0cmFuc2xhdGlvbklkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzaW5jZSB3ZSBjb3VsZG4ndCB0cmFuc2xhdGUgdGhlIGluaXRhbCByZXF1ZXN0ZWQgdHJhbnNsYXRpb24gaWQsXG4gICAgICAgICAgLy8gd2UgdHJ5IGl0IG5vdyB3aXRoIG9uZSBvciBtb3JlIGZhbGxiYWNrIGxhbmd1YWdlcywgaWYgZmFsbGJhY2sgbGFuZ3VhZ2UocykgaXNcbiAgICAgICAgICAvLyBjb25maWd1cmVkLlxuICAgICAgICAgIGlmICgkdXNlcyAmJiAkZmFsbGJhY2tMYW5ndWFnZSAmJiAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZhbGxiYWNrSW5kZXggPSAwO1xuICAgICAgICAgICAgcmVzdWx0ID0gZmFsbGJhY2tUcmFuc2xhdGlvbkluc3RhbnQodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIEludGVycG9sYXRvcik7XG4gICAgICAgICAgfSBlbHNlIGlmICgkbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlckZhY3RvcnkgJiYgIXBlbmRpbmdMb2FkZXIgJiYgbWlzc2luZ1RyYW5zbGF0aW9uSGFuZGxlclRyYW5zbGF0aW9uKSB7XG4gICAgICAgICAgICAvLyBsb29rcyBsaWtlIHRoZSByZXF1ZXN0ZWQgdHJhbnNsYXRpb24gaWQgZG9lc24ndCBleGlzdHMuXG4gICAgICAgICAgICAvLyBOb3csIGlmIHRoZXJlIGlzIGEgcmVnaXN0ZXJlZCBoYW5kbGVyIGZvciBtaXNzaW5nIHRyYW5zbGF0aW9ucyBhbmQgbm9cbiAgICAgICAgICAgIC8vIGFzeW5jTG9hZGVyIGlzIHBlbmRpbmcsIHdlIGV4ZWN1dGUgdGhlIGhhbmRsZXJcbiAgICAgICAgICAgIHJlc3VsdCA9IG1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXJUcmFuc2xhdGlvbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gYXBwbHlOb3RGb3VuZEluZGljYXRvcnModHJhbnNsYXRpb25JZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjcHJlZmVycmVkTGFuZ3VhZ2VcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgdGhlIGxhbmd1YWdlIGtleSBmb3IgdGhlIHByZWZlcnJlZCBsYW5ndWFnZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ0tleSBsYW5ndWFnZSBTdHJpbmcgb3IgQXJyYXkgdG8gYmUgdXNlZCBhcyBwcmVmZXJyZWRMYW5ndWFnZSAoY2hhbmdpbmcgYXQgcnVudGltZSlcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IHByZWZlcnJlZCBsYW5ndWFnZSBrZXlcbiAgICAgICAqL1xuICAgICAgJHRyYW5zbGF0ZS5wcmVmZXJyZWRMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICAgIGlmKGxhbmdLZXkpIHtcbiAgICAgICAgICBzZXR1cFByZWZlcnJlZExhbmd1YWdlKGxhbmdLZXkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkcHJlZmVycmVkTGFuZ3VhZ2U7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI2Nsb2FrQ2xhc3NOYW1lXG4gICAgICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIHRoZSBjb25maWd1cmVkIGNsYXNzIG5hbWUgZm9yIGB0cmFuc2xhdGUtY2xvYWtgIGRpcmVjdGl2ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGNsb2FrQ2xhc3NOYW1lXG4gICAgICAgKi9cbiAgICAgICR0cmFuc2xhdGUuY2xvYWtDbGFzc05hbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkY2xvYWtDbGFzc05hbWU7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI2ZhbGxiYWNrTGFuZ3VhZ2VcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgdGhlIGxhbmd1YWdlIGtleSBmb3IgdGhlIGZhbGxiYWNrIGxhbmd1YWdlcyBvciBzZXRzIGEgbmV3IGZhbGxiYWNrIHN0YWNrLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbGFuZ0tleSBsYW5ndWFnZSBTdHJpbmcgb3IgQXJyYXkgb2YgZmFsbGJhY2sgbGFuZ3VhZ2VzIHRvIGJlIHVzZWQgKHRvIGNoYW5nZSBzdGFjayBhdCBydW50aW1lKVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ3x8YXJyYXl9IGZhbGxiYWNrIGxhbmd1YWdlIGtleVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLmZhbGxiYWNrTGFuZ3VhZ2UgPSBmdW5jdGlvbiAobGFuZ0tleSkge1xuICAgICAgICBpZiAobGFuZ0tleSAhPT0gdW5kZWZpbmVkICYmIGxhbmdLZXkgIT09IG51bGwpIHtcbiAgICAgICAgICBmYWxsYmFja1N0YWNrKGxhbmdLZXkpO1xuXG4gICAgICAgICAgLy8gYXMgd2UgbWlnaHQgaGF2ZSBhbiBhc3luYyBsb2FkZXIgaW5pdGlhdGVkIGFuZCBhIG5ldyB0cmFuc2xhdGlvbiBsYW5ndWFnZSBtaWdodCBoYXZlIGJlZW4gZGVmaW5lZFxuICAgICAgICAgIC8vIHdlIG5lZWQgdG8gYWRkIHRoZSBwcm9taXNlIHRvIHRoZSBzdGFjayBhbHNvLiBTbyAtIGl0ZXJhdGUuXG4gICAgICAgICAgaWYgKCRsb2FkZXJGYWN0b3J5KSB7XG4gICAgICAgICAgICBpZiAoJGZhbGxiYWNrTGFuZ3VhZ2UgJiYgJGZhbGxiYWNrTGFuZ3VhZ2UubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICghbGFuZ1Byb21pc2VzWyRmYWxsYmFja0xhbmd1YWdlW2ldXSkge1xuICAgICAgICAgICAgICAgICAgbGFuZ1Byb21pc2VzWyRmYWxsYmFja0xhbmd1YWdlW2ldXSA9IGxvYWRBc3luYygkZmFsbGJhY2tMYW5ndWFnZVtpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgICR0cmFuc2xhdGUudXNlKCR0cmFuc2xhdGUudXNlKCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkZmFsbGJhY2tXYXNTdHJpbmcpIHtcbiAgICAgICAgICByZXR1cm4gJGZhbGxiYWNrTGFuZ3VhZ2VbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuICRmYWxsYmFja0xhbmd1YWdlO1xuICAgICAgICB9XG5cbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjdXNlRmFsbGJhY2tMYW5ndWFnZVxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2V0cyB0aGUgZmlyc3Qga2V5IG9mIHRoZSBmYWxsYmFjayBsYW5ndWFnZSBzdGFjayB0byBiZSB1c2VkIGZvciB0cmFuc2xhdGlvbi5cbiAgICAgICAqIFRoZXJlZm9yZSBhbGwgbGFuZ3VhZ2VzIGluIHRoZSBmYWxsYmFjayBhcnJheSBCRUZPUkUgdGhpcyBrZXkgd2lsbCBiZSBza2lwcGVkIVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbGFuZ0tleSBDb250YWlucyB0aGUgbGFuZ0tleSB0aGUgaXRlcmF0aW9uIHNoYWxsIHN0YXJ0IHdpdGguIFNldCB0byBmYWxzZSBpZiB5b3Ugd2FudCB0b1xuICAgICAgICogZ2V0IGJhY2sgdG8gdGhlIHdob2xlIHN0YWNrXG4gICAgICAgKi9cbiAgICAgICR0cmFuc2xhdGUudXNlRmFsbGJhY2tMYW5ndWFnZSA9IGZ1bmN0aW9uIChsYW5nS2V5KSB7XG4gICAgICAgIGlmIChsYW5nS2V5ICE9PSB1bmRlZmluZWQgJiYgbGFuZ0tleSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmICghbGFuZ0tleSkge1xuICAgICAgICAgICAgc3RhcnRGYWxsYmFja0l0ZXJhdGlvbiA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBsYW5nS2V5UG9zaXRpb24gPSBpbmRleE9mKCRmYWxsYmFja0xhbmd1YWdlLCBsYW5nS2V5KTtcbiAgICAgICAgICAgIGlmIChsYW5nS2V5UG9zaXRpb24gPiAtMSkge1xuICAgICAgICAgICAgICBzdGFydEZhbGxiYWNrSXRlcmF0aW9uID0gbGFuZ0tleVBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjcHJvcG9zZWRMYW5ndWFnZVxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmV0dXJucyB0aGUgbGFuZ3VhZ2Uga2V5IG9mIGxhbmd1YWdlIHRoYXQgaXMgY3VycmVudGx5IGxvYWRlZCBhc3luY2hyb25vdXNseS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IGxhbmd1YWdlIGtleVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLnByb3Bvc2VkTGFuZ3VhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAkbmV4dExhbmc7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI3N0b3JhZ2VcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgcmVnaXN0ZXJlZCBzdG9yYWdlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge29iamVjdH0gU3RvcmFnZVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLnN0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBTdG9yYWdlO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZSN1c2VcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFRlbGxzIGFuZ3VsYXItdHJhbnNsYXRlIHdoaWNoIGxhbmd1YWdlIHRvIHVzZSBieSBnaXZlbiBsYW5ndWFnZSBrZXkuIFRoaXMgbWV0aG9kIGlzXG4gICAgICAgKiB1c2VkIHRvIGNoYW5nZSBsYW5ndWFnZSBhdCBydW50aW1lLiBJdCBhbHNvIHRha2VzIGNhcmUgb2Ygc3RvcmluZyB0aGUgbGFuZ3VhZ2VcbiAgICAgICAqIGtleSBpbiBhIGNvbmZpZ3VyZWQgc3RvcmUgdG8gbGV0IHlvdXIgYXBwIHJlbWVtYmVyIHRoZSBjaG9vc2VkIGxhbmd1YWdlLlxuICAgICAgICpcbiAgICAgICAqIFdoZW4gdHJ5aW5nIHRvICd1c2UnIGEgbGFuZ3VhZ2Ugd2hpY2ggaXNuJ3QgYXZhaWxhYmxlIGl0IHRyaWVzIHRvIGxvYWQgaXRcbiAgICAgICAqIGFzeW5jaHJvbm91c2x5IHdpdGggcmVnaXN0ZXJlZCBsb2FkZXJzLlxuICAgICAgICpcbiAgICAgICAqIFJldHVybnMgcHJvbWlzZSBvYmplY3Qgd2l0aCBsb2FkZWQgbGFuZ3VhZ2UgZmlsZSBkYXRhXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogJHRyYW5zbGF0ZS51c2UoXCJlbl9VU1wiKS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgICogICAkc2NvcGUudGV4dCA9ICR0cmFuc2xhdGUoXCJIRUxMT1wiKTtcbiAgICAgICAqIH0pO1xuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTGFuZ3VhZ2Uga2V5XG4gICAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IExhbmd1YWdlIGtleVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLnVzZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFrZXkpIHtcbiAgICAgICAgICByZXR1cm4gJHVzZXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVDaGFuZ2VTdGFydCcsIHtsYW5ndWFnZToga2V5fSk7XG5cbiAgICAgICAgLy8gVHJ5IHRvIGdldCB0aGUgYWxpYXNlZCBsYW5ndWFnZSBrZXlcbiAgICAgICAgdmFyIGFsaWFzZWRLZXkgPSBuZWdvdGlhdGVMb2NhbGUoa2V5KTtcbiAgICAgICAgaWYgKGFsaWFzZWRLZXkpIHtcbiAgICAgICAgICBrZXkgPSBhbGlhc2VkS2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgdGhlcmUgaXNuJ3QgYSB0cmFuc2xhdGlvbiB0YWJsZSBmb3IgdGhlIGxhbmd1YWdlIHdlJ3ZlIHJlcXVlc3RlZCxcbiAgICAgICAgLy8gd2UgbG9hZCBpdCBhc3luY2hyb25vdXNseVxuICAgICAgICBpZiAoISR0cmFuc2xhdGlvblRhYmxlW2tleV0gJiYgJGxvYWRlckZhY3RvcnkgJiYgIWxhbmdQcm9taXNlc1trZXldKSB7XG4gICAgICAgICAgJG5leHRMYW5nID0ga2V5O1xuICAgICAgICAgIGxhbmdQcm9taXNlc1trZXldID0gbG9hZEFzeW5jKGtleSkudGhlbihmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbi5rZXksIHRyYW5zbGF0aW9uLnRhYmxlKTtcbiAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJhbnNsYXRpb24ua2V5KTtcblxuICAgICAgICAgICAgdXNlTGFuZ3VhZ2UodHJhbnNsYXRpb24ua2V5KTtcbiAgICAgICAgICAgIGlmICgkbmV4dExhbmcgPT09IGtleSkge1xuICAgICAgICAgICAgICAkbmV4dExhbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gICAgICAgICAgfSwgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKCRuZXh0TGFuZyA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICRuZXh0TGFuZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVDaGFuZ2VFcnJvcicsIHtsYW5ndWFnZToga2V5fSk7XG4gICAgICAgICAgICBkZWZlcnJlZC5yZWplY3Qoa2V5KTtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVDaGFuZ2VFbmQnLCB7bGFuZ3VhZ2U6IGtleX0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoa2V5KTtcbiAgICAgICAgICB1c2VMYW5ndWFnZShrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI3N0b3JhZ2VLZXlcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgdGhlIGtleSBmb3IgdGhlIHN0b3JhZ2UuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSBzdG9yYWdlIGtleVxuICAgICAgICovXG4gICAgICAkdHJhbnNsYXRlLnN0b3JhZ2VLZXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzdG9yYWdlS2V5KCk7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI2lzUG9zdENvbXBpbGluZ0VuYWJsZWRcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgd2hldGhlciBwb3N0IGNvbXBpbGluZyBpcyBlbmFibGVkIG9yIG5vdFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge2Jvb2x9IHN0b3JhZ2Uga2V5XG4gICAgICAgKi9cbiAgICAgICR0cmFuc2xhdGUuaXNQb3N0Q29tcGlsaW5nRW5hYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICRwb3N0Q29tcGlsaW5nRW5hYmxlZDtcbiAgICAgIH07XG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICAgKiBAbmFtZSBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjcmVmcmVzaFxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVmcmVzaGVzIGEgdHJhbnNsYXRpb24gdGFibGUgcG9pbnRlZCBieSB0aGUgZ2l2ZW4gbGFuZ0tleS4gSWYgbGFuZ0tleSBpcyBub3Qgc3BlY2lmaWVkLFxuICAgICAgICogdGhlIG1vZHVsZSB3aWxsIGRyb3AgYWxsIGV4aXN0ZW50IHRyYW5zbGF0aW9uIHRhYmxlcyBhbmQgbG9hZCBuZXcgdmVyc2lvbiBvZiB0aG9zZSB3aGljaFxuICAgICAgICogYXJlIGN1cnJlbnRseSBpbiB1c2UuXG4gICAgICAgKlxuICAgICAgICogUmVmcmVzaCBtZWFucyB0aGF0IHRoZSBtb2R1bGUgd2lsbCBkcm9wIHRhcmdldCB0cmFuc2xhdGlvbiB0YWJsZSBhbmQgdHJ5IHRvIGxvYWQgaXQgYWdhaW4uXG4gICAgICAgKlxuICAgICAgICogSW4gY2FzZSB0aGVyZSBhcmUgbm8gbG9hZGVycyByZWdpc3RlcmVkIHRoZSByZWZyZXNoKCkgbWV0aG9kIHdpbGwgdGhyb3cgYW4gRXJyb3IuXG4gICAgICAgKlxuICAgICAgICogSWYgdGhlIG1vZHVsZSBpcyBhYmxlIHRvIHJlZnJlc2ggdHJhbnNsYXRpb24gdGFibGVzIHJlZnJlc2goKSBtZXRob2Qgd2lsbCBicm9hZGNhc3RcbiAgICAgICAqICR0cmFuc2xhdGVSZWZyZXNoU3RhcnQgYW5kICR0cmFuc2xhdGVSZWZyZXNoRW5kIGV2ZW50cy5cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogLy8gdGhpcyB3aWxsIGRyb3AgYWxsIGN1cnJlbnRseSBleGlzdGVudCB0cmFuc2xhdGlvbiB0YWJsZXMgYW5kIHJlbG9hZCB0aG9zZSB3aGljaCBhcmVcbiAgICAgICAqIC8vIGN1cnJlbnRseSBpbiB1c2VcbiAgICAgICAqICR0cmFuc2xhdGUucmVmcmVzaCgpO1xuICAgICAgICogLy8gdGhpcyB3aWxsIHJlZnJlc2ggYSB0cmFuc2xhdGlvbiB0YWJsZSBmb3IgdGhlIGVuX1VTIGxhbmd1YWdlXG4gICAgICAgKiAkdHJhbnNsYXRlLnJlZnJlc2goJ2VuX1VTJyk7XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmdLZXkgQSBsYW5ndWFnZSBrZXkgb2YgdGhlIHRhYmxlLCB3aGljaCBoYXMgdG8gYmUgcmVmcmVzaGVkXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7cHJvbWlzZX0gUHJvbWlzZSwgd2hpY2ggd2lsbCBiZSByZXNvbHZlZCBpbiBjYXNlIGEgdHJhbnNsYXRpb24gdGFibGVzIHJlZnJlc2hpbmdcbiAgICAgICAqIHByb2Nlc3MgaXMgZmluaXNoZWQgc3VjY2Vzc2Z1bGx5LCBhbmQgcmVqZWN0IGlmIG5vdC5cbiAgICAgICAqL1xuICAgICAgJHRyYW5zbGF0ZS5yZWZyZXNoID0gZnVuY3Rpb24gKGxhbmdLZXkpIHtcbiAgICAgICAgaWYgKCEkbG9hZGVyRmFjdG9yeSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGRuXFwndCByZWZyZXNoIHRyYW5zbGF0aW9uIHRhYmxlLCBubyBsb2FkZXIgcmVnaXN0ZXJlZCEnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZVJlZnJlc2hFbmQnLCB7bGFuZ3VhZ2U6IGxhbmdLZXl9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdCgpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRlbWl0KCckdHJhbnNsYXRlUmVmcmVzaEVuZCcsIHtsYW5ndWFnZTogbGFuZ0tleX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgJHJvb3RTY29wZS4kZW1pdCgnJHRyYW5zbGF0ZVJlZnJlc2hTdGFydCcsIHtsYW5ndWFnZTogbGFuZ0tleX0pO1xuXG4gICAgICAgIGlmICghbGFuZ0tleSkge1xuICAgICAgICAgIC8vIGlmIHRoZXJlJ3Mgbm8gbGFuZ3VhZ2Uga2V5IHNwZWNpZmllZCB3ZSByZWZyZXNoIEFMTCBUSEUgVEhJTkdTIVxuICAgICAgICAgIHZhciB0YWJsZXMgPSBbXSwgbG9hZGluZ0tleXMgPSB7fTtcblxuICAgICAgICAgIC8vIHJlbG9hZCByZWdpc3RlcmVkIGZhbGxiYWNrIGxhbmd1YWdlc1xuICAgICAgICAgIGlmICgkZmFsbGJhY2tMYW5ndWFnZSAmJiAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICB0YWJsZXMucHVzaChsb2FkQXN5bmMoJGZhbGxiYWNrTGFuZ3VhZ2VbaV0pKTtcbiAgICAgICAgICAgICAgbG9hZGluZ0tleXNbJGZhbGxiYWNrTGFuZ3VhZ2VbaV1dID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZWxvYWQgY3VycmVudGx5IHVzZWQgbGFuZ3VhZ2VcbiAgICAgICAgICBpZiAoJHVzZXMgJiYgIWxvYWRpbmdLZXlzWyR1c2VzXSkge1xuICAgICAgICAgICAgdGFibGVzLnB1c2gobG9hZEFzeW5jKCR1c2VzKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgJHEuYWxsKHRhYmxlcykudGhlbihmdW5jdGlvbiAodGFibGVEYXRhKSB7XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godGFibGVEYXRhLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICBpZiAoJHRyYW5zbGF0aW9uVGFibGVbZGF0YS5rZXldKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlICR0cmFuc2xhdGlvblRhYmxlW2RhdGEua2V5XTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB0cmFuc2xhdGlvbnMoZGF0YS5rZXksIGRhdGEudGFibGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoJHVzZXMpIHtcbiAgICAgICAgICAgICAgdXNlTGFuZ3VhZ2UoJHVzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoJHRyYW5zbGF0aW9uVGFibGVbbGFuZ0tleV0pIHtcblxuICAgICAgICAgIGxvYWRBc3luYyhsYW5nS2V5KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGlvbnMoZGF0YS5rZXksIGRhdGEudGFibGUpO1xuICAgICAgICAgICAgaWYgKGxhbmdLZXkgPT09ICR1c2VzKSB7XG4gICAgICAgICAgICAgIHVzZUxhbmd1YWdlKCR1c2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9LCByZWplY3QpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI2luc3RhbnRcbiAgICAgICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJldHVybnMgYSB0cmFuc2xhdGlvbiBpbnN0YW50bHkgZnJvbSB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgbG9hZGVkIHRyYW5zbGF0aW9uLiBBbGwgcnVsZXNcbiAgICAgICAqIHJlZ2FyZGluZyB0aGUgY3VycmVudCBsYW5ndWFnZSwgdGhlIHByZWZlcnJlZCBsYW5ndWFnZSBvZiBldmVuIGZhbGxiYWNrIGxhbmd1YWdlcyB3aWxsIGJlXG4gICAgICAgKiB1c2VkIGV4Y2VwdCBhbnkgcHJvbWlzZSBoYW5kbGluZy4gSWYgYSBsYW5ndWFnZSB3YXMgbm90IGZvdW5kLCBhbiBhc3luY2hyb25vdXMgbG9hZGluZ1xuICAgICAgICogd2lsbCBiZSBpbnZva2VkIGluIHRoZSBiYWNrZ3JvdW5kLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGFycmF5fSB0cmFuc2xhdGlvbklkIEEgdG9rZW4gd2hpY2ggcmVwcmVzZW50cyBhIHRyYW5zbGF0aW9uIGlkXG4gICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGNhbiBiZSBvcHRpb25hbGx5IGFuIGFycmF5IG9mIHRyYW5zbGF0aW9uIGlkcyB3aGljaFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cyB0aGF0IHRoZSBmdW5jdGlvbidzIHByb21pc2UgcmV0dXJucyBhbiBvYmplY3Qgd2hlcmVcbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVhY2gga2V5IGlzIHRoZSB0cmFuc2xhdGlvbiBpZCBhbmQgdGhlIHZhbHVlIHRoZSB0cmFuc2xhdGlvbi5cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBpbnRlcnBvbGF0ZVBhcmFtcyBQYXJhbXNcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbnRlcnBvbGF0aW9uSWQgVGhlIGlkIG9mIHRoZSBpbnRlcnBvbGF0aW9uIHRvIHVzZVxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge3N0cmluZ30gdHJhbnNsYXRpb25cbiAgICAgICAqL1xuICAgICAgJHRyYW5zbGF0ZS5pbnN0YW50ID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uSWQpIHtcblxuICAgICAgICAvLyBEZXRlY3QgdW5kZWZpbmVkIGFuZCBudWxsIHZhbHVlcyB0byBzaG9ydGVuIHRoZSBleGVjdXRpb24gYW5kIHByZXZlbnQgZXhjZXB0aW9uc1xuICAgICAgICBpZiAodHJhbnNsYXRpb25JZCA9PT0gbnVsbCB8fCBhbmd1bGFyLmlzVW5kZWZpbmVkKHRyYW5zbGF0aW9uSWQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRyYW5zbGF0aW9uSWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEdWNrIGRldGVjdGlvbjogSWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGFuIGFycmF5LCBhIGJ1bmNoIG9mIHRyYW5zbGF0aW9ucyB3YXMgcmVxdWVzdGVkLlxuICAgICAgICAvLyBUaGUgcmVzdWx0IGlzIGFuIG9iamVjdC5cbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheSh0cmFuc2xhdGlvbklkKSkge1xuICAgICAgICAgIHZhciByZXN1bHRzID0ge307XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGMgPSB0cmFuc2xhdGlvbklkLmxlbmd0aDsgaSA8IGM7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0c1t0cmFuc2xhdGlvbklkW2ldXSA9ICR0cmFuc2xhdGUuaW5zdGFudCh0cmFuc2xhdGlvbklkW2ldLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbklkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXZSBkaXNjYXJkZWQgdW5hY2NlcHRhYmxlIHZhbHVlcy4gU28gd2UganVzdCBuZWVkIHRvIHZlcmlmeSBpZiB0cmFuc2xhdGlvbklkIGlzIGVtcHR5IFN0cmluZ1xuICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyh0cmFuc2xhdGlvbklkKSAmJiB0cmFuc2xhdGlvbklkLmxlbmd0aCA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb25JZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRyaW0gb2ZmIGFueSB3aGl0ZXNwYWNlXG4gICAgICAgIGlmICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgdHJhbnNsYXRpb25JZCA9IHRyaW0uYXBwbHkodHJhbnNsYXRpb25JZCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0LCBwb3NzaWJsZUxhbmdLZXlzID0gW107XG4gICAgICAgIGlmICgkcHJlZmVycmVkTGFuZ3VhZ2UpIHtcbiAgICAgICAgICBwb3NzaWJsZUxhbmdLZXlzLnB1c2goJHByZWZlcnJlZExhbmd1YWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHVzZXMpIHtcbiAgICAgICAgICBwb3NzaWJsZUxhbmdLZXlzLnB1c2goJHVzZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkZmFsbGJhY2tMYW5ndWFnZSAmJiAkZmFsbGJhY2tMYW5ndWFnZS5sZW5ndGgpIHtcbiAgICAgICAgICBwb3NzaWJsZUxhbmdLZXlzID0gcG9zc2libGVMYW5nS2V5cy5jb25jYXQoJGZhbGxiYWNrTGFuZ3VhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIGogPSAwLCBkID0gcG9zc2libGVMYW5nS2V5cy5sZW5ndGg7IGogPCBkOyBqKyspIHtcbiAgICAgICAgICB2YXIgcG9zc2libGVMYW5nS2V5ID0gcG9zc2libGVMYW5nS2V5c1tqXTtcbiAgICAgICAgICBpZiAoJHRyYW5zbGF0aW9uVGFibGVbcG9zc2libGVMYW5nS2V5XSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiAkdHJhbnNsYXRpb25UYWJsZVtwb3NzaWJsZUxhbmdLZXldW3RyYW5zbGF0aW9uSWRdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICByZXN1bHQgPSBkZXRlcm1pbmVUcmFuc2xhdGlvbkluc3RhbnQodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIGludGVycG9sYXRpb25JZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyZXN1bHQgJiYgcmVzdWx0ICE9PSAnJykge1xuICAgICAgICAgIC8vIFJldHVybiB0cmFuc2xhdGlvbiBvZiBkZWZhdWx0IGludGVycG9sYXRvciBpZiBub3QgZm91bmQgYW55dGhpbmcuXG4gICAgICAgICAgcmVzdWx0ID0gZGVmYXVsdEludGVycG9sYXRvci5pbnRlcnBvbGF0ZSh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcyk7XG4gICAgICAgICAgaWYgKCRtaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyRmFjdG9yeSAmJiAhcGVuZGluZ0xvYWRlcikge1xuICAgICAgICAgICAgcmVzdWx0ID0gdHJhbnNsYXRlQnlIYW5kbGVyKHRyYW5zbGF0aW9uSWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBmdW5jdGlvblxuICAgICAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlI3ZlcnNpb25JbmZvXG4gICAgICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHZlcnNpb24gaW5mb3JtYXRpb24gZm9yIHRoZSBhbmd1bGFyLXRyYW5zbGF0ZSBsaWJyYXJ5XG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7c3RyaW5nfSBhbmd1bGFyLXRyYW5zbGF0ZSB2ZXJzaW9uXG4gICAgICAgKi9cbiAgICAgICR0cmFuc2xhdGUudmVyc2lvbkluZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2ZXJzaW9uO1xuICAgICAgfTtcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICAgICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZSNsb2FkZXJDYWNoZVxuICAgICAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmV0dXJucyB0aGUgZGVmaW5lZCBsb2FkZXJDYWNoZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtib29sZWFufHN0cmluZ3xvYmplY3R9IGN1cnJlbnQgdmFsdWUgb2YgbG9hZGVyQ2FjaGVcbiAgICAgICAqL1xuICAgICAgJHRyYW5zbGF0ZS5sb2FkZXJDYWNoZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGxvYWRlckNhY2hlO1xuICAgICAgfTtcblxuICAgICAgaWYgKCRsb2FkZXJGYWN0b3J5KSB7XG5cbiAgICAgICAgLy8gSWYgYXQgbGVhc3Qgb25lIGFzeW5jIGxvYWRlciBpcyBkZWZpbmVkIGFuZCB0aGVyZSBhcmUgbm9cbiAgICAgICAgLy8gKGRlZmF1bHQpIHRyYW5zbGF0aW9ucyBhdmFpbGFibGUgd2Ugc2hvdWxkIHRyeSB0byBsb2FkIHRoZW0uXG4gICAgICAgIGlmIChhbmd1bGFyLmVxdWFscygkdHJhbnNsYXRpb25UYWJsZSwge30pKSB7XG4gICAgICAgICAgJHRyYW5zbGF0ZS51c2UoJHRyYW5zbGF0ZS51c2UoKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBbHNvLCBpZiB0aGVyZSBhcmUgYW55IGZhbGxiYWNrIGxhbmd1YWdlIHJlZ2lzdGVyZWQsIHdlIHN0YXJ0XG4gICAgICAgIC8vIGxvYWRpbmcgdGhlbSBhc3luY2hyb25vdXNseSBhcyBzb29uIGFzIHdlIGNhbi5cbiAgICAgICAgaWYgKCRmYWxsYmFja0xhbmd1YWdlICYmICRmYWxsYmFja0xhbmd1YWdlLmxlbmd0aCkge1xuICAgICAgICAgIHZhciBwcm9jZXNzQXN5bmNSZXN1bHQgPSBmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9ucyh0cmFuc2xhdGlvbi5rZXksIHRyYW5zbGF0aW9uLnRhYmxlKTtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGVtaXQoJyR0cmFuc2xhdGVDaGFuZ2VFbmQnLCB7IGxhbmd1YWdlOiB0cmFuc2xhdGlvbi5rZXkgfSk7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNsYXRpb247XG4gICAgICAgICAgfTtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gJGZhbGxiYWNrTGFuZ3VhZ2UubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGxhbmdQcm9taXNlc1skZmFsbGJhY2tMYW5ndWFnZVtpXV0gPSBsb2FkQXN5bmMoJGZhbGxiYWNrTGFuZ3VhZ2VbaV0pLnRoZW4ocHJvY2Vzc0FzeW5jUmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuICR0cmFuc2xhdGU7XG4gICAgfVxuICBdO1xufV0pO1xuXG4vKipcbiAqIEBuZ2RvYyBvYmplY3RcbiAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZURlZmF1bHRJbnRlcnBvbGF0aW9uXG4gKiBAcmVxdWlyZXMgJGludGVycG9sYXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2VzIGFuZ3VsYXIncyBgJGludGVycG9sYXRlYCBzZXJ2aWNlcyB0byBpbnRlcnBvbGF0ZSBzdHJpbmdzIGFnYWluc3Qgc29tZSB2YWx1ZXMuXG4gKlxuICogQHJldHVybiB7b2JqZWN0fSAkdHJhbnNsYXRlSW50ZXJwb2xhdG9yIEludGVycG9sYXRvciBzZXJ2aWNlXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJykuZmFjdG9yeSgnJHRyYW5zbGF0ZURlZmF1bHRJbnRlcnBvbGF0aW9uJywgWyckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbiAoJGludGVycG9sYXRlKSB7XG5cbiAgdmFyICR0cmFuc2xhdGVJbnRlcnBvbGF0b3IgPSB7fSxcbiAgICAgICRsb2NhbGUsXG4gICAgICAkaWRlbnRpZmllciA9ICdkZWZhdWx0JyxcbiAgICAgICRzYW5pdGl6ZVZhbHVlU3RyYXRlZ3kgPSBudWxsLFxuICAgICAgLy8gbWFwIG9mIGFsbCBzYW5pdGl6ZSBzdHJhdGVnaWVzXG4gICAgICBzYW5pdGl6ZVZhbHVlU3RyYXRlZ2llcyA9IHtcbiAgICAgICAgZXNjYXBlZDogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHBhcmFtcywga2V5KSkge1xuICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdj48L2Rpdj4nKS50ZXh0KHBhcmFtc1trZXldKS5odG1sKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgdmFyIHNhbml0aXplUGFyYW1zID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihzYW5pdGl6ZVZhbHVlU3RyYXRlZ2llc1skc2FuaXRpemVWYWx1ZVN0cmF0ZWd5XSkpIHtcbiAgICAgIHJlc3VsdCA9IHNhbml0aXplVmFsdWVTdHJhdGVnaWVzWyRzYW5pdGl6ZVZhbHVlU3RyYXRlZ3ldKHBhcmFtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHBhcmFtcztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZURlZmF1bHRJbnRlcnBvbGF0aW9uI3NldExvY2FsZVxuICAgKiBAbWV0aG9kT2YgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlRGVmYXVsdEludGVycG9sYXRpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgY3VycmVudCBsb2NhbGUgKHRoaXMgaXMgY3VycmVudGx5IG5vdCB1c2UgaW4gdGhpcyBpbnRlcnBvbGF0aW9uKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxvY2FsZSBMYW5ndWFnZSBrZXkgb3IgbG9jYWxlLlxuICAgKi9cbiAgJHRyYW5zbGF0ZUludGVycG9sYXRvci5zZXRMb2NhbGUgPSBmdW5jdGlvbiAobG9jYWxlKSB7XG4gICAgJGxvY2FsZSA9IGxvY2FsZTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZURlZmF1bHRJbnRlcnBvbGF0aW9uI2dldEludGVycG9sYXRpb25JZGVudGlmaWVyXG4gICAqIEBtZXRob2RPZiBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGVEZWZhdWx0SW50ZXJwb2xhdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0dXJucyBhbiBpZGVudGlmaWVyIGZvciB0aGlzIGludGVycG9sYXRpb24gc2VydmljZS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gJGlkZW50aWZpZXJcbiAgICovXG4gICR0cmFuc2xhdGVJbnRlcnBvbGF0b3IuZ2V0SW50ZXJwb2xhdGlvbklkZW50aWZpZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICRpZGVudGlmaWVyO1xuICB9O1xuXG4gICR0cmFuc2xhdGVJbnRlcnBvbGF0b3IudXNlU2FuaXRpemVWYWx1ZVN0cmF0ZWd5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgJHNhbml0aXplVmFsdWVTdHJhdGVneSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgZnVuY3Rpb25cbiAgICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlRGVmYXVsdEludGVycG9sYXRpb24jaW50ZXJwb2xhdGVcbiAgICogQG1ldGhvZE9mIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZURlZmF1bHRJbnRlcnBvbGF0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBJbnRlcnBvbGF0ZXMgZ2l2ZW4gc3RyaW5nIGFnYWlucyBnaXZlbiBpbnRlcnBvbGF0ZSBwYXJhbXMgdXNpbmcgYW5ndWxhcnNcbiAgICogYCRpbnRlcnBvbGF0ZWAgc2VydmljZS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gaW50ZXJwb2xhdGVkIHN0cmluZy5cbiAgICovXG4gICR0cmFuc2xhdGVJbnRlcnBvbGF0b3IuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbiAoc3RyaW5nLCBpbnRlcnBvbGF0ZVBhcmFtcykge1xuICAgIGlmICgkc2FuaXRpemVWYWx1ZVN0cmF0ZWd5KSB7XG4gICAgICBpbnRlcnBvbGF0ZVBhcmFtcyA9IHNhbml0aXplUGFyYW1zKGludGVycG9sYXRlUGFyYW1zKTtcbiAgICB9XG4gICAgcmV0dXJuICRpbnRlcnBvbGF0ZShzdHJpbmcpKGludGVycG9sYXRlUGFyYW1zIHx8IHt9KTtcbiAgfTtcblxuICByZXR1cm4gJHRyYW5zbGF0ZUludGVycG9sYXRvcjtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnKS5jb25zdGFudCgnJFNUT1JBR0VfS0VZJywgJ05HX1RSQU5TTEFURV9MQU5HX0tFWScpO1xuXG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuZGlyZWN0aXZlOnRyYW5zbGF0ZVxuICogQHJlcXVpcmVzICRjb21waWxlXG4gKiBAcmVxdWlyZXMgJGZpbHRlclxuICogQHJlcXVpcmVzICRpbnRlcnBvbGF0ZVxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRyYW5zbGF0ZXMgZ2l2ZW4gdHJhbnNsYXRpb24gaWQgZWl0aGVyIHRocm91Z2ggYXR0cmlidXRlIG9yIERPTSBjb250ZW50LlxuICogSW50ZXJuYWxseSBpdCB1c2VzIGB0cmFuc2xhdGVgIGZpbHRlciB0byB0cmFuc2xhdGUgdHJhbnNsYXRpb24gaWQuIEl0IHBvc3NpYmxlIHRvXG4gKiBwYXNzIGFuIG9wdGlvbmFsIGB0cmFuc2xhdGUtdmFsdWVzYCBvYmplY3QgbGl0ZXJhbCBhcyBzdHJpbmcgaW50byB0cmFuc2xhdGlvbiBpZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IHRyYW5zbGF0ZSBUcmFuc2xhdGlvbiBpZCB3aGljaCBjb3VsZCBiZSBlaXRoZXIgc3RyaW5nIG9yIGludGVycG9sYXRlZCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZz19IHRyYW5zbGF0ZS12YWx1ZXMgVmFsdWVzIHRvIHBhc3MgaW50byB0cmFuc2xhdGlvbiBpZC4gQ2FuIGJlIHBhc3NlZCBhcyBvYmplY3QgbGl0ZXJhbCBzdHJpbmcgb3IgaW50ZXJwb2xhdGVkIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gdHJhbnNsYXRlLWF0dHItQVRUUiB0cmFuc2xhdGUgVHJhbnNsYXRpb24gaWQgYW5kIHB1dCBpdCBpbnRvIEFUVFIgYXR0cmlidXRlLlxuICogQHBhcmFtIHtzdHJpbmc9fSB0cmFuc2xhdGUtZGVmYXVsdCB3aWxsIGJlIHVzZWQgdW5sZXNzIHRyYW5zbGF0aW9uIHdhcyBzdWNjZXNzZnVsXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSB0cmFuc2xhdGUtY29tcGlsZSAoZGVmYXVsdCB0cnVlIGlmIHByZXNlbnQpIGRlZmluZXMgbG9jYWxseSBhY3RpdmF0aW9uIG9mIHtAbGluayBwYXNjYWxwcmVjaHQudHJhbnNsYXRlLiR0cmFuc2xhdGUjdXNlUG9zdENvbXBpbGluZ31cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibmdWaWV3XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIlRyYW5zbGF0ZUN0cmxcIj5cblxuICAgICAgICA8cHJlIHRyYW5zbGF0ZT1cIlRSQU5TTEFUSU9OX0lEXCI+PC9wcmU+XG4gICAgICAgIDxwcmUgdHJhbnNsYXRlPlRSQU5TTEFUSU9OX0lEPC9wcmU+XG4gICAgICAgIDxwcmUgdHJhbnNsYXRlIHRyYW5zbGF0ZS1hdHRyLXRpdGxlPVwiVFJBTlNMQVRJT05fSURcIj48L3ByZT5cbiAgICAgICAgPHByZSB0cmFuc2xhdGU9XCJ7e3RyYW5zbGF0aW9uSWR9fVwiPjwvcHJlPlxuICAgICAgICA8cHJlIHRyYW5zbGF0ZT57e3RyYW5zbGF0aW9uSWR9fTwvcHJlPlxuICAgICAgICA8cHJlIHRyYW5zbGF0ZT1cIldJVEhfVkFMVUVTXCIgdHJhbnNsYXRlLXZhbHVlcz1cInt2YWx1ZTogNX1cIj48L3ByZT5cbiAgICAgICAgPHByZSB0cmFuc2xhdGUgdHJhbnNsYXRlLXZhbHVlcz1cInt2YWx1ZTogNX1cIj5XSVRIX1ZBTFVFUzwvcHJlPlxuICAgICAgICA8cHJlIHRyYW5zbGF0ZT1cIldJVEhfVkFMVUVTXCIgdHJhbnNsYXRlLXZhbHVlcz1cInt7dmFsdWVzfX1cIj48L3ByZT5cbiAgICAgICAgPHByZSB0cmFuc2xhdGUgdHJhbnNsYXRlLXZhbHVlcz1cInt7dmFsdWVzfX1cIj5XSVRIX1ZBTFVFUzwvcHJlPlxuICAgICAgICA8cHJlIHRyYW5zbGF0ZSB0cmFuc2xhdGUtYXR0ci10aXRsZT1cIldJVEhfVkFMVUVTXCIgdHJhbnNsYXRlLXZhbHVlcz1cInt7dmFsdWVzfX1cIj48L3ByZT5cblxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1ZpZXcnLCBbJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnXSlcblxuICAgICAgLmNvbmZpZyhmdW5jdGlvbiAoJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XG5cbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucygnZW4nLHtcbiAgICAgICAgICAnVFJBTlNMQVRJT05fSUQnOiAnSGVsbG8gdGhlcmUhJyxcbiAgICAgICAgICAnV0lUSF9WQUxVRVMnOiAnVGhlIGZvbGxvd2luZyB2YWx1ZSBpcyBkeW5hbWljOiB7e3ZhbHVlfX0nXG4gICAgICAgIH0pLnByZWZlcnJlZExhbmd1YWdlKCdlbicpO1xuXG4gICAgICB9KTtcblxuICAgICAgYW5ndWxhci5tb2R1bGUoJ25nVmlldycpLmNvbnRyb2xsZXIoJ1RyYW5zbGF0ZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS50cmFuc2xhdGlvbklkID0gJ1RSQU5TTEFUSU9OX0lEJztcblxuICAgICAgICAkc2NvcGUudmFsdWVzID0ge1xuICAgICAgICAgIHZhbHVlOiA3OFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY2VuYXJpby5qc1wiPlxuICAgICAgaXQoJ3Nob3VsZCB0cmFuc2xhdGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluamVjdChmdW5jdGlvbiAoJHJvb3RTY29wZSwgJGNvbXBpbGUpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLnRyYW5zbGF0aW9uSWQgPSAnVFJBTlNMQVRJT05fSUQnO1xuXG4gICAgICAgICAgZWxlbWVudCA9ICRjb21waWxlKCc8cCB0cmFuc2xhdGU9XCJUUkFOU0xBVElPTl9JRFwiPjwvcD4nKSgkcm9vdFNjb3BlKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudC50ZXh0KCkpLnRvQmUoJ0hlbGxvIHRoZXJlIScpO1xuXG4gICAgICAgICAgZWxlbWVudCA9ICRjb21waWxlKCc8cCB0cmFuc2xhdGU9XCJ7e3RyYW5zbGF0aW9uSWR9fVwiPjwvcD4nKSgkcm9vdFNjb3BlKTtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudC50ZXh0KCkpLnRvQmUoJ0hlbGxvIHRoZXJlIScpO1xuXG4gICAgICAgICAgZWxlbWVudCA9ICRjb21waWxlKCc8cCB0cmFuc2xhdGU+VFJBTlNMQVRJT05fSUQ8L3A+JykoJHJvb3RTY29wZSk7XG4gICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQudGV4dCgpKS50b0JlKCdIZWxsbyB0aGVyZSEnKTtcblxuICAgICAgICAgIGVsZW1lbnQgPSAkY29tcGlsZSgnPHAgdHJhbnNsYXRlPnt7dHJhbnNsYXRpb25JZH19PC9wPicpKCRyb290U2NvcGUpO1xuICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50LnRleHQoKSkudG9CZSgnSGVsbG8gdGhlcmUhJyk7XG5cbiAgICAgICAgICBlbGVtZW50ID0gJGNvbXBpbGUoJzxwIHRyYW5zbGF0ZSB0cmFuc2xhdGUtYXR0ci10aXRsZT1cIlRSQU5TTEFUSU9OX0lEXCI+PC9wPicpKCRyb290U2NvcGUpO1xuICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50LmF0dHIoJ3RpdGxlJykpLnRvQmUoJ0hlbGxvIHRoZXJlIScpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuLmRpcmVjdGl2ZSgndHJhbnNsYXRlJywgWyckdHJhbnNsYXRlJywgJyRxJywgJyRpbnRlcnBvbGF0ZScsICckY29tcGlsZScsICckcGFyc2UnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkdHJhbnNsYXRlLCAkcSwgJGludGVycG9sYXRlLCAkY29tcGlsZSwgJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0FFJyxcbiAgICBzY29wZTogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbiAodEVsZW1lbnQsIHRBdHRyKSB7XG5cbiAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZXNFeGlzdCA9ICh0QXR0ci50cmFuc2xhdGVWYWx1ZXMpID9cbiAgICAgICAgdEF0dHIudHJhbnNsYXRlVmFsdWVzIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgdHJhbnNsYXRlSW50ZXJwb2xhdGlvbiA9ICh0QXR0ci50cmFuc2xhdGVJbnRlcnBvbGF0aW9uKSA/XG4gICAgICAgIHRBdHRyLnRyYW5zbGF0ZUludGVycG9sYXRpb24gOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciB0cmFuc2xhdGVWYWx1ZUV4aXN0ID0gdEVsZW1lbnRbMF0ub3V0ZXJIVE1MLm1hdGNoKC90cmFuc2xhdGUtdmFsdWUtKy9pKTtcblxuICAgICAgdmFyIGludGVycG9sYXRlUmVnRXhwID0gXCJeKC4qKShcIiArICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpICsgXCIuKlwiICsgJGludGVycG9sYXRlLmVuZFN5bWJvbCgpICsgXCIpKC4qKVwiLFxuICAgICAgICAgIHdhdGNoZXJSZWdFeHAgPSBcIl4oLiopXCIgKyAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSArIFwiKC4qKVwiICsgJGludGVycG9sYXRlLmVuZFN5bWJvbCgpICsgXCIoLiopXCI7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBsaW5rRm4oc2NvcGUsIGlFbGVtZW50LCBpQXR0cikge1xuXG4gICAgICAgIHNjb3BlLmludGVycG9sYXRlUGFyYW1zID0ge307XG4gICAgICAgIHNjb3BlLnByZVRleHQgPSBcIlwiO1xuICAgICAgICBzY29wZS5wb3N0VGV4dCA9IFwiXCI7XG4gICAgICAgIHZhciB0cmFuc2xhdGlvbklkcyA9IHt9O1xuXG4gICAgICAgIC8vIEVuc3VyZXMgYW55IGNoYW5nZSBvZiB0aGUgYXR0cmlidXRlIFwidHJhbnNsYXRlXCIgY29udGFpbmluZyB0aGUgaWQgd2lsbFxuICAgICAgICAvLyBiZSByZS1zdG9yZWQgdG8gdGhlIHNjb3BlJ3MgXCJ0cmFuc2xhdGlvbklkXCIuXG4gICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIG5vIGNvbnRlbnQsIHRoZSBlbGVtZW50J3MgdGV4dCB2YWx1ZSAod2hpdGUgc3BhY2VzIHRyaW1tZWQgb2ZmKSB3aWxsIGJlIHVzZWQuXG4gICAgICAgIHZhciBvYnNlcnZlRWxlbWVudFRyYW5zbGF0aW9uID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQpIHtcbiAgICAgICAgICBpZiAoYW5ndWxhci5lcXVhbHModHJhbnNsYXRpb25JZCAsICcnKSB8fCAhYW5ndWxhci5pc0RlZmluZWQodHJhbnNsYXRpb25JZCkpIHtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgdHJhbnNsYXRpb24gaWQgYnkgaW5uZXIgaHRtbCBpZiByZXF1aXJlZFxuICAgICAgICAgICAgdmFyIGludGVycG9sYXRlTWF0Y2hlcyA9IGlFbGVtZW50LnRleHQoKS5tYXRjaChpbnRlcnBvbGF0ZVJlZ0V4cCk7XG4gICAgICAgICAgICAvLyBJbnRlcnBvbGF0ZSB0cmFuc2xhdGlvbiBpZCBpZiByZXF1aXJlZFxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNBcnJheShpbnRlcnBvbGF0ZU1hdGNoZXMpKSB7XG4gICAgICAgICAgICAgIHNjb3BlLnByZVRleHQgPSBpbnRlcnBvbGF0ZU1hdGNoZXNbMV07XG4gICAgICAgICAgICAgIHNjb3BlLnBvc3RUZXh0ID0gaW50ZXJwb2xhdGVNYXRjaGVzWzNdO1xuICAgICAgICAgICAgICB0cmFuc2xhdGlvbklkcy50cmFuc2xhdGUgPSAkaW50ZXJwb2xhdGUoaW50ZXJwb2xhdGVNYXRjaGVzWzJdKShzY29wZS4kcGFyZW50KTtcbiAgICAgICAgICAgICAgd2F0Y2hlck1hdGNoZXMgPSBpRWxlbWVudC50ZXh0KCkubWF0Y2god2F0Y2hlclJlZ0V4cCk7XG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzQXJyYXkod2F0Y2hlck1hdGNoZXMpICYmIHdhdGNoZXJNYXRjaGVzWzJdICYmIHdhdGNoZXJNYXRjaGVzWzJdLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaCh3YXRjaGVyTWF0Y2hlc1syXSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbklkcy50cmFuc2xhdGUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICAgIHVwZGF0ZVRyYW5zbGF0aW9ucygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0cmFuc2xhdGlvbklkcy50cmFuc2xhdGUgPSBpRWxlbWVudC50ZXh0KCkucmVwbGFjZSgvXlxccyt8XFxzKyQvZywnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zbGF0aW9uSWRzLnRyYW5zbGF0ZSA9IHRyYW5zbGF0aW9uSWQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIHVwZGF0ZVRyYW5zbGF0aW9ucygpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBvYnNlcnZlQXR0cmlidXRlVHJhbnNsYXRpb24gPSBmdW5jdGlvbiAodHJhbnNsYXRlQXR0cikge1xuICAgICAgICAgIGlBdHRyLiRvYnNlcnZlKHRyYW5zbGF0ZUF0dHIsIGZ1bmN0aW9uICh0cmFuc2xhdGlvbklkKSB7XG4gICAgICAgICAgICB0cmFuc2xhdGlvbklkc1t0cmFuc2xhdGVBdHRyXSA9IHRyYW5zbGF0aW9uSWQ7XG4gICAgICAgICAgICB1cGRhdGVUcmFuc2xhdGlvbnMoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICBpQXR0ci4kb2JzZXJ2ZSgndHJhbnNsYXRlJywgZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQpIHtcbiAgICAgICAgICBvYnNlcnZlRWxlbWVudFRyYW5zbGF0aW9uKHRyYW5zbGF0aW9uSWQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciB0cmFuc2xhdGVBdHRyIGluIGlBdHRyKSB7XG4gICAgICAgICAgaWYoaUF0dHIuaGFzT3duUHJvcGVydHkodHJhbnNsYXRlQXR0cikgJiYgdHJhbnNsYXRlQXR0ci5zdWJzdHIoMCwgMTMpID09PSAndHJhbnNsYXRlQXR0cicpIHtcbiAgICAgICAgICAgIG9ic2VydmVBdHRyaWJ1dGVUcmFuc2xhdGlvbih0cmFuc2xhdGVBdHRyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpQXR0ci4kb2JzZXJ2ZSgndHJhbnNsYXRlRGVmYXVsdCcsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHNjb3BlLmRlZmF1bHRUZXh0ID0gdmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0cmFuc2xhdGVWYWx1ZXNFeGlzdCkge1xuICAgICAgICAgIGlBdHRyLiRvYnNlcnZlKCd0cmFuc2xhdGVWYWx1ZXMnLCBmdW5jdGlvbiAoaW50ZXJwb2xhdGVQYXJhbXMpIHtcbiAgICAgICAgICAgIGlmIChpbnRlcnBvbGF0ZVBhcmFtcykge1xuICAgICAgICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoc2NvcGUuaW50ZXJwb2xhdGVQYXJhbXMsICRwYXJzZShpbnRlcnBvbGF0ZVBhcmFtcykoc2NvcGUuJHBhcmVudCkpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2xhdGVWYWx1ZUV4aXN0KSB7XG4gICAgICAgICAgdmFyIG9ic2VydmVWYWx1ZUF0dHJpYnV0ZSA9IGZ1bmN0aW9uIChhdHRyTmFtZSkge1xuICAgICAgICAgICAgaUF0dHIuJG9ic2VydmUoYXR0ck5hbWUsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IGFuZ3VsYXIubG93ZXJjYXNlKGF0dHJOYW1lLnN1YnN0cigxNCwgMSkpICsgYXR0ck5hbWUuc3Vic3RyKDE1KTtcbiAgICAgICAgICAgICAgc2NvcGUuaW50ZXJwb2xhdGVQYXJhbXNbYXR0cmlidXRlTmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBpQXR0cikge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpQXR0ciwgYXR0cikgJiYgYXR0ci5zdWJzdHIoMCwgMTQpID09PSAndHJhbnNsYXRlVmFsdWUnICYmIGF0dHIgIT09ICd0cmFuc2xhdGVWYWx1ZXMnKSB7XG4gICAgICAgICAgICAgIG9ic2VydmVWYWx1ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNYXN0ZXIgdXBkYXRlIGZ1bmN0aW9uXG4gICAgICAgIHZhciB1cGRhdGVUcmFuc2xhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIHRyYW5zbGF0aW9uSWRzKSB7XG4gICAgICAgICAgICBpZiAodHJhbnNsYXRpb25JZHMuaGFzT3duUHJvcGVydHkoa2V5KSAmJiB0cmFuc2xhdGlvbklkc1trZXldKSB7XG4gICAgICAgICAgICAgIHVwZGF0ZVRyYW5zbGF0aW9uKGtleSwgdHJhbnNsYXRpb25JZHNba2V5XSwgc2NvcGUsIHNjb3BlLmludGVycG9sYXRlUGFyYW1zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUHV0IHRyYW5zbGF0aW9uIHByb2Nlc3NpbmcgZnVuY3Rpb24gb3V0c2lkZSBsb29wXG4gICAgICAgIHZhciB1cGRhdGVUcmFuc2xhdGlvbiA9IGZ1bmN0aW9uKHRyYW5zbGF0ZUF0dHIsIHRyYW5zbGF0aW9uSWQsIHNjb3BlLCBpbnRlcnBvbGF0ZVBhcmFtcykge1xuICAgICAgICAgICR0cmFuc2xhdGUodHJhbnNsYXRpb25JZCwgaW50ZXJwb2xhdGVQYXJhbXMsIHRyYW5zbGF0ZUludGVycG9sYXRpb24pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodHJhbnNsYXRpb24pIHtcbiAgICAgICAgICAgICAgYXBwbHlUcmFuc2xhdGlvbih0cmFuc2xhdGlvbiwgc2NvcGUsIHRydWUsIHRyYW5zbGF0ZUF0dHIpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgYXBwbHlUcmFuc2xhdGlvbih0cmFuc2xhdGlvbklkLCBzY29wZSwgZmFsc2UsIHRyYW5zbGF0ZUF0dHIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGFwcGx5VHJhbnNsYXRpb24gPSBmdW5jdGlvbiAodmFsdWUsIHNjb3BlLCBzdWNjZXNzZnVsLCB0cmFuc2xhdGVBdHRyKSB7XG4gICAgICAgICAgaWYgKHRyYW5zbGF0ZUF0dHIgPT09ICd0cmFuc2xhdGUnKSB7XG4gICAgICAgICAgICAvLyBkZWZhdWx0IHRyYW5zbGF0ZSBpbnRvIGlubmVySFRNTFxuICAgICAgICAgICAgaWYgKCFzdWNjZXNzZnVsICYmIHR5cGVvZiBzY29wZS5kZWZhdWx0VGV4dCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgdmFsdWUgPSBzY29wZS5kZWZhdWx0VGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlFbGVtZW50Lmh0bWwoc2NvcGUucHJlVGV4dCArIHZhbHVlICsgc2NvcGUucG9zdFRleHQpO1xuICAgICAgICAgICAgdmFyIGdsb2JhbGx5RW5hYmxlZCA9ICR0cmFuc2xhdGUuaXNQb3N0Q29tcGlsaW5nRW5hYmxlZCgpO1xuICAgICAgICAgICAgdmFyIGxvY2FsbHlEZWZpbmVkID0gdHlwZW9mIHRBdHRyLnRyYW5zbGF0ZUNvbXBpbGUgIT09ICd1bmRlZmluZWQnO1xuICAgICAgICAgICAgdmFyIGxvY2FsbHlFbmFibGVkID0gbG9jYWxseURlZmluZWQgJiYgdEF0dHIudHJhbnNsYXRlQ29tcGlsZSAhPT0gJ2ZhbHNlJztcbiAgICAgICAgICAgIGlmICgoZ2xvYmFsbHlFbmFibGVkICYmICFsb2NhbGx5RGVmaW5lZCkgfHwgbG9jYWxseUVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgJGNvbXBpbGUoaUVsZW1lbnQuY29udGVudHMoKSkoc2NvcGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0cmFuc2xhdGUgYXR0cmlidXRlXG4gICAgICAgICAgICBpZiAoIXN1Y2Nlc3NmdWwgJiYgdHlwZW9mIHNjb3BlLmRlZmF1bHRUZXh0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICB2YWx1ZSA9IHNjb3BlLmRlZmF1bHRUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZU5hbWUgPSBpQXR0ci4kYXR0clt0cmFuc2xhdGVBdHRyXS5zdWJzdHIoMTUpO1xuICAgICAgICAgICAgaUVsZW1lbnQuYXR0cihhdHRyaWJ1dGVOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaCgnaW50ZXJwb2xhdGVQYXJhbXMnLCB1cGRhdGVUcmFuc2xhdGlvbnMsIHRydWUpO1xuXG4gICAgICAgIC8vIEVuc3VyZXMgdGhlIHRleHQgd2lsbCBiZSByZWZyZXNoZWQgYWZ0ZXIgdGhlIGN1cnJlbnQgbGFuZ3VhZ2Ugd2FzIGNoYW5nZWRcbiAgICAgICAgLy8gdy8gJHRyYW5zbGF0ZS51c2UoLi4uKVxuICAgICAgICB2YXIgdW5iaW5kID0gJHJvb3RTY29wZS4kb24oJyR0cmFuc2xhdGVDaGFuZ2VTdWNjZXNzJywgdXBkYXRlVHJhbnNsYXRpb25zKTtcblxuICAgICAgICAvLyBlbnN1cmUgdHJhbnNsYXRpb24gd2lsbCBiZSBsb29rZWQgdXAgYXQgbGVhc3Qgb25lXG4gICAgICAgIGlmIChpRWxlbWVudC50ZXh0KCkubGVuZ3RoKSB7XG4gICAgICAgICAgb2JzZXJ2ZUVsZW1lbnRUcmFuc2xhdGlvbignJyk7XG4gICAgICAgIH1cbiAgICAgICAgdXBkYXRlVHJhbnNsYXRpb25zKCk7XG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCB1bmJpbmQpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJylcbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS5kaXJlY3RpdmU6dHJhbnNsYXRlQ2xvYWtcbiAqIEByZXF1aXJlcyAkcm9vdFNjb3BlXG4gKiBAcmVxdWlyZXMgJHRyYW5zbGF0ZVxuICogQHJlc3RyaWN0IEFcbiAqXG4gKiAkZGVzY3JpcHRpb25cbiAqIEFkZHMgYSBgdHJhbnNsYXRlLWNsb2FrYCBjbGFzcyBuYW1lIHRvIHRoZSBnaXZlbiBlbGVtZW50IHdoZXJlIHRoaXMgZGlyZWN0aXZlXG4gKiBpcyBhcHBsaWVkIGluaXRpYWxseSBhbmQgcmVtb3ZlcyBpdCwgb25jZSBhIGxvYWRlciBoYXMgZmluaXNoZWQgbG9hZGluZy5cbiAqXG4gKiBUaGlzIGRpcmVjdGl2ZSBjYW4gYmUgdXNlZCB0byBwcmV2ZW50IGluaXRpYWwgZmxpY2tlcmluZyB3aGVuIGxvYWRpbmcgdHJhbnNsYXRpb25cbiAqIGRhdGEgYXN5bmNocm9ub3VzbHkuXG4gKlxuICogVGhlIGNsYXNzIG5hbWUgaXMgZGVmaW5lZCBpblxuICoge0BsaW5rIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVByb3ZpZGVyI2Nsb2FrQ2xhc3NOYW1lICR0cmFuc2xhdGUuY2xvYWtDbGFzc05hbWUoKX0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSB0cmFuc2xhdGUtY2xvYWsgSWYgYSB0cmFuc2xhdGlvbklkIGlzIHByb3ZpZGVkLCBpdCB3aWxsIGJlIHVzZWQgZm9yIHNob3dpbmdcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGhpZGluZyB0aGUgY2xvYWsuIEJhc2ljYWxseSBpdCByZWxpZXMgb24gdGhlIHRyYW5zbGF0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlLlxuICovXG4uZGlyZWN0aXZlKCd0cmFuc2xhdGVDbG9haycsIFsnJHJvb3RTY29wZScsICckdHJhbnNsYXRlJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICR0cmFuc2xhdGUpIHtcblxuICByZXR1cm4ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uICh0RWxlbWVudCkge1xuICAgICAgdmFyIGFwcGx5Q2xvYWsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRFbGVtZW50LmFkZENsYXNzKCR0cmFuc2xhdGUuY2xvYWtDbGFzc05hbWUoKSk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlQ2xvYWsgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRFbGVtZW50LnJlbW92ZUNsYXNzKCR0cmFuc2xhdGUuY2xvYWtDbGFzc05hbWUoKSk7XG4gICAgICB9LFxuICAgICAgcmVtb3ZlTGlzdGVuZXIgPSAkcm9vdFNjb3BlLiRvbignJHRyYW5zbGF0ZUNoYW5nZUVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVtb3ZlQ2xvYWsoKTtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIoKTtcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIgPSBudWxsO1xuICAgICAgfSk7XG4gICAgICBhcHBseUNsb2FrKCk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBsaW5rRm4oc2NvcGUsIGlFbGVtZW50LCBpQXR0cikge1xuICAgICAgICAvLyBSZWdpc3RlciBhIHdhdGNoZXIgZm9yIHRoZSBkZWZpbmVkIHRyYW5zbGF0aW9uIGFsbG93aW5nIGEgZmluZSB0dW5lZCBjbG9ha1xuICAgICAgICBpZiAoaUF0dHIudHJhbnNsYXRlQ2xvYWsgJiYgaUF0dHIudHJhbnNsYXRlQ2xvYWsubGVuZ3RoKSB7XG4gICAgICAgICAgaUF0dHIuJG9ic2VydmUoJ3RyYW5zbGF0ZUNsb2FrJywgZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQpIHtcbiAgICAgICAgICAgICR0cmFuc2xhdGUodHJhbnNsYXRpb25JZCkudGhlbihyZW1vdmVDbG9haywgYXBwbHlDbG9hayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgncGFzY2FscHJlY2h0LnRyYW5zbGF0ZScpXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIHBhc2NhbHByZWNodC50cmFuc2xhdGUuZmlsdGVyOnRyYW5zbGF0ZVxuICogQHJlcXVpcmVzICRwYXJzZVxuICogQHJlcXVpcmVzIHBhc2NhbHByZWNodC50cmFuc2xhdGUuJHRyYW5zbGF0ZVxuICogQGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2VzIGAkdHJhbnNsYXRlYCBzZXJ2aWNlIHRvIHRyYW5zbGF0ZSBjb250ZW50cy4gQWNjZXB0cyBpbnRlcnBvbGF0ZSBwYXJhbWV0ZXJzXG4gKiB0byBwYXNzIGR5bmFtaXplZCB2YWx1ZXMgdGhvdWdoIHRyYW5zbGF0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0cmFuc2xhdGlvbklkIEEgdHJhbnNsYXRpb24gaWQgdG8gYmUgdHJhbnNsYXRlZC5cbiAqIEBwYXJhbSB7Kj19IGludGVycG9sYXRlUGFyYW1zIE9wdGlvbmFsIG9iamVjdCBsaXRlcmFsIChhcyBoYXNoIG9yIHN0cmluZykgdG8gcGFzcyB2YWx1ZXMgaW50byB0cmFuc2xhdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUcmFuc2xhdGVkIHRleHQuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cIm5nVmlld1wiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJUcmFuc2xhdGVDdHJsXCI+XG5cbiAgICAgICAgPHByZT57eyAnVFJBTlNMQVRJT05fSUQnIHwgdHJhbnNsYXRlIH19PC9wcmU+XG4gICAgICAgIDxwcmU+e3sgdHJhbnNsYXRpb25JZCB8IHRyYW5zbGF0ZSB9fTwvcHJlPlxuICAgICAgICA8cHJlPnt7ICdXSVRIX1ZBTFVFUycgfCB0cmFuc2xhdGU6J3t2YWx1ZTogNX0nIH19PC9wcmU+XG4gICAgICAgIDxwcmU+e3sgJ1dJVEhfVkFMVUVTJyB8IHRyYW5zbGF0ZTp2YWx1ZXMgfX08L3ByZT5cblxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1ZpZXcnLCBbJ3Bhc2NhbHByZWNodC50cmFuc2xhdGUnXSlcblxuICAgICAgLmNvbmZpZyhmdW5jdGlvbiAoJHRyYW5zbGF0ZVByb3ZpZGVyKSB7XG5cbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnRyYW5zbGF0aW9ucygnZW4nLCB7XG4gICAgICAgICAgJ1RSQU5TTEFUSU9OX0lEJzogJ0hlbGxvIHRoZXJlIScsXG4gICAgICAgICAgJ1dJVEhfVkFMVUVTJzogJ1RoZSBmb2xsb3dpbmcgdmFsdWUgaXMgZHluYW1pYzoge3t2YWx1ZX19J1xuICAgICAgICB9KTtcbiAgICAgICAgJHRyYW5zbGF0ZVByb3ZpZGVyLnByZWZlcnJlZExhbmd1YWdlKCdlbicpO1xuXG4gICAgICB9KTtcblxuICAgICAgYW5ndWxhci5tb2R1bGUoJ25nVmlldycpLmNvbnRyb2xsZXIoJ1RyYW5zbGF0ZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgICAgICRzY29wZS50cmFuc2xhdGlvbklkID0gJ1RSQU5TTEFUSU9OX0lEJztcblxuICAgICAgICAkc2NvcGUudmFsdWVzID0ge1xuICAgICAgICAgIHZhbHVlOiA3OFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG4uZmlsdGVyKCd0cmFuc2xhdGUnLCBbJyRwYXJzZScsICckdHJhbnNsYXRlJywgZnVuY3Rpb24gKCRwYXJzZSwgJHRyYW5zbGF0ZSkge1xuICB2YXIgdHJhbnNsYXRlRmlsdGVyID0gZnVuY3Rpb24gKHRyYW5zbGF0aW9uSWQsIGludGVycG9sYXRlUGFyYW1zLCBpbnRlcnBvbGF0aW9uKSB7XG5cbiAgICBpZiAoIWFuZ3VsYXIuaXNPYmplY3QoaW50ZXJwb2xhdGVQYXJhbXMpKSB7XG4gICAgICBpbnRlcnBvbGF0ZVBhcmFtcyA9ICRwYXJzZShpbnRlcnBvbGF0ZVBhcmFtcykodGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuICR0cmFuc2xhdGUuaW5zdGFudCh0cmFuc2xhdGlvbklkLCBpbnRlcnBvbGF0ZVBhcmFtcywgaW50ZXJwb2xhdGlvbik7XG4gIH07XG5cbiAgLy8gU2luY2UgQW5ndWxhckpTIDEuMywgZmlsdGVycyB3aGljaCBhcmUgbm90IHN0YXRlbGVzcyAoZGVwZW5kaW5nIGF0IHRoZSBzY29wZSlcbiAgLy8gaGF2ZSB0byBleHBsaWNpdCBkZWZpbmUgdGhpcyBiZWhhdmlvci5cbiAgdHJhbnNsYXRlRmlsdGVyLiRzdGF0ZWZ1bCA9IHRydWU7XG5cbiAgcmV0dXJuIHRyYW5zbGF0ZUZpbHRlcjtcbn1dKTtcblxuLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFySlMgdjEuMy4yMFxuICogKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmdcbiAqIExpY2Vuc2U6IE1JVFxuICovXG4oZnVuY3Rpb24od2luZG93LCBhbmd1bGFyLCB1bmRlZmluZWQpIHsndXNlIHN0cmljdCc7XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlcyBkb2N1bWVudCBvciB3aW5kb3c/ICAgICpcbiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbnZhciAkc2FuaXRpemVNaW5FcnIgPSBhbmd1bGFyLiQkbWluRXJyKCckc2FuaXRpemUnKTtcblxuLyoqXG4gKiBAbmdkb2MgbW9kdWxlXG4gKiBAbmFtZSBuZ1Nhbml0aXplXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiAjIG5nU2FuaXRpemVcbiAqXG4gKiBUaGUgYG5nU2FuaXRpemVgIG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IHRvIHNhbml0aXplIEhUTUwuXG4gKlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdTYW5pdGl6ZVwiPjwvZGl2PlxuICpcbiAqIFNlZSB7QGxpbmsgbmdTYW5pdGl6ZS4kc2FuaXRpemUgYCRzYW5pdGl6ZWB9IGZvciB1c2FnZS5cbiAqL1xuXG4vKlxuICogSFRNTCBQYXJzZXIgQnkgTWlza28gSGV2ZXJ5IChtaXNrb0BoZXZlcnkuY29tKVxuICogYmFzZWQgb246ICBIVE1MIFBhcnNlciBCeSBKb2huIFJlc2lnIChlam9obi5vcmcpXG4gKiBPcmlnaW5hbCBjb2RlIGJ5IEVyaWsgQXJ2aWRzc29uLCBNb3ppbGxhIFB1YmxpYyBMaWNlbnNlXG4gKiBodHRwOi8vZXJpay5lYWUubmV0L3NpbXBsZWh0bWxwYXJzZXIvc2ltcGxlaHRtbHBhcnNlci5qc1xuICpcbiAqIC8vIFVzZSBsaWtlIHNvOlxuICogaHRtbFBhcnNlcihodG1sU3RyaW5nLCB7XG4gKiAgICAgc3RhcnQ6IGZ1bmN0aW9uKHRhZywgYXR0cnMsIHVuYXJ5KSB7fSxcbiAqICAgICBlbmQ6IGZ1bmN0aW9uKHRhZykge30sXG4gKiAgICAgY2hhcnM6IGZ1bmN0aW9uKHRleHQpIHt9LFxuICogICAgIGNvbW1lbnQ6IGZ1bmN0aW9uKHRleHQpIHt9XG4gKiB9KTtcbiAqXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkc2FuaXRpemVcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiAgIFRoZSBpbnB1dCBpcyBzYW5pdGl6ZWQgYnkgcGFyc2luZyB0aGUgSFRNTCBpbnRvIHRva2Vucy4gQWxsIHNhZmUgdG9rZW5zIChmcm9tIGEgd2hpdGVsaXN0KSBhcmVcbiAqICAgdGhlbiBzZXJpYWxpemVkIGJhY2sgdG8gcHJvcGVybHkgZXNjYXBlZCBodG1sIHN0cmluZy4gVGhpcyBtZWFucyB0aGF0IG5vIHVuc2FmZSBpbnB1dCBjYW4gbWFrZVxuICogICBpdCBpbnRvIHRoZSByZXR1cm5lZCBzdHJpbmcsIGhvd2V2ZXIsIHNpbmNlIG91ciBwYXJzZXIgaXMgbW9yZSBzdHJpY3QgdGhhbiBhIHR5cGljYWwgYnJvd3NlclxuICogICBwYXJzZXIsIGl0J3MgcG9zc2libGUgdGhhdCBzb21lIG9ic2N1cmUgaW5wdXQsIHdoaWNoIHdvdWxkIGJlIHJlY29nbml6ZWQgYXMgdmFsaWQgSFRNTCBieSBhXG4gKiAgIGJyb3dzZXIsIHdvbid0IG1ha2UgaXQgdGhyb3VnaCB0aGUgc2FuaXRpemVyLiBUaGUgaW5wdXQgbWF5IGFsc28gY29udGFpbiBTVkcgbWFya3VwLlxuICogICBUaGUgd2hpdGVsaXN0IGlzIGNvbmZpZ3VyZWQgdXNpbmcgdGhlIGZ1bmN0aW9ucyBgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3RgIGFuZFxuICogICBgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0YCBvZiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciBgJGNvbXBpbGVQcm92aWRlcmB9LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sIEhUTUwgaW5wdXQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBTYW5pdGl6ZWQgSFRNTC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic2FuaXRpemVFeGFtcGxlXCIgZGVwcz1cImFuZ3VsYXItc2FuaXRpemUuanNcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnc2FuaXRpemVFeGFtcGxlJywgWyduZ1Nhbml0aXplJ10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRzY2UnLCBmdW5jdGlvbigkc2NvcGUsICRzY2UpIHtcbiAgICAgICAgICAgICAkc2NvcGUuc25pcHBldCA9XG4gICAgICAgICAgICAgICAnPHAgc3R5bGU9XCJjb2xvcjpibHVlXCI+YW4gaHRtbFxcbicgK1xuICAgICAgICAgICAgICAgJzxlbSBvbm1vdXNlb3Zlcj1cInRoaXMudGV4dENvbnRlbnQ9XFwnUFdOM0QhXFwnXCI+Y2xpY2sgaGVyZTwvZW0+XFxuJyArXG4gICAgICAgICAgICAgICAnc25pcHBldDwvcD4nO1xuICAgICAgICAgICAgICRzY29wZS5kZWxpYmVyYXRlbHlUcnVzdERhbmdlcm91c1NuaXBwZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgIHJldHVybiAkc2NlLnRydXN0QXNIdG1sKCRzY29wZS5zbmlwcGV0KTtcbiAgICAgICAgICAgICB9O1xuICAgICAgICAgICB9XSk7XG4gICAgIDwvc2NyaXB0PlxuICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICBTbmlwcGV0OiA8dGV4dGFyZWEgbmctbW9kZWw9XCJzbmlwcGV0XCIgY29scz1cIjYwXCIgcm93cz1cIjNcIj48L3RleHRhcmVhPlxuICAgICAgIDx0YWJsZT5cbiAgICAgICAgIDx0cj5cbiAgICAgICAgICAgPHRkPkRpcmVjdGl2ZTwvdGQ+XG4gICAgICAgICAgIDx0ZD5Ib3c8L3RkPlxuICAgICAgICAgICA8dGQ+U291cmNlPC90ZD5cbiAgICAgICAgICAgPHRkPlJlbmRlcmVkPC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgICA8dHIgaWQ9XCJiaW5kLWh0bWwtd2l0aC1zYW5pdGl6ZVwiPlxuICAgICAgICAgICA8dGQ+bmctYmluZC1odG1sPC90ZD5cbiAgICAgICAgICAgPHRkPkF1dG9tYXRpY2FsbHkgdXNlcyAkc2FuaXRpemU8L3RkPlxuICAgICAgICAgICA8dGQ+PHByZT4mbHQ7ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXRcIiZndDs8YnIvPiZsdDsvZGl2Jmd0OzwvcHJlPjwvdGQ+XG4gICAgICAgICAgIDx0ZD48ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXRcIj48L2Rpdj48L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICAgIDx0ciBpZD1cImJpbmQtaHRtbC13aXRoLXRydXN0XCI+XG4gICAgICAgICAgIDx0ZD5uZy1iaW5kLWh0bWw8L3RkPlxuICAgICAgICAgICA8dGQ+QnlwYXNzICRzYW5pdGl6ZSBieSBleHBsaWNpdGx5IHRydXN0aW5nIHRoZSBkYW5nZXJvdXMgdmFsdWU8L3RkPlxuICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgIDxwcmU+Jmx0O2RpdiBuZy1iaW5kLWh0bWw9XCJkZWxpYmVyYXRlbHlUcnVzdERhbmdlcm91c1NuaXBwZXQoKVwiJmd0O1xuJmx0Oy9kaXYmZ3Q7PC9wcmU+XG4gICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgIDx0ZD48ZGl2IG5nLWJpbmQtaHRtbD1cImRlbGliZXJhdGVseVRydXN0RGFuZ2Vyb3VzU25pcHBldCgpXCI+PC9kaXY+PC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgICA8dHIgaWQ9XCJiaW5kLWRlZmF1bHRcIj5cbiAgICAgICAgICAgPHRkPm5nLWJpbmQ8L3RkPlxuICAgICAgICAgICA8dGQ+QXV0b21hdGljYWxseSBlc2NhcGVzPC90ZD5cbiAgICAgICAgICAgPHRkPjxwcmU+Jmx0O2RpdiBuZy1iaW5kPVwic25pcHBldFwiJmd0Ozxici8+Jmx0Oy9kaXYmZ3Q7PC9wcmU+PC90ZD5cbiAgICAgICAgICAgPHRkPjxkaXYgbmctYmluZD1cInNuaXBwZXRcIj48L2Rpdj48L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICAgIDwvZGl2PlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICBpdCgnc2hvdWxkIHNhbml0aXplIHRoZSBodG1sIHNuaXBwZXQgYnkgZGVmYXVsdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI2JpbmQtaHRtbC13aXRoLXNhbml0aXplIGRpdicpKS5nZXRJbm5lckh0bWwoKSkuXG4gICAgICAgICB0b0JlKCc8cD5hbiBodG1sXFxuPGVtPmNsaWNrIGhlcmU8L2VtPlxcbnNuaXBwZXQ8L3A+Jyk7XG4gICAgIH0pO1xuXG4gICAgIGl0KCdzaG91bGQgaW5saW5lIHJhdyBzbmlwcGV0IGlmIGJvdW5kIHRvIGEgdHJ1c3RlZCB2YWx1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI2JpbmQtaHRtbC13aXRoLXRydXN0IGRpdicpKS5nZXRJbm5lckh0bWwoKSkuXG4gICAgICAgICB0b0JlKFwiPHAgc3R5bGU9XFxcImNvbG9yOmJsdWVcXFwiPmFuIGh0bWxcXG5cIiArXG4gICAgICAgICAgICAgIFwiPGVtIG9ubW91c2VvdmVyPVxcXCJ0aGlzLnRleHRDb250ZW50PSdQV04zRCEnXFxcIj5jbGljayBoZXJlPC9lbT5cXG5cIiArXG4gICAgICAgICAgICAgIFwic25pcHBldDwvcD5cIik7XG4gICAgIH0pO1xuXG4gICAgIGl0KCdzaG91bGQgZXNjYXBlIHNuaXBwZXQgd2l0aG91dCBhbnkgZmlsdGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjYmluZC1kZWZhdWx0IGRpdicpKS5nZXRJbm5lckh0bWwoKSkuXG4gICAgICAgICB0b0JlKFwiJmx0O3Agc3R5bGU9XFxcImNvbG9yOmJsdWVcXFwiJmd0O2FuIGh0bWxcXG5cIiArXG4gICAgICAgICAgICAgIFwiJmx0O2VtIG9ubW91c2VvdmVyPVxcXCJ0aGlzLnRleHRDb250ZW50PSdQV04zRCEnXFxcIiZndDtjbGljayBoZXJlJmx0Oy9lbSZndDtcXG5cIiArXG4gICAgICAgICAgICAgIFwic25pcHBldCZsdDsvcCZndDtcIik7XG4gICAgIH0pO1xuXG4gICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgZWxlbWVudChieS5tb2RlbCgnc25pcHBldCcpKS5jbGVhcigpO1xuICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3NuaXBwZXQnKSkuc2VuZEtleXMoJ25ldyA8YiBvbmNsaWNrPVwiYWxlcnQoMSlcIj50ZXh0PC9iPicpO1xuICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI2JpbmQtaHRtbC13aXRoLXNhbml0aXplIGRpdicpKS5nZXRJbm5lckh0bWwoKSkuXG4gICAgICAgICB0b0JlKCduZXcgPGI+dGV4dDwvYj4nKTtcbiAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJyNiaW5kLWh0bWwtd2l0aC10cnVzdCBkaXYnKSkuZ2V0SW5uZXJIdG1sKCkpLnRvQmUoXG4gICAgICAgICAnbmV3IDxiIG9uY2xpY2s9XCJhbGVydCgxKVwiPnRleHQ8L2I+Jyk7XG4gICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCcjYmluZC1kZWZhdWx0IGRpdicpKS5nZXRJbm5lckh0bWwoKSkudG9CZShcbiAgICAgICAgIFwibmV3ICZsdDtiIG9uY2xpY2s9XFxcImFsZXJ0KDEpXFxcIiZndDt0ZXh0Jmx0Oy9iJmd0O1wiKTtcbiAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRTYW5pdGl6ZVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyQkc2FuaXRpemVVcmknLCBmdW5jdGlvbigkJHNhbml0aXplVXJpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGh0bWwpIHtcbiAgICAgIHZhciBidWYgPSBbXTtcbiAgICAgIGh0bWxQYXJzZXIoaHRtbCwgaHRtbFNhbml0aXplV3JpdGVyKGJ1ZiwgZnVuY3Rpb24odXJpLCBpc0ltYWdlKSB7XG4gICAgICAgIHJldHVybiAhL151bnNhZmUvLnRlc3QoJCRzYW5pdGl6ZVVyaSh1cmksIGlzSW1hZ2UpKTtcbiAgICAgIH0pKTtcbiAgICAgIHJldHVybiBidWYuam9pbignJyk7XG4gICAgfTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uIHNhbml0aXplVGV4dChjaGFycykge1xuICB2YXIgYnVmID0gW107XG4gIHZhciB3cml0ZXIgPSBodG1sU2FuaXRpemVXcml0ZXIoYnVmLCBhbmd1bGFyLm5vb3ApO1xuICB3cml0ZXIuY2hhcnMoY2hhcnMpO1xuICByZXR1cm4gYnVmLmpvaW4oJycpO1xufVxuXG5cbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xudmFyIFNUQVJUX1RBR19SRUdFWFAgPVxuICAgICAgIC9ePCgoPzpbYS16QS1aXSlbXFx3Oi1dKikoKD86XFxzK1tcXHc6LV0rKD86XFxzKj1cXHMqKD86KD86XCJbXlwiXSpcIil8KD86J1teJ10qJyl8W14+XFxzXSspKT8pKilcXHMqKFxcLz8pXFxzKig+PykvLFxuICBFTkRfVEFHX1JFR0VYUCA9IC9ePFxcL1xccyooW1xcdzotXSspW14+XSo+LyxcbiAgQVRUUl9SRUdFWFAgPSAvKFtcXHc6LV0rKSg/Olxccyo9XFxzKig/Oig/OlwiKCg/OlteXCJdKSopXCIpfCg/OicoKD86W14nXSkqKScpfChbXj5cXHNdKykpKT8vZyxcbiAgQkVHSU5fVEFHX1JFR0VYUCA9IC9ePC8sXG4gIEJFR0lOR19FTkRfVEFHRV9SRUdFWFAgPSAvXjxcXC8vLFxuICBDT01NRU5UX1JFR0VYUCA9IC88IS0tKC4qPyktLT4vZyxcbiAgRE9DVFlQRV9SRUdFWFAgPSAvPCFET0NUWVBFKFtePl0qPyk+L2ksXG4gIENEQVRBX1JFR0VYUCA9IC88IVxcW0NEQVRBXFxbKC4qPyldXT4vZyxcbiAgU1VSUk9HQVRFX1BBSVJfUkVHRVhQID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZyxcbiAgLy8gTWF0Y2ggZXZlcnl0aGluZyBvdXRzaWRlIG9mIG5vcm1hbCBjaGFycyBhbmQgXCIgKHF1b3RlIGNoYXJhY3RlcilcbiAgTk9OX0FMUEhBTlVNRVJJQ19SRUdFWFAgPSAvKFteXFwjLX58IHwhXSkvZztcblxuXG4vLyBHb29kIHNvdXJjZSBvZiBpbmZvIGFib3V0IGVsZW1lbnRzIGFuZCBhdHRyaWJ1dGVzXG4vLyBodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL092ZXJ2aWV3Lmh0bWwjc2VtYW50aWNzXG4vLyBodHRwOi8vc2ltb24uaHRtbDUub3JnL2h0bWwtZWxlbWVudHNcblxuLy8gU2FmZSBWb2lkIEVsZW1lbnRzIC0gSFRNTDVcbi8vIGh0dHA6Ly9kZXYudzMub3JnL2h0bWw1L3NwZWMvT3ZlcnZpZXcuaHRtbCN2b2lkLWVsZW1lbnRzXG52YXIgdm9pZEVsZW1lbnRzID0gbWFrZU1hcChcImFyZWEsYnIsY29sLGhyLGltZyx3YnJcIik7XG5cbi8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlbiAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpXG4vLyBodHRwOi8vZGV2LnczLm9yZy9odG1sNS9zcGVjL092ZXJ2aWV3Lmh0bWwjb3B0aW9uYWwtdGFnc1xudmFyIG9wdGlvbmFsRW5kVGFnQmxvY2tFbGVtZW50cyA9IG1ha2VNYXAoXCJjb2xncm91cCxkZCxkdCxsaSxwLHRib2R5LHRkLHRmb290LHRoLHRoZWFkLHRyXCIpLFxuICAgIG9wdGlvbmFsRW5kVGFnSW5saW5lRWxlbWVudHMgPSBtYWtlTWFwKFwicnAscnRcIiksXG4gICAgb3B0aW9uYWxFbmRUYWdFbGVtZW50cyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbEVuZFRhZ0lubGluZUVsZW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbEVuZFRhZ0Jsb2NrRWxlbWVudHMpO1xuXG4vLyBTYWZlIEJsb2NrIEVsZW1lbnRzIC0gSFRNTDVcbnZhciBibG9ja0VsZW1lbnRzID0gYW5ndWxhci5leHRlbmQoe30sIG9wdGlvbmFsRW5kVGFnQmxvY2tFbGVtZW50cywgbWFrZU1hcChcImFkZHJlc3MsYXJ0aWNsZSxcIiArXG4gICAgICAgIFwiYXNpZGUsYmxvY2txdW90ZSxjYXB0aW9uLGNlbnRlcixkZWwsZGlyLGRpdixkbCxmaWd1cmUsZmlnY2FwdGlvbixmb290ZXIsaDEsaDIsaDMsaDQsaDUsXCIgK1xuICAgICAgICBcImg2LGhlYWRlcixoZ3JvdXAsaHIsaW5zLG1hcCxtZW51LG5hdixvbCxwcmUsc2NyaXB0LHNlY3Rpb24sdGFibGUsdWxcIikpO1xuXG4vLyBJbmxpbmUgRWxlbWVudHMgLSBIVE1MNVxudmFyIGlubGluZUVsZW1lbnRzID0gYW5ndWxhci5leHRlbmQoe30sIG9wdGlvbmFsRW5kVGFnSW5saW5lRWxlbWVudHMsIG1ha2VNYXAoXCJhLGFiYnIsYWNyb255bSxiLFwiICtcbiAgICAgICAgXCJiZGksYmRvLGJpZyxicixjaXRlLGNvZGUsZGVsLGRmbixlbSxmb250LGksaW1nLGlucyxrYmQsbGFiZWwsbWFwLG1hcmsscSxydWJ5LHJwLHJ0LHMsXCIgK1xuICAgICAgICBcInNhbXAsc21hbGwsc3BhbixzdHJpa2Usc3Ryb25nLHN1YixzdXAsdGltZSx0dCx1LHZhclwiKSk7XG5cbi8vIFNWRyBFbGVtZW50c1xuLy8gaHR0cHM6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9TYW5pdGl6YXRpb25fcnVsZXMjc3ZnX0VsZW1lbnRzXG52YXIgc3ZnRWxlbWVudHMgPSBtYWtlTWFwKFwiYW5pbWF0ZSxhbmltYXRlQ29sb3IsYW5pbWF0ZU1vdGlvbixhbmltYXRlVHJhbnNmb3JtLGNpcmNsZSxkZWZzLFwiICtcbiAgICAgICAgXCJkZXNjLGVsbGlwc2UsZm9udC1mYWNlLGZvbnQtZmFjZS1uYW1lLGZvbnQtZmFjZS1zcmMsZyxnbHlwaCxoa2VybixpbWFnZSxsaW5lYXJHcmFkaWVudCxcIiArXG4gICAgICAgIFwibGluZSxtYXJrZXIsbWV0YWRhdGEsbWlzc2luZy1nbHlwaCxtcGF0aCxwYXRoLHBvbHlnb24scG9seWxpbmUscmFkaWFsR3JhZGllbnQscmVjdCxzZXQsXCIgK1xuICAgICAgICBcInN0b3Asc3ZnLHN3aXRjaCx0ZXh0LHRpdGxlLHRzcGFuLHVzZVwiKTtcblxuLy8gU3BlY2lhbCBFbGVtZW50cyAoY2FuIGNvbnRhaW4gYW55dGhpbmcpXG52YXIgc3BlY2lhbEVsZW1lbnRzID0gbWFrZU1hcChcInNjcmlwdCxzdHlsZVwiKTtcblxudmFyIHZhbGlkRWxlbWVudHMgPSBhbmd1bGFyLmV4dGVuZCh7fSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZEVsZW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9ja0VsZW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmVFbGVtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxFbmRUYWdFbGVtZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ZnRWxlbWVudHMpO1xuXG4vL0F0dHJpYnV0ZXMgdGhhdCBoYXZlIGhyZWYgYW5kIGhlbmNlIG5lZWQgdG8gYmUgc2FuaXRpemVkXG52YXIgdXJpQXR0cnMgPSBtYWtlTWFwKFwiYmFja2dyb3VuZCxjaXRlLGhyZWYsbG9uZ2Rlc2Msc3JjLHVzZW1hcCx4bGluazpocmVmXCIpO1xuXG52YXIgaHRtbEF0dHJzID0gbWFrZU1hcCgnYWJicixhbGlnbixhbHQsYXhpcyxiZ2NvbG9yLGJvcmRlcixjZWxscGFkZGluZyxjZWxsc3BhY2luZyxjbGFzcyxjbGVhciwnICtcbiAgICAnY29sb3IsY29scyxjb2xzcGFuLGNvbXBhY3QsY29vcmRzLGRpcixmYWNlLGhlYWRlcnMsaGVpZ2h0LGhyZWZsYW5nLGhzcGFjZSwnICtcbiAgICAnaXNtYXAsbGFuZyxsYW5ndWFnZSxub2hyZWYsbm93cmFwLHJlbCxyZXYscm93cyxyb3dzcGFuLHJ1bGVzLCcgK1xuICAgICdzY29wZSxzY3JvbGxpbmcsc2hhcGUsc2l6ZSxzcGFuLHN0YXJ0LHN1bW1hcnksdGFyZ2V0LHRpdGxlLHR5cGUsJyArXG4gICAgJ3ZhbGlnbix2YWx1ZSx2c3BhY2Usd2lkdGgnKTtcblxuLy8gU1ZHIGF0dHJpYnV0ZXMgKHdpdGhvdXQgXCJpZFwiIGFuZCBcIm5hbWVcIiBhdHRyaWJ1dGVzKVxuLy8gaHR0cHM6Ly93aWtpLndoYXR3Zy5vcmcvd2lraS9TYW5pdGl6YXRpb25fcnVsZXMjc3ZnX0F0dHJpYnV0ZXNcbnZhciBzdmdBdHRycyA9IG1ha2VNYXAoJ2FjY2VudC1oZWlnaHQsYWNjdW11bGF0ZSxhZGRpdGl2ZSxhbHBoYWJldGljLGFyYWJpYy1mb3JtLGFzY2VudCwnICtcbiAgICAnYXR0cmlidXRlTmFtZSxhdHRyaWJ1dGVUeXBlLGJhc2VQcm9maWxlLGJib3gsYmVnaW4sYnksY2FsY01vZGUsY2FwLWhlaWdodCxjbGFzcyxjb2xvciwnICtcbiAgICAnY29sb3ItcmVuZGVyaW5nLGNvbnRlbnQsY3gsY3ksZCxkeCxkeSxkZXNjZW50LGRpc3BsYXksZHVyLGVuZCxmaWxsLGZpbGwtcnVsZSxmb250LWZhbWlseSwnICtcbiAgICAnZm9udC1zaXplLGZvbnQtc3RyZXRjaCxmb250LXN0eWxlLGZvbnQtdmFyaWFudCxmb250LXdlaWdodCxmcm9tLGZ4LGZ5LGcxLGcyLGdseXBoLW5hbWUsJyArXG4gICAgJ2dyYWRpZW50VW5pdHMsaGFuZ2luZyxoZWlnaHQsaG9yaXotYWR2LXgsaG9yaXotb3JpZ2luLXgsaWRlb2dyYXBoaWMsayxrZXlQb2ludHMsJyArXG4gICAgJ2tleVNwbGluZXMsa2V5VGltZXMsbGFuZyxtYXJrZXItZW5kLG1hcmtlci1taWQsbWFya2VyLXN0YXJ0LG1hcmtlckhlaWdodCxtYXJrZXJVbml0cywnICtcbiAgICAnbWFya2VyV2lkdGgsbWF0aGVtYXRpY2FsLG1heCxtaW4sb2Zmc2V0LG9wYWNpdHksb3JpZW50LG9yaWdpbixvdmVybGluZS1wb3NpdGlvbiwnICtcbiAgICAnb3ZlcmxpbmUtdGhpY2tuZXNzLHBhbm9zZS0xLHBhdGgscGF0aExlbmd0aCxwb2ludHMscHJlc2VydmVBc3BlY3RSYXRpbyxyLHJlZlgscmVmWSwnICtcbiAgICAncmVwZWF0Q291bnQscmVwZWF0RHVyLHJlcXVpcmVkRXh0ZW5zaW9ucyxyZXF1aXJlZEZlYXR1cmVzLHJlc3RhcnQscm90YXRlLHJ4LHJ5LHNsb3BlLHN0ZW1oLCcgK1xuICAgICdzdGVtdixzdG9wLWNvbG9yLHN0b3Atb3BhY2l0eSxzdHJpa2V0aHJvdWdoLXBvc2l0aW9uLHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzLHN0cm9rZSwnICtcbiAgICAnc3Ryb2tlLWRhc2hhcnJheSxzdHJva2UtZGFzaG9mZnNldCxzdHJva2UtbGluZWNhcCxzdHJva2UtbGluZWpvaW4sc3Ryb2tlLW1pdGVybGltaXQsJyArXG4gICAgJ3N0cm9rZS1vcGFjaXR5LHN0cm9rZS13aWR0aCxzeXN0ZW1MYW5ndWFnZSx0YXJnZXQsdGV4dC1hbmNob3IsdG8sdHJhbnNmb3JtLHR5cGUsdTEsdTIsJyArXG4gICAgJ3VuZGVybGluZS1wb3NpdGlvbix1bmRlcmxpbmUtdGhpY2tuZXNzLHVuaWNvZGUsdW5pY29kZS1yYW5nZSx1bml0cy1wZXItZW0sdmFsdWVzLHZlcnNpb24sJyArXG4gICAgJ3ZpZXdCb3gsdmlzaWJpbGl0eSx3aWR0aCx3aWR0aHMseCx4LWhlaWdodCx4MSx4Mix4bGluazphY3R1YXRlLHhsaW5rOmFyY3JvbGUseGxpbms6cm9sZSwnICtcbiAgICAneGxpbms6c2hvdyx4bGluazp0aXRsZSx4bGluazp0eXBlLHhtbDpiYXNlLHhtbDpsYW5nLHhtbDpzcGFjZSx4bWxucyx4bWxuczp4bGluayx5LHkxLHkyLCcgK1xuICAgICd6b29tQW5kUGFuJyk7XG5cbnZhciB2YWxpZEF0dHJzID0gYW5ndWxhci5leHRlbmQoe30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVyaUF0dHJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdmdBdHRycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbEF0dHJzKTtcblxuZnVuY3Rpb24gbWFrZU1hcChzdHIpIHtcbiAgdmFyIG9iaiA9IHt9LCBpdGVtcyA9IHN0ci5zcGxpdCgnLCcpLCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspIG9ialtpdGVtc1tpXV0gPSB0cnVlO1xuICByZXR1cm4gb2JqO1xufVxuXG5cbi8qKlxuICogQGV4YW1wbGVcbiAqIGh0bWxQYXJzZXIoaHRtbFN0cmluZywge1xuICogICAgIHN0YXJ0OiBmdW5jdGlvbih0YWcsIGF0dHJzLCB1bmFyeSkge30sXG4gKiAgICAgZW5kOiBmdW5jdGlvbih0YWcpIHt9LFxuICogICAgIGNoYXJzOiBmdW5jdGlvbih0ZXh0KSB7fSxcbiAqICAgICBjb21tZW50OiBmdW5jdGlvbih0ZXh0KSB7fVxuICogfSk7XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWwgc3RyaW5nXG4gKiBAcGFyYW0ge29iamVjdH0gaGFuZGxlclxuICovXG5mdW5jdGlvbiBodG1sUGFyc2VyKGh0bWwsIGhhbmRsZXIpIHtcbiAgaWYgKHR5cGVvZiBodG1sICE9PSAnc3RyaW5nJykge1xuICAgIGlmIChodG1sID09PSBudWxsIHx8IHR5cGVvZiBodG1sID09PSAndW5kZWZpbmVkJykge1xuICAgICAgaHRtbCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBodG1sID0gJycgKyBodG1sO1xuICAgIH1cbiAgfVxuICB2YXIgaW5kZXgsIGNoYXJzLCBtYXRjaCwgc3RhY2sgPSBbXSwgbGFzdCA9IGh0bWwsIHRleHQ7XG4gIHN0YWNrLmxhc3QgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdOyB9O1xuXG4gIHdoaWxlIChodG1sKSB7XG4gICAgdGV4dCA9ICcnO1xuICAgIGNoYXJzID0gdHJ1ZTtcblxuICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBzY3JpcHQgb3Igc3R5bGUgZWxlbWVudFxuICAgIGlmICghc3RhY2subGFzdCgpIHx8ICFzcGVjaWFsRWxlbWVudHNbc3RhY2subGFzdCgpXSkge1xuXG4gICAgICAvLyBDb21tZW50XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKFwiPCEtLVwiKSA9PT0gMCkge1xuICAgICAgICAvLyBjb21tZW50cyBjb250YWluaW5nIC0tIGFyZSBub3QgYWxsb3dlZCB1bmxlc3MgdGhleSB0ZXJtaW5hdGUgdGhlIGNvbW1lbnRcbiAgICAgICAgaW5kZXggPSBodG1sLmluZGV4T2YoXCItLVwiLCA0KTtcblxuICAgICAgICBpZiAoaW5kZXggPj0gMCAmJiBodG1sLmxhc3RJbmRleE9mKFwiLS0+XCIsIGluZGV4KSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaGFuZGxlci5jb21tZW50KSBoYW5kbGVyLmNvbW1lbnQoaHRtbC5zdWJzdHJpbmcoNCwgaW5kZXgpKTtcbiAgICAgICAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcoaW5kZXggKyAzKTtcbiAgICAgICAgICBjaGFycyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAvLyBET0NUWVBFXG4gICAgICB9IGVsc2UgaWYgKERPQ1RZUEVfUkVHRVhQLnRlc3QoaHRtbCkpIHtcbiAgICAgICAgbWF0Y2ggPSBodG1sLm1hdGNoKERPQ1RZUEVfUkVHRVhQKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBodG1sID0gaHRtbC5yZXBsYWNlKG1hdGNoWzBdLCAnJyk7XG4gICAgICAgICAgY2hhcnMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgLy8gZW5kIHRhZ1xuICAgICAgfSBlbHNlIGlmIChCRUdJTkdfRU5EX1RBR0VfUkVHRVhQLnRlc3QoaHRtbCkpIHtcbiAgICAgICAgbWF0Y2ggPSBodG1sLm1hdGNoKEVORF9UQUdfUkVHRVhQKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBtYXRjaFswXS5yZXBsYWNlKEVORF9UQUdfUkVHRVhQLCBwYXJzZUVuZFRhZyk7XG4gICAgICAgICAgY2hhcnMgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAvLyBzdGFydCB0YWdcbiAgICAgIH0gZWxzZSBpZiAoQkVHSU5fVEFHX1JFR0VYUC50ZXN0KGh0bWwpKSB7XG4gICAgICAgIG1hdGNoID0gaHRtbC5tYXRjaChTVEFSVF9UQUdfUkVHRVhQKTtcblxuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAvLyBXZSBvbmx5IGhhdmUgYSB2YWxpZCBzdGFydC10YWcgaWYgdGhlcmUgaXMgYSAnPicuXG4gICAgICAgICAgaWYgKG1hdGNoWzRdKSB7XG4gICAgICAgICAgICBodG1sID0gaHRtbC5zdWJzdHJpbmcobWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICAgIG1hdGNoWzBdLnJlcGxhY2UoU1RBUlRfVEFHX1JFR0VYUCwgcGFyc2VTdGFydFRhZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoYXJzID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbm8gZW5kaW5nIHRhZyBmb3VuZCAtLS0gdGhpcyBwaWVjZSBzaG91bGQgYmUgZW5jb2RlZCBhcyBhbiBlbnRpdHkuXG4gICAgICAgICAgdGV4dCArPSAnPCc7XG4gICAgICAgICAgaHRtbCA9IGh0bWwuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFycykge1xuICAgICAgICBpbmRleCA9IGh0bWwuaW5kZXhPZihcIjxcIik7XG5cbiAgICAgICAgdGV4dCArPSBpbmRleCA8IDAgPyBodG1sIDogaHRtbC5zdWJzdHJpbmcoMCwgaW5kZXgpO1xuICAgICAgICBodG1sID0gaW5kZXggPCAwID8gXCJcIiA6IGh0bWwuc3Vic3RyaW5nKGluZGV4KTtcblxuICAgICAgICBpZiAoaGFuZGxlci5jaGFycykgaGFuZGxlci5jaGFycyhkZWNvZGVFbnRpdGllcyh0ZXh0KSk7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSUUgdmVyc2lvbnMgOSBhbmQgMTAgZG8gbm90IHVuZGVyc3RhbmQgdGhlIHJlZ2V4ICdbXl0nLCBzbyB1c2luZyBhIHdvcmthcm91bmQgd2l0aCBbXFxXXFx3XS5cbiAgICAgIGh0bWwgPSBodG1sLnJlcGxhY2UobmV3IFJlZ0V4cChcIihbXFxcXFdcXFxcd10qKTxcXFxccypcXFxcL1xcXFxzKlwiICsgc3RhY2subGFzdCgpICsgXCJbXj5dKj5cIiwgJ2knKSxcbiAgICAgICAgZnVuY3Rpb24oYWxsLCB0ZXh0KSB7XG4gICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShDT01NRU5UX1JFR0VYUCwgXCIkMVwiKS5yZXBsYWNlKENEQVRBX1JFR0VYUCwgXCIkMVwiKTtcblxuICAgICAgICAgIGlmIChoYW5kbGVyLmNoYXJzKSBoYW5kbGVyLmNoYXJzKGRlY29kZUVudGl0aWVzKHRleHQpKTtcblxuICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfSk7XG5cbiAgICAgIHBhcnNlRW5kVGFnKFwiXCIsIHN0YWNrLmxhc3QoKSk7XG4gICAgfVxuXG4gICAgaWYgKGh0bWwgPT0gbGFzdCkge1xuICAgICAgdGhyb3cgJHNhbml0aXplTWluRXJyKCdiYWRwYXJzZScsIFwiVGhlIHNhbml0aXplciB3YXMgdW5hYmxlIHRvIHBhcnNlIHRoZSBmb2xsb3dpbmcgYmxvY2sgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib2YgaHRtbDogezB9XCIsIGh0bWwpO1xuICAgIH1cbiAgICBsYXN0ID0gaHRtbDtcbiAgfVxuXG4gIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICBwYXJzZUVuZFRhZygpO1xuXG4gIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcodGFnLCB0YWdOYW1lLCByZXN0LCB1bmFyeSkge1xuICAgIHRhZ05hbWUgPSBhbmd1bGFyLmxvd2VyY2FzZSh0YWdOYW1lKTtcbiAgICBpZiAoYmxvY2tFbGVtZW50c1t0YWdOYW1lXSkge1xuICAgICAgd2hpbGUgKHN0YWNrLmxhc3QoKSAmJiBpbmxpbmVFbGVtZW50c1tzdGFjay5sYXN0KCldKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKFwiXCIsIHN0YWNrLmxhc3QoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbmFsRW5kVGFnRWxlbWVudHNbdGFnTmFtZV0gJiYgc3RhY2subGFzdCgpID09IHRhZ05hbWUpIHtcbiAgICAgIHBhcnNlRW5kVGFnKFwiXCIsIHRhZ05hbWUpO1xuICAgIH1cblxuICAgIHVuYXJ5ID0gdm9pZEVsZW1lbnRzW3RhZ05hbWVdIHx8ICEhdW5hcnk7XG5cbiAgICBpZiAoIXVuYXJ5KVxuICAgICAgc3RhY2sucHVzaCh0YWdOYW1lKTtcblxuICAgIHZhciBhdHRycyA9IHt9O1xuXG4gICAgcmVzdC5yZXBsYWNlKEFUVFJfUkVHRVhQLFxuICAgICAgZnVuY3Rpb24obWF0Y2gsIG5hbWUsIGRvdWJsZVF1b3RlZFZhbHVlLCBzaW5nbGVRdW90ZWRWYWx1ZSwgdW5xdW90ZWRWYWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBkb3VibGVRdW90ZWRWYWx1ZVxuICAgICAgICAgIHx8IHNpbmdsZVF1b3RlZFZhbHVlXG4gICAgICAgICAgfHwgdW5xdW90ZWRWYWx1ZVxuICAgICAgICAgIHx8ICcnO1xuXG4gICAgICAgIGF0dHJzW25hbWVdID0gZGVjb2RlRW50aXRpZXModmFsdWUpO1xuICAgIH0pO1xuICAgIGlmIChoYW5kbGVyLnN0YXJ0KSBoYW5kbGVyLnN0YXJ0KHRhZ05hbWUsIGF0dHJzLCB1bmFyeSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUVuZFRhZyh0YWcsIHRhZ05hbWUpIHtcbiAgICB2YXIgcG9zID0gMCwgaTtcbiAgICB0YWdOYW1lID0gYW5ndWxhci5sb3dlcmNhc2UodGFnTmFtZSk7XG4gICAgaWYgKHRhZ05hbWUpXG4gICAgICAvLyBGaW5kIHRoZSBjbG9zZXN0IG9wZW5lZCB0YWcgb2YgdGhlIHNhbWUgdHlwZVxuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pXG4gICAgICAgIGlmIChzdGFja1twb3NdID09IHRhZ05hbWUpXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICBpZiAocG9zID49IDApIHtcbiAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrXG4gICAgICBmb3IgKGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKVxuICAgICAgICBpZiAoaGFuZGxlci5lbmQpIGhhbmRsZXIuZW5kKHN0YWNrW2ldKTtcblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgfVxuICB9XG59XG5cbnZhciBoaWRkZW5QcmU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInByZVwiKTtcbi8qKlxuICogZGVjb2RlcyBhbGwgZW50aXRpZXMgaW50byByZWd1bGFyIHN0cmluZ1xuICogQHBhcmFtIHZhbHVlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZyB3aXRoIGRlY29kZWQgZW50aXRpZXMuXG4gKi9cbmZ1bmN0aW9uIGRlY29kZUVudGl0aWVzKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHsgcmV0dXJuICcnOyB9XG5cbiAgaGlkZGVuUHJlLmlubmVySFRNTCA9IHZhbHVlLnJlcGxhY2UoLzwvZyxcIiZsdDtcIik7XG4gIC8vIGlubmVyVGV4dCBkZXBlbmRzIG9uIHN0eWxpbmcgYXMgaXQgZG9lc24ndCBkaXNwbGF5IGhpZGRlbiBlbGVtZW50cy5cbiAgLy8gVGhlcmVmb3JlLCBpdCdzIGJldHRlciB0byB1c2UgdGV4dENvbnRlbnQgbm90IHRvIGNhdXNlIHVubmVjZXNzYXJ5IHJlZmxvd3MuXG4gIHJldHVybiBoaWRkZW5QcmUudGV4dENvbnRlbnQ7XG59XG5cbi8qKlxuICogRXNjYXBlcyBhbGwgcG90ZW50aWFsbHkgZGFuZ2Vyb3VzIGNoYXJhY3RlcnMsIHNvIHRoYXQgdGhlXG4gKiByZXN1bHRpbmcgc3RyaW5nIGNhbiBiZSBzYWZlbHkgaW5zZXJ0ZWQgaW50byBhdHRyaWJ1dGUgb3JcbiAqIGVsZW1lbnQgdGV4dC5cbiAqIEBwYXJhbSB2YWx1ZVxuICogQHJldHVybnMge3N0cmluZ30gZXNjYXBlZCB0ZXh0XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUVudGl0aWVzKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZS5cbiAgICByZXBsYWNlKC8mL2csICcmYW1wOycpLlxuICAgIHJlcGxhY2UoU1VSUk9HQVRFX1BBSVJfUkVHRVhQLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIGhpID0gdmFsdWUuY2hhckNvZGVBdCgwKTtcbiAgICAgIHZhciBsb3cgPSB2YWx1ZS5jaGFyQ29kZUF0KDEpO1xuICAgICAgcmV0dXJuICcmIycgKyAoKChoaSAtIDB4RDgwMCkgKiAweDQwMCkgKyAobG93IC0gMHhEQzAwKSArIDB4MTAwMDApICsgJzsnO1xuICAgIH0pLlxuICAgIHJlcGxhY2UoTk9OX0FMUEhBTlVNRVJJQ19SRUdFWFAsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gJyYjJyArIHZhbHVlLmNoYXJDb2RlQXQoMCkgKyAnOyc7XG4gICAgfSkuXG4gICAgcmVwbGFjZSgvPC9nLCAnJmx0OycpLlxuICAgIHJlcGxhY2UoLz4vZywgJyZndDsnKTtcbn1cblxuLyoqXG4gKiBjcmVhdGUgYW4gSFRNTC9YTUwgd3JpdGVyIHdoaWNoIHdyaXRlcyB0byBidWZmZXJcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZiB1c2UgYnVmLmphaW4oJycpIHRvIGdldCBvdXQgc2FuaXRpemVkIGh0bWwgc3RyaW5nXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBpbiB0aGUgZm9ybSBvZiB7XG4gKiAgICAgc3RhcnQ6IGZ1bmN0aW9uKHRhZywgYXR0cnMsIHVuYXJ5KSB7fSxcbiAqICAgICBlbmQ6IGZ1bmN0aW9uKHRhZykge30sXG4gKiAgICAgY2hhcnM6IGZ1bmN0aW9uKHRleHQpIHt9LFxuICogICAgIGNvbW1lbnQ6IGZ1bmN0aW9uKHRleHQpIHt9XG4gKiB9XG4gKi9cbmZ1bmN0aW9uIGh0bWxTYW5pdGl6ZVdyaXRlcihidWYsIHVyaVZhbGlkYXRvcikge1xuICB2YXIgaWdub3JlID0gZmFsc2U7XG4gIHZhciBvdXQgPSBhbmd1bGFyLmJpbmQoYnVmLCBidWYucHVzaCk7XG4gIHJldHVybiB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKHRhZywgYXR0cnMsIHVuYXJ5KSB7XG4gICAgICB0YWcgPSBhbmd1bGFyLmxvd2VyY2FzZSh0YWcpO1xuICAgICAgaWYgKCFpZ25vcmUgJiYgc3BlY2lhbEVsZW1lbnRzW3RhZ10pIHtcbiAgICAgICAgaWdub3JlID0gdGFnO1xuICAgICAgfVxuICAgICAgaWYgKCFpZ25vcmUgJiYgdmFsaWRFbGVtZW50c1t0YWddID09PSB0cnVlKSB7XG4gICAgICAgIG91dCgnPCcpO1xuICAgICAgICBvdXQodGFnKTtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGF0dHJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgdmFyIGxrZXk9YW5ndWxhci5sb3dlcmNhc2Uoa2V5KTtcbiAgICAgICAgICB2YXIgaXNJbWFnZSA9ICh0YWcgPT09ICdpbWcnICYmIGxrZXkgPT09ICdzcmMnKSB8fCAobGtleSA9PT0gJ2JhY2tncm91bmQnKTtcbiAgICAgICAgICBpZiAodmFsaWRBdHRyc1tsa2V5XSA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgKHVyaUF0dHJzW2xrZXldICE9PSB0cnVlIHx8IHVyaVZhbGlkYXRvcih2YWx1ZSwgaXNJbWFnZSkpKSB7XG4gICAgICAgICAgICBvdXQoJyAnKTtcbiAgICAgICAgICAgIG91dChrZXkpO1xuICAgICAgICAgICAgb3V0KCc9XCInKTtcbiAgICAgICAgICAgIG91dChlbmNvZGVFbnRpdGllcyh2YWx1ZSkpO1xuICAgICAgICAgICAgb3V0KCdcIicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG91dCh1bmFyeSA/ICcvPicgOiAnPicpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZW5kOiBmdW5jdGlvbih0YWcpIHtcbiAgICAgICAgdGFnID0gYW5ndWxhci5sb3dlcmNhc2UodGFnKTtcbiAgICAgICAgaWYgKCFpZ25vcmUgJiYgdmFsaWRFbGVtZW50c1t0YWddID09PSB0cnVlKSB7XG4gICAgICAgICAgb3V0KCc8LycpO1xuICAgICAgICAgIG91dCh0YWcpO1xuICAgICAgICAgIG91dCgnPicpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gaWdub3JlKSB7XG4gICAgICAgICAgaWdub3JlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgY2hhcnM6IGZ1bmN0aW9uKGNoYXJzKSB7XG4gICAgICAgIGlmICghaWdub3JlKSB7XG4gICAgICAgICAgb3V0KGVuY29kZUVudGl0aWVzKGNoYXJzKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgfTtcbn1cblxuXG4vLyBkZWZpbmUgbmdTYW5pdGl6ZSBtb2R1bGUgYW5kIHJlZ2lzdGVyICRzYW5pdGl6ZSBzZXJ2aWNlXG5hbmd1bGFyLm1vZHVsZSgnbmdTYW5pdGl6ZScsIFtdKS5wcm92aWRlcignJHNhbml0aXplJywgJFNhbml0aXplUHJvdmlkZXIpO1xuXG4vKiBnbG9iYWwgc2FuaXRpemVUZXh0OiBmYWxzZSAqL1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGxpbmt5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRmluZHMgbGlua3MgaW4gdGV4dCBpbnB1dCBhbmQgdHVybnMgdGhlbSBpbnRvIGh0bWwgbGlua3MuIFN1cHBvcnRzIGh0dHAvaHR0cHMvZnRwL21haWx0byBhbmRcbiAqIHBsYWluIGVtYWlsIGFkZHJlc3MgbGlua3MuXG4gKlxuICogUmVxdWlyZXMgdGhlIHtAbGluayBuZ1Nhbml0aXplIGBuZ1Nhbml0aXplYH0gbW9kdWxlIHRvIGJlIGluc3RhbGxlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBJbnB1dCB0ZXh0LlxuICogQHBhcmFtIHtzdHJpbmd9IHRhcmdldCBXaW5kb3cgKF9ibGFua3xfc2VsZnxfcGFyZW50fF90b3ApIG9yIG5hbWVkIGZyYW1lIHRvIG9wZW4gbGlua3MgaW4uXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBIdG1sLWxpbmtpZmllZCB0ZXh0LlxuICpcbiAqIEB1c2FnZVxuICAgPHNwYW4gbmctYmluZC1odG1sPVwibGlua3lfZXhwcmVzc2lvbiB8IGxpbmt5XCI+PC9zcGFuPlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJsaW5reUV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnbGlua3lFeGFtcGxlJywgWyduZ1Nhbml0aXplJ10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnNuaXBwZXQgPVxuICAgICAgICAgICAgICAgJ1ByZXR0eSB0ZXh0IHdpdGggc29tZSBsaW5rczpcXG4nK1xuICAgICAgICAgICAgICAgJ2h0dHA6Ly9hbmd1bGFyanMub3JnLyxcXG4nK1xuICAgICAgICAgICAgICAgJ21haWx0bzp1c0Bzb21ld2hlcmUub3JnLFxcbicrXG4gICAgICAgICAgICAgICAnYW5vdGhlckBzb21ld2hlcmUub3JnLFxcbicrXG4gICAgICAgICAgICAgICAnYW5kIG9uZSBtb3JlOiBmdHA6Ly8xMjcuMC4wLjEvLic7XG4gICAgICAgICAgICAgJHNjb3BlLnNuaXBwZXRXaXRoVGFyZ2V0ID0gJ2h0dHA6Ly9hbmd1bGFyanMub3JnLyc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgIFNuaXBwZXQ6IDx0ZXh0YXJlYSBuZy1tb2RlbD1cInNuaXBwZXRcIiBjb2xzPVwiNjBcIiByb3dzPVwiM1wiPjwvdGV4dGFyZWE+XG4gICAgICAgPHRhYmxlPlxuICAgICAgICAgPHRyPlxuICAgICAgICAgICA8dGQ+RmlsdGVyPC90ZD5cbiAgICAgICAgICAgPHRkPlNvdXJjZTwvdGQ+XG4gICAgICAgICAgIDx0ZD5SZW5kZXJlZDwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgICAgPHRyIGlkPVwibGlua3ktZmlsdGVyXCI+XG4gICAgICAgICAgIDx0ZD5saW5reSBmaWx0ZXI8L3RkPlxuICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgPHByZT4mbHQ7ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXQgfCBsaW5reVwiJmd0Ozxicj4mbHQ7L2RpdiZndDs8L3ByZT5cbiAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgPHRkPlxuICAgICAgICAgICAgIDxkaXYgbmctYmluZC1odG1sPVwic25pcHBldCB8IGxpbmt5XCI+PC9kaXY+XG4gICAgICAgICAgIDwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgICAgPHRyIGlkPVwibGlua3ktdGFyZ2V0XCI+XG4gICAgICAgICAgPHRkPmxpbmt5IHRhcmdldDwvdGQ+XG4gICAgICAgICAgPHRkPlxuICAgICAgICAgICAgPHByZT4mbHQ7ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXRXaXRoVGFyZ2V0IHwgbGlua3k6J19ibGFuaydcIiZndDs8YnI+Jmx0Oy9kaXYmZ3Q7PC9wcmU+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8ZGl2IG5nLWJpbmQtaHRtbD1cInNuaXBwZXRXaXRoVGFyZ2V0IHwgbGlua3k6J19ibGFuaydcIj48L2Rpdj5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICAgIDx0ciBpZD1cImVzY2FwZWQtaHRtbFwiPlxuICAgICAgICAgICA8dGQ+bm8gZmlsdGVyPC90ZD5cbiAgICAgICAgICAgPHRkPjxwcmU+Jmx0O2RpdiBuZy1iaW5kPVwic25pcHBldFwiJmd0Ozxicj4mbHQ7L2RpdiZndDs8L3ByZT48L3RkPlxuICAgICAgICAgICA8dGQ+PGRpdiBuZy1iaW5kPVwic25pcHBldFwiPjwvZGl2PjwvdGQ+XG4gICAgICAgICA8L3RyPlxuICAgICAgIDwvdGFibGU+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgbGlua2lmeSB0aGUgc25pcHBldCB3aXRoIHVybHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5reS1maWx0ZXInKSkuZWxlbWVudChieS5iaW5kaW5nKCdzbmlwcGV0IHwgbGlua3knKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgICB0b0JlKCdQcmV0dHkgdGV4dCB3aXRoIHNvbWUgbGlua3M6IGh0dHA6Ly9hbmd1bGFyanMub3JnLywgdXNAc29tZXdoZXJlLm9yZywgJyArXG4gICAgICAgICAgICAgICAgICAnYW5vdGhlckBzb21ld2hlcmUub3JnLCBhbmQgb25lIG1vcmU6IGZ0cDovLzEyNy4wLjAuMS8uJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCcjbGlua3ktZmlsdGVyIGEnKSkuY291bnQoKSkudG9FcXVhbCg0KTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgbm90IGxpbmtpZnkgc25pcHBldCB3aXRob3V0IHRoZSBsaW5reSBmaWx0ZXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdlc2NhcGVkLWh0bWwnKSkuZWxlbWVudChieS5iaW5kaW5nKCdzbmlwcGV0JykpLmdldFRleHQoKSkuXG4gICAgICAgICAgICAgdG9CZSgnUHJldHR5IHRleHQgd2l0aCBzb21lIGxpbmtzOiBodHRwOi8vYW5ndWxhcmpzLm9yZy8sIG1haWx0bzp1c0Bzb21ld2hlcmUub3JnLCAnICtcbiAgICAgICAgICAgICAgICAgICdhbm90aGVyQHNvbWV3aGVyZS5vcmcsIGFuZCBvbmUgbW9yZTogZnRwOi8vMTI3LjAuMC4xLy4nKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50LmFsbChieS5jc3MoJyNlc2NhcGVkLWh0bWwgYScpKS5jb3VudCgpKS50b0VxdWFsKDApO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB1cGRhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3NuaXBwZXQnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3NuaXBwZXQnKSkuc2VuZEtleXMoJ25ldyBodHRwOi8vbGluay4nKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5reS1maWx0ZXInKSkuZWxlbWVudChieS5iaW5kaW5nKCdzbmlwcGV0IHwgbGlua3knKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgICB0b0JlKCduZXcgaHR0cDovL2xpbmsuJyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCcjbGlua3ktZmlsdGVyIGEnKSkuY291bnQoKSkudG9FcXVhbCgxKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdlc2NhcGVkLWh0bWwnKSkuZWxlbWVudChieS5iaW5kaW5nKCdzbmlwcGV0JykpLmdldFRleHQoKSlcbiAgICAgICAgICAgICAudG9CZSgnbmV3IGh0dHA6Ly9saW5rLicpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB3b3JrIHdpdGggdGhlIHRhcmdldCBwcm9wZXJ0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGlua3ktdGFyZ2V0JykpLlxuICAgICAgICAgICAgZWxlbWVudChieS5iaW5kaW5nKFwic25pcHBldFdpdGhUYXJnZXQgfCBsaW5reTonX2JsYW5rJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvQmUoJ2h0dHA6Ly9hbmd1bGFyanMub3JnLycpO1xuICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJyNsaW5reS10YXJnZXQgYScpKS5nZXRBdHRyaWJ1dGUoJ3RhcmdldCcpKS50b0VxdWFsKCdfYmxhbmsnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5hbmd1bGFyLm1vZHVsZSgnbmdTYW5pdGl6ZScpLmZpbHRlcignbGlua3knLCBbJyRzYW5pdGl6ZScsIGZ1bmN0aW9uKCRzYW5pdGl6ZSkge1xuICB2YXIgTElOS1lfVVJMX1JFR0VYUCA9XG4gICAgICAgIC8oKGZ0cHxodHRwcz8pOlxcL1xcL3wod3d3XFwuKXwobWFpbHRvOik/W0EtWmEtejAtOS5fJSstXStAKVxcUypbXlxccy47LCgpe308Plwi4oCd4oCZXS9pLFxuICAgICAgTUFJTFRPX1JFR0VYUCA9IC9ebWFpbHRvOi9pO1xuXG4gIHJldHVybiBmdW5jdGlvbih0ZXh0LCB0YXJnZXQpIHtcbiAgICBpZiAoIXRleHQpIHJldHVybiB0ZXh0O1xuICAgIHZhciBtYXRjaDtcbiAgICB2YXIgcmF3ID0gdGV4dDtcbiAgICB2YXIgaHRtbCA9IFtdO1xuICAgIHZhciB1cmw7XG4gICAgdmFyIGk7XG4gICAgd2hpbGUgKChtYXRjaCA9IHJhdy5tYXRjaChMSU5LWV9VUkxfUkVHRVhQKSkpIHtcbiAgICAgIC8vIFdlIGNhbiBub3QgZW5kIGluIHRoZXNlIGFzIHRoZXkgYXJlIHNvbWV0aW1lcyBmb3VuZCBhdCB0aGUgZW5kIG9mIHRoZSBzZW50ZW5jZVxuICAgICAgdXJsID0gbWF0Y2hbMF07XG4gICAgICAvLyBpZiB3ZSBkaWQgbm90IG1hdGNoIGZ0cC9odHRwL3d3dy9tYWlsdG8gdGhlbiBhc3N1bWUgbWFpbHRvXG4gICAgICBpZiAoIW1hdGNoWzJdICYmICFtYXRjaFs0XSkge1xuICAgICAgICB1cmwgPSAobWF0Y2hbM10gPyAnaHR0cDovLycgOiAnbWFpbHRvOicpICsgdXJsO1xuICAgICAgfVxuICAgICAgaSA9IG1hdGNoLmluZGV4O1xuICAgICAgYWRkVGV4dChyYXcuc3Vic3RyKDAsIGkpKTtcbiAgICAgIGFkZExpbmsodXJsLCBtYXRjaFswXS5yZXBsYWNlKE1BSUxUT19SRUdFWFAsICcnKSk7XG4gICAgICByYXcgPSByYXcuc3Vic3RyaW5nKGkgKyBtYXRjaFswXS5sZW5ndGgpO1xuICAgIH1cbiAgICBhZGRUZXh0KHJhdyk7XG4gICAgcmV0dXJuICRzYW5pdGl6ZShodG1sLmpvaW4oJycpKTtcblxuICAgIGZ1bmN0aW9uIGFkZFRleHQodGV4dCkge1xuICAgICAgaWYgKCF0ZXh0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGh0bWwucHVzaChzYW5pdGl6ZVRleHQodGV4dCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZExpbmsodXJsLCB0ZXh0KSB7XG4gICAgICBodG1sLnB1c2goJzxhICcpO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHRhcmdldCkpIHtcbiAgICAgICAgaHRtbC5wdXNoKCd0YXJnZXQ9XCInLFxuICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgJ1wiICcpO1xuICAgICAgfVxuICAgICAgaHRtbC5wdXNoKCdocmVmPVwiJyxcbiAgICAgICAgICAgICAgICB1cmwucmVwbGFjZSgvXCIvZywgJyZxdW90OycpLFxuICAgICAgICAgICAgICAgICdcIj4nKTtcbiAgICAgIGFkZFRleHQodGV4dCk7XG4gICAgICBodG1sLnB1c2goJzwvYT4nKTtcbiAgICB9XG4gIH07XG59XSk7XG5cblxufSkod2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG5cbi8qIVxuICogYW5ndWxhci10cmFuc2xhdGUgLSB2Mi41LjIgLSAyMDE0LTEyLTEwXG4gKiBodHRwOi8vZ2l0aHViLmNvbS9hbmd1bGFyLXRyYW5zbGF0ZS9hbmd1bGFyLXRyYW5zbGF0ZVxuICogQ29weXJpZ2h0IChjKSAyMDE0IDsgTGljZW5zZWQgTUlUXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCdwYXNjYWxwcmVjaHQudHJhbnNsYXRlJylcbi8qKlxuICogQG5nZG9jIG9iamVjdFxuICogQG5hbWUgcGFzY2FscHJlY2h0LnRyYW5zbGF0ZS4kdHJhbnNsYXRlU3RhdGljRmlsZXNMb2FkZXJcbiAqIEByZXF1aXJlcyAkcVxuICogQHJlcXVpcmVzICRodHRwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbG9hZGluZyBmdW5jdGlvbiBmb3IgYSB0eXBpY2FsIHN0YXRpYyBmaWxlIHVybCBwYXR0ZXJuOlxuICogXCJsYW5nLWVuX1VTLmpzb25cIiwgXCJsYW5nLWRlX0RFLmpzb25cIiwgZXRjLiBVc2luZyB0aGlzIGJ1aWxkZXIsXG4gKiB0aGUgcmVzcG9uc2Ugb2YgdGhlc2UgdXJscyBtdXN0IGJlIGFuIG9iamVjdCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBvYmplY3QsIHdoaWNoIGdldHMgcHJlZml4LCBzdWZmaXggYW5kIGtleS5cbiAqL1xuLmZhY3RvcnkoJyR0cmFuc2xhdGVTdGF0aWNGaWxlc0xvYWRlcicsIFsnJHEnLCAnJGh0dHAnLCBmdW5jdGlvbiAoJHEsICRodHRwKSB7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvcHRpb25zKSB7XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgKCFhbmd1bGFyLmlzU3RyaW5nKG9wdGlvbnMucHJlZml4KSB8fCAhYW5ndWxhci5pc1N0cmluZyhvcHRpb25zLnN1ZmZpeCkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkblxcJ3QgbG9hZCBzdGF0aWMgZmlsZXMsIG5vIHByZWZpeCBvciBzdWZmaXggc3BlY2lmaWVkIScpO1xuICAgIH1cblxuICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAkaHR0cChhbmd1bGFyLmV4dGVuZCh7XG4gICAgICB1cmw6IFtcbiAgICAgICAgb3B0aW9ucy5wcmVmaXgsXG4gICAgICAgIG9wdGlvbnMua2V5LFxuICAgICAgICBvcHRpb25zLnN1ZmZpeFxuICAgICAgXS5qb2luKCcnKSxcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBwYXJhbXM6ICcnXG4gICAgfSwgb3B0aW9ucy4kaHR0cCkpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgfSkuZXJyb3IoZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChvcHRpb25zLmtleSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfTtcbn1dKTtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBnbG9iYWwgYW5ndWxhciwgd2luZG93ICovXG5cbi8qKlxuICogUmVpbXBsZW1lbnRhdGlvbiBvZiAkdHJhbnNsYXRlU3RhdGljRmlsZXNMb2FkZXIgdG8gaGFuZGxlIG1pc3NpbmcgZmlsZXMgYW5kIGxvY2FsZSBoaWVyYXJjaHkgKGVuL2VuX1VTKVxuICovXG5hbmd1bGFyLm1vZHVsZShcInBhc2NhbHByZWNodC50cmFuc2xhdGVcIikuZmFjdG9yeShcIiR0cmFuc2xhdGVTdGF0aWNGaWxlc0xvYWRlclwiLCBbXG4gIFwiJHFcIixcbiAgXCIkaHR0cFwiLFxuICBmdW5jdGlvbiAoJHEsICRodHRwKSB7XG4gICAgZnVuY3Rpb24gbG9hZFRyYW5zbGF0aW9uRmlsZShvcHRpb25zLCBkZWZlcnJlZCkge1xuICAgICAgJGh0dHAoYW5ndWxhci5leHRlbmQoe1xuICAgICAgICB1cmw6IFtcbiAgICAgICAgICBvcHRpb25zLnByZWZpeCxcbiAgICAgICAgICBvcHRpb25zLmtleS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgIG9wdGlvbnMuc3VmZml4XG4gICAgICAgIF0uam9pbihcIlwiKSxcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICBwYXJhbXM6IFwiXCJcbiAgICAgIH0sIG9wdGlvbnMuJGh0dHApKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUoZGF0YSk7XG4gICAgICB9KS5lcnJvcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmKG9wdGlvbnMua2V5LmluZGV4T2YoXCJfXCIpID49IDApIHtcbiAgICAgICAgICB2YXIga2V5ID0gb3B0aW9ucy5rZXkuc3Vic3RyKDAsIG9wdGlvbnMua2V5Lmxhc3RJbmRleE9mKFwiX1wiKSk7XG4gICAgICAgICAgdmFyIG9wdHMgPSBhbmd1bGFyLmV4dGVuZCh7fSwgb3B0aW9ucywgeyBrZXk6IGtleSB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICBsb2FkVHJhbnNsYXRpb25GaWxlKG9wdHMsIGRlZmVycmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKFwie31cIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKCFvcHRpb25zIHx8ICghYW5ndWxhci5pc1N0cmluZyhvcHRpb25zLnByZWZpeCkgfHwgIWFuZ3VsYXIuaXNTdHJpbmcob3B0aW9ucy5zdWZmaXgpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG5cXFwidCBsb2FkIHN0YXRpYyBmaWxlcywgbm8gcHJlZml4IG9yIHN1ZmZpeCBzcGVjaWZpZWQhXCIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICBsb2FkVHJhbnNsYXRpb25GaWxlKG9wdGlvbnMsIGRlZmVycmVkKTtcblxuICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgfTtcbiAgfVxuXSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi5jb21tb24uaTE4blwiLCBbXCJwYXNjYWxwcmVjaHQudHJhbnNsYXRlXCIsIFwicmlzZXZpc2lvbi5jb21tb24uaTE4bi5jb25maWdcIl0pXG4uY29uZmlnKFtcIiR0cmFuc2xhdGVQcm92aWRlclwiLCBcIkxPQ0FMRVNfUFJFRklYXCIsIFwiTE9DQUxFU19TVUZJWFwiLCBmdW5jdGlvbiAoJHRyYW5zbGF0ZVByb3ZpZGVyLCBMT0NBTEVTX1BSRUZJWCwgTE9DQUxFU19TVUZJWCkge1xuICAvLyBUcmllcyB0byBkZXRlcm1pbmUgdGhlIGJyb3dzZXJzIGxvY2FsZVxuICAkdHJhbnNsYXRlUHJvdmlkZXIudXNlU3RhdGljRmlsZXNMb2FkZXIoe1xuICAgIHByZWZpeDogTE9DQUxFU19QUkVGSVgsXG4gICAgc3VmZml4OiBMT0NBTEVTX1NVRklYXG4gIH0pO1xuICBcbiAgJHRyYW5zbGF0ZVByb3ZpZGVyXG4gICAgLmRldGVybWluZVByZWZlcnJlZExhbmd1YWdlKClcbiAgICAuZmFsbGJhY2tMYW5ndWFnZShcImVuXCIpO1xufV0pO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWZmaXguanMgdjMuMi4wXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhZmZpeFxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE0IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEFGRklYIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBBZmZpeCA9IGZ1bmN0aW9uIChlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gJC5leHRlbmQoe30sIEFmZml4LkRFRkFVTFRTLCBvcHRpb25zKVxuXG4gICAgdGhpcy4kdGFyZ2V0ID0gJCh0aGlzLm9wdGlvbnMudGFyZ2V0KVxuICAgICAgLm9uKCdzY3JvbGwuYnMuYWZmaXguZGF0YS1hcGknLCAkLnByb3h5KHRoaXMuY2hlY2tQb3NpdGlvbiwgdGhpcykpXG4gICAgICAub24oJ2NsaWNrLmJzLmFmZml4LmRhdGEtYXBpJywgICQucHJveHkodGhpcy5jaGVja1Bvc2l0aW9uV2l0aEV2ZW50TG9vcCwgdGhpcykpXG5cbiAgICB0aGlzLiRlbGVtZW50ICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLmFmZml4ZWQgICAgICA9XG4gICAgdGhpcy51bnBpbiAgICAgICAgPVxuICAgIHRoaXMucGlubmVkT2Zmc2V0ID0gbnVsbFxuXG4gICAgdGhpcy5jaGVja1Bvc2l0aW9uKClcbiAgfVxuXG4gIEFmZml4LlZFUlNJT04gID0gJzMuMi4wJ1xuXG4gIEFmZml4LlJFU0VUICAgID0gJ2FmZml4IGFmZml4LXRvcCBhZmZpeC1ib3R0b20nXG5cbiAgQWZmaXguREVGQVVMVFMgPSB7XG4gICAgb2Zmc2V0OiAwLFxuICAgIHRhcmdldDogd2luZG93XG4gIH1cblxuICBBZmZpeC5wcm90b3R5cGUuZ2V0UGlubmVkT2Zmc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnBpbm5lZE9mZnNldCkgcmV0dXJuIHRoaXMucGlubmVkT2Zmc2V0XG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVDbGFzcyhBZmZpeC5SRVNFVCkuYWRkQ2xhc3MoJ2FmZml4JylcbiAgICB2YXIgc2Nyb2xsVG9wID0gdGhpcy4kdGFyZ2V0LnNjcm9sbFRvcCgpXG4gICAgdmFyIHBvc2l0aW9uICA9IHRoaXMuJGVsZW1lbnQub2Zmc2V0KClcbiAgICByZXR1cm4gKHRoaXMucGlubmVkT2Zmc2V0ID0gcG9zaXRpb24udG9wIC0gc2Nyb2xsVG9wKVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmNoZWNrUG9zaXRpb25XaXRoRXZlbnRMb29wID0gZnVuY3Rpb24gKCkge1xuICAgIHNldFRpbWVvdXQoJC5wcm94eSh0aGlzLmNoZWNrUG9zaXRpb24sIHRoaXMpLCAxKVxuICB9XG5cbiAgQWZmaXgucHJvdG90eXBlLmNoZWNrUG9zaXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLiRlbGVtZW50LmlzKCc6dmlzaWJsZScpKSByZXR1cm5cblxuICAgIHZhciBzY3JvbGxIZWlnaHQgPSAkKGRvY3VtZW50KS5oZWlnaHQoKVxuICAgIHZhciBzY3JvbGxUb3AgICAgPSB0aGlzLiR0YXJnZXQuc2Nyb2xsVG9wKClcbiAgICB2YXIgcG9zaXRpb24gICAgID0gdGhpcy4kZWxlbWVudC5vZmZzZXQoKVxuICAgIHZhciBvZmZzZXQgICAgICAgPSB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIG9mZnNldFRvcCAgICA9IG9mZnNldC50b3BcbiAgICB2YXIgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0LmJvdHRvbVxuXG4gICAgaWYgKHR5cGVvZiBvZmZzZXQgIT0gJ29iamVjdCcpICAgICAgICAgb2Zmc2V0Qm90dG9tID0gb2Zmc2V0VG9wID0gb2Zmc2V0XG4gICAgaWYgKHR5cGVvZiBvZmZzZXRUb3AgPT0gJ2Z1bmN0aW9uJykgICAgb2Zmc2V0VG9wICAgID0gb2Zmc2V0LnRvcCh0aGlzLiRlbGVtZW50KVxuICAgIGlmICh0eXBlb2Ygb2Zmc2V0Qm90dG9tID09ICdmdW5jdGlvbicpIG9mZnNldEJvdHRvbSA9IG9mZnNldC5ib3R0b20odGhpcy4kZWxlbWVudClcblxuICAgIHZhciBhZmZpeCA9IHRoaXMudW5waW4gICAhPSBudWxsICYmIChzY3JvbGxUb3AgKyB0aGlzLnVucGluIDw9IHBvc2l0aW9uLnRvcCkgPyBmYWxzZSA6XG4gICAgICAgICAgICAgICAgb2Zmc2V0Qm90dG9tICE9IG51bGwgJiYgKHBvc2l0aW9uLnRvcCArIHRoaXMuJGVsZW1lbnQuaGVpZ2h0KCkgPj0gc2Nyb2xsSGVpZ2h0IC0gb2Zmc2V0Qm90dG9tKSA/ICdib3R0b20nIDpcbiAgICAgICAgICAgICAgICBvZmZzZXRUb3AgICAgIT0gbnVsbCAmJiAoc2Nyb2xsVG9wIDw9IG9mZnNldFRvcCkgPyAndG9wJyA6IGZhbHNlXG5cbiAgICBpZiAodGhpcy5hZmZpeGVkID09PSBhZmZpeCkgcmV0dXJuXG4gICAgaWYgKHRoaXMudW5waW4gIT0gbnVsbCkgdGhpcy4kZWxlbWVudC5jc3MoJ3RvcCcsICcnKVxuXG4gICAgdmFyIGFmZml4VHlwZSA9ICdhZmZpeCcgKyAoYWZmaXggPyAnLScgKyBhZmZpeCA6ICcnKVxuICAgIHZhciBlICAgICAgICAgPSAkLkV2ZW50KGFmZml4VHlwZSArICcuYnMuYWZmaXgnKVxuXG4gICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKGUpXG5cbiAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB0aGlzLmFmZml4ZWQgPSBhZmZpeFxuICAgIHRoaXMudW5waW4gPSBhZmZpeCA9PSAnYm90dG9tJyA/IHRoaXMuZ2V0UGlubmVkT2Zmc2V0KCkgOiBudWxsXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAucmVtb3ZlQ2xhc3MoQWZmaXguUkVTRVQpXG4gICAgICAuYWRkQ2xhc3MoYWZmaXhUeXBlKVxuICAgICAgLnRyaWdnZXIoJC5FdmVudChhZmZpeFR5cGUucmVwbGFjZSgnYWZmaXgnLCAnYWZmaXhlZCcpKSlcblxuICAgIGlmIChhZmZpeCA9PSAnYm90dG9tJykge1xuICAgICAgdGhpcy4kZWxlbWVudC5vZmZzZXQoe1xuICAgICAgICB0b3A6IHNjcm9sbEhlaWdodCAtIHRoaXMuJGVsZW1lbnQuaGVpZ2h0KCkgLSBvZmZzZXRCb3R0b21cbiAgICAgIH0pXG4gICAgfVxuICB9XG5cblxuICAvLyBBRkZJWCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5hZmZpeCcpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWZmaXgnLCAoZGF0YSA9IG5ldyBBZmZpeCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uYWZmaXhcblxuICAkLmZuLmFmZml4ICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uYWZmaXguQ29uc3RydWN0b3IgPSBBZmZpeFxuXG5cbiAgLy8gQUZGSVggTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmFmZml4Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5hZmZpeCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIEFGRklYIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24gKCkge1xuICAgICQoJ1tkYXRhLXNweT1cImFmZml4XCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhID0gJHNweS5kYXRhKClcblxuICAgICAgZGF0YS5vZmZzZXQgPSBkYXRhLm9mZnNldCB8fCB7fVxuXG4gICAgICBpZiAoZGF0YS5vZmZzZXRCb3R0b20pIGRhdGEub2Zmc2V0LmJvdHRvbSA9IGRhdGEub2Zmc2V0Qm90dG9tXG4gICAgICBpZiAoZGF0YS5vZmZzZXRUb3ApICAgIGRhdGEub2Zmc2V0LnRvcCAgICA9IGRhdGEub2Zmc2V0VG9wXG5cbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksIGRhdGEpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYWxlcnQuanMgdjMuMi4wXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNhbGVydHNcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNCBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBBTEVSVCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgZGlzbWlzcyA9ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nXG4gIHZhciBBbGVydCAgID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgJChlbCkub24oJ2NsaWNrJywgZGlzbWlzcywgdGhpcy5jbG9zZSlcbiAgfVxuXG4gIEFsZXJ0LlZFUlNJT04gPSAnMy4yLjAnXG5cbiAgQWxlcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICAgPSAkKHRoaXMpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuXG4gICAgaWYgKCFzZWxlY3Rvcikge1xuICAgICAgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICAgIHNlbGVjdG9yID0gc2VsZWN0b3IgJiYgc2VsZWN0b3IucmVwbGFjZSgvLiooPz0jW15cXHNdKiQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB9XG5cbiAgICB2YXIgJHBhcmVudCA9ICQoc2VsZWN0b3IpXG5cbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBpZiAoISRwYXJlbnQubGVuZ3RoKSB7XG4gICAgICAkcGFyZW50ID0gJHRoaXMuaGFzQ2xhc3MoJ2FsZXJ0JykgPyAkdGhpcyA6ICR0aGlzLnBhcmVudCgpXG4gICAgfVxuXG4gICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdjbG9zZS5icy5hbGVydCcpKVxuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgJHBhcmVudC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRWxlbWVudCgpIHtcbiAgICAgIC8vIGRldGFjaCBmcm9tIHBhcmVudCwgZmlyZSBldmVudCB0aGVuIGNsZWFuIHVwIGRhdGFcbiAgICAgICRwYXJlbnQuZGV0YWNoKCkudHJpZ2dlcignY2xvc2VkLmJzLmFsZXJ0JykucmVtb3ZlKClcbiAgICB9XG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiAkcGFyZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHBhcmVudFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCByZW1vdmVFbGVtZW50KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoMTUwKSA6XG4gICAgICByZW1vdmVFbGVtZW50KClcbiAgfVxuXG5cbiAgLy8gQUxFUlQgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy5hbGVydCcpXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuYWxlcnQnLCAoZGF0YSA9IG5ldyBBbGVydCh0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dLmNhbGwoJHRoaXMpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmFsZXJ0XG5cbiAgJC5mbi5hbGVydCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmFsZXJ0LkNvbnN0cnVjdG9yID0gQWxlcnRcblxuXG4gIC8vIEFMRVJUIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5hbGVydC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uYWxlcnQgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBBTEVSVCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5hbGVydC5kYXRhLWFwaScsIGRpc21pc3MsIEFsZXJ0LnByb3RvdHlwZS5jbG9zZSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogYnV0dG9uLmpzIHYzLjIuMFxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jYnV0dG9uc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE0IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIEJVVFRPTiBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQnV0dG9uID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICA9ICQoZWxlbWVudClcbiAgICB0aGlzLm9wdGlvbnMgICA9ICQuZXh0ZW5kKHt9LCBCdXR0b24uREVGQVVMVFMsIG9wdGlvbnMpXG4gICAgdGhpcy5pc0xvYWRpbmcgPSBmYWxzZVxuICB9XG5cbiAgQnV0dG9uLlZFUlNJT04gID0gJzMuMi4wJ1xuXG4gIEJ1dHRvbi5ERUZBVUxUUyA9IHtcbiAgICBsb2FkaW5nVGV4dDogJ2xvYWRpbmcuLi4nXG4gIH1cblxuICBCdXR0b24ucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgdmFyIGQgICAgPSAnZGlzYWJsZWQnXG4gICAgdmFyICRlbCAgPSB0aGlzLiRlbGVtZW50XG4gICAgdmFyIHZhbCAgPSAkZWwuaXMoJ2lucHV0JykgPyAndmFsJyA6ICdodG1sJ1xuICAgIHZhciBkYXRhID0gJGVsLmRhdGEoKVxuXG4gICAgc3RhdGUgPSBzdGF0ZSArICdUZXh0J1xuXG4gICAgaWYgKGRhdGEucmVzZXRUZXh0ID09IG51bGwpICRlbC5kYXRhKCdyZXNldFRleHQnLCAkZWxbdmFsXSgpKVxuXG4gICAgJGVsW3ZhbF0oZGF0YVtzdGF0ZV0gPT0gbnVsbCA/IHRoaXMub3B0aW9uc1tzdGF0ZV0gOiBkYXRhW3N0YXRlXSlcblxuICAgIC8vIHB1c2ggdG8gZXZlbnQgbG9vcCB0byBhbGxvdyBmb3JtcyB0byBzdWJtaXRcbiAgICBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHN0YXRlID09ICdsb2FkaW5nVGV4dCcpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRpbmcgPSB0cnVlXG4gICAgICAgICRlbC5hZGRDbGFzcyhkKS5hdHRyKGQsIGQpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNMb2FkaW5nKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2VcbiAgICAgICAgJGVsLnJlbW92ZUNsYXNzKGQpLnJlbW92ZUF0dHIoZClcbiAgICAgIH1cbiAgICB9LCB0aGlzKSwgMClcbiAgfVxuXG4gIEJ1dHRvbi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjaGFuZ2VkID0gdHJ1ZVxuICAgIHZhciAkcGFyZW50ID0gdGhpcy4kZWxlbWVudC5jbG9zZXN0KCdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJylcblxuICAgIGlmICgkcGFyZW50Lmxlbmd0aCkge1xuICAgICAgdmFyICRpbnB1dCA9IHRoaXMuJGVsZW1lbnQuZmluZCgnaW5wdXQnKVxuICAgICAgaWYgKCRpbnB1dC5wcm9wKCd0eXBlJykgPT0gJ3JhZGlvJykge1xuICAgICAgICBpZiAoJGlucHV0LnByb3AoJ2NoZWNrZWQnKSAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdhY3RpdmUnKSkgY2hhbmdlZCA9IGZhbHNlXG4gICAgICAgIGVsc2UgJHBhcmVudC5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9XG4gICAgICBpZiAoY2hhbmdlZCkgJGlucHV0LnByb3AoJ2NoZWNrZWQnLCAhdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnYWN0aXZlJykpLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgfVxuXG4gICAgaWYgKGNoYW5nZWQpIHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpXG4gIH1cblxuXG4gIC8vIEJVVFRPTiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMuYnV0dG9uJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5idXR0b24nLCAoZGF0YSA9IG5ldyBCdXR0b24odGhpcywgb3B0aW9ucykpKVxuXG4gICAgICBpZiAob3B0aW9uID09ICd0b2dnbGUnKSBkYXRhLnRvZ2dsZSgpXG4gICAgICBlbHNlIGlmIChvcHRpb24pIGRhdGEuc2V0U3RhdGUob3B0aW9uKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5idXR0b25cblxuICAkLmZuLmJ1dHRvbiAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmJ1dHRvbi5Db25zdHJ1Y3RvciA9IEJ1dHRvblxuXG5cbiAgLy8gQlVUVE9OIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uYnV0dG9uLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5idXR0b24gPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBCVVRUT04gREFUQS1BUElcbiAgLy8gPT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaScsICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJGJ0biA9ICQoZS50YXJnZXQpXG4gICAgaWYgKCEkYnRuLmhhc0NsYXNzKCdidG4nKSkgJGJ0biA9ICRidG4uY2xvc2VzdCgnLmJ0bicpXG4gICAgUGx1Z2luLmNhbGwoJGJ0biwgJ3RvZ2dsZScpXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IGNhcm91c2VsLmpzIHYzLjIuMFxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jY2Fyb3VzZWxcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weXJpZ2h0IDIwMTEtMjAxNCBUd2l0dGVyLCBJbmMuXG4gKiBMaWNlbnNlZCB1bmRlciBNSVQgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ibG9iL21hc3Rlci9MSUNFTlNFKVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cblxuK2Z1bmN0aW9uICgkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvLyBDQVJPVVNFTCBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgQ2Fyb3VzZWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuJGVsZW1lbnQgICAgPSAkKGVsZW1lbnQpLm9uKCdrZXlkb3duLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmtleWRvd24sIHRoaXMpKVxuICAgIHRoaXMuJGluZGljYXRvcnMgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5jYXJvdXNlbC1pbmRpY2F0b3JzJylcbiAgICB0aGlzLm9wdGlvbnMgICAgID0gb3B0aW9uc1xuICAgIHRoaXMucGF1c2VkICAgICAgPVxuICAgIHRoaXMuc2xpZGluZyAgICAgPVxuICAgIHRoaXMuaW50ZXJ2YWwgICAgPVxuICAgIHRoaXMuJGFjdGl2ZSAgICAgPVxuICAgIHRoaXMuJGl0ZW1zICAgICAgPSBudWxsXG5cbiAgICB0aGlzLm9wdGlvbnMucGF1c2UgPT0gJ2hvdmVyJyAmJiB0aGlzLiRlbGVtZW50XG4gICAgICAub24oJ21vdXNlZW50ZXIuYnMuY2Fyb3VzZWwnLCAkLnByb3h5KHRoaXMucGF1c2UsIHRoaXMpKVxuICAgICAgLm9uKCdtb3VzZWxlYXZlLmJzLmNhcm91c2VsJywgJC5wcm94eSh0aGlzLmN5Y2xlLCB0aGlzKSlcbiAgfVxuXG4gIENhcm91c2VsLlZFUlNJT04gID0gJzMuMi4wJ1xuXG4gIENhcm91c2VsLkRFRkFVTFRTID0ge1xuICAgIGludGVydmFsOiA1MDAwLFxuICAgIHBhdXNlOiAnaG92ZXInLFxuICAgIHdyYXA6IHRydWVcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5rZXlkb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICBzd2l0Y2ggKGUud2hpY2gpIHtcbiAgICAgIGNhc2UgMzc6IHRoaXMucHJldigpOyBicmVha1xuICAgICAgY2FzZSAzOTogdGhpcy5uZXh0KCk7IGJyZWFrXG4gICAgICBkZWZhdWx0OiByZXR1cm5cbiAgICB9XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5jeWNsZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSBmYWxzZSlcblxuICAgIHRoaXMuaW50ZXJ2YWwgJiYgY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsKVxuXG4gICAgdGhpcy5vcHRpb25zLmludGVydmFsXG4gICAgICAmJiAhdGhpcy5wYXVzZWRcbiAgICAgICYmICh0aGlzLmludGVydmFsID0gc2V0SW50ZXJ2YWwoJC5wcm94eSh0aGlzLm5leHQsIHRoaXMpLCB0aGlzLm9wdGlvbnMuaW50ZXJ2YWwpKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5nZXRJdGVtSW5kZXggPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHRoaXMuJGl0ZW1zID0gaXRlbS5wYXJlbnQoKS5jaGlsZHJlbignLml0ZW0nKVxuICAgIHJldHVybiB0aGlzLiRpdGVtcy5pbmRleChpdGVtIHx8IHRoaXMuJGFjdGl2ZSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS50byA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgdGhhdCAgICAgICAgPSB0aGlzXG4gICAgdmFyIGFjdGl2ZUluZGV4ID0gdGhpcy5nZXRJdGVtSW5kZXgodGhpcy4kYWN0aXZlID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKSlcblxuICAgIGlmIChwb3MgPiAodGhpcy4kaXRlbXMubGVuZ3RoIC0gMSkgfHwgcG9zIDwgMCkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5zbGlkaW5nKSAgICAgICByZXR1cm4gdGhpcy4kZWxlbWVudC5vbmUoJ3NsaWQuYnMuY2Fyb3VzZWwnLCBmdW5jdGlvbiAoKSB7IHRoYXQudG8ocG9zKSB9KSAvLyB5ZXMsIFwic2xpZFwiXG4gICAgaWYgKGFjdGl2ZUluZGV4ID09IHBvcykgcmV0dXJuIHRoaXMucGF1c2UoKS5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpcy5zbGlkZShwb3MgPiBhY3RpdmVJbmRleCA/ICduZXh0JyA6ICdwcmV2JywgJCh0aGlzLiRpdGVtc1twb3NdKSlcbiAgfVxuXG4gIENhcm91c2VsLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChlKSB7XG4gICAgZSB8fCAodGhpcy5wYXVzZWQgPSB0cnVlKVxuXG4gICAgaWYgKHRoaXMuJGVsZW1lbnQuZmluZCgnLm5leHQsIC5wcmV2JykubGVuZ3RoICYmICQuc3VwcG9ydC50cmFuc2l0aW9uKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKVxuICAgICAgdGhpcy5jeWNsZSh0cnVlKVxuICAgIH1cblxuICAgIHRoaXMuaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWwpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ25leHQnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuc2xpZGluZykgcmV0dXJuXG4gICAgcmV0dXJuIHRoaXMuc2xpZGUoJ3ByZXYnKVxuICB9XG5cbiAgQ2Fyb3VzZWwucHJvdG90eXBlLnNsaWRlID0gZnVuY3Rpb24gKHR5cGUsIG5leHQpIHtcbiAgICB2YXIgJGFjdGl2ZSAgID0gdGhpcy4kZWxlbWVudC5maW5kKCcuaXRlbS5hY3RpdmUnKVxuICAgIHZhciAkbmV4dCAgICAgPSBuZXh0IHx8ICRhY3RpdmVbdHlwZV0oKVxuICAgIHZhciBpc0N5Y2xpbmcgPSB0aGlzLmludGVydmFsXG4gICAgdmFyIGRpcmVjdGlvbiA9IHR5cGUgPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0J1xuICAgIHZhciBmYWxsYmFjayAgPSB0eXBlID09ICduZXh0JyA/ICdmaXJzdCcgOiAnbGFzdCdcbiAgICB2YXIgdGhhdCAgICAgID0gdGhpc1xuXG4gICAgaWYgKCEkbmV4dC5sZW5ndGgpIHtcbiAgICAgIGlmICghdGhpcy5vcHRpb25zLndyYXApIHJldHVyblxuICAgICAgJG5leHQgPSB0aGlzLiRlbGVtZW50LmZpbmQoJy5pdGVtJylbZmFsbGJhY2tdKClcbiAgICB9XG5cbiAgICBpZiAoJG5leHQuaGFzQ2xhc3MoJ2FjdGl2ZScpKSByZXR1cm4gKHRoaXMuc2xpZGluZyA9IGZhbHNlKVxuXG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSAkbmV4dFswXVxuICAgIHZhciBzbGlkZUV2ZW50ID0gJC5FdmVudCgnc2xpZGUuYnMuY2Fyb3VzZWwnLCB7XG4gICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgZGlyZWN0aW9uOiBkaXJlY3Rpb25cbiAgICB9KVxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihzbGlkZUV2ZW50KVxuICAgIGlmIChzbGlkZUV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuc2xpZGluZyA9IHRydWVcblxuICAgIGlzQ3ljbGluZyAmJiB0aGlzLnBhdXNlKClcblxuICAgIGlmICh0aGlzLiRpbmRpY2F0b3JzLmxlbmd0aCkge1xuICAgICAgdGhpcy4kaW5kaWNhdG9ycy5maW5kKCcuYWN0aXZlJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB2YXIgJG5leHRJbmRpY2F0b3IgPSAkKHRoaXMuJGluZGljYXRvcnMuY2hpbGRyZW4oKVt0aGlzLmdldEl0ZW1JbmRleCgkbmV4dCldKVxuICAgICAgJG5leHRJbmRpY2F0b3IgJiYgJG5leHRJbmRpY2F0b3IuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgfVxuXG4gICAgdmFyIHNsaWRFdmVudCA9ICQuRXZlbnQoJ3NsaWQuYnMuY2Fyb3VzZWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXQsIGRpcmVjdGlvbjogZGlyZWN0aW9uIH0pIC8vIHllcywgXCJzbGlkXCJcbiAgICBpZiAoJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnc2xpZGUnKSkge1xuICAgICAgJG5leHQuYWRkQ2xhc3ModHlwZSlcbiAgICAgICRuZXh0WzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuICAgICAgJGFjdGl2ZS5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkbmV4dC5hZGRDbGFzcyhkaXJlY3Rpb24pXG4gICAgICAkYWN0aXZlXG4gICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAkbmV4dC5yZW1vdmVDbGFzcyhbdHlwZSwgZGlyZWN0aW9uXS5qb2luKCcgJykpLmFkZENsYXNzKCdhY3RpdmUnKVxuICAgICAgICAgICRhY3RpdmUucmVtb3ZlQ2xhc3MoWydhY3RpdmUnLCBkaXJlY3Rpb25dLmpvaW4oJyAnKSlcbiAgICAgICAgICB0aGF0LnNsaWRpbmcgPSBmYWxzZVxuICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICAgICAgICB9LCAwKVxuICAgICAgICB9KVxuICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoJGFjdGl2ZS5jc3MoJ3RyYW5zaXRpb24tZHVyYXRpb24nKS5zbGljZSgwLCAtMSkgKiAxMDAwKVxuICAgIH0gZWxzZSB7XG4gICAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdhY3RpdmUnKVxuICAgICAgJG5leHQuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB0aGlzLnNsaWRpbmcgPSBmYWxzZVxuICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKHNsaWRFdmVudClcbiAgICB9XG5cbiAgICBpc0N5Y2xpbmcgJiYgdGhpcy5jeWNsZSgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDYXJvdXNlbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcbiAgICAgIHZhciBhY3Rpb24gID0gdHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJyA/IG9wdGlvbiA6IG9wdGlvbnMuc2xpZGVcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5jYXJvdXNlbCcsIChkYXRhID0gbmV3IENhcm91c2VsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdudW1iZXInKSBkYXRhLnRvKG9wdGlvbilcbiAgICAgIGVsc2UgaWYgKGFjdGlvbikgZGF0YVthY3Rpb25dKClcbiAgICAgIGVsc2UgaWYgKG9wdGlvbnMuaW50ZXJ2YWwpIGRhdGEucGF1c2UoKS5jeWNsZSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLmNhcm91c2VsXG5cbiAgJC5mbi5jYXJvdXNlbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLmNhcm91c2VsLkNvbnN0cnVjdG9yID0gQ2Fyb3VzZWxcblxuXG4gIC8vIENBUk9VU0VMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5jYXJvdXNlbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uY2Fyb3VzZWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBDQVJPVVNFTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5jYXJvdXNlbC5kYXRhLWFwaScsICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGhyZWZcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiA9ICR0aGlzLmF0dHIoJ2hyZWYnKSkgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykpIC8vIHN0cmlwIGZvciBpZTdcbiAgICBpZiAoISR0YXJnZXQuaGFzQ2xhc3MoJ2Nhcm91c2VsJykpIHJldHVyblxuICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG4gICAgdmFyIHNsaWRlSW5kZXggPSAkdGhpcy5hdHRyKCdkYXRhLXNsaWRlLXRvJylcbiAgICBpZiAoc2xpZGVJbmRleCkgb3B0aW9ucy5pbnRlcnZhbCA9IGZhbHNlXG5cbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb25zKVxuXG4gICAgaWYgKHNsaWRlSW5kZXgpIHtcbiAgICAgICR0YXJnZXQuZGF0YSgnYnMuY2Fyb3VzZWwnKS50byhzbGlkZUluZGV4KVxuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICB9KVxuXG4gICQod2luZG93KS5vbignbG9hZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdbZGF0YS1yaWRlPVwiY2Fyb3VzZWxcIl0nKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkY2Fyb3VzZWwgPSAkKHRoaXMpXG4gICAgICBQbHVnaW4uY2FsbCgkY2Fyb3VzZWwsICRjYXJvdXNlbC5kYXRhKCkpXG4gICAgfSlcbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogY29sbGFwc2UuanMgdjMuMi4wXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNjb2xsYXBzZVxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE0IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENPTExBUFNFIFBVQkxJQyBDTEFTUyBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIENvbGxhcHNlID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLiRlbGVtZW50ICAgICAgPSAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgID0gJC5leHRlbmQoe30sIENvbGxhcHNlLkRFRkFVTFRTLCBvcHRpb25zKVxuICAgIHRoaXMudHJhbnNpdGlvbmluZyA9IG51bGxcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucGFyZW50KSB0aGlzLiRwYXJlbnQgPSAkKHRoaXMub3B0aW9ucy5wYXJlbnQpXG4gICAgaWYgKHRoaXMub3B0aW9ucy50b2dnbGUpIHRoaXMudG9nZ2xlKClcbiAgfVxuXG4gIENvbGxhcHNlLlZFUlNJT04gID0gJzMuMi4wJ1xuXG4gIENvbGxhcHNlLkRFRkFVTFRTID0ge1xuICAgIHRvZ2dsZTogdHJ1ZVxuICB9XG5cbiAgQ29sbGFwc2UucHJvdG90eXBlLmRpbWVuc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzV2lkdGggPSB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCd3aWR0aCcpXG4gICAgcmV0dXJuIGhhc1dpZHRoID8gJ3dpZHRoJyA6ICdoZWlnaHQnXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy50cmFuc2l0aW9uaW5nIHx8IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdzaG93LmJzLmNvbGxhcHNlJylcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudClcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB2YXIgYWN0aXZlcyA9IHRoaXMuJHBhcmVudCAmJiB0aGlzLiRwYXJlbnQuZmluZCgnPiAucGFuZWwgPiAuaW4nKVxuXG4gICAgaWYgKGFjdGl2ZXMgJiYgYWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgIHZhciBoYXNEYXRhID0gYWN0aXZlcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICBpZiAoaGFzRGF0YSAmJiBoYXNEYXRhLnRyYW5zaXRpb25pbmcpIHJldHVyblxuICAgICAgUGx1Z2luLmNhbGwoYWN0aXZlcywgJ2hpZGUnKVxuICAgICAgaGFzRGF0YSB8fCBhY3RpdmVzLmRhdGEoJ2JzLmNvbGxhcHNlJywgbnVsbClcbiAgICB9XG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzZScpXG4gICAgICAuYWRkQ2xhc3MoJ2NvbGxhcHNpbmcnKVtkaW1lbnNpb25dKDApXG5cbiAgICB0aGlzLnRyYW5zaXRpb25pbmcgPSAxXG5cbiAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLiRlbGVtZW50XG4gICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAgIC5hZGRDbGFzcygnY29sbGFwc2UgaW4nKVtkaW1lbnNpb25dKCcnKVxuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignc2hvd24uYnMuY29sbGFwc2UnKVxuICAgIH1cblxuICAgIGlmICghJC5zdXBwb3J0LnRyYW5zaXRpb24pIHJldHVybiBjb21wbGV0ZS5jYWxsKHRoaXMpXG5cbiAgICB2YXIgc2Nyb2xsU2l6ZSA9ICQuY2FtZWxDYXNlKFsnc2Nyb2xsJywgZGltZW5zaW9uXS5qb2luKCctJykpXG5cbiAgICB0aGlzLiRlbGVtZW50XG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCgzNTApW2RpbWVuc2lvbl0odGhpcy4kZWxlbWVudFswXVtzY3JvbGxTaXplXSlcbiAgfVxuXG4gIENvbGxhcHNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnRyYW5zaXRpb25pbmcgfHwgIXRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHJldHVyblxuXG4gICAgdmFyIHN0YXJ0RXZlbnQgPSAkLkV2ZW50KCdoaWRlLmJzLmNvbGxhcHNlJylcbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoc3RhcnRFdmVudClcbiAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuXG5cbiAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5kaW1lbnNpb24oKVxuXG4gICAgdGhpcy4kZWxlbWVudFtkaW1lbnNpb25dKHRoaXMuJGVsZW1lbnRbZGltZW5zaW9uXSgpKVswXS5vZmZzZXRIZWlnaHRcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5hZGRDbGFzcygnY29sbGFwc2luZycpXG4gICAgICAucmVtb3ZlQ2xhc3MoJ2NvbGxhcHNlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMVxuXG4gICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uaW5nID0gMFxuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAudHJpZ2dlcignaGlkZGVuLmJzLmNvbGxhcHNlJylcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzZScpXG4gICAgfVxuXG4gICAgaWYgKCEkLnN1cHBvcnQudHJhbnNpdGlvbikgcmV0dXJuIGNvbXBsZXRlLmNhbGwodGhpcylcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIFtkaW1lbnNpb25dKDApXG4gICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KGNvbXBsZXRlLCB0aGlzKSlcbiAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCgzNTApXG4gIH1cblxuICBDb2xsYXBzZS5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXNbdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnaW4nKSA/ICdoaWRlJyA6ICdzaG93J10oKVxuICB9XG5cblxuICAvLyBDT0xMQVBTRSBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBDb2xsYXBzZS5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbnMudG9nZ2xlICYmIG9wdGlvbiA9PSAnc2hvdycpIG9wdGlvbiA9ICFvcHRpb25cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMuY29sbGFwc2UnLCAoZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uY29sbGFwc2VcblxuICAkLmZuLmNvbGxhcHNlICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4uY29sbGFwc2UuQ29uc3RydWN0b3IgPSBDb2xsYXBzZVxuXG5cbiAgLy8gQ09MTEFQU0UgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLmNvbGxhcHNlLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5jb2xsYXBzZSA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIENPTExBUFNFIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLmNvbGxhcHNlLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgaHJlZlxuICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgIHZhciB0YXJnZXQgID0gJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKVxuICAgICAgICB8fCBlLnByZXZlbnREZWZhdWx0KClcbiAgICAgICAgfHwgKGhyZWYgPSAkdGhpcy5hdHRyKCdocmVmJykpICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB2YXIgJHRhcmdldCA9ICQodGFyZ2V0KVxuICAgIHZhciBkYXRhICAgID0gJHRhcmdldC5kYXRhKCdicy5jb2xsYXBzZScpXG4gICAgdmFyIG9wdGlvbiAgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdGhpcy5kYXRhKClcbiAgICB2YXIgcGFyZW50ICA9ICR0aGlzLmF0dHIoJ2RhdGEtcGFyZW50JylcbiAgICB2YXIgJHBhcmVudCA9IHBhcmVudCAmJiAkKHBhcmVudClcblxuICAgIGlmICghZGF0YSB8fCAhZGF0YS50cmFuc2l0aW9uaW5nKSB7XG4gICAgICBpZiAoJHBhcmVudCkgJHBhcmVudC5maW5kKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtkYXRhLXBhcmVudD1cIicgKyBwYXJlbnQgKyAnXCJdJykubm90KCR0aGlzKS5hZGRDbGFzcygnY29sbGFwc2VkJylcbiAgICAgICR0aGlzWyR0YXJnZXQuaGFzQ2xhc3MoJ2luJykgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oJ2NvbGxhcHNlZCcpXG4gICAgfVxuXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiBkcm9wZG93bi5qcyB2My4yLjBcbiAqIGh0dHA6Ly9nZXRib290c3RyYXAuY29tL2phdmFzY3JpcHQvI2Ryb3Bkb3duc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE0IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIERST1BET1dOIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBiYWNrZHJvcCA9ICcuZHJvcGRvd24tYmFja2Ryb3AnXG4gIHZhciB0b2dnbGUgICA9ICdbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXSdcbiAgdmFyIERyb3Bkb3duID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAkKGVsZW1lbnQpLm9uKCdjbGljay5icy5kcm9wZG93bicsIHRoaXMudG9nZ2xlKVxuICB9XG5cbiAgRHJvcGRvd24uVkVSU0lPTiA9ICczLjIuMCdcblxuICBEcm9wZG93bi5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG5cbiAgICBpZiAoJHRoaXMuaXMoJy5kaXNhYmxlZCwgOmRpc2FibGVkJykpIHJldHVyblxuXG4gICAgdmFyICRwYXJlbnQgID0gZ2V0UGFyZW50KCR0aGlzKVxuICAgIHZhciBpc0FjdGl2ZSA9ICRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKVxuXG4gICAgY2xlYXJNZW51cygpXG5cbiAgICBpZiAoIWlzQWN0aXZlKSB7XG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICEkcGFyZW50LmNsb3Nlc3QoJy5uYXZiYXItbmF2JykubGVuZ3RoKSB7XG4gICAgICAgIC8vIGlmIG1vYmlsZSB3ZSB1c2UgYSBiYWNrZHJvcCBiZWNhdXNlIGNsaWNrIGV2ZW50cyBkb24ndCBkZWxlZ2F0ZVxuICAgICAgICAkKCc8ZGl2IGNsYXNzPVwiZHJvcGRvd24tYmFja2Ryb3BcIi8+JykuaW5zZXJ0QWZ0ZXIoJCh0aGlzKSkub24oJ2NsaWNrJywgY2xlYXJNZW51cylcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7IHJlbGF0ZWRUYXJnZXQ6IHRoaXMgfVxuICAgICAgJHBhcmVudC50cmlnZ2VyKGUgPSAkLkV2ZW50KCdzaG93LmJzLmRyb3Bkb3duJywgcmVsYXRlZFRhcmdldCkpXG5cbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgICAgJHRoaXMudHJpZ2dlcignZm9jdXMnKVxuXG4gICAgICAkcGFyZW50XG4gICAgICAgIC50b2dnbGVDbGFzcygnb3BlbicpXG4gICAgICAgIC50cmlnZ2VyKCdzaG93bi5icy5kcm9wZG93bicsIHJlbGF0ZWRUYXJnZXQpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBEcm9wZG93bi5wcm90b3R5cGUua2V5ZG93biA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKCEvKDM4fDQwfDI3KS8udGVzdChlLmtleUNvZGUpKSByZXR1cm5cblxuICAgIHZhciAkdGhpcyA9ICQodGhpcylcblxuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKClcblxuICAgIGlmICgkdGhpcy5pcygnLmRpc2FibGVkLCA6ZGlzYWJsZWQnKSkgcmV0dXJuXG5cbiAgICB2YXIgJHBhcmVudCAgPSBnZXRQYXJlbnQoJHRoaXMpXG4gICAgdmFyIGlzQWN0aXZlID0gJHBhcmVudC5oYXNDbGFzcygnb3BlbicpXG5cbiAgICBpZiAoIWlzQWN0aXZlIHx8IChpc0FjdGl2ZSAmJiBlLmtleUNvZGUgPT0gMjcpKSB7XG4gICAgICBpZiAoZS53aGljaCA9PSAyNykgJHBhcmVudC5maW5kKHRvZ2dsZSkudHJpZ2dlcignZm9jdXMnKVxuICAgICAgcmV0dXJuICR0aGlzLnRyaWdnZXIoJ2NsaWNrJylcbiAgICB9XG5cbiAgICB2YXIgZGVzYyA9ICcgbGk6bm90KC5kaXZpZGVyKTp2aXNpYmxlIGEnXG4gICAgdmFyICRpdGVtcyA9ICRwYXJlbnQuZmluZCgnW3JvbGU9XCJtZW51XCJdJyArIGRlc2MgKyAnLCBbcm9sZT1cImxpc3Rib3hcIl0nICsgZGVzYylcblxuICAgIGlmICghJGl0ZW1zLmxlbmd0aCkgcmV0dXJuXG5cbiAgICB2YXIgaW5kZXggPSAkaXRlbXMuaW5kZXgoJGl0ZW1zLmZpbHRlcignOmZvY3VzJykpXG5cbiAgICBpZiAoZS5rZXlDb2RlID09IDM4ICYmIGluZGV4ID4gMCkgICAgICAgICAgICAgICAgIGluZGV4LS0gICAgICAgICAgICAgICAgICAgICAgICAvLyB1cFxuICAgIGlmIChlLmtleUNvZGUgPT0gNDAgJiYgaW5kZXggPCAkaXRlbXMubGVuZ3RoIC0gMSkgaW5kZXgrKyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvd25cbiAgICBpZiAoIX5pbmRleCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMFxuXG4gICAgJGl0ZW1zLmVxKGluZGV4KS50cmlnZ2VyKCdmb2N1cycpXG4gIH1cblxuICBmdW5jdGlvbiBjbGVhck1lbnVzKGUpIHtcbiAgICBpZiAoZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm5cbiAgICAkKGJhY2tkcm9wKS5yZW1vdmUoKVxuICAgICQodG9nZ2xlKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcGFyZW50ID0gZ2V0UGFyZW50KCQodGhpcykpXG4gICAgICB2YXIgcmVsYXRlZFRhcmdldCA9IHsgcmVsYXRlZFRhcmdldDogdGhpcyB9XG4gICAgICBpZiAoISRwYXJlbnQuaGFzQ2xhc3MoJ29wZW4nKSkgcmV0dXJuXG4gICAgICAkcGFyZW50LnRyaWdnZXIoZSA9ICQuRXZlbnQoJ2hpZGUuYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KSlcbiAgICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cbiAgICAgICRwYXJlbnQucmVtb3ZlQ2xhc3MoJ29wZW4nKS50cmlnZ2VyKCdoaWRkZW4uYnMuZHJvcGRvd24nLCByZWxhdGVkVGFyZ2V0KVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBnZXRQYXJlbnQoJHRoaXMpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSAkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpXG5cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICBzZWxlY3RvciA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgICAgc2VsZWN0b3IgPSBzZWxlY3RvciAmJiAvI1tBLVphLXpdLy50ZXN0KHNlbGVjdG9yKSAmJiBzZWxlY3Rvci5yZXBsYWNlKC8uKig/PSNbXlxcc10qJCkvLCAnJykgLy8gc3RyaXAgZm9yIGllN1xuICAgIH1cblxuICAgIHZhciAkcGFyZW50ID0gc2VsZWN0b3IgJiYgJChzZWxlY3RvcilcblxuICAgIHJldHVybiAkcGFyZW50ICYmICRwYXJlbnQubGVuZ3RoID8gJHBhcmVudCA6ICR0aGlzLnBhcmVudCgpXG4gIH1cblxuXG4gIC8vIERST1BET1dOIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbikge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0aGlzID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgID0gJHRoaXMuZGF0YSgnYnMuZHJvcGRvd24nKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLmRyb3Bkb3duJywgKGRhdGEgPSBuZXcgRHJvcGRvd24odGhpcykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXS5jYWxsKCR0aGlzKVxuICAgIH0pXG4gIH1cblxuICB2YXIgb2xkID0gJC5mbi5kcm9wZG93blxuXG4gICQuZm4uZHJvcGRvd24gICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5kcm9wZG93bi5Db25zdHJ1Y3RvciA9IERyb3Bkb3duXG5cblxuICAvLyBEUk9QRE9XTiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PVxuXG4gICQuZm4uZHJvcGRvd24ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLmRyb3Bkb3duID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gQVBQTFkgVE8gU1RBTkRBUkQgRFJPUERPV04gRUxFTUVOVFNcbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAkKGRvY3VtZW50KVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCBjbGVhck1lbnVzKVxuICAgIC5vbignY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGknLCAnLmRyb3Bkb3duIGZvcm0nLCBmdW5jdGlvbiAoZSkgeyBlLnN0b3BQcm9wYWdhdGlvbigpIH0pXG4gICAgLm9uKCdjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaScsIHRvZ2dsZSwgRHJvcGRvd24ucHJvdG90eXBlLnRvZ2dsZSlcbiAgICAub24oJ2tleWRvd24uYnMuZHJvcGRvd24uZGF0YS1hcGknLCB0b2dnbGUgKyAnLCBbcm9sZT1cIm1lbnVcIl0sIFtyb2xlPVwibGlzdGJveFwiXScsIERyb3Bkb3duLnByb3RvdHlwZS5rZXlkb3duKVxuXG59KGpRdWVyeSk7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQm9vdHN0cmFwOiB0YWIuanMgdjMuMi4wXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0YWJzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTQgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVEFCIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT1cblxuICB2YXIgVGFiID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSAkKGVsZW1lbnQpXG4gIH1cblxuICBUYWIuVkVSU0lPTiA9ICczLjIuMCdcblxuICBUYWIucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aGlzICAgID0gdGhpcy5lbGVtZW50XG4gICAgdmFyICR1bCAgICAgID0gJHRoaXMuY2xvc2VzdCgndWw6bm90KC5kcm9wZG93bi1tZW51KScpXG4gICAgdmFyIHNlbGVjdG9yID0gJHRoaXMuZGF0YSgndGFyZ2V0JylcblxuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgIHNlbGVjdG9yID0gJHRoaXMuYXR0cignaHJlZicpXG4gICAgICBzZWxlY3RvciA9IHNlbGVjdG9yICYmIHNlbGVjdG9yLnJlcGxhY2UoLy4qKD89I1teXFxzXSokKS8sICcnKSAvLyBzdHJpcCBmb3IgaWU3XG4gICAgfVxuXG4gICAgaWYgKCR0aGlzLnBhcmVudCgnbGknKS5oYXNDbGFzcygnYWN0aXZlJykpIHJldHVyblxuXG4gICAgdmFyIHByZXZpb3VzID0gJHVsLmZpbmQoJy5hY3RpdmU6bGFzdCBhJylbMF1cbiAgICB2YXIgZSAgICAgICAgPSAkLkV2ZW50KCdzaG93LmJzLnRhYicsIHtcbiAgICAgIHJlbGF0ZWRUYXJnZXQ6IHByZXZpb3VzXG4gICAgfSlcblxuICAgICR0aGlzLnRyaWdnZXIoZSlcblxuICAgIGlmIChlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHZhciAkdGFyZ2V0ID0gJChzZWxlY3RvcilcblxuICAgIHRoaXMuYWN0aXZhdGUoJHRoaXMuY2xvc2VzdCgnbGknKSwgJHVsKVxuICAgIHRoaXMuYWN0aXZhdGUoJHRhcmdldCwgJHRhcmdldC5wYXJlbnQoKSwgZnVuY3Rpb24gKCkge1xuICAgICAgJHRoaXMudHJpZ2dlcih7XG4gICAgICAgIHR5cGU6ICdzaG93bi5icy50YWInLFxuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgVGFiLnByb3RvdHlwZS5hY3RpdmF0ZSA9IGZ1bmN0aW9uIChlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyICRhY3RpdmUgICAgPSBjb250YWluZXIuZmluZCgnPiAuYWN0aXZlJylcbiAgICB2YXIgdHJhbnNpdGlvbiA9IGNhbGxiYWNrXG4gICAgICAmJiAkLnN1cHBvcnQudHJhbnNpdGlvblxuICAgICAgJiYgJGFjdGl2ZS5oYXNDbGFzcygnZmFkZScpXG5cbiAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgJGFjdGl2ZVxuICAgICAgICAucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICAgIC5maW5kKCc+IC5kcm9wZG93bi1tZW51ID4gLmFjdGl2ZScpXG4gICAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcblxuICAgICAgZWxlbWVudC5hZGRDbGFzcygnYWN0aXZlJylcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyByZWZsb3cgZm9yIHRyYW5zaXRpb25cbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcygnaW4nKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnZmFkZScpXG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50LnBhcmVudCgnLmRyb3Bkb3duLW1lbnUnKSkge1xuICAgICAgICBlbGVtZW50LmNsb3Nlc3QoJ2xpLmRyb3Bkb3duJykuYWRkQ2xhc3MoJ2FjdGl2ZScpXG4gICAgICB9XG5cbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKClcbiAgICB9XG5cbiAgICB0cmFuc2l0aW9uID9cbiAgICAgICRhY3RpdmVcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgbmV4dClcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKDE1MCkgOlxuICAgICAgbmV4dCgpXG5cbiAgICAkYWN0aXZlLnJlbW92ZUNsYXNzKCdpbicpXG4gIH1cblxuXG4gIC8vIFRBQiBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpXG4gICAgICB2YXIgZGF0YSAgPSAkdGhpcy5kYXRhKCdicy50YWInKVxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnRhYicsIChkYXRhID0gbmV3IFRhYih0aGlzKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udGFiXG5cbiAgJC5mbi50YWIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi50YWIuQ29uc3RydWN0b3IgPSBUYWJcblxuXG4gIC8vIFRBQiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT1cblxuICAkLmZuLnRhYi5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4udGFiID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gVEFCIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy50YWIuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS10b2dnbGU9XCJwaWxsXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KClcbiAgICBQbHVnaW4uY2FsbCgkKHRoaXMpLCAnc2hvdycpXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRyYW5zaXRpb24uanMgdjMuMi4wXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0cmFuc2l0aW9uc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE0IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIENTUyBUUkFOU0lUSU9OIFNVUFBPUlQgKFNob3V0b3V0OiBodHRwOi8vd3d3Lm1vZGVybml6ci5jb20vKVxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Jvb3RzdHJhcCcpXG5cbiAgICB2YXIgdHJhbnNFbmRFdmVudE5hbWVzID0ge1xuICAgICAgV2Via2l0VHJhbnNpdGlvbiA6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgIE1velRyYW5zaXRpb24gICAgOiAndHJhbnNpdGlvbmVuZCcsXG4gICAgICBPVHJhbnNpdGlvbiAgICAgIDogJ29UcmFuc2l0aW9uRW5kIG90cmFuc2l0aW9uZW5kJyxcbiAgICAgIHRyYW5zaXRpb24gICAgICAgOiAndHJhbnNpdGlvbmVuZCdcbiAgICB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHRyYW5zRW5kRXZlbnROYW1lcykge1xuICAgICAgaWYgKGVsLnN0eWxlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHsgZW5kOiB0cmFuc0VuZEV2ZW50TmFtZXNbbmFtZV0gfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZSAvLyBleHBsaWNpdCBmb3IgaWU4ICggIC5fLilcbiAgfVxuXG4gIC8vIGh0dHA6Ly9ibG9nLmFsZXhtYWNjYXcuY29tL2Nzcy10cmFuc2l0aW9uc1xuICAkLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgdmFyIGNhbGxlZCA9IGZhbHNlXG4gICAgdmFyICRlbCA9IHRoaXNcbiAgICAkKHRoaXMpLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkgeyBjYWxsZWQgPSB0cnVlIH0pXG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkgeyBpZiAoIWNhbGxlZCkgJCgkZWwpLnRyaWdnZXIoJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kKSB9XG4gICAgc2V0VGltZW91dChjYWxsYmFjaywgZHVyYXRpb24pXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gICQoZnVuY3Rpb24gKCkge1xuICAgICQuc3VwcG9ydC50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkVuZCgpXG5cbiAgICBpZiAoISQuc3VwcG9ydC50cmFuc2l0aW9uKSByZXR1cm5cblxuICAgICQuZXZlbnQuc3BlY2lhbC5ic1RyYW5zaXRpb25FbmQgPSB7XG4gICAgICBiaW5kVHlwZTogJC5zdXBwb3J0LnRyYW5zaXRpb24uZW5kLFxuICAgICAgZGVsZWdhdGVUeXBlOiAkLnN1cHBvcnQudHJhbnNpdGlvbi5lbmQsXG4gICAgICBoYW5kbGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmICgkKGUudGFyZ2V0KS5pcyh0aGlzKSkgcmV0dXJuIGUuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH1cbiAgfSlcblxufShqUXVlcnkpO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEJvb3RzdHJhcDogc2Nyb2xsc3B5LmpzIHYzLjIuMFxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jc2Nyb2xsc3B5XG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTQgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gU0NST0xMU1BZIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBTY3JvbGxTcHkoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHZhciBwcm9jZXNzICA9ICQucHJveHkodGhpcy5wcm9jZXNzLCB0aGlzKVxuXG4gICAgdGhpcy4kYm9keSAgICAgICAgICA9ICQoJ2JvZHknKVxuICAgIHRoaXMuJHNjcm9sbEVsZW1lbnQgPSAkKGVsZW1lbnQpLmlzKCdib2R5JykgPyAkKHdpbmRvdykgOiAkKGVsZW1lbnQpXG4gICAgdGhpcy5vcHRpb25zICAgICAgICA9ICQuZXh0ZW5kKHt9LCBTY3JvbGxTcHkuREVGQVVMVFMsIG9wdGlvbnMpXG4gICAgdGhpcy5zZWxlY3RvciAgICAgICA9ICh0aGlzLm9wdGlvbnMudGFyZ2V0IHx8ICcnKSArICcgLm5hdiBsaSA+IGEnXG4gICAgdGhpcy5vZmZzZXRzICAgICAgICA9IFtdXG4gICAgdGhpcy50YXJnZXRzICAgICAgICA9IFtdXG4gICAgdGhpcy5hY3RpdmVUYXJnZXQgICA9IG51bGxcbiAgICB0aGlzLnNjcm9sbEhlaWdodCAgID0gMFxuXG4gICAgdGhpcy4kc2Nyb2xsRWxlbWVudC5vbignc2Nyb2xsLmJzLnNjcm9sbHNweScsIHByb2Nlc3MpXG4gICAgdGhpcy5yZWZyZXNoKClcbiAgICB0aGlzLnByb2Nlc3MoKVxuICB9XG5cbiAgU2Nyb2xsU3B5LlZFUlNJT04gID0gJzMuMi4wJ1xuXG4gIFNjcm9sbFNweS5ERUZBVUxUUyA9IHtcbiAgICBvZmZzZXQ6IDEwXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmdldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy4kc2Nyb2xsRWxlbWVudFswXS5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgodGhpcy4kYm9keVswXS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9mZnNldE1ldGhvZCA9ICdvZmZzZXQnXG4gICAgdmFyIG9mZnNldEJhc2UgICA9IDBcblxuICAgIGlmICghJC5pc1dpbmRvdyh0aGlzLiRzY3JvbGxFbGVtZW50WzBdKSkge1xuICAgICAgb2Zmc2V0TWV0aG9kID0gJ3Bvc2l0aW9uJ1xuICAgICAgb2Zmc2V0QmFzZSAgID0gdGhpcy4kc2Nyb2xsRWxlbWVudC5zY3JvbGxUb3AoKVxuICAgIH1cblxuICAgIHRoaXMub2Zmc2V0cyA9IFtdXG4gICAgdGhpcy50YXJnZXRzID0gW11cbiAgICB0aGlzLnNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcblxuICAgIHZhciBzZWxmICAgICA9IHRoaXNcblxuICAgIHRoaXMuJGJvZHlcbiAgICAgIC5maW5kKHRoaXMuc2VsZWN0b3IpXG4gICAgICAubWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbCAgID0gJCh0aGlzKVxuICAgICAgICB2YXIgaHJlZiAgPSAkZWwuZGF0YSgndGFyZ2V0JykgfHwgJGVsLmF0dHIoJ2hyZWYnKVxuICAgICAgICB2YXIgJGhyZWYgPSAvXiMuLy50ZXN0KGhyZWYpICYmICQoaHJlZilcblxuICAgICAgICByZXR1cm4gKCRocmVmXG4gICAgICAgICAgJiYgJGhyZWYubGVuZ3RoXG4gICAgICAgICAgJiYgJGhyZWYuaXMoJzp2aXNpYmxlJylcbiAgICAgICAgICAmJiBbWyRocmVmW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCBocmVmXV0pIHx8IG51bGxcbiAgICAgIH0pXG4gICAgICAuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYVswXSAtIGJbMF0gfSlcbiAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgc2VsZi5vZmZzZXRzLnB1c2godGhpc1swXSlcbiAgICAgICAgc2VsZi50YXJnZXRzLnB1c2godGhpc1sxXSlcbiAgICAgIH0pXG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLnByb2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNjcm9sbFRvcCAgICA9IHRoaXMuJHNjcm9sbEVsZW1lbnQuc2Nyb2xsVG9wKCkgKyB0aGlzLm9wdGlvbnMub2Zmc2V0XG4gICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuZ2V0U2Nyb2xsSGVpZ2h0KClcbiAgICB2YXIgbWF4U2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuJHNjcm9sbEVsZW1lbnQuaGVpZ2h0KClcbiAgICB2YXIgb2Zmc2V0cyAgICAgID0gdGhpcy5vZmZzZXRzXG4gICAgdmFyIHRhcmdldHMgICAgICA9IHRoaXMudGFyZ2V0c1xuICAgIHZhciBhY3RpdmVUYXJnZXQgPSB0aGlzLmFjdGl2ZVRhcmdldFxuICAgIHZhciBpXG5cbiAgICBpZiAodGhpcy5zY3JvbGxIZWlnaHQgIT0gc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICB0aGlzLnJlZnJlc2goKVxuICAgIH1cblxuICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICByZXR1cm4gYWN0aXZlVGFyZ2V0ICE9IChpID0gdGFyZ2V0c1t0YXJnZXRzLmxlbmd0aCAtIDFdKSAmJiB0aGlzLmFjdGl2YXRlKGkpXG4gICAgfVxuXG4gICAgaWYgKGFjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPD0gb2Zmc2V0c1swXSkge1xuICAgICAgcmV0dXJuIGFjdGl2ZVRhcmdldCAhPSAoaSA9IHRhcmdldHNbMF0pICYmIHRoaXMuYWN0aXZhdGUoaSlcbiAgICB9XG5cbiAgICBmb3IgKGkgPSBvZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgYWN0aXZlVGFyZ2V0ICE9IHRhcmdldHNbaV1cbiAgICAgICAgJiYgc2Nyb2xsVG9wID49IG9mZnNldHNbaV1cbiAgICAgICAgJiYgKCFvZmZzZXRzW2kgKyAxXSB8fCBzY3JvbGxUb3AgPD0gb2Zmc2V0c1tpICsgMV0pXG4gICAgICAgICYmIHRoaXMuYWN0aXZhdGUodGFyZ2V0c1tpXSlcbiAgICB9XG4gIH1cblxuICBTY3JvbGxTcHkucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuYWN0aXZlVGFyZ2V0ID0gdGFyZ2V0XG5cbiAgICAkKHRoaXMuc2VsZWN0b3IpXG4gICAgICAucGFyZW50c1VudGlsKHRoaXMub3B0aW9ucy50YXJnZXQsICcuYWN0aXZlJylcbiAgICAgIC5yZW1vdmVDbGFzcygnYWN0aXZlJylcblxuICAgIHZhciBzZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgK1xuICAgICAgICAnW2RhdGEtdGFyZ2V0PVwiJyArIHRhcmdldCArICdcIl0sJyArXG4gICAgICAgIHRoaXMuc2VsZWN0b3IgKyAnW2hyZWY9XCInICsgdGFyZ2V0ICsgJ1wiXSdcblxuICAgIHZhciBhY3RpdmUgPSAkKHNlbGVjdG9yKVxuICAgICAgLnBhcmVudHMoJ2xpJylcbiAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcblxuICAgIGlmIChhY3RpdmUucGFyZW50KCcuZHJvcGRvd24tbWVudScpLmxlbmd0aCkge1xuICAgICAgYWN0aXZlID0gYWN0aXZlXG4gICAgICAgIC5jbG9zZXN0KCdsaS5kcm9wZG93bicpXG4gICAgICAgIC5hZGRDbGFzcygnYWN0aXZlJylcbiAgICB9XG5cbiAgICBhY3RpdmUudHJpZ2dlcignYWN0aXZhdGUuYnMuc2Nyb2xsc3B5JylcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5zY3JvbGxzcHknKVxuICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvblxuXG4gICAgICBpZiAoIWRhdGEpICR0aGlzLmRhdGEoJ2JzLnNjcm9sbHNweScsIChkYXRhID0gbmV3IFNjcm9sbFNweSh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4uc2Nyb2xsc3B5XG5cbiAgJC5mbi5zY3JvbGxzcHkgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5zY3JvbGxzcHkuQ29uc3RydWN0b3IgPSBTY3JvbGxTcHlcblxuXG4gIC8vIFNDUk9MTFNQWSBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnNjcm9sbHNweS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4uc2Nyb2xsc3B5ID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG5cbiAgLy8gU0NST0xMU1BZIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09PT09PVxuXG4gICQod2luZG93KS5vbignbG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGknLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnW2RhdGEtc3B5PVwic2Nyb2xsXCJdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHNweSA9ICQodGhpcylcbiAgICAgIFBsdWdpbi5jYWxsKCRzcHksICRzcHkuZGF0YSgpKVxuICAgIH0pXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjIuMFxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTQgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgID0gb3B0aW9uc1xuICAgIHRoaXMuJGJvZHkgICAgICAgICAgPSAkKGRvY3VtZW50LmJvZHkpXG4gICAgdGhpcy4kZWxlbWVudCAgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRiYWNrZHJvcCAgICAgID1cbiAgICB0aGlzLmlzU2hvd24gICAgICAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSAwXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlbW90ZSkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuZmluZCgnLm1vZGFsLWNvbnRlbnQnKVxuICAgICAgICAubG9hZCh0aGlzLm9wdGlvbnMucmVtb3RlLCAkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2xvYWRlZC5icy5tb2RhbCcpXG4gICAgICAgIH0sIHRoaXMpKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLlZFUlNJT04gID0gJzMuMi4wJ1xuXG4gIE1vZGFsLkRFRkFVTFRTID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBlICAgID0gJC5FdmVudCgnc2hvdy5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKHRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IHRydWVcblxuICAgIHRoaXMuY2hlY2tTY3JvbGxiYXIoKVxuICAgIHRoaXMuJGJvZHkuYWRkQ2xhc3MoJ21vZGFsLW9wZW4nKVxuXG4gICAgdGhpcy5zZXRTY3JvbGxiYXIoKVxuICAgIHRoaXMuZXNjYXBlKClcblxuICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJywgJC5wcm94eSh0aGlzLmhpZGUsIHRoaXMpKVxuXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoYXQuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICBpZiAoIXRoYXQuJGVsZW1lbnQucGFyZW50KCkubGVuZ3RoKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnQuYXBwZW5kVG8odGhhdC4kYm9keSkgLy8gZG9uJ3QgbW92ZSBtb2RhbHMgZG9tIHBvc2l0aW9uXG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLnNob3coKVxuICAgICAgICAuc2Nyb2xsVG9wKDApXG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHRoYXQuJGVsZW1lbnRbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG4gICAgICB9XG5cbiAgICAgIHRoYXQuJGVsZW1lbnRcbiAgICAgICAgLmFkZENsYXNzKCdpbicpXG4gICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKVxuXG4gICAgICB0aGF0LmVuZm9yY2VGb2N1cygpXG5cbiAgICAgIHZhciBlID0gJC5FdmVudCgnc2hvd24uYnMubW9kYWwnLCB7IHJlbGF0ZWRUYXJnZXQ6IF9yZWxhdGVkVGFyZ2V0IH0pXG5cbiAgICAgIHRyYW5zaXRpb24gP1xuICAgICAgICB0aGF0LiRlbGVtZW50LmZpbmQoJy5tb2RhbC1kaWFsb2cnKSAvLyB3YWl0IGZvciBtb2RhbCB0byBzbGlkZSBpblxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoMzAwKSA6XG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBlID0gJC5FdmVudCgnaGlkZS5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICghdGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5pc1Nob3duID0gZmFsc2VcblxuICAgIHRoaXMuJGJvZHkucmVtb3ZlQ2xhc3MoJ21vZGFsLW9wZW4nKVxuXG4gICAgdGhpcy5yZXNldFNjcm9sbGJhcigpXG4gICAgdGhpcy5lc2NhcGUoKVxuXG4gICAgJChkb2N1bWVudCkub2ZmKCdmb2N1c2luLmJzLm1vZGFsJylcblxuICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgIC5yZW1vdmVDbGFzcygnaW4nKVxuICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgdHJ1ZSlcbiAgICAgIC5vZmYoJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgIHRoaXMuJGVsZW1lbnRcbiAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgJC5wcm94eSh0aGlzLmhpZGVNb2RhbCwgdGhpcykpXG4gICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCgzMDApIDpcbiAgICAgIHRoaXMuaGlkZU1vZGFsKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgJChkb2N1bWVudClcbiAgICAgIC5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbignZm9jdXNpbi5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0gIT09IGUudGFyZ2V0ICYmICF0aGlzLiRlbGVtZW50LmhhcyhlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVzY2FwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5rZXlib2FyZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigna2V5dXAuZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS53aGljaCA9PSAyNyAmJiB0aGlzLmhpZGUoKVxuICAgICAgfSwgdGhpcykpXG4gICAgfSBlbHNlIGlmICghdGhpcy5pc1Nob3duKSB7XG4gICAgICB0aGlzLiRlbGVtZW50Lm9mZigna2V5dXAuZGlzbWlzcy5icy5tb2RhbCcpXG4gICAgfVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmhpZGVNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB0aGlzLiRlbGVtZW50LmhpZGUoKVxuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdoaWRkZW4uYnMubW9kYWwnKVxuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUucmVtb3ZlQmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kYmFja2Ryb3AgJiYgdGhpcy4kYmFja2Ryb3AucmVtb3ZlKClcbiAgICB0aGlzLiRiYWNrZHJvcCA9IG51bGxcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5iYWNrZHJvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcblxuICAgIGlmICh0aGlzLmlzU2hvd24gJiYgdGhpcy5vcHRpb25zLmJhY2tkcm9wKSB7XG4gICAgICB2YXIgZG9BbmltYXRlID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgYW5pbWF0ZVxuXG4gICAgICB0aGlzLiRiYWNrZHJvcCA9ICQoJzxkaXYgY2xhc3M9XCJtb2RhbC1iYWNrZHJvcCAnICsgYW5pbWF0ZSArICdcIiAvPicpXG4gICAgICAgIC5hcHBlbmRUbyh0aGlzLiRib2R5KVxuXG4gICAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4gICAgICAgIHRoaXMub3B0aW9ucy5iYWNrZHJvcCA9PSAnc3RhdGljJ1xuICAgICAgICAgID8gdGhpcy4kZWxlbWVudFswXS5mb2N1cy5jYWxsKHRoaXMuJGVsZW1lbnRbMF0pXG4gICAgICAgICAgOiB0aGlzLmhpZGUuY2FsbCh0aGlzKVxuICAgICAgfSwgdGhpcykpXG5cbiAgICAgIGlmIChkb0FuaW1hdGUpIHRoaXMuJGJhY2tkcm9wWzBdLm9mZnNldFdpZHRoIC8vIGZvcmNlIHJlZmxvd1xuXG4gICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgICBpZiAoIWNhbGxiYWNrKSByZXR1cm5cblxuICAgICAgZG9BbmltYXRlID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFjaylcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoMTUwKSA6XG4gICAgICAgIGNhbGxiYWNrKClcblxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93biAmJiB0aGlzLiRiYWNrZHJvcCkge1xuICAgICAgdGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGF0LnJlbW92ZUJhY2tkcm9wKClcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgICAgfVxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFja1JlbW92ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoMTUwKSA6XG4gICAgICAgIGNhbGxiYWNrUmVtb3ZlKClcblxuICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggPj0gd2luZG93LmlubmVyV2lkdGgpIHJldHVyblxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLnNjcm9sbGJhcldpZHRoIHx8IHRoaXMubWVhc3VyZVNjcm9sbGJhcigpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBib2R5UGFkID0gcGFyc2VJbnQoKHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgfHwgMCksIDEwKVxuICAgIGlmICh0aGlzLnNjcm9sbGJhcldpZHRoKSB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsIGJvZHlQYWQgKyB0aGlzLnNjcm9sbGJhcldpZHRoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgJycpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUubWVhc3VyZVNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHsgLy8gdGh4IHdhbHNoXG4gICAgdmFyIHNjcm9sbERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgc2Nyb2xsRGl2LmNsYXNzTmFtZSA9ICdtb2RhbC1zY3JvbGxiYXItbWVhc3VyZSdcbiAgICB0aGlzLiRib2R5LmFwcGVuZChzY3JvbGxEaXYpXG4gICAgdmFyIHNjcm9sbGJhcldpZHRoID0gc2Nyb2xsRGl2Lm9mZnNldFdpZHRoIC0gc2Nyb2xsRGl2LmNsaWVudFdpZHRoXG4gICAgdGhpcy4kYm9keVswXS5yZW1vdmVDaGlsZChzY3JvbGxEaXYpXG4gICAgcmV0dXJuIHNjcm9sbGJhcldpZHRoXG4gIH1cblxuXG4gIC8vIE1PREFMIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgZnVuY3Rpb24gUGx1Z2luKG9wdGlvbiwgX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy5tb2RhbCcpXG4gICAgICB2YXIgb3B0aW9ucyA9ICQuZXh0ZW5kKHt9LCBNb2RhbC5ERUZBVUxUUywgJHRoaXMuZGF0YSgpLCB0eXBlb2Ygb3B0aW9uID09ICdvYmplY3QnICYmIG9wdGlvbilcblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy5tb2RhbCcsIChkYXRhID0gbmV3IE1vZGFsKHRoaXMsIG9wdGlvbnMpKSlcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9uID09ICdzdHJpbmcnKSBkYXRhW29wdGlvbl0oX3JlbGF0ZWRUYXJnZXQpXG4gICAgICBlbHNlIGlmIChvcHRpb25zLnNob3cpIGRhdGEuc2hvdyhfcmVsYXRlZFRhcmdldClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4ubW9kYWxcblxuICAkLmZuLm1vZGFsICAgICAgICAgICAgID0gUGx1Z2luXG4gICQuZm4ubW9kYWwuQ29uc3RydWN0b3IgPSBNb2RhbFxuXG5cbiAgLy8gTU9EQUwgTk8gQ09ORkxJQ1RcbiAgLy8gPT09PT09PT09PT09PT09PT1cblxuICAkLmZuLm1vZGFsLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5tb2RhbCA9IG9sZFxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuXG4gIC8vIE1PREFMIERBVEEtQVBJXG4gIC8vID09PT09PT09PT09PT09XG5cbiAgJChkb2N1bWVudCkub24oJ2NsaWNrLmJzLm1vZGFsLmRhdGEtYXBpJywgJ1tkYXRhLXRvZ2dsZT1cIm1vZGFsXCJdJywgZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICB2YXIgaHJlZiAgICA9ICR0aGlzLmF0dHIoJ2hyZWYnKVxuICAgIHZhciAkdGFyZ2V0ID0gJCgkdGhpcy5hdHRyKCdkYXRhLXRhcmdldCcpIHx8IChocmVmICYmIGhyZWYucmVwbGFjZSgvLiooPz0jW15cXHNdKyQpLywgJycpKSkgLy8gc3RyaXAgZm9yIGllN1xuICAgIHZhciBvcHRpb24gID0gJHRhcmdldC5kYXRhKCdicy5tb2RhbCcpID8gJ3RvZ2dsZScgOiAkLmV4dGVuZCh7IHJlbW90ZTogIS8jLy50ZXN0KGhyZWYpICYmIGhyZWYgfSwgJHRhcmdldC5kYXRhKCksICR0aGlzLmRhdGEoKSlcblxuICAgIGlmICgkdGhpcy5pcygnYScpKSBlLnByZXZlbnREZWZhdWx0KClcblxuICAgICR0YXJnZXQub25lKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbiAgICAgICR0YXJnZXQub25lKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICR0aGlzLmlzKCc6dmlzaWJsZScpICYmICR0aGlzLnRyaWdnZXIoJ2ZvY3VzJylcbiAgICAgIH0pXG4gICAgfSlcbiAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb24sIHRoaXMpXG4gIH0pXG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHRvb2x0aXAuanMgdjMuMi4wXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyN0b29sdGlwXG4gKiBJbnNwaXJlZCBieSB0aGUgb3JpZ2luYWwgalF1ZXJ5LnRpcHN5IGJ5IEphc29uIEZyYW1lXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTQgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gVE9PTFRJUCBQVUJMSUMgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIFRvb2x0aXAgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMudHlwZSAgICAgICA9XG4gICAgdGhpcy5vcHRpb25zICAgID1cbiAgICB0aGlzLmVuYWJsZWQgICAgPVxuICAgIHRoaXMudGltZW91dCAgICA9XG4gICAgdGhpcy5ob3ZlclN0YXRlID1cbiAgICB0aGlzLiRlbGVtZW50ICAgPSBudWxsXG5cbiAgICB0aGlzLmluaXQoJ3Rvb2x0aXAnLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgVG9vbHRpcC5WRVJTSU9OICA9ICczLjIuMCdcblxuICBUb29sdGlwLkRFRkFVTFRTID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwidG9vbHRpcC1hcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+JyxcbiAgICB0cmlnZ2VyOiAnaG92ZXIgZm9jdXMnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBkZWxheTogMCxcbiAgICBodG1sOiBmYWxzZSxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIHZpZXdwb3J0OiB7XG4gICAgICBzZWxlY3RvcjogJ2JvZHknLFxuICAgICAgcGFkZGluZzogMFxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAodHlwZSwgZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMuZW5hYmxlZCAgID0gdHJ1ZVxuICAgIHRoaXMudHlwZSAgICAgID0gdHlwZVxuICAgIHRoaXMuJGVsZW1lbnQgID0gJChlbGVtZW50KVxuICAgIHRoaXMub3B0aW9ucyAgID0gdGhpcy5nZXRPcHRpb25zKG9wdGlvbnMpXG4gICAgdGhpcy4kdmlld3BvcnQgPSB0aGlzLm9wdGlvbnMudmlld3BvcnQgJiYgJCh0aGlzLm9wdGlvbnMudmlld3BvcnQuc2VsZWN0b3IgfHwgdGhpcy5vcHRpb25zLnZpZXdwb3J0KVxuXG4gICAgdmFyIHRyaWdnZXJzID0gdGhpcy5vcHRpb25zLnRyaWdnZXIuc3BsaXQoJyAnKVxuXG4gICAgZm9yICh2YXIgaSA9IHRyaWdnZXJzLmxlbmd0aDsgaS0tOykge1xuICAgICAgdmFyIHRyaWdnZXIgPSB0cmlnZ2Vyc1tpXVxuXG4gICAgICBpZiAodHJpZ2dlciA9PSAnY2xpY2snKSB7XG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLnRvZ2dsZSwgdGhpcykpXG4gICAgICB9IGVsc2UgaWYgKHRyaWdnZXIgIT0gJ21hbnVhbCcpIHtcbiAgICAgICAgdmFyIGV2ZW50SW4gID0gdHJpZ2dlciA9PSAnaG92ZXInID8gJ21vdXNlZW50ZXInIDogJ2ZvY3VzaW4nXG4gICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT0gJ2hvdmVyJyA/ICdtb3VzZWxlYXZlJyA6ICdmb2N1c291dCdcblxuICAgICAgICB0aGlzLiRlbGVtZW50Lm9uKGV2ZW50SW4gICsgJy4nICsgdGhpcy50eXBlLCB0aGlzLm9wdGlvbnMuc2VsZWN0b3IsICQucHJveHkodGhpcy5lbnRlciwgdGhpcykpXG4gICAgICAgIHRoaXMuJGVsZW1lbnQub24oZXZlbnRPdXQgKyAnLicgKyB0aGlzLnR5cGUsIHRoaXMub3B0aW9ucy5zZWxlY3RvciwgJC5wcm94eSh0aGlzLmxlYXZlLCB0aGlzKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMuc2VsZWN0b3IgP1xuICAgICAgKHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB7IHRyaWdnZXI6ICdtYW51YWwnLCBzZWxlY3RvcjogJycgfSkpIDpcbiAgICAgIHRoaXMuZml4VGl0bGUoKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0RGVmYXVsdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFRvb2x0aXAuREVGQVVMVFNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldE9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5nZXREZWZhdWx0cygpLCB0aGlzLiRlbGVtZW50LmRhdGEoKSwgb3B0aW9ucylcblxuICAgIGlmIChvcHRpb25zLmRlbGF5ICYmIHR5cGVvZiBvcHRpb25zLmRlbGF5ID09ICdudW1iZXInKSB7XG4gICAgICBvcHRpb25zLmRlbGF5ID0ge1xuICAgICAgICBzaG93OiBvcHRpb25zLmRlbGF5LFxuICAgICAgICBoaWRlOiBvcHRpb25zLmRlbGF5XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldERlbGVnYXRlT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3B0aW9ucyAgPSB7fVxuICAgIHZhciBkZWZhdWx0cyA9IHRoaXMuZ2V0RGVmYXVsdHMoKVxuXG4gICAgdGhpcy5fb3B0aW9ucyAmJiAkLmVhY2godGhpcy5fb3B0aW9ucywgZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgIGlmIChkZWZhdWx0c1trZXldICE9IHZhbHVlKSBvcHRpb25zW2tleV0gPSB2YWx1ZVxuICAgIH0pXG5cbiAgICByZXR1cm4gb3B0aW9uc1xuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZW50ZXIgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgdmFyIHNlbGYgPSBvYmogaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yID9cbiAgICAgIG9iaiA6ICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAoIXNlbGYpIHtcbiAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvYmouY3VycmVudFRhcmdldCwgdGhpcy5nZXREZWxlZ2F0ZU9wdGlvbnMoKSlcbiAgICAgICQob2JqLmN1cnJlbnRUYXJnZXQpLmRhdGEoJ2JzLicgKyB0aGlzLnR5cGUsIHNlbGYpXG4gICAgfVxuXG4gICAgY2xlYXJUaW1lb3V0KHNlbGYudGltZW91dClcblxuICAgIHNlbGYuaG92ZXJTdGF0ZSA9ICdpbidcblxuICAgIGlmICghc2VsZi5vcHRpb25zLmRlbGF5IHx8ICFzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdykgcmV0dXJuIHNlbGYuc2hvdygpXG5cbiAgICBzZWxmLnRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzZWxmLmhvdmVyU3RhdGUgPT0gJ2luJykgc2VsZi5zaG93KClcbiAgICB9LCBzZWxmLm9wdGlvbnMuZGVsYXkuc2hvdylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmxlYXZlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIHZhciBzZWxmID0gb2JqIGluc3RhbmNlb2YgdGhpcy5jb25zdHJ1Y3RvciA/XG4gICAgICBvYmogOiAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuXG4gICAgaWYgKCFzZWxmKSB7XG4gICAgICBzZWxmID0gbmV3IHRoaXMuY29uc3RydWN0b3Iob2JqLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAkKG9iai5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgIH1cblxuICAgIGNsZWFyVGltZW91dChzZWxmLnRpbWVvdXQpXG5cbiAgICBzZWxmLmhvdmVyU3RhdGUgPSAnb3V0J1xuXG4gICAgaWYgKCFzZWxmLm9wdGlvbnMuZGVsYXkgfHwgIXNlbGYub3B0aW9ucy5kZWxheS5oaWRlKSByZXR1cm4gc2VsZi5oaWRlKClcblxuICAgIHNlbGYudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHNlbGYuaG92ZXJTdGF0ZSA9PSAnb3V0Jykgc2VsZi5oaWRlKClcbiAgICB9LCBzZWxmLm9wdGlvbnMuZGVsYXkuaGlkZSlcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93LmJzLicgKyB0aGlzLnR5cGUpXG5cbiAgICBpZiAodGhpcy5oYXNDb250ZW50KCkgJiYgdGhpcy5lbmFibGVkKSB7XG4gICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgICAgdmFyIGluRG9tID0gJC5jb250YWlucyhkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIHRoaXMuJGVsZW1lbnRbMF0pXG4gICAgICBpZiAoZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCAhaW5Eb20pIHJldHVyblxuICAgICAgdmFyIHRoYXQgPSB0aGlzXG5cbiAgICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuXG4gICAgICB2YXIgdGlwSWQgPSB0aGlzLmdldFVJRCh0aGlzLnR5cGUpXG5cbiAgICAgIHRoaXMuc2V0Q29udGVudCgpXG4gICAgICAkdGlwLmF0dHIoJ2lkJywgdGlwSWQpXG4gICAgICB0aGlzLiRlbGVtZW50LmF0dHIoJ2FyaWEtZGVzY3JpYmVkYnknLCB0aXBJZClcblxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbmltYXRpb24pICR0aXAuYWRkQ2xhc3MoJ2ZhZGUnKVxuXG4gICAgICB2YXIgcGxhY2VtZW50ID0gdHlwZW9mIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQgPT0gJ2Z1bmN0aW9uJyA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnQuY2FsbCh0aGlzLCAkdGlwWzBdLCB0aGlzLiRlbGVtZW50WzBdKSA6XG4gICAgICAgIHRoaXMub3B0aW9ucy5wbGFjZW1lbnRcblxuICAgICAgdmFyIGF1dG9Ub2tlbiA9IC9cXHM/YXV0bz9cXHM/L2lcbiAgICAgIHZhciBhdXRvUGxhY2UgPSBhdXRvVG9rZW4udGVzdChwbGFjZW1lbnQpXG4gICAgICBpZiAoYXV0b1BsYWNlKSBwbGFjZW1lbnQgPSBwbGFjZW1lbnQucmVwbGFjZShhdXRvVG9rZW4sICcnKSB8fCAndG9wJ1xuXG4gICAgICAkdGlwXG4gICAgICAgIC5kZXRhY2goKVxuICAgICAgICAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCBkaXNwbGF5OiAnYmxvY2snIH0pXG4gICAgICAgIC5hZGRDbGFzcyhwbGFjZW1lbnQpXG4gICAgICAgIC5kYXRhKCdicy4nICsgdGhpcy50eXBlLCB0aGlzKVxuXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyID8gJHRpcC5hcHBlbmRUbyh0aGlzLm9wdGlvbnMuY29udGFpbmVyKSA6ICR0aXAuaW5zZXJ0QWZ0ZXIodGhpcy4kZWxlbWVudClcblxuICAgICAgdmFyIHBvcyAgICAgICAgICA9IHRoaXMuZ2V0UG9zaXRpb24oKVxuICAgICAgdmFyIGFjdHVhbFdpZHRoICA9ICR0aXBbMF0ub2Zmc2V0V2lkdGhcbiAgICAgIHZhciBhY3R1YWxIZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgICBpZiAoYXV0b1BsYWNlKSB7XG4gICAgICAgIHZhciBvcmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRcbiAgICAgICAgdmFyICRwYXJlbnQgICAgICA9IHRoaXMuJGVsZW1lbnQucGFyZW50KClcbiAgICAgICAgdmFyIHBhcmVudERpbSAgICA9IHRoaXMuZ2V0UG9zaXRpb24oJHBhcmVudClcblxuICAgICAgICBwbGFjZW1lbnQgPSBwbGFjZW1lbnQgPT0gJ2JvdHRvbScgJiYgcG9zLnRvcCAgICsgcG9zLmhlaWdodCAgICAgICArIGFjdHVhbEhlaWdodCAtIHBhcmVudERpbS5zY3JvbGwgPiBwYXJlbnREaW0uaGVpZ2h0ID8gJ3RvcCcgICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgJiYgcG9zLnRvcCAgIC0gcGFyZW50RGltLnNjcm9sbCAtIGFjdHVhbEhlaWdodCA8IDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2JvdHRvbScgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3JpZ2h0JyAgJiYgcG9zLnJpZ2h0ICsgYWN0dWFsV2lkdGggICAgICA+IHBhcmVudERpbS53aWR0aCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ2xlZnQnICAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ2xlZnQnICAgJiYgcG9zLmxlZnQgIC0gYWN0dWFsV2lkdGggICAgICA8IHBhcmVudERpbS5sZWZ0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJ3JpZ2h0JyAgOlxuICAgICAgICAgICAgICAgICAgICBwbGFjZW1lbnRcblxuICAgICAgICAkdGlwXG4gICAgICAgICAgLnJlbW92ZUNsYXNzKG9yZ1BsYWNlbWVudClcbiAgICAgICAgICAuYWRkQ2xhc3MocGxhY2VtZW50KVxuICAgICAgfVxuXG4gICAgICB2YXIgY2FsY3VsYXRlZE9mZnNldCA9IHRoaXMuZ2V0Q2FsY3VsYXRlZE9mZnNldChwbGFjZW1lbnQsIHBvcywgYWN0dWFsV2lkdGgsIGFjdHVhbEhlaWdodClcblxuICAgICAgdGhpcy5hcHBseVBsYWNlbWVudChjYWxjdWxhdGVkT2Zmc2V0LCBwbGFjZW1lbnQpXG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdzaG93bi5icy4nICsgdGhhdC50eXBlKVxuICAgICAgICB0aGF0LmhvdmVyU3RhdGUgPSBudWxsXG4gICAgICB9XG5cbiAgICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJHRpcC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICAgJHRpcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNvbXBsZXRlKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZCgxNTApIDpcbiAgICAgICAgY29tcGxldGUoKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmFwcGx5UGxhY2VtZW50ID0gZnVuY3Rpb24gKG9mZnNldCwgcGxhY2VtZW50KSB7XG4gICAgdmFyICR0aXAgICA9IHRoaXMudGlwKClcbiAgICB2YXIgd2lkdGggID0gJHRpcFswXS5vZmZzZXRXaWR0aFxuICAgIHZhciBoZWlnaHQgPSAkdGlwWzBdLm9mZnNldEhlaWdodFxuXG4gICAgLy8gbWFudWFsbHkgcmVhZCBtYXJnaW5zIGJlY2F1c2UgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGluY2x1ZGVzIGRpZmZlcmVuY2VcbiAgICB2YXIgbWFyZ2luVG9wID0gcGFyc2VJbnQoJHRpcC5jc3MoJ21hcmdpbi10b3AnKSwgMTApXG4gICAgdmFyIG1hcmdpbkxlZnQgPSBwYXJzZUludCgkdGlwLmNzcygnbWFyZ2luLWxlZnQnKSwgMTApXG5cbiAgICAvLyB3ZSBtdXN0IGNoZWNrIGZvciBOYU4gZm9yIGllIDgvOVxuICAgIGlmIChpc05hTihtYXJnaW5Ub3ApKSAgbWFyZ2luVG9wICA9IDBcbiAgICBpZiAoaXNOYU4obWFyZ2luTGVmdCkpIG1hcmdpbkxlZnQgPSAwXG5cbiAgICBvZmZzZXQudG9wICA9IG9mZnNldC50b3AgICsgbWFyZ2luVG9wXG4gICAgb2Zmc2V0LmxlZnQgPSBvZmZzZXQubGVmdCArIG1hcmdpbkxlZnRcblxuICAgIC8vICQuZm4ub2Zmc2V0IGRvZXNuJ3Qgcm91bmQgcGl4ZWwgdmFsdWVzXG4gICAgLy8gc28gd2UgdXNlIHNldE9mZnNldCBkaXJlY3RseSB3aXRoIG91ciBvd24gZnVuY3Rpb24gQi0wXG4gICAgJC5vZmZzZXQuc2V0T2Zmc2V0KCR0aXBbMF0sICQuZXh0ZW5kKHtcbiAgICAgIHVzaW5nOiBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgICAgJHRpcC5jc3Moe1xuICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChwcm9wcy50b3ApLFxuICAgICAgICAgIGxlZnQ6IE1hdGgucm91bmQocHJvcHMubGVmdClcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9LCBvZmZzZXQpLCAwKVxuXG4gICAgJHRpcC5hZGRDbGFzcygnaW4nKVxuXG4gICAgLy8gY2hlY2sgdG8gc2VlIGlmIHBsYWNpbmcgdGlwIGluIG5ldyBvZmZzZXQgY2F1c2VkIHRoZSB0aXAgdG8gcmVzaXplIGl0c2VsZlxuICAgIHZhciBhY3R1YWxXaWR0aCAgPSAkdGlwWzBdLm9mZnNldFdpZHRoXG4gICAgdmFyIGFjdHVhbEhlaWdodCA9ICR0aXBbMF0ub2Zmc2V0SGVpZ2h0XG5cbiAgICBpZiAocGxhY2VtZW50ID09ICd0b3AnICYmIGFjdHVhbEhlaWdodCAhPSBoZWlnaHQpIHtcbiAgICAgIG9mZnNldC50b3AgPSBvZmZzZXQudG9wICsgaGVpZ2h0IC0gYWN0dWFsSGVpZ2h0XG4gICAgfVxuXG4gICAgdmFyIGRlbHRhID0gdGhpcy5nZXRWaWV3cG9ydEFkanVzdGVkRGVsdGEocGxhY2VtZW50LCBvZmZzZXQsIGFjdHVhbFdpZHRoLCBhY3R1YWxIZWlnaHQpXG5cbiAgICBpZiAoZGVsdGEubGVmdCkgb2Zmc2V0LmxlZnQgKz0gZGVsdGEubGVmdFxuICAgIGVsc2Ugb2Zmc2V0LnRvcCArPSBkZWx0YS50b3BcblxuICAgIHZhciBhcnJvd0RlbHRhICAgICAgICAgID0gZGVsdGEubGVmdCA/IGRlbHRhLmxlZnQgKiAyIC0gd2lkdGggKyBhY3R1YWxXaWR0aCA6IGRlbHRhLnRvcCAqIDIgLSBoZWlnaHQgKyBhY3R1YWxIZWlnaHRcbiAgICB2YXIgYXJyb3dQb3NpdGlvbiAgICAgICA9IGRlbHRhLmxlZnQgPyAnbGVmdCcgICAgICAgIDogJ3RvcCdcbiAgICB2YXIgYXJyb3dPZmZzZXRQb3NpdGlvbiA9IGRlbHRhLmxlZnQgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCdcblxuICAgICR0aXAub2Zmc2V0KG9mZnNldClcbiAgICB0aGlzLnJlcGxhY2VBcnJvdyhhcnJvd0RlbHRhLCAkdGlwWzBdW2Fycm93T2Zmc2V0UG9zaXRpb25dLCBhcnJvd1Bvc2l0aW9uKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUucmVwbGFjZUFycm93ID0gZnVuY3Rpb24gKGRlbHRhLCBkaW1lbnNpb24sIHBvc2l0aW9uKSB7XG4gICAgdGhpcy5hcnJvdygpLmNzcyhwb3NpdGlvbiwgZGVsdGEgPyAoNTAgKiAoMSAtIGRlbHRhIC8gZGltZW5zaW9uKSArICclJykgOiAnJylcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICR0aXAgID0gdGhpcy50aXAoKVxuICAgIHZhciB0aXRsZSA9IHRoaXMuZ2V0VGl0bGUoKVxuXG4gICAgJHRpcC5maW5kKCcudG9vbHRpcC1pbm5lcicpW3RoaXMub3B0aW9ucy5odG1sID8gJ2h0bWwnIDogJ3RleHQnXSh0aXRsZSlcbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdmYWRlIGluIHRvcCBib3R0b20gbGVmdCByaWdodCcpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciAkdGlwID0gdGhpcy50aXAoKVxuICAgIHZhciBlICAgID0gJC5FdmVudCgnaGlkZS5icy4nICsgdGhpcy50eXBlKVxuXG4gICAgdGhpcy4kZWxlbWVudC5yZW1vdmVBdHRyKCdhcmlhLWRlc2NyaWJlZGJ5JylcblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgaWYgKHRoYXQuaG92ZXJTdGF0ZSAhPSAnaW4nKSAkdGlwLmRldGFjaCgpXG4gICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2hpZGRlbi5icy4nICsgdGhhdC50eXBlKVxuICAgIH1cblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgJHRpcC5yZW1vdmVDbGFzcygnaW4nKVxuXG4gICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kdGlwLmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgJHRpcFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKDE1MCkgOlxuICAgICAgY29tcGxldGUoKVxuXG4gICAgdGhpcy5ob3ZlclN0YXRlID0gbnVsbFxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmZpeFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICBpZiAoJGUuYXR0cigndGl0bGUnKSB8fCB0eXBlb2YgKCRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKSkgIT0gJ3N0cmluZycpIHtcbiAgICAgICRlLmF0dHIoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnLCAkZS5hdHRyKCd0aXRsZScpIHx8ICcnKS5hdHRyKCd0aXRsZScsICcnKVxuICAgIH1cbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmhhc0NvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VGl0bGUoKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0UG9zaXRpb24gPSBmdW5jdGlvbiAoJGVsZW1lbnQpIHtcbiAgICAkZWxlbWVudCAgID0gJGVsZW1lbnQgfHwgdGhpcy4kZWxlbWVudFxuICAgIHZhciBlbCAgICAgPSAkZWxlbWVudFswXVxuICAgIHZhciBpc0JvZHkgPSBlbC50YWdOYW1lID09ICdCT0RZJ1xuICAgIHJldHVybiAkLmV4dGVuZCh7fSwgKHR5cGVvZiBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT0gJ2Z1bmN0aW9uJykgPyBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSA6IG51bGwsIHtcbiAgICAgIHNjcm9sbDogaXNCb2R5ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA6ICRlbGVtZW50LnNjcm9sbFRvcCgpLFxuICAgICAgd2lkdGg6ICBpc0JvZHkgPyAkKHdpbmRvdykud2lkdGgoKSAgOiAkZWxlbWVudC5vdXRlcldpZHRoKCksXG4gICAgICBoZWlnaHQ6IGlzQm9keSA/ICQod2luZG93KS5oZWlnaHQoKSA6ICRlbGVtZW50Lm91dGVySGVpZ2h0KClcbiAgICB9LCBpc0JvZHkgPyB7IHRvcDogMCwgbGVmdDogMCB9IDogJGVsZW1lbnQub2Zmc2V0KCkpXG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS5nZXRDYWxjdWxhdGVkT2Zmc2V0ID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgcmV0dXJuIHBsYWNlbWVudCA9PSAnYm90dG9tJyA/IHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCwgICBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAvIDIgLSBhY3R1YWxXaWR0aCAvIDIgIH0gOlxuICAgICAgICAgICBwbGFjZW1lbnQgPT0gJ3RvcCcgICAgPyB7IHRvcDogcG9zLnRvcCAtIGFjdHVhbEhlaWdodCwgbGVmdDogcG9zLmxlZnQgKyBwb3Mud2lkdGggLyAyIC0gYWN0dWFsV2lkdGggLyAyICB9IDpcbiAgICAgICAgICAgcGxhY2VtZW50ID09ICdsZWZ0JyAgID8geyB0b3A6IHBvcy50b3AgKyBwb3MuaGVpZ2h0IC8gMiAtIGFjdHVhbEhlaWdodCAvIDIsIGxlZnQ6IHBvcy5sZWZ0IC0gYWN0dWFsV2lkdGggfSA6XG4gICAgICAgIC8qIHBsYWNlbWVudCA9PSAncmlnaHQnICovIHsgdG9wOiBwb3MudG9wICsgcG9zLmhlaWdodCAvIDIgLSBhY3R1YWxIZWlnaHQgLyAyLCBsZWZ0OiBwb3MubGVmdCArIHBvcy53aWR0aCAgIH1cblxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0Vmlld3BvcnRBZGp1c3RlZERlbHRhID0gZnVuY3Rpb24gKHBsYWNlbWVudCwgcG9zLCBhY3R1YWxXaWR0aCwgYWN0dWFsSGVpZ2h0KSB7XG4gICAgdmFyIGRlbHRhID0geyB0b3A6IDAsIGxlZnQ6IDAgfVxuICAgIGlmICghdGhpcy4kdmlld3BvcnQpIHJldHVybiBkZWx0YVxuXG4gICAgdmFyIHZpZXdwb3J0UGFkZGluZyA9IHRoaXMub3B0aW9ucy52aWV3cG9ydCAmJiB0aGlzLm9wdGlvbnMudmlld3BvcnQucGFkZGluZyB8fCAwXG4gICAgdmFyIHZpZXdwb3J0RGltZW5zaW9ucyA9IHRoaXMuZ2V0UG9zaXRpb24odGhpcy4kdmlld3BvcnQpXG5cbiAgICBpZiAoL3JpZ2h0fGxlZnQvLnRlc3QocGxhY2VtZW50KSkge1xuICAgICAgdmFyIHRvcEVkZ2VPZmZzZXQgICAgPSBwb3MudG9wIC0gdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbFxuICAgICAgdmFyIGJvdHRvbUVkZ2VPZmZzZXQgPSBwb3MudG9wICsgdmlld3BvcnRQYWRkaW5nIC0gdmlld3BvcnREaW1lbnNpb25zLnNjcm9sbCArIGFjdHVhbEhlaWdodFxuICAgICAgaWYgKHRvcEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMudG9wKSB7IC8vIHRvcCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS50b3AgPSB2aWV3cG9ydERpbWVuc2lvbnMudG9wIC0gdG9wRWRnZU9mZnNldFxuICAgICAgfSBlbHNlIGlmIChib3R0b21FZGdlT2Zmc2V0ID4gdmlld3BvcnREaW1lbnNpb25zLnRvcCArIHZpZXdwb3J0RGltZW5zaW9ucy5oZWlnaHQpIHsgLy8gYm90dG9tIG92ZXJmbG93XG4gICAgICAgIGRlbHRhLnRvcCA9IHZpZXdwb3J0RGltZW5zaW9ucy50b3AgKyB2aWV3cG9ydERpbWVuc2lvbnMuaGVpZ2h0IC0gYm90dG9tRWRnZU9mZnNldFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbGVmdEVkZ2VPZmZzZXQgID0gcG9zLmxlZnQgLSB2aWV3cG9ydFBhZGRpbmdcbiAgICAgIHZhciByaWdodEVkZ2VPZmZzZXQgPSBwb3MubGVmdCArIHZpZXdwb3J0UGFkZGluZyArIGFjdHVhbFdpZHRoXG4gICAgICBpZiAobGVmdEVkZ2VPZmZzZXQgPCB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCkgeyAvLyBsZWZ0IG92ZXJmbG93XG4gICAgICAgIGRlbHRhLmxlZnQgPSB2aWV3cG9ydERpbWVuc2lvbnMubGVmdCAtIGxlZnRFZGdlT2Zmc2V0XG4gICAgICB9IGVsc2UgaWYgKHJpZ2h0RWRnZU9mZnNldCA+IHZpZXdwb3J0RGltZW5zaW9ucy53aWR0aCkgeyAvLyByaWdodCBvdmVyZmxvd1xuICAgICAgICBkZWx0YS5sZWZ0ID0gdmlld3BvcnREaW1lbnNpb25zLmxlZnQgKyB2aWV3cG9ydERpbWVuc2lvbnMud2lkdGggLSByaWdodEVkZ2VPZmZzZXRcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVsdGFcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmdldFRpdGxlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aXRsZVxuICAgIHZhciAkZSA9IHRoaXMuJGVsZW1lbnRcbiAgICB2YXIgbyAgPSB0aGlzLm9wdGlvbnNcblxuICAgIHRpdGxlID0gJGUuYXR0cignZGF0YS1vcmlnaW5hbC10aXRsZScpXG4gICAgICB8fCAodHlwZW9mIG8udGl0bGUgPT0gJ2Z1bmN0aW9uJyA/IG8udGl0bGUuY2FsbCgkZVswXSkgOiAgby50aXRsZSlcblxuICAgIHJldHVybiB0aXRsZVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZ2V0VUlEID0gZnVuY3Rpb24gKHByZWZpeCkge1xuICAgIGRvIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogMTAwMDAwMClcbiAgICB3aGlsZSAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocHJlZml4KSlcbiAgICByZXR1cm4gcHJlZml4XG4gIH1cblxuICBUb29sdGlwLnByb3RvdHlwZS50aXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLiR0aXAgPSB0aGlzLiR0aXAgfHwgJCh0aGlzLm9wdGlvbnMudGVtcGxhdGUpKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuYXJyb3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLiRhcnJvdyA9IHRoaXMuJGFycm93IHx8IHRoaXMudGlwKCkuZmluZCgnLnRvb2x0aXAtYXJyb3cnKSlcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy4kZWxlbWVudFswXS5wYXJlbnROb2RlKSB7XG4gICAgICB0aGlzLmhpZGUoKVxuICAgICAgdGhpcy4kZWxlbWVudCA9IG51bGxcbiAgICAgIHRoaXMub3B0aW9ucyAgPSBudWxsXG4gICAgfVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZW5hYmxlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZW5hYmxlZCA9IHRydWVcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gZmFsc2VcbiAgfVxuXG4gIFRvb2x0aXAucHJvdG90eXBlLnRvZ2dsZUVuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbmFibGVkID0gIXRoaXMuZW5hYmxlZFxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUudG9nZ2xlID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXNcbiAgICBpZiAoZSkge1xuICAgICAgc2VsZiA9ICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlKVxuICAgICAgaWYgKCFzZWxmKSB7XG4gICAgICAgIHNlbGYgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihlLmN1cnJlbnRUYXJnZXQsIHRoaXMuZ2V0RGVsZWdhdGVPcHRpb25zKCkpXG4gICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKCdicy4nICsgdGhpcy50eXBlLCBzZWxmKVxuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYudGlwKCkuaGFzQ2xhc3MoJ2luJykgPyBzZWxmLmxlYXZlKHNlbGYpIDogc2VsZi5lbnRlcihzZWxmKVxuICB9XG5cbiAgVG9vbHRpcC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KVxuICAgIHRoaXMuaGlkZSgpLiRlbGVtZW50Lm9mZignLicgKyB0aGlzLnR5cGUpLnJlbW92ZURhdGEoJ2JzLicgKyB0aGlzLnR5cGUpXG4gIH1cblxuXG4gIC8vIFRPT0xUSVAgUExVR0lOIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuICAgICAgdmFyIGRhdGEgICAgPSAkdGhpcy5kYXRhKCdicy50b29sdGlwJylcbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb25cblxuICAgICAgaWYgKCFkYXRhICYmIG9wdGlvbiA9PSAnZGVzdHJveScpIHJldHVyblxuICAgICAgaWYgKCFkYXRhKSAkdGhpcy5kYXRhKCdicy50b29sdGlwJywgKGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKClcbiAgICB9KVxuICB9XG5cbiAgdmFyIG9sZCA9ICQuZm4udG9vbHRpcFxuXG4gICQuZm4udG9vbHRpcCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLnRvb2x0aXAuQ29uc3RydWN0b3IgPSBUb29sdGlwXG5cblxuICAvLyBUT09MVElQIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09PT1cblxuICAkLmZuLnRvb2x0aXAubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkLmZuLnRvb2x0aXAgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbn0oalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IHBvcG92ZXIuanMgdjMuMi4wXG4gKiBodHRwOi8vZ2V0Ym9vdHN0cmFwLmNvbS9qYXZhc2NyaXB0LyNwb3BvdmVyc1xuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5cmlnaHQgMjAxMS0yMDE0IFR3aXR0ZXIsIEluYy5cbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuXG4rZnVuY3Rpb24gKCQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8vIFBPUE9WRVIgUFVCTElDIENMQVNTIERFRklOSVRJT05cbiAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIHZhciBQb3BvdmVyID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmluaXQoJ3BvcG92ZXInLCBlbGVtZW50LCBvcHRpb25zKVxuICB9XG5cbiAgaWYgKCEkLmZuLnRvb2x0aXApIHRocm93IG5ldyBFcnJvcignUG9wb3ZlciByZXF1aXJlcyB0b29sdGlwLmpzJylcblxuICBQb3BvdmVyLlZFUlNJT04gID0gJzMuMi4wJ1xuXG4gIFBvcG92ZXIuREVGQVVMVFMgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLkRFRkFVTFRTLCB7XG4gICAgcGxhY2VtZW50OiAncmlnaHQnLFxuICAgIHRyaWdnZXI6ICdjbGljaycsXG4gICAgY29udGVudDogJycsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci10aXRsZVwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItY29udGVudFwiPjwvZGl2PjwvZGl2PidcbiAgfSlcblxuXG4gIC8vIE5PVEU6IFBPUE9WRVIgRVhURU5EUyB0b29sdGlwLmpzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUgPSAkLmV4dGVuZCh7fSwgJC5mbi50b29sdGlwLkNvbnN0cnVjdG9yLnByb3RvdHlwZSlcblxuICBQb3BvdmVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFBvcG92ZXJcblxuICBQb3BvdmVyLnByb3RvdHlwZS5nZXREZWZhdWx0cyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gUG9wb3Zlci5ERUZBVUxUU1xuICB9XG5cbiAgUG9wb3Zlci5wcm90b3R5cGUuc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgJHRpcCAgICA9IHRoaXMudGlwKClcbiAgICB2YXIgdGl0bGUgICA9IHRoaXMuZ2V0VGl0bGUoKVxuICAgIHZhciBjb250ZW50ID0gdGhpcy5nZXRDb250ZW50KClcblxuICAgICR0aXAuZmluZCgnLnBvcG92ZXItdGl0bGUnKVt0aGlzLm9wdGlvbnMuaHRtbCA/ICdodG1sJyA6ICd0ZXh0J10odGl0bGUpXG4gICAgJHRpcC5maW5kKCcucG9wb3Zlci1jb250ZW50JykuZW1wdHkoKVsgLy8gd2UgdXNlIGFwcGVuZCBmb3IgaHRtbCBvYmplY3RzIHRvIG1haW50YWluIGpzIGV2ZW50c1xuICAgICAgdGhpcy5vcHRpb25zLmh0bWwgPyAodHlwZW9mIGNvbnRlbnQgPT0gJ3N0cmluZycgPyAnaHRtbCcgOiAnYXBwZW5kJykgOiAndGV4dCdcbiAgICBdKGNvbnRlbnQpXG5cbiAgICAkdGlwLnJlbW92ZUNsYXNzKCdmYWRlIHRvcCBib3R0b20gbGVmdCByaWdodCBpbicpXG5cbiAgICAvLyBJRTggZG9lc24ndCBhY2NlcHQgaGlkaW5nIHZpYSB0aGUgYDplbXB0eWAgcHNldWRvIHNlbGVjdG9yLCB3ZSBoYXZlIHRvIGRvXG4gICAgLy8gdGhpcyBtYW51YWxseSBieSBjaGVja2luZyB0aGUgY29udGVudHMuXG4gICAgaWYgKCEkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaHRtbCgpKSAkdGlwLmZpbmQoJy5wb3BvdmVyLXRpdGxlJykuaGlkZSgpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5oYXNDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmdldFRpdGxlKCkgfHwgdGhpcy5nZXRDb250ZW50KClcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLmdldENvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyICRlID0gdGhpcy4kZWxlbWVudFxuICAgIHZhciBvICA9IHRoaXMub3B0aW9uc1xuXG4gICAgcmV0dXJuICRlLmF0dHIoJ2RhdGEtY29udGVudCcpXG4gICAgICB8fCAodHlwZW9mIG8uY29udGVudCA9PSAnZnVuY3Rpb24nID9cbiAgICAgICAgICAgIG8uY29udGVudC5jYWxsKCRlWzBdKSA6XG4gICAgICAgICAgICBvLmNvbnRlbnQpXG4gIH1cblxuICBQb3BvdmVyLnByb3RvdHlwZS5hcnJvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuJGFycm93ID0gdGhpcy4kYXJyb3cgfHwgdGhpcy50aXAoKS5maW5kKCcuYXJyb3cnKSlcbiAgfVxuXG4gIFBvcG92ZXIucHJvdG90eXBlLnRpcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuJHRpcCkgdGhpcy4kdGlwID0gJCh0aGlzLm9wdGlvbnMudGVtcGxhdGUpXG4gICAgcmV0dXJuIHRoaXMuJHRpcFxuICB9XG5cblxuICAvLyBQT1BPVkVSIFBMVUdJTiBERUZJTklUSU9OXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicpXG4gICAgICB2YXIgb3B0aW9ucyA9IHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uXG5cbiAgICAgIGlmICghZGF0YSAmJiBvcHRpb24gPT0gJ2Rlc3Ryb3knKSByZXR1cm5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMucG9wb3ZlcicsIChkYXRhID0gbmV3IFBvcG92ZXIodGhpcywgb3B0aW9ucykpKVxuICAgICAgaWYgKHR5cGVvZiBvcHRpb24gPT0gJ3N0cmluZycpIGRhdGFbb3B0aW9uXSgpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLnBvcG92ZXJcblxuICAkLmZuLnBvcG92ZXIgICAgICAgICAgICAgPSBQbHVnaW5cbiAgJC5mbi5wb3BvdmVyLkNvbnN0cnVjdG9yID0gUG9wb3ZlclxuXG5cbiAgLy8gUE9QT1ZFUiBOTyBDT05GTElDVFxuICAvLyA9PT09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5wb3BvdmVyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJC5mbi5wb3BvdmVyID0gb2xkXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG59KGpRdWVyeSk7XG5cblxuLypcbiAqIGFuZ3VsYXItdWktYm9vdHN0cmFwXG4gKiBodHRwOi8vYW5ndWxhci11aS5naXRodWIuaW8vYm9vdHN0cmFwL1xuXG4gKiBWZXJzaW9uOiAwLjEzLjQgLSAyMDE1LTA5LTAzXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJ1aS5ib290c3RyYXBcIiwgW1widWkuYm9vdHN0cmFwLnRwbHNcIiwgXCJ1aS5ib290c3RyYXAuY29sbGFwc2VcIixcInVpLmJvb3RzdHJhcC5hY2NvcmRpb25cIixcInVpLmJvb3RzdHJhcC5hbGVydFwiLFwidWkuYm9vdHN0cmFwLmJpbmRIdG1sXCIsXCJ1aS5ib290c3RyYXAuYnV0dG9uc1wiLFwidWkuYm9vdHN0cmFwLmNhcm91c2VsXCIsXCJ1aS5ib290c3RyYXAuZGF0ZXBhcnNlclwiLFwidWkuYm9vdHN0cmFwLnBvc2l0aW9uXCIsXCJ1aS5ib290c3RyYXAuZGF0ZXBpY2tlclwiLFwidWkuYm9vdHN0cmFwLmRyb3Bkb3duXCIsXCJ1aS5ib290c3RyYXAubW9kYWxcIixcInVpLmJvb3RzdHJhcC5wYWdpbmF0aW9uXCIsXCJ1aS5ib290c3RyYXAudG9vbHRpcFwiLFwidWkuYm9vdHN0cmFwLnBvcG92ZXJcIixcInVpLmJvb3RzdHJhcC5wcm9ncmVzc2JhclwiLFwidWkuYm9vdHN0cmFwLnJhdGluZ1wiLFwidWkuYm9vdHN0cmFwLnRhYnNcIixcInVpLmJvb3RzdHJhcC50aW1lcGlja2VyXCIsXCJ1aS5ib290c3RyYXAudHJhbnNpdGlvblwiLFwidWkuYm9vdHN0cmFwLnR5cGVhaGVhZFwiXSk7XG5hbmd1bGFyLm1vZHVsZShcInVpLmJvb3RzdHJhcC50cGxzXCIsIFtcInRlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbFwiLFwidGVtcGxhdGUvYWNjb3JkaW9uL2FjY29yZGlvbi5odG1sXCIsXCJ0ZW1wbGF0ZS9hbGVydC9hbGVydC5odG1sXCIsXCJ0ZW1wbGF0ZS9jYXJvdXNlbC9jYXJvdXNlbC5odG1sXCIsXCJ0ZW1wbGF0ZS9jYXJvdXNlbC9zbGlkZS5odG1sXCIsXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLFwidGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbFwiLFwidGVtcGxhdGUvZGF0ZXBpY2tlci9tb250aC5odG1sXCIsXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL3BvcHVwLmh0bWxcIixcInRlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sXCIsXCJ0ZW1wbGF0ZS9tb2RhbC9iYWNrZHJvcC5odG1sXCIsXCJ0ZW1wbGF0ZS9tb2RhbC93aW5kb3cuaHRtbFwiLFwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdlci5odG1sXCIsXCJ0ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbFwiLFwidGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtcG9wdXAuaHRtbFwiLFwidGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLWh0bWwtdW5zYWZlLXBvcHVwLmh0bWxcIixcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1wb3B1cC5odG1sXCIsXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtdGVtcGxhdGUtcG9wdXAuaHRtbFwiLFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLWh0bWwuaHRtbFwiLFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLXRlbXBsYXRlLmh0bWxcIixcInRlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sXCIsXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbFwiLFwidGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3MuaHRtbFwiLFwidGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbFwiLFwidGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIsXCJ0ZW1wbGF0ZS90YWJzL3RhYi5odG1sXCIsXCJ0ZW1wbGF0ZS90YWJzL3RhYnNldC5odG1sXCIsXCJ0ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLFwidGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sXCIsXCJ0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWxcIl0pO1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5jb2xsYXBzZScsIFtdKVxuXG4gIC5kaXJlY3RpdmUoJ2NvbGxhcHNlJywgWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBmdW5jdGlvbiBleHBhbmQoKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSlcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsIGZhbHNlKTtcblxuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsICdpbicsIHtcbiAgICAgICAgICAgIHRvOiB7IGhlaWdodDogZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgKyAncHgnIH1cbiAgICAgICAgICB9KS50aGVuKGV4cGFuZERvbmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZXhwYW5kRG9uZSgpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCdjb2xsYXBzaW5nJyk7XG4gICAgICAgICAgZWxlbWVudC5jc3Moe2hlaWdodDogJ2F1dG8nfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb2xsYXBzZSgpIHtcbiAgICAgICAgICBpZiAoIWVsZW1lbnQuaGFzQ2xhc3MoJ2NvbGxhcHNlJykgJiYgIWVsZW1lbnQuaGFzQ2xhc3MoJ2luJykpIHtcbiAgICAgICAgICAgIHJldHVybiBjb2xsYXBzZURvbmUoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICAvLyBJTVBPUlRBTlQ6IFRoZSBoZWlnaHQgbXVzdCBiZSBzZXQgYmVmb3JlIGFkZGluZyBcImNvbGxhcHNpbmdcIiBjbGFzcy5cbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgdGhlIGJyb3dzZXIgYXR0ZW1wdHMgdG8gYW5pbWF0ZSBmcm9tIGhlaWdodCAwIChpblxuICAgICAgICAgICAgLy8gY29sbGFwc2luZyBjbGFzcykgdG8gdGhlIGdpdmVuIGhlaWdodCBoZXJlLlxuICAgICAgICAgICAgLmNzcyh7aGVpZ2h0OiBlbGVtZW50WzBdLnNjcm9sbEhlaWdodCArICdweCd9KVxuICAgICAgICAgICAgLy8gaW5pdGlhbGx5IGFsbCBwYW5lbCBjb2xsYXBzZSBoYXZlIHRoZSBjb2xsYXBzZSBjbGFzcywgdGhpcyByZW1vdmFsXG4gICAgICAgICAgICAvLyBwcmV2ZW50cyB0aGUgYW5pbWF0aW9uIGZyb20ganVtcGluZyB0byBjb2xsYXBzZWQgc3RhdGVcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnY29sbGFwc2UnKVxuICAgICAgICAgICAgLmFkZENsYXNzKCdjb2xsYXBzaW5nJylcbiAgICAgICAgICAgIC5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsICdpbicsIHtcbiAgICAgICAgICAgIHRvOiB7aGVpZ2h0OiAnMCd9XG4gICAgICAgICAgfSkudGhlbihjb2xsYXBzZURvbmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY29sbGFwc2VEb25lKCkge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKHtoZWlnaHQ6ICcwJ30pOyAvLyBSZXF1aXJlZCBzbyB0aGF0IGNvbGxhcHNlIHdvcmtzIHdoZW4gYW5pbWF0aW9uIGlzIGRpc2FibGVkXG4gICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcygnY29sbGFwc2luZycpO1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2NvbGxhcHNlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2goYXR0cnMuY29sbGFwc2UsIGZ1bmN0aW9uKHNob3VsZENvbGxhcHNlKSB7XG4gICAgICAgICAgaWYgKHNob3VsZENvbGxhcHNlKSB7XG4gICAgICAgICAgICBjb2xsYXBzZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleHBhbmQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5hY2NvcmRpb24nLCBbJ3VpLmJvb3RzdHJhcC5jb2xsYXBzZSddKVxuXG4uY29uc3RhbnQoJ2FjY29yZGlvbkNvbmZpZycsIHtcbiAgY2xvc2VPdGhlcnM6IHRydWVcbn0pXG5cbi5jb250cm9sbGVyKCdBY2NvcmRpb25Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJ2FjY29yZGlvbkNvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCBhY2NvcmRpb25Db25maWcpIHtcbiAgLy8gVGhpcyBhcnJheSBrZWVwcyB0cmFjayBvZiB0aGUgYWNjb3JkaW9uIGdyb3Vwc1xuICB0aGlzLmdyb3VwcyA9IFtdO1xuXG4gIC8vIEVuc3VyZSB0aGF0IGFsbCB0aGUgZ3JvdXBzIGluIHRoaXMgYWNjb3JkaW9uIGFyZSBjbG9zZWQsIHVubGVzcyBjbG9zZS1vdGhlcnMgZXhwbGljaXRseSBzYXlzIG5vdCB0b1xuICB0aGlzLmNsb3NlT3RoZXJzID0gZnVuY3Rpb24ob3Blbkdyb3VwKSB7XG4gICAgdmFyIGNsb3NlT3RoZXJzID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmNsb3NlT3RoZXJzKSA/XG4gICAgICAkc2NvcGUuJGV2YWwoJGF0dHJzLmNsb3NlT3RoZXJzKSA6IGFjY29yZGlvbkNvbmZpZy5jbG9zZU90aGVycztcbiAgICBpZiAoY2xvc2VPdGhlcnMpIHtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0aGlzLmdyb3VwcywgZnVuY3Rpb24oZ3JvdXApIHtcbiAgICAgICAgaWYgKGdyb3VwICE9PSBvcGVuR3JvdXApIHtcbiAgICAgICAgICBncm91cC5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFRoaXMgaXMgY2FsbGVkIGZyb20gdGhlIGFjY29yZGlvbi1ncm91cCBkaXJlY3RpdmUgdG8gYWRkIGl0c2VsZiB0byB0aGUgYWNjb3JkaW9uXG4gIHRoaXMuYWRkR3JvdXAgPSBmdW5jdGlvbihncm91cFNjb3BlKSB7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuZ3JvdXBzLnB1c2goZ3JvdXBTY29wZSk7XG5cbiAgICBncm91cFNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgdGhhdC5yZW1vdmVHcm91cChncm91cFNjb3BlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBhY2NvcmRpb24tZ3JvdXAgZGlyZWN0aXZlIHdoZW4gdG8gcmVtb3ZlIGl0c2VsZlxuICB0aGlzLnJlbW92ZUdyb3VwID0gZnVuY3Rpb24oZ3JvdXApIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmdyb3Vwcy5pbmRleE9mKGdyb3VwKTtcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICB0aGlzLmdyb3Vwcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfTtcblxufV0pXG5cbi8vIFRoZSBhY2NvcmRpb24gZGlyZWN0aXZlIHNpbXBseSBzZXRzIHVwIHRoZSBkaXJlY3RpdmUgY29udHJvbGxlclxuLy8gYW5kIGFkZHMgYW4gYWNjb3JkaW9uIENTUyBjbGFzcyB0byBpdHNlbGYgZWxlbWVudC5cbi5kaXJlY3RpdmUoJ2FjY29yZGlvbicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIGNvbnRyb2xsZXI6ICdBY2NvcmRpb25Db250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdhY2NvcmRpb24nLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgcmVwbGFjZTogZmFsc2UsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24uaHRtbCc7XG4gICAgfVxuICB9O1xufSlcblxuLy8gVGhlIGFjY29yZGlvbi1ncm91cCBkaXJlY3RpdmUgaW5kaWNhdGVzIGEgYmxvY2sgb2YgaHRtbCB0aGF0IHdpbGwgZXhwYW5kIGFuZCBjb2xsYXBzZSBpbiBhbiBhY2NvcmRpb25cbi5kaXJlY3RpdmUoJ2FjY29yZGlvbkdyb3VwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ15hY2NvcmRpb24nLCAgICAgICAgIC8vIFdlIG5lZWQgdGhpcyBkaXJlY3RpdmUgdG8gYmUgaW5zaWRlIGFuIGFjY29yZGlvblxuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsICAgICAgICAgICAgICAvLyBJdCB0cmFuc2NsdWRlcyB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSBpbnRvIHRoZSB0ZW1wbGF0ZVxuICAgIHJlcGxhY2U6IHRydWUsICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IGNvbnRhaW5pbmcgdGhlIGRpcmVjdGl2ZSB3aWxsIGJlIHJlcGxhY2VkIHdpdGggdGhlIHRlbXBsYXRlXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3RlbXBsYXRlL2FjY29yZGlvbi9hY2NvcmRpb24tZ3JvdXAuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgaGVhZGluZzogJ0AnLCAgICAgICAgICAgICAgIC8vIEludGVycG9sYXRlIHRoZSBoZWFkaW5nIGF0dHJpYnV0ZSBvbnRvIHRoaXMgc2NvcGVcbiAgICAgIGlzT3BlbjogJz0/JyxcbiAgICAgIGlzRGlzYWJsZWQ6ICc9PydcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5zZXRIZWFkaW5nID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB0aGlzLmhlYWRpbmcgPSBlbGVtZW50O1xuICAgICAgfTtcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgYWNjb3JkaW9uQ3RybCkge1xuICAgICAgYWNjb3JkaW9uQ3RybC5hZGRHcm91cChzY29wZSk7XG5cbiAgICAgIHNjb3BlLm9wZW5DbGFzcyA9IGF0dHJzLm9wZW5DbGFzcyB8fCAncGFuZWwtb3Blbic7XG4gICAgICBzY29wZS5wYW5lbENsYXNzID0gYXR0cnMucGFuZWxDbGFzcztcbiAgICAgIHNjb3BlLiR3YXRjaCgnaXNPcGVuJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgZWxlbWVudC50b2dnbGVDbGFzcyhzY29wZS5vcGVuQ2xhc3MsIHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgYWNjb3JkaW9uQ3RybC5jbG9zZU90aGVycyhzY29wZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBzY29wZS50b2dnbGVPcGVuID0gZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIGlmICghc2NvcGUuaXNEaXNhYmxlZCkge1xuICAgICAgICAgIGlmICghJGV2ZW50IHx8ICRldmVudC53aGljaCA9PT0gMzIpIHtcbiAgICAgICAgICAgIHNjb3BlLmlzT3BlbiA9ICFzY29wZS5pc09wZW47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn0pXG5cbi8vIFVzZSBhY2NvcmRpb24taGVhZGluZyBiZWxvdyBhbiBhY2NvcmRpb24tZ3JvdXAgdG8gcHJvdmlkZSBhIGhlYWRpbmcgY29udGFpbmluZyBIVE1MXG4vLyA8YWNjb3JkaW9uLWdyb3VwPlxuLy8gICA8YWNjb3JkaW9uLWhlYWRpbmc+SGVhZGluZyBjb250YWluaW5nIEhUTUwgLSA8aW1nIHNyYz1cIi4uLlwiPjwvYWNjb3JkaW9uLWhlYWRpbmc+XG4vLyA8L2FjY29yZGlvbi1ncm91cD5cbi5kaXJlY3RpdmUoJ2FjY29yZGlvbkhlYWRpbmcnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLCAgIC8vIEdyYWIgdGhlIGNvbnRlbnRzIHRvIGJlIHVzZWQgYXMgdGhlIGhlYWRpbmdcbiAgICB0ZW1wbGF0ZTogJycsICAgICAgIC8vIEluIGVmZmVjdCByZW1vdmUgdGhpcyBlbGVtZW50IVxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgcmVxdWlyZTogJ15hY2NvcmRpb25Hcm91cCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGFjY29yZGlvbkdyb3VwQ3RybCwgdHJhbnNjbHVkZSkge1xuICAgICAgLy8gUGFzcyB0aGUgaGVhZGluZyB0byB0aGUgYWNjb3JkaW9uLWdyb3VwIGNvbnRyb2xsZXJcbiAgICAgIC8vIHNvIHRoYXQgaXQgY2FuIGJlIHRyYW5zY2x1ZGVkIGludG8gdGhlIHJpZ2h0IHBsYWNlIGluIHRoZSB0ZW1wbGF0ZVxuICAgICAgLy8gW1RoZSBzZWNvbmQgcGFyYW1ldGVyIHRvIHRyYW5zY2x1ZGUgY2F1c2VzIHRoZSBlbGVtZW50cyB0byBiZSBjbG9uZWQgc28gdGhhdCB0aGV5IHdvcmsgaW4gbmctcmVwZWF0XVxuICAgICAgYWNjb3JkaW9uR3JvdXBDdHJsLnNldEhlYWRpbmcodHJhbnNjbHVkZShzY29wZSwgYW5ndWxhci5ub29wKSk7XG4gICAgfVxuICB9O1xufSlcblxuLy8gVXNlIGluIHRoZSBhY2NvcmRpb24tZ3JvdXAgdGVtcGxhdGUgdG8gaW5kaWNhdGUgd2hlcmUgeW91IHdhbnQgdGhlIGhlYWRpbmcgdG8gYmUgdHJhbnNjbHVkZWRcbi8vIFlvdSBtdXN0IHByb3ZpZGUgdGhlIHByb3BlcnR5IG9uIHRoZSBhY2NvcmRpb24tZ3JvdXAgY29udHJvbGxlciB0aGF0IHdpbGwgaG9sZCB0aGUgdHJhbnNjbHVkZWQgZWxlbWVudFxuLy8gPGRpdiBjbGFzcz1cImFjY29yZGlvbi1ncm91cFwiPlxuLy8gICA8ZGl2IGNsYXNzPVwiYWNjb3JkaW9uLWhlYWRpbmdcIiA+PGEgLi4uIGFjY29yZGlvbi10cmFuc2NsdWRlPVwiaGVhZGluZ1wiPi4uLjwvYT48L2Rpdj5cbi8vICAgLi4uXG4vLyA8L2Rpdj5cbi5kaXJlY3RpdmUoJ2FjY29yZGlvblRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnXmFjY29yZGlvbkdyb3VwJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikge1xuICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyByZXR1cm4gY29udHJvbGxlclthdHRyLmFjY29yZGlvblRyYW5zY2x1ZGVdOyB9LCBmdW5jdGlvbihoZWFkaW5nKSB7XG4gICAgICAgIGlmIChoZWFkaW5nKSB7XG4gICAgICAgICAgZWxlbWVudC5maW5kKCdzcGFuJykuaHRtbCgnJyk7XG4gICAgICAgICAgZWxlbWVudC5maW5kKCdzcGFuJykuYXBwZW5kKGhlYWRpbmcpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG47XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuYWxlcnQnLCBbXSlcblxuLmNvbnRyb2xsZXIoJ0FsZXJ0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzKSB7XG4gICRzY29wZS5jbG9zZWFibGUgPSAhISRhdHRycy5jbG9zZTtcbiAgdGhpcy5jbG9zZSA9ICRzY29wZS5jbG9zZTtcbn1dKVxuXG4uZGlyZWN0aXZlKCdhbGVydCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIGNvbnRyb2xsZXI6ICdBbGVydENvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2FsZXJ0JyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbCc7XG4gICAgfSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgc2NvcGU6IHtcbiAgICAgIHR5cGU6ICdAJyxcbiAgICAgIGNsb3NlOiAnJidcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCdkaXNtaXNzT25UaW1lb3V0JywgWyckdGltZW91dCcsIGZ1bmN0aW9uKCR0aW1lb3V0KSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ2FsZXJ0JyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGFsZXJ0Q3RybCkge1xuICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIGFsZXJ0Q3RybC5jbG9zZSgpO1xuICAgICAgfSwgcGFyc2VJbnQoYXR0cnMuZGlzbWlzc09uVGltZW91dCwgMTApKTtcbiAgICB9XG4gIH07XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuYmluZEh0bWwnLCBbXSlcblxuICAudmFsdWUoJyRiaW5kSHRtbFVuc2FmZVN1cHByZXNzRGVwcmVjYXRlZCcsIGZhbHNlKVxuXG4gIC5kaXJlY3RpdmUoJ2JpbmRIdG1sVW5zYWZlJywgWyckbG9nJywgJyRiaW5kSHRtbFVuc2FmZVN1cHByZXNzRGVwcmVjYXRlZCcsIGZ1bmN0aW9uICgkbG9nLCAkYmluZEh0bWxVbnNhZmVTdXBwcmVzc0RlcHJlY2F0ZWQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICBpZiAoISRiaW5kSHRtbFVuc2FmZVN1cHByZXNzRGVwcmVjYXRlZCkge1xuICAgICAgICAkbG9nLndhcm4oJ2JpbmRIdG1sVW5zYWZlIGlzIG5vdyBkZXByZWNhdGVkLiBVc2UgbmdCaW5kSHRtbCBpbnN0ZWFkJyk7XG4gICAgICB9XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCduZy1iaW5kaW5nJykuZGF0YSgnJGJpbmRpbmcnLCBhdHRyLmJpbmRIdG1sVW5zYWZlKTtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLmJpbmRIdG1sVW5zYWZlLCBmdW5jdGlvbiBiaW5kSHRtbFVuc2FmZVdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSB8fCAnJyk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XSk7XG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmJ1dHRvbnMnLCBbXSlcblxuLmNvbnN0YW50KCdidXR0b25Db25maWcnLCB7XG4gIGFjdGl2ZUNsYXNzOiAnYWN0aXZlJyxcbiAgdG9nZ2xlRXZlbnQ6ICdjbGljaydcbn0pXG5cbi5jb250cm9sbGVyKCdCdXR0b25zQ29udHJvbGxlcicsIFsnYnV0dG9uQ29uZmlnJywgZnVuY3Rpb24oYnV0dG9uQ29uZmlnKSB7XG4gIHRoaXMuYWN0aXZlQ2xhc3MgPSBidXR0b25Db25maWcuYWN0aXZlQ2xhc3MgfHwgJ2FjdGl2ZSc7XG4gIHRoaXMudG9nZ2xlRXZlbnQgPSBidXR0b25Db25maWcudG9nZ2xlRXZlbnQgfHwgJ2NsaWNrJztcbn1dKVxuXG4uZGlyZWN0aXZlKCdidG5SYWRpbycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsnYnRuUmFkaW8nLCAnbmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6ICdCdXR0b25zQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYnV0dG9ucycsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIGJ1dHRvbnNDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGVsZW1lbnQuZmluZCgnaW5wdXQnKS5jc3Moe2Rpc3BsYXk6ICdub25lJ30pO1xuXG4gICAgICAvL21vZGVsIC0+IFVJXG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQudG9nZ2xlQ2xhc3MoYnV0dG9uc0N0cmwuYWN0aXZlQ2xhc3MsIGFuZ3VsYXIuZXF1YWxzKG5nTW9kZWxDdHJsLiRtb2RlbFZhbHVlLCBzY29wZS4kZXZhbChhdHRycy5idG5SYWRpbykpKTtcbiAgICAgIH07XG5cbiAgICAgIC8vdWktPm1vZGVsXG4gICAgICBlbGVtZW50LmJpbmQoYnV0dG9uc0N0cmwudG9nZ2xlRXZlbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYXR0cnMuZGlzYWJsZWQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNBY3RpdmUgPSBlbGVtZW50Lmhhc0NsYXNzKGJ1dHRvbnNDdHJsLmFjdGl2ZUNsYXNzKTtcblxuICAgICAgICBpZiAoIWlzQWN0aXZlIHx8IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnVuY2hlY2thYmxlKSkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoaXNBY3RpdmUgPyBudWxsIDogc2NvcGUuJGV2YWwoYXR0cnMuYnRuUmFkaW8pKTtcbiAgICAgICAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgnYnRuQ2hlY2tib3gnLCBbJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRkb2N1bWVudCkge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6IFsnYnRuQ2hlY2tib3gnLCAnbmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6ICdCdXR0b25zQ29udHJvbGxlcicsXG4gICAgY29udHJvbGxlckFzOiAnYnV0dG9uJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgYnV0dG9uc0N0cmwgPSBjdHJsc1swXSwgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgZWxlbWVudC5maW5kKCdpbnB1dCcpLmNzcyh7ZGlzcGxheTogJ25vbmUnfSk7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFRydWVWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldENoZWNrYm94VmFsdWUoYXR0cnMuYnRuQ2hlY2tib3hUcnVlLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0RmFsc2VWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIGdldENoZWNrYm94VmFsdWUoYXR0cnMuYnRuQ2hlY2tib3hGYWxzZSwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRDaGVja2JveFZhbHVlKGF0dHJpYnV0ZVZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgdmFyIHZhbCA9IHNjb3BlLiRldmFsKGF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKHZhbCkgPyB2YWwgOiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIC8vbW9kZWwgLT4gVUlcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZWxlbWVudC50b2dnbGVDbGFzcyhidXR0b25zQ3RybC5hY3RpdmVDbGFzcywgYW5ndWxhci5lcXVhbHMobmdNb2RlbEN0cmwuJG1vZGVsVmFsdWUsIGdldFRydWVWYWx1ZSgpKSk7XG4gICAgICB9O1xuXG4gICAgICAvL3VpLT5tb2RlbFxuICAgICAgZWxlbWVudC5iaW5kKGJ1dHRvbnNDdHJsLnRvZ2dsZUV2ZW50LCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGF0dHJzLmRpc2FibGVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudC5oYXNDbGFzcyhidXR0b25zQ3RybC5hY3RpdmVDbGFzcykgPyBnZXRGYWxzZVZhbHVlKCkgOiBnZXRUcnVlVmFsdWUoKSk7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICAvL2FjY2Vzc2liaWxpdHlcbiAgICAgIGVsZW1lbnQub24oJ2tleXByZXNzJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoYXR0cnMuZGlzYWJsZWQgfHwgZS53aGljaCAhPT0gMzIgfHwgJGRvY3VtZW50WzBdLmFjdGl2ZUVsZW1lbnQgIT09IGVsZW1lbnRbMF0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShlbGVtZW50Lmhhc0NsYXNzKGJ1dHRvbnNDdHJsLmFjdGl2ZUNsYXNzKSA/IGdldEZhbHNlVmFsdWUoKSA6IGdldFRydWVWYWx1ZSgpKTtcbiAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV0pO1xuXG4vKipcbiogQG5nZG9jIG92ZXJ2aWV3XG4qIEBuYW1lIHVpLmJvb3RzdHJhcC5jYXJvdXNlbFxuKlxuKiBAZGVzY3JpcHRpb25cbiogQW5ndWxhckpTIHZlcnNpb24gb2YgYW4gaW1hZ2UgY2Fyb3VzZWwuXG4qXG4qL1xuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5jYXJvdXNlbCcsIFtdKVxuLmNvbnRyb2xsZXIoJ0Nhcm91c2VsQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRlbGVtZW50JywgJyRpbnRlcnZhbCcsICckYW5pbWF0ZScsIGZ1bmN0aW9uICgkc2NvcGUsICRlbGVtZW50LCAkaW50ZXJ2YWwsICRhbmltYXRlKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICBzbGlkZXMgPSBzZWxmLnNsaWRlcyA9ICRzY29wZS5zbGlkZXMgPSBbXSxcbiAgICBORVdfQU5JTUFURSA9IGFuZ3VsYXIudmVyc2lvbi5taW5vciA+PSA0LFxuICAgIE5PX1RSQU5TSVRJT04gPSAndWliLW5vVHJhbnNpdGlvbicsXG4gICAgU0xJREVfRElSRUNUSU9OID0gJ3VpYi1zbGlkZURpcmVjdGlvbicsXG4gICAgY3VycmVudEluZGV4ID0gLTEsXG4gICAgY3VycmVudEludGVydmFsLCBpc1BsYXlpbmc7XG4gIHNlbGYuY3VycmVudFNsaWRlID0gbnVsbDtcblxuICB2YXIgZGVzdHJveWVkID0gZmFsc2U7XG4gIC8qIGRpcmVjdGlvbjogXCJwcmV2XCIgb3IgXCJuZXh0XCIgKi9cbiAgc2VsZi5zZWxlY3QgPSAkc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24obmV4dFNsaWRlLCBkaXJlY3Rpb24pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gJHNjb3BlLmluZGV4T2ZTbGlkZShuZXh0U2xpZGUpO1xuICAgIC8vRGVjaWRlIGRpcmVjdGlvbiBpZiBpdCdzIG5vdCBnaXZlblxuICAgIGlmIChkaXJlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZGlyZWN0aW9uID0gbmV4dEluZGV4ID4gc2VsZi5nZXRDdXJyZW50SW5kZXgoKSA/ICduZXh0JyA6ICdwcmV2JztcbiAgICB9XG4gICAgLy9QcmV2ZW50IHRoaXMgdXNlci10cmlnZ2VyZWQgdHJhbnNpdGlvbiBmcm9tIG9jY3VycmluZyBpZiB0aGVyZSBpcyBhbHJlYWR5IG9uZSBpbiBwcm9ncmVzc1xuICAgIGlmIChuZXh0U2xpZGUgJiYgbmV4dFNsaWRlICE9PSBzZWxmLmN1cnJlbnRTbGlkZSAmJiAhJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbikge1xuICAgICAgZ29OZXh0KG5leHRTbGlkZSwgbmV4dEluZGV4LCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBnb05leHQoc2xpZGUsIGluZGV4LCBkaXJlY3Rpb24pIHtcbiAgICAvLyBTY29wZSBoYXMgYmVlbiBkZXN0cm95ZWQsIHN0b3AgaGVyZS5cbiAgICBpZiAoZGVzdHJveWVkKSB7IHJldHVybjsgfVxuXG4gICAgYW5ndWxhci5leHRlbmQoc2xpZGUsIHtkaXJlY3Rpb246IGRpcmVjdGlvbiwgYWN0aXZlOiB0cnVlfSk7XG4gICAgYW5ndWxhci5leHRlbmQoc2VsZi5jdXJyZW50U2xpZGUgfHwge30sIHtkaXJlY3Rpb246IGRpcmVjdGlvbiwgYWN0aXZlOiBmYWxzZX0pO1xuICAgIGlmICgkYW5pbWF0ZS5lbmFibGVkKCkgJiYgISRzY29wZS5ub1RyYW5zaXRpb24gJiYgISRzY29wZS4kY3VycmVudFRyYW5zaXRpb24gJiZcbiAgICAgIHNsaWRlLiRlbGVtZW50ICYmIHNlbGYuc2xpZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgIHNsaWRlLiRlbGVtZW50LmRhdGEoU0xJREVfRElSRUNUSU9OLCBzbGlkZS5kaXJlY3Rpb24pO1xuICAgICAgaWYgKHNlbGYuY3VycmVudFNsaWRlICYmIHNlbGYuY3VycmVudFNsaWRlLiRlbGVtZW50KSB7XG4gICAgICAgIHNlbGYuY3VycmVudFNsaWRlLiRlbGVtZW50LmRhdGEoU0xJREVfRElSRUNUSU9OLCBzbGlkZS5kaXJlY3Rpb24pO1xuICAgICAgfVxuXG4gICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gdHJ1ZTtcbiAgICAgIGlmIChORVdfQU5JTUFURSkge1xuICAgICAgICAkYW5pbWF0ZS5vbignYWRkQ2xhc3MnLCBzbGlkZS4kZWxlbWVudCwgZnVuY3Rpb24gKGVsZW1lbnQsIHBoYXNlKSB7XG4gICAgICAgICAgaWYgKHBoYXNlID09PSAnY2xvc2UnKSB7XG4gICAgICAgICAgICAkc2NvcGUuJGN1cnJlbnRUcmFuc2l0aW9uID0gbnVsbDtcbiAgICAgICAgICAgICRhbmltYXRlLm9mZignYWRkQ2xhc3MnLCBlbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGUuJGVsZW1lbnQub25lKCckYW5pbWF0ZTpjbG9zZScsIGZ1bmN0aW9uIGNsb3NlRm4oKSB7XG4gICAgICAgICAgJHNjb3BlLiRjdXJyZW50VHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNlbGYuY3VycmVudFNsaWRlID0gc2xpZGU7XG4gICAgY3VycmVudEluZGV4ID0gaW5kZXg7XG5cbiAgICAvL2V2ZXJ5IHRpbWUgeW91IGNoYW5nZSBzbGlkZXMsIHJlc2V0IHRoZSB0aW1lclxuICAgIHJlc3RhcnRUaW1lcigpO1xuICB9XG5cbiAgJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgfSk7XG5cbiAgZnVuY3Rpb24gZ2V0U2xpZGVCeUluZGV4KGluZGV4KSB7XG4gICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoc2xpZGVzW2luZGV4XS5pbmRleCkpIHtcbiAgICAgIHJldHVybiBzbGlkZXNbaW5kZXhdO1xuICAgIH1cbiAgICB2YXIgaSwgbGVuID0gc2xpZGVzLmxlbmd0aDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldLmluZGV4ID09IGluZGV4KSB7XG4gICAgICAgIHJldHVybiBzbGlkZXNbaV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc2VsZi5nZXRDdXJyZW50SW5kZXggPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5jdXJyZW50U2xpZGUgJiYgYW5ndWxhci5pc0RlZmluZWQoc2VsZi5jdXJyZW50U2xpZGUuaW5kZXgpKSB7XG4gICAgICByZXR1cm4gK3NlbGYuY3VycmVudFNsaWRlLmluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gY3VycmVudEluZGV4O1xuICB9O1xuXG4gIC8qIEFsbG93IG91dHNpZGUgcGVvcGxlIHRvIGNhbGwgaW5kZXhPZiBvbiBzbGlkZXMgYXJyYXkgKi9cbiAgJHNjb3BlLmluZGV4T2ZTbGlkZSA9IGZ1bmN0aW9uKHNsaWRlKSB7XG4gICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKHNsaWRlLmluZGV4KSA/ICtzbGlkZS5pbmRleCA6IHNsaWRlcy5pbmRleE9mKHNsaWRlKTtcbiAgfTtcblxuICAkc2NvcGUubmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuZXdJbmRleCA9IChzZWxmLmdldEN1cnJlbnRJbmRleCgpICsgMSkgJSBzbGlkZXMubGVuZ3RoO1xuXG4gICAgaWYgKG5ld0luZGV4ID09PSAwICYmICRzY29wZS5ub1dyYXAoKSkge1xuICAgICAgJHNjb3BlLnBhdXNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc2VsZWN0KGdldFNsaWRlQnlJbmRleChuZXdJbmRleCksICduZXh0Jyk7XG4gIH07XG5cbiAgJHNjb3BlLnByZXYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbmV3SW5kZXggPSBzZWxmLmdldEN1cnJlbnRJbmRleCgpIC0gMSA8IDAgPyBzbGlkZXMubGVuZ3RoIC0gMSA6IHNlbGYuZ2V0Q3VycmVudEluZGV4KCkgLSAxO1xuXG4gICAgaWYgKCRzY29wZS5ub1dyYXAoKSAmJiBuZXdJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpe1xuICAgICAgJHNjb3BlLnBhdXNlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlbGYuc2VsZWN0KGdldFNsaWRlQnlJbmRleChuZXdJbmRleCksICdwcmV2Jyk7XG4gIH07XG5cbiAgJHNjb3BlLmlzQWN0aXZlID0gZnVuY3Rpb24oc2xpZGUpIHtcbiAgICAgcmV0dXJuIHNlbGYuY3VycmVudFNsaWRlID09PSBzbGlkZTtcbiAgfTtcblxuICAkc2NvcGUuJHdhdGNoKCdpbnRlcnZhbCcsIHJlc3RhcnRUaW1lcik7XG4gICRzY29wZS4kb24oJyRkZXN0cm95JywgcmVzZXRUaW1lcik7XG5cbiAgZnVuY3Rpb24gcmVzdGFydFRpbWVyKCkge1xuICAgIHJlc2V0VGltZXIoKTtcbiAgICB2YXIgaW50ZXJ2YWwgPSArJHNjb3BlLmludGVydmFsO1xuICAgIGlmICghaXNOYU4oaW50ZXJ2YWwpICYmIGludGVydmFsID4gMCkge1xuICAgICAgY3VycmVudEludGVydmFsID0gJGludGVydmFsKHRpbWVyRm4sIGludGVydmFsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRpbWVyKCkge1xuICAgIGlmIChjdXJyZW50SW50ZXJ2YWwpIHtcbiAgICAgICRpbnRlcnZhbC5jYW5jZWwoY3VycmVudEludGVydmFsKTtcbiAgICAgIGN1cnJlbnRJbnRlcnZhbCA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJGbigpIHtcbiAgICB2YXIgaW50ZXJ2YWwgPSArJHNjb3BlLmludGVydmFsO1xuICAgIGlmIChpc1BsYXlpbmcgJiYgIWlzTmFOKGludGVydmFsKSAmJiBpbnRlcnZhbCA+IDAgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgJHNjb3BlLm5leHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHNjb3BlLnBhdXNlKCk7XG4gICAgfVxuICB9XG5cbiAgJHNjb3BlLnBsYXkgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWlzUGxheWluZykge1xuICAgICAgaXNQbGF5aW5nID0gdHJ1ZTtcbiAgICAgIHJlc3RhcnRUaW1lcigpO1xuICAgIH1cbiAgfTtcbiAgJHNjb3BlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9QYXVzZSkge1xuICAgICAgaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICByZXNldFRpbWVyKCk7XG4gICAgfVxuICB9O1xuXG4gIHNlbGYuYWRkU2xpZGUgPSBmdW5jdGlvbihzbGlkZSwgZWxlbWVudCkge1xuICAgIHNsaWRlLiRlbGVtZW50ID0gZWxlbWVudDtcbiAgICBzbGlkZXMucHVzaChzbGlkZSk7XG4gICAgLy9pZiB0aGlzIGlzIHRoZSBmaXJzdCBzbGlkZSBvciB0aGUgc2xpZGUgaXMgc2V0IHRvIGFjdGl2ZSwgc2VsZWN0IGl0XG4gICAgaWYoc2xpZGVzLmxlbmd0aCA9PT0gMSB8fCBzbGlkZS5hY3RpdmUpIHtcbiAgICAgIHNlbGYuc2VsZWN0KHNsaWRlc1tzbGlkZXMubGVuZ3RoLTFdKTtcbiAgICAgIGlmIChzbGlkZXMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgJHNjb3BlLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGUuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHNlbGYucmVtb3ZlU2xpZGUgPSBmdW5jdGlvbihzbGlkZSkge1xuICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChzbGlkZS5pbmRleCkpIHtcbiAgICAgIHNsaWRlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuICthLmluZGV4ID4gK2IuaW5kZXg7XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy9nZXQgdGhlIGluZGV4IG9mIHRoZSBzbGlkZSBpbnNpZGUgdGhlIGNhcm91c2VsXG4gICAgdmFyIGluZGV4ID0gc2xpZGVzLmluZGV4T2Yoc2xpZGUpO1xuICAgIHNsaWRlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIGlmIChzbGlkZXMubGVuZ3RoID4gMCAmJiBzbGlkZS5hY3RpdmUpIHtcbiAgICAgIGlmIChpbmRleCA+PSBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuc2VsZWN0KHNsaWRlc1tpbmRleC0xXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLnNlbGVjdChzbGlkZXNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRJbmRleCA+IGluZGV4KSB7XG4gICAgICBjdXJyZW50SW5kZXgtLTtcbiAgICB9XG4gICAgXG4gICAgLy9jbGVhbiB0aGUgY3VycmVudFNsaWRlIHdoZW4gbm8gbW9yZSBzbGlkZVxuICAgIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBzZWxmLmN1cnJlbnRTbGlkZSA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS4kd2F0Y2goJ25vVHJhbnNpdGlvbicsIGZ1bmN0aW9uKG5vVHJhbnNpdGlvbikge1xuICAgICRlbGVtZW50LmRhdGEoTk9fVFJBTlNJVElPTiwgbm9UcmFuc2l0aW9uKTtcbiAgfSk7XG5cbn1dKVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHVpLmJvb3RzdHJhcC5jYXJvdXNlbC5kaXJlY3RpdmU6Y2Fyb3VzZWxcbiAqIEByZXN0cmljdCBFQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ2Fyb3VzZWwgaXMgdGhlIG91dGVyIGNvbnRhaW5lciBmb3IgYSBzZXQgb2YgaW1hZ2UgJ3NsaWRlcycgdG8gc2hvd2Nhc2UuXG4gKlxuICogQHBhcmFtIHtudW1iZXI9fSBpbnRlcnZhbCBUaGUgdGltZSwgaW4gbWlsbGlzZWNvbmRzLCB0aGF0IGl0IHdpbGwgdGFrZSB0aGUgY2Fyb3VzZWwgdG8gZ28gdG8gdGhlIG5leHQgc2xpZGUuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBub1RyYW5zaXRpb24gV2hldGhlciB0byBkaXNhYmxlIHRyYW5zaXRpb25zIG9uIHRoZSBjYXJvdXNlbC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG5vUGF1c2UgV2hldGhlciB0byBkaXNhYmxlIHBhdXNpbmcgb24gdGhlIGNhcm91c2VsIChieSBkZWZhdWx0LCB0aGUgY2Fyb3VzZWwgaW50ZXJ2YWwgcGF1c2VzIG9uIGhvdmVyKS5cbiAqXG4gKiBAZXhhbXBsZVxuPGV4YW1wbGUgbW9kdWxlPVwidWkuYm9vdHN0cmFwXCI+XG4gIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPGNhcm91c2VsPlxuICAgICAgPHNsaWRlPlxuICAgICAgICA8aW1nIHNyYz1cImh0dHA6Ly9wbGFjZWtpdHRlbi5jb20vMTUwLzE1MFwiIHN0eWxlPVwibWFyZ2luOmF1dG87XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJvdXNlbC1jYXB0aW9uXCI+XG4gICAgICAgICAgPHA+QmVhdXRpZnVsITwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L3NsaWRlPlxuICAgICAgPHNsaWRlPlxuICAgICAgICA8aW1nIHNyYz1cImh0dHA6Ly9wbGFjZWtpdHRlbi5jb20vMTAwLzE1MFwiIHN0eWxlPVwibWFyZ2luOmF1dG87XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJvdXNlbC1jYXB0aW9uXCI+XG4gICAgICAgICAgPHA+RCdhd3chPC9wPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvc2xpZGU+XG4gICAgPC9jYXJvdXNlbD5cbiAgPC9maWxlPlxuICA8ZmlsZSBuYW1lPVwiZGVtby5jc3NcIj5cbiAgICAuY2Fyb3VzZWwtaW5kaWNhdG9ycyB7XG4gICAgICB0b3A6IGF1dG87XG4gICAgICBib3R0b206IDE1cHg7XG4gICAgfVxuICA8L2ZpbGU+XG48L2V4YW1wbGU+XG4gKi9cbi5kaXJlY3RpdmUoJ2Nhcm91c2VsJywgW2Z1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnQ2Fyb3VzZWxDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdjYXJvdXNlbCcsXG4gICAgcmVxdWlyZTogJ2Nhcm91c2VsJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgaW50ZXJ2YWw6ICc9JyxcbiAgICAgIG5vVHJhbnNpdGlvbjogJz0nLFxuICAgICAgbm9QYXVzZTogJz0nLFxuICAgICAgbm9XcmFwOiAnJidcbiAgICB9XG4gIH07XG59XSlcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSB1aS5ib290c3RyYXAuY2Fyb3VzZWwuZGlyZWN0aXZlOnNsaWRlXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBzbGlkZSBpbnNpZGUgYSB7QGxpbmsgdWkuYm9vdHN0cmFwLmNhcm91c2VsLmRpcmVjdGl2ZTpjYXJvdXNlbCBjYXJvdXNlbH0uICBNdXN0IGJlIHBsYWNlZCBhcyBhIGNoaWxkIG9mIGEgY2Fyb3VzZWwgZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBhY3RpdmUgTW9kZWwgYmluZGluZywgd2hldGhlciBvciBub3QgdGhpcyBzbGlkZSBpcyBjdXJyZW50bHkgYWN0aXZlLlxuICogQHBhcmFtIHtudW1iZXI9fSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIHNsaWRlLiBUaGUgc2xpZGVzIHdpbGwgYmUgc29ydGVkIGJ5IHRoaXMgcGFyYW1ldGVyLlxuICpcbiAqIEBleGFtcGxlXG48ZXhhbXBsZSBtb2R1bGU9XCJ1aS5ib290c3RyYXBcIj5cbiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbjxkaXYgbmctY29udHJvbGxlcj1cIkNhcm91c2VsRGVtb0N0cmxcIj5cbiAgPGNhcm91c2VsPlxuICAgIDxzbGlkZSBuZy1yZXBlYXQ9XCJzbGlkZSBpbiBzbGlkZXNcIiBhY3RpdmU9XCJzbGlkZS5hY3RpdmVcIiBpbmRleD1cIiRpbmRleFwiPlxuICAgICAgPGltZyBuZy1zcmM9XCJ7e3NsaWRlLmltYWdlfX1cIiBzdHlsZT1cIm1hcmdpbjphdXRvO1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsLWNhcHRpb25cIj5cbiAgICAgICAgPGg0PlNsaWRlIHt7JGluZGV4fX08L2g0PlxuICAgICAgICA8cD57e3NsaWRlLnRleHR9fTwvcD5cbiAgICAgIDwvZGl2PlxuICAgIDwvc2xpZGU+XG4gIDwvY2Fyb3VzZWw+XG4gIEludGVydmFsLCBpbiBtaWxsaXNlY29uZHM6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJteUludGVydmFsXCI+XG4gIDxiciAvPkVudGVyIGEgbmVnYXRpdmUgbnVtYmVyIHRvIHN0b3AgdGhlIGludGVydmFsLlxuPC9kaXY+XG4gIDwvZmlsZT5cbiAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuZnVuY3Rpb24gQ2Fyb3VzZWxEZW1vQ3RybCgkc2NvcGUpIHtcbiAgJHNjb3BlLm15SW50ZXJ2YWwgPSA1MDAwO1xufVxuICA8L2ZpbGU+XG4gIDxmaWxlIG5hbWU9XCJkZW1vLmNzc1wiPlxuICAgIC5jYXJvdXNlbC1pbmRpY2F0b3JzIHtcbiAgICAgIHRvcDogYXV0bztcbiAgICAgIGJvdHRvbTogMTVweDtcbiAgICB9XG4gIDwvZmlsZT5cbjwvZXhhbXBsZT5cbiovXG5cbi5kaXJlY3RpdmUoJ3NsaWRlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJ15jYXJvdXNlbCcsXG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd0ZW1wbGF0ZS9jYXJvdXNlbC9zbGlkZS5odG1sJztcbiAgICB9LFxuICAgIHNjb3BlOiB7XG4gICAgICBhY3RpdmU6ICc9PycsXG4gICAgICBhY3R1YWw6ICc9PycsXG4gICAgICBpbmRleDogJz0/J1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY2Fyb3VzZWxDdHJsKSB7XG4gICAgICBjYXJvdXNlbEN0cmwuYWRkU2xpZGUoc2NvcGUsIGVsZW1lbnQpO1xuICAgICAgLy93aGVuIHRoZSBzY29wZSBpcyBkZXN0cm95ZWQgdGhlbiByZW1vdmUgdGhlIHNsaWRlIGZyb20gdGhlIGN1cnJlbnQgc2xpZGVzIGFycmF5XG4gICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGNhcm91c2VsQ3RybC5yZW1vdmVTbGlkZShzY29wZSk7XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJHdhdGNoKCdhY3RpdmUnLCBmdW5jdGlvbihhY3RpdmUpIHtcbiAgICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgIGNhcm91c2VsQ3RybC5zZWxlY3Qoc2NvcGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KVxuXG4uYW5pbWF0aW9uKCcuaXRlbScsIFtcbiAgICAgICAgICckaW5qZWN0b3InLCAnJGFuaW1hdGUnLFxuZnVuY3Rpb24gKCRpbmplY3RvciwgJGFuaW1hdGUpIHtcbiAgdmFyIE5PX1RSQU5TSVRJT04gPSAndWliLW5vVHJhbnNpdGlvbicsXG4gICAgU0xJREVfRElSRUNUSU9OID0gJ3VpYi1zbGlkZURpcmVjdGlvbicsXG4gICAgJGFuaW1hdGVDc3MgPSBudWxsO1xuXG4gIGlmICgkaW5qZWN0b3IuaGFzKCckYW5pbWF0ZUNzcycpKSB7XG4gICAgJGFuaW1hdGVDc3MgPSAkaW5qZWN0b3IuZ2V0KCckYW5pbWF0ZUNzcycpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lLCBjYWxsYmFjaykge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiZWZvcmVBZGRDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSwgZG9uZSkge1xuICAgICAgLy8gRHVlIHRvIHRyYW5zY2x1c2lvbiwgbm9UcmFuc2l0aW9uIHByb3BlcnR5IGlzIG9uIHBhcmVudCdzIHNjb3BlXG4gICAgICBpZiAoY2xhc3NOYW1lID09ICdhY3RpdmUnICYmIGVsZW1lbnQucGFyZW50KCkgJiZcbiAgICAgICAgICAhZWxlbWVudC5wYXJlbnQoKS5kYXRhKE5PX1RSQU5TSVRJT04pKSB7XG4gICAgICAgIHZhciBzdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBlbGVtZW50LmRhdGEoU0xJREVfRElSRUNUSU9OKTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbkNsYXNzID0gZGlyZWN0aW9uID09ICduZXh0JyA/ICdsZWZ0JyA6ICdyaWdodCc7XG4gICAgICAgIHZhciByZW1vdmVDbGFzc0ZuID0gcmVtb3ZlQ2xhc3MuYmluZCh0aGlzLCBlbGVtZW50LFxuICAgICAgICAgIGRpcmVjdGlvbkNsYXNzICsgJyAnICsgZGlyZWN0aW9uLCBkb25lKTtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhkaXJlY3Rpb24pO1xuXG4gICAgICAgIGlmICgkYW5pbWF0ZUNzcykge1xuICAgICAgICAgICRhbmltYXRlQ3NzKGVsZW1lbnQsIHthZGRDbGFzczogZGlyZWN0aW9uQ2xhc3N9KVxuICAgICAgICAgICAgLnN0YXJ0KClcbiAgICAgICAgICAgIC5kb25lKHJlbW92ZUNsYXNzRm4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRhbmltYXRlLmFkZENsYXNzKGVsZW1lbnQsIGRpcmVjdGlvbkNsYXNzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc3RvcHBlZCkge1xuICAgICAgICAgICAgICByZW1vdmVDbGFzc0ZuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0b3BwZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgZG9uZSgpO1xuICAgIH0sXG4gICAgYmVmb3JlUmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRvbmUpIHtcbiAgICAgIC8vIER1ZSB0byB0cmFuc2NsdXNpb24sIG5vVHJhbnNpdGlvbiBwcm9wZXJ0eSBpcyBvbiBwYXJlbnQncyBzY29wZVxuICAgICAgaWYgKGNsYXNzTmFtZSA9PT0gJ2FjdGl2ZScgJiYgZWxlbWVudC5wYXJlbnQoKSAmJlxuICAgICAgICAgICFlbGVtZW50LnBhcmVudCgpLmRhdGEoTk9fVFJBTlNJVElPTikpIHtcbiAgICAgICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGVsZW1lbnQuZGF0YShTTElERV9ESVJFQ1RJT04pO1xuICAgICAgICB2YXIgZGlyZWN0aW9uQ2xhc3MgPSBkaXJlY3Rpb24gPT0gJ25leHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcbiAgICAgICAgdmFyIHJlbW92ZUNsYXNzRm4gPSByZW1vdmVDbGFzcy5iaW5kKHRoaXMsIGVsZW1lbnQsIGRpcmVjdGlvbkNsYXNzLCBkb25lKTtcblxuICAgICAgICBpZiAoJGFuaW1hdGVDc3MpIHtcbiAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7YWRkQ2xhc3M6IGRpcmVjdGlvbkNsYXNzfSlcbiAgICAgICAgICAgIC5zdGFydCgpXG4gICAgICAgICAgICAuZG9uZShyZW1vdmVDbGFzc0ZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBkaXJlY3Rpb25DbGFzcykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXN0b3BwZWQpIHtcbiAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3NGbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgc3RvcHBlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBkb25lKCk7XG4gICAgfVxuICB9O1xuXG59XSlcblxuXG47XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZGF0ZXBhcnNlcicsIFtdKVxuXG4uc2VydmljZSgnZGF0ZVBhcnNlcicsIFsnJGxvZycsICckbG9jYWxlJywgJ29yZGVyQnlGaWx0ZXInLCBmdW5jdGlvbigkbG9nLCAkbG9jYWxlLCBvcmRlckJ5RmlsdGVyKSB7XG4gIC8vIFB1bGxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYm9zdG9jay9kMy9ibG9iL21hc3Rlci9zcmMvZm9ybWF0L3JlcXVvdGUuanNcbiAgdmFyIFNQRUNJQUxfQ0hBUkFDVEVSU19SRUdFWFAgPSAvW1xcXFxcXF5cXCRcXCpcXCtcXD9cXHxcXFtcXF1cXChcXClcXC5cXHtcXH1dL2c7XG5cbiAgdGhpcy5wYXJzZXJzID0ge307XG5cbiAgdmFyIGZvcm1hdENvZGVUb1JlZ2V4ID0ge1xuICAgICd5eXl5Jzoge1xuICAgICAgcmVnZXg6ICdcXFxcZHs0fScsXG4gICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy55ZWFyID0gK3ZhbHVlOyB9XG4gICAgfSxcbiAgICAneXknOiB7XG4gICAgICByZWdleDogJ1xcXFxkezJ9JyxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLnllYXIgPSArdmFsdWUgKyAyMDAwOyB9XG4gICAgfSxcbiAgICAneSc6IHtcbiAgICAgIHJlZ2V4OiAnXFxcXGR7MSw0fScsXG4gICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy55ZWFyID0gK3ZhbHVlOyB9XG4gICAgfSxcbiAgICAnTU1NTSc6IHtcbiAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuTU9OVEguam9pbignfCcpLFxuICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuTU9OVEguaW5kZXhPZih2YWx1ZSk7IH1cbiAgICB9LFxuICAgICdNTU0nOiB7XG4gICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUTU9OVEguam9pbignfCcpLFxuICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMubW9udGggPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuU0hPUlRNT05USC5pbmRleE9mKHZhbHVlKTsgfVxuICAgIH0sXG4gICAgJ01NJzoge1xuICAgICAgcmVnZXg6ICcwWzEtOV18MVswLTJdJyxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gdmFsdWUgLSAxOyB9XG4gICAgfSxcbiAgICAnTSc6IHtcbiAgICAgIHJlZ2V4OiAnWzEtOV18MVswLTJdJyxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1vbnRoID0gdmFsdWUgLSAxOyB9XG4gICAgfSxcbiAgICAnZGQnOiB7XG4gICAgICByZWdleDogJ1swLTJdWzAtOV17MX18M1swLTFdezF9JyxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmRhdGUgPSArdmFsdWU7IH1cbiAgICB9LFxuICAgICdkJzoge1xuICAgICAgcmVnZXg6ICdbMS0yXT9bMC05XXsxfXwzWzAtMV17MX0nLFxuICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuZGF0ZSA9ICt2YWx1ZTsgfVxuICAgIH0sXG4gICAgJ0VFRUUnOiB7XG4gICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkRBWS5qb2luKCd8JylcbiAgICB9LFxuICAgICdFRUUnOiB7XG4gICAgICByZWdleDogJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLlNIT1JUREFZLmpvaW4oJ3wnKVxuICAgIH0sXG4gICAgJ0hIJzoge1xuICAgICAgcmVnZXg6ICcoPzowfDEpWzAtOV18MlswLTNdJyxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLmhvdXJzID0gK3ZhbHVlOyB9XG4gICAgfSxcbiAgICAnaGgnOiB7XG4gICAgICByZWdleDogJzBbMC05XXwxWzAtMl0nLFxuICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7IHRoaXMuaG91cnMgPSArdmFsdWU7IH1cbiAgICB9LFxuICAgICdIJzoge1xuICAgICAgcmVnZXg6ICcxP1swLTldfDJbMC0zXScsXG4gICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5ob3VycyA9ICt2YWx1ZTsgfVxuICAgIH0sXG4gICAgJ2gnOiB7XG4gICAgICByZWdleDogJ1swLTldfDFbMC0yXScsXG4gICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5ob3VycyA9ICt2YWx1ZTsgfVxuICAgIH0sXG4gICAgJ21tJzoge1xuICAgICAgcmVnZXg6ICdbMC01XVswLTldJyxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1pbnV0ZXMgPSArdmFsdWU7IH1cbiAgICB9LFxuICAgICdtJzoge1xuICAgICAgcmVnZXg6ICdbMC05XXxbMS01XVswLTldJyxcbiAgICAgIGFwcGx5OiBmdW5jdGlvbih2YWx1ZSkgeyB0aGlzLm1pbnV0ZXMgPSArdmFsdWU7IH1cbiAgICB9LFxuICAgICdzc3MnOiB7XG4gICAgICByZWdleDogJ1swLTldWzAtOV1bMC05XScsXG4gICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5taWxsaXNlY29uZHMgPSArdmFsdWU7IH1cbiAgICB9LFxuICAgICdzcyc6IHtcbiAgICAgIHJlZ2V4OiAnWzAtNV1bMC05XScsXG4gICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5zZWNvbmRzID0gK3ZhbHVlOyB9XG4gICAgfSxcbiAgICAncyc6IHtcbiAgICAgIHJlZ2V4OiAnWzAtOV18WzEtNV1bMC05XScsXG4gICAgICBhcHBseTogZnVuY3Rpb24odmFsdWUpIHsgdGhpcy5zZWNvbmRzID0gK3ZhbHVlOyB9XG4gICAgfSxcbiAgICAnYSc6IHtcbiAgICAgIHJlZ2V4OiAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMuQU1QTVMuam9pbignfCcpLFxuICAgICAgYXBwbHk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmhvdXJzID09PSAxMikge1xuICAgICAgICAgIHRoaXMuaG91cnMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSAnUE0nKSB7XG4gICAgICAgICAgdGhpcy5ob3VycyArPSAxMjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVQYXJzZXIoZm9ybWF0KSB7XG4gICAgdmFyIG1hcCA9IFtdLCByZWdleCA9IGZvcm1hdC5zcGxpdCgnJyk7XG5cbiAgICBhbmd1bGFyLmZvckVhY2goZm9ybWF0Q29kZVRvUmVnZXgsIGZ1bmN0aW9uKGRhdGEsIGNvZGUpIHtcbiAgICAgIHZhciBpbmRleCA9IGZvcm1hdC5pbmRleE9mKGNvZGUpO1xuXG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBmb3JtYXQgPSBmb3JtYXQuc3BsaXQoJycpO1xuXG4gICAgICAgIHJlZ2V4W2luZGV4XSA9ICcoJyArIGRhdGEucmVnZXggKyAnKSc7XG4gICAgICAgIGZvcm1hdFtpbmRleF0gPSAnJCc7IC8vIEN1c3RvbSBzeW1ib2wgdG8gZGVmaW5lIGNvbnN1bWVkIHBhcnQgb2YgZm9ybWF0XG4gICAgICAgIGZvciAodmFyIGkgPSBpbmRleCArIDEsIG4gPSBpbmRleCArIGNvZGUubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcmVnZXhbaV0gPSAnJztcbiAgICAgICAgICBmb3JtYXRbaV0gPSAnJCc7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gZm9ybWF0LmpvaW4oJycpO1xuXG4gICAgICAgIG1hcC5wdXNoKHsgaW5kZXg6IGluZGV4LCBhcHBseTogZGF0YS5hcHBseSB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICByZWdleDogbmV3IFJlZ0V4cCgnXicgKyByZWdleC5qb2luKCcnKSArICckJyksXG4gICAgICBtYXA6IG9yZGVyQnlGaWx0ZXIobWFwLCAnaW5kZXgnKVxuICAgIH07XG4gIH1cblxuICB0aGlzLnBhcnNlID0gZnVuY3Rpb24oaW5wdXQsIGZvcm1hdCwgYmFzZURhdGUpIHtcbiAgICBpZiAoIWFuZ3VsYXIuaXNTdHJpbmcoaW5wdXQpIHx8ICFmb3JtYXQpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG5cbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UoU1BFQ0lBTF9DSEFSQUNURVJTX1JFR0VYUCwgJ1xcXFwkJicpO1xuXG4gICAgaWYgKCF0aGlzLnBhcnNlcnNbZm9ybWF0XSkge1xuICAgICAgdGhpcy5wYXJzZXJzW2Zvcm1hdF0gPSBjcmVhdGVQYXJzZXIoZm9ybWF0KTtcbiAgICB9XG5cbiAgICB2YXIgcGFyc2VyID0gdGhpcy5wYXJzZXJzW2Zvcm1hdF0sXG4gICAgICAgIHJlZ2V4ID0gcGFyc2VyLnJlZ2V4LFxuICAgICAgICBtYXAgPSBwYXJzZXIubWFwLFxuICAgICAgICByZXN1bHRzID0gaW5wdXQubWF0Y2gocmVnZXgpO1xuXG4gICAgaWYgKHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGgpIHtcbiAgICAgIHZhciBmaWVsZHMsIGR0O1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEYXRlKGJhc2VEYXRlKSAmJiAhaXNOYU4oYmFzZURhdGUuZ2V0VGltZSgpKSkge1xuICAgICAgICBmaWVsZHMgPSB7XG4gICAgICAgICAgeWVhcjogYmFzZURhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICBtb250aDogYmFzZURhdGUuZ2V0TW9udGgoKSxcbiAgICAgICAgICBkYXRlOiBiYXNlRGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgaG91cnM6IGJhc2VEYXRlLmdldEhvdXJzKCksXG4gICAgICAgICAgbWludXRlczogYmFzZURhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgIHNlY29uZHM6IGJhc2VEYXRlLmdldFNlY29uZHMoKSxcbiAgICAgICAgICBtaWxsaXNlY29uZHM6IGJhc2VEYXRlLmdldE1pbGxpc2Vjb25kcygpXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYmFzZURhdGUpIHtcbiAgICAgICAgICAkbG9nLndhcm4oJ2RhdGVwYXJzZXI6JywgJ2Jhc2VEYXRlIGlzIG5vdCBhIHZhbGlkIGRhdGUnKTtcbiAgICAgICAgfVxuICAgICAgICBmaWVsZHMgPSB7IHllYXI6IDE5MDAsIG1vbnRoOiAwLCBkYXRlOiAxLCBob3VyczogMCwgbWludXRlczogMCwgc2Vjb25kczogMCwgbWlsbGlzZWNvbmRzOiAwIH07XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSAxLCBuID0gcmVzdWx0cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgdmFyIG1hcHBlciA9IG1hcFtpLTFdO1xuICAgICAgICBpZiAobWFwcGVyLmFwcGx5KSB7XG4gICAgICAgICAgbWFwcGVyLmFwcGx5LmNhbGwoZmllbGRzLCByZXN1bHRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNWYWxpZChmaWVsZHMueWVhciwgZmllbGRzLm1vbnRoLCBmaWVsZHMuZGF0ZSkpIHtcbiAgICAgICAgZHQgPSBuZXcgRGF0ZShmaWVsZHMueWVhciwgZmllbGRzLm1vbnRoLCBmaWVsZHMuZGF0ZSxcbiAgICAgICAgICBmaWVsZHMuaG91cnMsIGZpZWxkcy5taW51dGVzLCBmaWVsZHMuc2Vjb25kcyxcbiAgICAgICAgICBmaWVsZHMubWlsbGlzZWNvbmRzIHx8IDApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZHQ7XG4gICAgfVxuICB9O1xuXG4gIC8vIENoZWNrIGlmIGRhdGUgaXMgdmFsaWQgZm9yIHNwZWNpZmljIG1vbnRoIChhbmQgeWVhciBmb3IgRmVicnVhcnkpLlxuICAvLyBNb250aDogMCA9IEphbiwgMSA9IEZlYiwgZXRjXG4gIGZ1bmN0aW9uIGlzVmFsaWQoeWVhciwgbW9udGgsIGRhdGUpIHtcbiAgICBpZiAoZGF0ZSA8IDEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAobW9udGggPT09IDEgJiYgZGF0ZSA+IDI4KSB7XG4gICAgICByZXR1cm4gZGF0ZSA9PT0gMjkgJiYgKCh5ZWFyICUgNCA9PT0gMCAmJiB5ZWFyICUgMTAwICE9PSAwKSB8fCB5ZWFyICUgNDAwID09PSAwKTtcbiAgICB9XG5cbiAgICBpZiAobW9udGggPT09IDMgfHwgbW9udGggPT09IDUgfHwgbW9udGggPT09IDggfHwgbW9udGggPT09IDEwKSB7XG4gICAgICByZXR1cm4gZGF0ZSA8IDMxO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucG9zaXRpb24nLCBbXSlcblxuLyoqXG4gKiBBIHNldCBvZiB1dGlsaXR5IG1ldGhvZHMgdGhhdCBjYW4gYmUgdXNlIHRvIHJldHJpZXZlIHBvc2l0aW9uIG9mIERPTSBlbGVtZW50cy5cbiAqIEl0IGlzIG1lYW50IHRvIGJlIHVzZWQgd2hlcmUgd2UgbmVlZCB0byBhYnNvbHV0ZS1wb3NpdGlvbiBET00gZWxlbWVudHMgaW5cbiAqIHJlbGF0aW9uIHRvIG90aGVyLCBleGlzdGluZyBlbGVtZW50cyAodGhpcyBpcyB0aGUgY2FzZSBmb3IgdG9vbHRpcHMsIHBvcG92ZXJzLFxuICogdHlwZWFoZWFkIHN1Z2dlc3Rpb25zIGV0Yy4pLlxuICovXG4gIC5mYWN0b3J5KCckcG9zaXRpb24nLCBbJyRkb2N1bWVudCcsICckd2luZG93JywgZnVuY3Rpb24oJGRvY3VtZW50LCAkd2luZG93KSB7XG4gICAgZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIGNzc3Byb3ApIHtcbiAgICAgIGlmIChlbC5jdXJyZW50U3R5bGUpIHsgLy9JRVxuICAgICAgICByZXR1cm4gZWwuY3VycmVudFN0eWxlW2Nzc3Byb3BdO1xuICAgICAgfSBlbHNlIGlmICgkd2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICAgICAgcmV0dXJuICR3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbClbY3NzcHJvcF07XG4gICAgICB9XG4gICAgICAvLyBmaW5hbGx5IHRyeSBhbmQgZ2V0IGlubGluZSBzdHlsZVxuICAgICAgcmV0dXJuIGVsLnN0eWxlW2Nzc3Byb3BdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGdpdmVuIGVsZW1lbnQgaXMgc3RhdGljYWxseSBwb3NpdGlvbmVkXG4gICAgICogQHBhcmFtIGVsZW1lbnQgLSByYXcgRE9NIGVsZW1lbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0YXRpY1Bvc2l0aW9uZWQoZWxlbWVudCkge1xuICAgICAgcmV0dXJuIChnZXRTdHlsZShlbGVtZW50LCAncG9zaXRpb24nKSB8fCAnc3RhdGljJyApID09PSAnc3RhdGljJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiByZXR1cm5zIHRoZSBjbG9zZXN0LCBub24tc3RhdGljYWxseSBwb3NpdGlvbmVkIHBhcmVudE9mZnNldCBvZiBhIGdpdmVuIGVsZW1lbnRcbiAgICAgKiBAcGFyYW0gZWxlbWVudFxuICAgICAqL1xuICAgIHZhciBwYXJlbnRPZmZzZXRFbCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIHZhciBkb2NEb21FbCA9ICRkb2N1bWVudFswXTtcbiAgICAgIHZhciBvZmZzZXRQYXJlbnQgPSBlbGVtZW50Lm9mZnNldFBhcmVudCB8fCBkb2NEb21FbDtcbiAgICAgIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBkb2NEb21FbCAmJiBpc1N0YXRpY1Bvc2l0aW9uZWQob2Zmc2V0UGFyZW50KSApIHtcbiAgICAgICAgb2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRG9tRWw7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHJlYWQtb25seSBlcXVpdmFsZW50IG9mIGpRdWVyeSdzIHBvc2l0aW9uIGZ1bmN0aW9uOlxuICAgICAgICogaHR0cDovL2FwaS5qcXVlcnkuY29tL3Bvc2l0aW9uL1xuICAgICAgICovXG4gICAgICBwb3NpdGlvbjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgZWxCQ1IgPSB0aGlzLm9mZnNldChlbGVtZW50KTtcbiAgICAgICAgdmFyIG9mZnNldFBhcmVudEJDUiA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG4gICAgICAgIHZhciBvZmZzZXRQYXJlbnRFbCA9IHBhcmVudE9mZnNldEVsKGVsZW1lbnRbMF0pO1xuICAgICAgICBpZiAob2Zmc2V0UGFyZW50RWwgIT0gJGRvY3VtZW50WzBdKSB7XG4gICAgICAgICAgb2Zmc2V0UGFyZW50QkNSID0gdGhpcy5vZmZzZXQoYW5ndWxhci5lbGVtZW50KG9mZnNldFBhcmVudEVsKSk7XG4gICAgICAgICAgb2Zmc2V0UGFyZW50QkNSLnRvcCArPSBvZmZzZXRQYXJlbnRFbC5jbGllbnRUb3AgLSBvZmZzZXRQYXJlbnRFbC5zY3JvbGxUb3A7XG4gICAgICAgICAgb2Zmc2V0UGFyZW50QkNSLmxlZnQgKz0gb2Zmc2V0UGFyZW50RWwuY2xpZW50TGVmdCAtIG9mZnNldFBhcmVudEVsLnNjcm9sbExlZnQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogYm91bmRpbmdDbGllbnRSZWN0LndpZHRoIHx8IGVsZW1lbnQucHJvcCgnb2Zmc2V0V2lkdGgnKSxcbiAgICAgICAgICBoZWlnaHQ6IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQgfHwgZWxlbWVudC5wcm9wKCdvZmZzZXRIZWlnaHQnKSxcbiAgICAgICAgICB0b3A6IGVsQkNSLnRvcCAtIG9mZnNldFBhcmVudEJDUi50b3AsXG4gICAgICAgICAgbGVmdDogZWxCQ1IubGVmdCAtIG9mZnNldFBhcmVudEJDUi5sZWZ0XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIHJlYWQtb25seSBlcXVpdmFsZW50IG9mIGpRdWVyeSdzIG9mZnNldCBmdW5jdGlvbjpcbiAgICAgICAqIGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmZzZXQvXG4gICAgICAgKi9cbiAgICAgIG9mZnNldDogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgYm91bmRpbmdDbGllbnRSZWN0ID0gZWxlbWVudFswXS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3aWR0aDogYm91bmRpbmdDbGllbnRSZWN0LndpZHRoIHx8IGVsZW1lbnQucHJvcCgnb2Zmc2V0V2lkdGgnKSxcbiAgICAgICAgICBoZWlnaHQ6IGJvdW5kaW5nQ2xpZW50UmVjdC5oZWlnaHQgfHwgZWxlbWVudC5wcm9wKCdvZmZzZXRIZWlnaHQnKSxcbiAgICAgICAgICB0b3A6IGJvdW5kaW5nQ2xpZW50UmVjdC50b3AgKyAoJHdpbmRvdy5wYWdlWU9mZnNldCB8fCAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCksXG4gICAgICAgICAgbGVmdDogYm91bmRpbmdDbGllbnRSZWN0LmxlZnQgKyAoJHdpbmRvdy5wYWdlWE9mZnNldCB8fCAkZG9jdW1lbnRbMF0uZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQpXG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIFByb3ZpZGVzIGNvb3JkaW5hdGVzIGZvciB0aGUgdGFyZ2V0RWwgaW4gcmVsYXRpb24gdG8gaG9zdEVsXG4gICAgICAgKi9cbiAgICAgIHBvc2l0aW9uRWxlbWVudHM6IGZ1bmN0aW9uKGhvc3RFbCwgdGFyZ2V0RWwsIHBvc2l0aW9uU3RyLCBhcHBlbmRUb0JvZHkpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uU3RyUGFydHMgPSBwb3NpdGlvblN0ci5zcGxpdCgnLScpO1xuICAgICAgICB2YXIgcG9zMCA9IHBvc2l0aW9uU3RyUGFydHNbMF0sIHBvczEgPSBwb3NpdGlvblN0clBhcnRzWzFdIHx8ICdjZW50ZXInO1xuXG4gICAgICAgIHZhciBob3N0RWxQb3MsXG4gICAgICAgICAgdGFyZ2V0RWxXaWR0aCxcbiAgICAgICAgICB0YXJnZXRFbEhlaWdodCxcbiAgICAgICAgICB0YXJnZXRFbFBvcztcblxuICAgICAgICBob3N0RWxQb3MgPSBhcHBlbmRUb0JvZHkgPyB0aGlzLm9mZnNldChob3N0RWwpIDogdGhpcy5wb3NpdGlvbihob3N0RWwpO1xuXG4gICAgICAgIHRhcmdldEVsV2lkdGggPSB0YXJnZXRFbC5wcm9wKCdvZmZzZXRXaWR0aCcpO1xuICAgICAgICB0YXJnZXRFbEhlaWdodCA9IHRhcmdldEVsLnByb3AoJ29mZnNldEhlaWdodCcpO1xuXG4gICAgICAgIHZhciBzaGlmdFdpZHRoID0ge1xuICAgICAgICAgIGNlbnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaG9zdEVsUG9zLmxlZnQgKyBob3N0RWxQb3Mud2lkdGggLyAyIC0gdGFyZ2V0RWxXaWR0aCAvIDI7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBsZWZ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBob3N0RWxQb3MubGVmdDtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJpZ2h0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBob3N0RWxQb3MubGVmdCArIGhvc3RFbFBvcy53aWR0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHNoaWZ0SGVpZ2h0ID0ge1xuICAgICAgICAgIGNlbnRlcjogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gaG9zdEVsUG9zLnRvcCArIGhvc3RFbFBvcy5oZWlnaHQgLyAyIC0gdGFyZ2V0RWxIZWlnaHQgLyAyO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBob3N0RWxQb3MudG9wO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgYm90dG9tOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBob3N0RWxQb3MudG9wICsgaG9zdEVsUG9zLmhlaWdodDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc3dpdGNoIChwb3MwKSB7XG4gICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgdGFyZ2V0RWxQb3MgPSB7XG4gICAgICAgICAgICAgIHRvcDogc2hpZnRIZWlnaHRbcG9zMV0oKSxcbiAgICAgICAgICAgICAgbGVmdDogc2hpZnRXaWR0aFtwb3MwXSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICB0YXJnZXRFbFBvcyA9IHtcbiAgICAgICAgICAgICAgdG9wOiBzaGlmdEhlaWdodFtwb3MxXSgpLFxuICAgICAgICAgICAgICBsZWZ0OiBob3N0RWxQb3MubGVmdCAtIHRhcmdldEVsV2lkdGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgdGFyZ2V0RWxQb3MgPSB7XG4gICAgICAgICAgICAgIHRvcDogc2hpZnRIZWlnaHRbcG9zMF0oKSxcbiAgICAgICAgICAgICAgbGVmdDogc2hpZnRXaWR0aFtwb3MxXSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRhcmdldEVsUG9zID0ge1xuICAgICAgICAgICAgICB0b3A6IGhvc3RFbFBvcy50b3AgLSB0YXJnZXRFbEhlaWdodCxcbiAgICAgICAgICAgICAgbGVmdDogc2hpZnRXaWR0aFtwb3MxXSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0RWxQb3M7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLmRhdGVwaWNrZXInLCBbJ3VpLmJvb3RzdHJhcC5kYXRlcGFyc2VyJywgJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuXG4udmFsdWUoJyRkYXRlcGlja2VyU3VwcHJlc3NFcnJvcicsIGZhbHNlKVxuXG4uY29uc3RhbnQoJ2RhdGVwaWNrZXJDb25maWcnLCB7XG4gIGZvcm1hdERheTogJ2RkJyxcbiAgZm9ybWF0TW9udGg6ICdNTU1NJyxcbiAgZm9ybWF0WWVhcjogJ3l5eXknLFxuICBmb3JtYXREYXlIZWFkZXI6ICdFRUUnLFxuICBmb3JtYXREYXlUaXRsZTogJ01NTU0geXl5eScsXG4gIGZvcm1hdE1vbnRoVGl0bGU6ICd5eXl5JyxcbiAgZGF0ZXBpY2tlck1vZGU6ICdkYXknLFxuICBtaW5Nb2RlOiAnZGF5JyxcbiAgbWF4TW9kZTogJ3llYXInLFxuICBzaG93V2Vla3M6IHRydWUsXG4gIHN0YXJ0aW5nRGF5OiAwLFxuICB5ZWFyUmFuZ2U6IDIwLFxuICBtaW5EYXRlOiBudWxsLFxuICBtYXhEYXRlOiBudWxsLFxuICBzaG9ydGN1dFByb3BhZ2F0aW9uOiBmYWxzZVxufSlcblxuLmNvbnRyb2xsZXIoJ0RhdGVwaWNrZXJDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJyRwYXJzZScsICckaW50ZXJwb2xhdGUnLCAnJGxvZycsICdkYXRlRmlsdGVyJywgJ2RhdGVwaWNrZXJDb25maWcnLCAnJGRhdGVwaWNrZXJTdXBwcmVzc0Vycm9yJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsICRwYXJzZSwgJGludGVycG9sYXRlLCAkbG9nLCBkYXRlRmlsdGVyLCBkYXRlcGlja2VyQ29uZmlnLCAkZGF0ZXBpY2tlclN1cHByZXNzRXJyb3IpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgbmdNb2RlbEN0cmwgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9OyAvLyBudWxsTW9kZWxDdHJsO1xuXG4gIC8vIE1vZGVzIGNoYWluXG4gIHRoaXMubW9kZXMgPSBbJ2RheScsICdtb250aCcsICd5ZWFyJ107XG5cbiAgLy8gQ29uZmlndXJhdGlvbiBhdHRyaWJ1dGVzXG4gIGFuZ3VsYXIuZm9yRWFjaChbJ2Zvcm1hdERheScsICdmb3JtYXRNb250aCcsICdmb3JtYXRZZWFyJywgJ2Zvcm1hdERheUhlYWRlcicsICdmb3JtYXREYXlUaXRsZScsICdmb3JtYXRNb250aFRpdGxlJyxcbiAgICAgICAgICAgICAgICAgICAnc2hvd1dlZWtzJywgJ3N0YXJ0aW5nRGF5JywgJ3llYXJSYW5nZScsICdzaG9ydGN1dFByb3BhZ2F0aW9uJ10sIGZ1bmN0aW9uKGtleSwgaW5kZXgpIHtcbiAgICBzZWxmW2tleV0gPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnNba2V5XSkgPyAoaW5kZXggPCA2ID8gJGludGVycG9sYXRlKCRhdHRyc1trZXldKSgkc2NvcGUuJHBhcmVudCkgOiAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnNba2V5XSkpIDogZGF0ZXBpY2tlckNvbmZpZ1trZXldO1xuICB9KTtcblxuICAvLyBXYXRjaGFibGUgZGF0ZSBhdHRyaWJ1dGVzXG4gIGFuZ3VsYXIuZm9yRWFjaChbJ21pbkRhdGUnLCAnbWF4RGF0ZSddLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoJGF0dHJzW2tleV0pIHtcbiAgICAgICRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzW2tleV0pLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBzZWxmW2tleV0gPSB2YWx1ZSA/IG5ldyBEYXRlKHZhbHVlKSA6IG51bGw7XG4gICAgICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWxmW2tleV0gPSBkYXRlcGlja2VyQ29uZmlnW2tleV0gPyBuZXcgRGF0ZShkYXRlcGlja2VyQ29uZmlnW2tleV0pIDogbnVsbDtcbiAgICB9XG4gIH0pO1xuXG4gIGFuZ3VsYXIuZm9yRWFjaChbJ21pbk1vZGUnLCAnbWF4TW9kZSddLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoJGF0dHJzW2tleV0pIHtcbiAgICAgICRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzW2tleV0pLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBzZWxmW2tleV0gPSBhbmd1bGFyLmlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6ICRhdHRyc1trZXldO1xuICAgICAgICAkc2NvcGVba2V5XSA9IHNlbGZba2V5XTtcbiAgICAgICAgaWYgKChrZXkgPT0gJ21pbk1vZGUnICYmIHNlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck1vZGUpIDwgc2VsZi5tb2Rlcy5pbmRleE9mKHNlbGZba2V5XSkpIHx8IChrZXkgPT0gJ21heE1vZGUnICYmIHNlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck1vZGUpID4gc2VsZi5tb2Rlcy5pbmRleE9mKHNlbGZba2V5XSkpKSB7XG4gICAgICAgICAgJHNjb3BlLmRhdGVwaWNrZXJNb2RlID0gc2VsZltrZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZltrZXldID0gZGF0ZXBpY2tlckNvbmZpZ1trZXldIHx8IG51bGw7XG4gICAgICAkc2NvcGVba2V5XSA9IHNlbGZba2V5XTtcbiAgICB9XG4gIH0pO1xuXG4gICRzY29wZS5kYXRlcGlja2VyTW9kZSA9ICRzY29wZS5kYXRlcGlja2VyTW9kZSB8fCBkYXRlcGlja2VyQ29uZmlnLmRhdGVwaWNrZXJNb2RlO1xuICAkc2NvcGUudW5pcXVlSWQgPSAnZGF0ZXBpY2tlci0nICsgJHNjb3BlLiRpZCArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcblxuICBpZiAoYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmluaXREYXRlKSkge1xuICAgIHRoaXMuYWN0aXZlRGF0ZSA9ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5pbml0RGF0ZSkgfHwgbmV3IERhdGUoKTtcbiAgICAkc2NvcGUuJHBhcmVudC4kd2F0Y2goJGF0dHJzLmluaXREYXRlLCBmdW5jdGlvbihpbml0RGF0ZSkge1xuICAgICAgaWYgKGluaXREYXRlICYmIChuZ01vZGVsQ3RybC4kaXNFbXB0eShuZ01vZGVsQ3RybC4kbW9kZWxWYWx1ZSkgfHwgbmdNb2RlbEN0cmwuJGludmFsaWQpKSB7XG4gICAgICAgIHNlbGYuYWN0aXZlRGF0ZSA9IGluaXREYXRlO1xuICAgICAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5hY3RpdmVEYXRlID0gbmV3IERhdGUoKTtcbiAgfVxuXG4gICRzY29wZS5pc0FjdGl2ZSA9IGZ1bmN0aW9uKGRhdGVPYmplY3QpIHtcbiAgICBpZiAoc2VsZi5jb21wYXJlKGRhdGVPYmplY3QuZGF0ZSwgc2VsZi5hY3RpdmVEYXRlKSA9PT0gMCkge1xuICAgICAgJHNjb3BlLmFjdGl2ZURhdGVJZCA9IGRhdGVPYmplY3QudWlkO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybF8pIHtcbiAgICBuZ01vZGVsQ3RybCA9IG5nTW9kZWxDdHJsXztcblxuICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYucmVuZGVyKCk7XG4gICAgfTtcbiAgfTtcblxuICB0aGlzLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSB7XG4gICAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpLFxuICAgICAgICAgIGlzVmFsaWQgPSAhaXNOYU4oZGF0ZSk7XG5cbiAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlRGF0ZSA9IGRhdGU7XG4gICAgICB9IGVsc2UgaWYgKCEkZGF0ZXBpY2tlclN1cHByZXNzRXJyb3IpIHtcbiAgICAgICAgJGxvZy5lcnJvcignRGF0ZXBpY2tlciBkaXJlY3RpdmU6IFwibmctbW9kZWxcIiB2YWx1ZSBtdXN0IGJlIGEgRGF0ZSBvYmplY3QsIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBzaW5jZSAwMS4wMS4xOTcwIG9yIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhbiBSRkMyODIyIG9yIElTTyA4NjAxIGRhdGUuJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcbiAgfTtcblxuICB0aGlzLnJlZnJlc2hWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgdGhpcy5fcmVmcmVzaFZpZXcoKTtcblxuICAgICAgdmFyIGRhdGUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlID8gbmV3IERhdGUobmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSkgOiBudWxsO1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCdkYXRlRGlzYWJsZWQnLCAhZGF0ZSB8fCAodGhpcy5lbGVtZW50ICYmICF0aGlzLmlzRGlzYWJsZWQoZGF0ZSkpKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5jcmVhdGVEYXRlT2JqZWN0ID0gZnVuY3Rpb24oZGF0ZSwgZm9ybWF0KSB7XG4gICAgdmFyIG1vZGVsID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA/IG5ldyBEYXRlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpIDogbnVsbDtcbiAgICByZXR1cm4ge1xuICAgICAgZGF0ZTogZGF0ZSxcbiAgICAgIGxhYmVsOiBkYXRlRmlsdGVyKGRhdGUsIGZvcm1hdCksXG4gICAgICBzZWxlY3RlZDogbW9kZWwgJiYgdGhpcy5jb21wYXJlKGRhdGUsIG1vZGVsKSA9PT0gMCxcbiAgICAgIGRpc2FibGVkOiB0aGlzLmlzRGlzYWJsZWQoZGF0ZSksXG4gICAgICBjdXJyZW50OiB0aGlzLmNvbXBhcmUoZGF0ZSwgbmV3IERhdGUoKSkgPT09IDAsXG4gICAgICBjdXN0b21DbGFzczogdGhpcy5jdXN0b21DbGFzcyhkYXRlKVxuICAgIH07XG4gIH07XG5cbiAgdGhpcy5pc0Rpc2FibGVkID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiAoKHRoaXMubWluRGF0ZSAmJiB0aGlzLmNvbXBhcmUoZGF0ZSwgdGhpcy5taW5EYXRlKSA8IDApIHx8ICh0aGlzLm1heERhdGUgJiYgdGhpcy5jb21wYXJlKGRhdGUsIHRoaXMubWF4RGF0ZSkgPiAwKSB8fCAoJGF0dHJzLmRhdGVEaXNhYmxlZCAmJiAkc2NvcGUuZGF0ZURpc2FibGVkKHtkYXRlOiBkYXRlLCBtb2RlOiAkc2NvcGUuZGF0ZXBpY2tlck1vZGV9KSkpO1xuICB9O1xuXG4gIHRoaXMuY3VzdG9tQ2xhc3MgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgcmV0dXJuICRzY29wZS5jdXN0b21DbGFzcyh7ZGF0ZTogZGF0ZSwgbW9kZTogJHNjb3BlLmRhdGVwaWNrZXJNb2RlfSk7XG4gIH07XG5cbiAgLy8gU3BsaXQgYXJyYXkgaW50byBzbWFsbGVyIGFycmF5c1xuICB0aGlzLnNwbGl0ID0gZnVuY3Rpb24oYXJyLCBzaXplKSB7XG4gICAgdmFyIGFycmF5cyA9IFtdO1xuICAgIHdoaWxlIChhcnIubGVuZ3RoID4gMCkge1xuICAgICAgYXJyYXlzLnB1c2goYXJyLnNwbGljZSgwLCBzaXplKSk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheXM7XG4gIH07XG5cbiAgLy8gRml4IGEgaGFyZC1yZXByb2R1c2libGUgYnVnIHdpdGggdGltZXpvbmVzXG4gIC8vIFRoZSBidWcgZGVwZW5kcyBvbiBPUywgYnJvd3NlciwgY3VycmVudCB0aW1lem9uZSBhbmQgY3VycmVudCBkYXRlXG4gIC8vIGkuZS5cbiAgLy8gdmFyIGRhdGUgPSBuZXcgRGF0ZSgyMDE0LCAwLCAxKTtcbiAgLy8gY29uc29sZS5sb2coZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCkpO1xuICAvLyBjYW4gcmVzdWx0IGluIFwiMjAxMyAxMSAzMSAyM1wiIGJlY2F1c2Ugb2YgdGhlIGJ1Zy5cbiAgdGhpcy5maXhUaW1lWm9uZSA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG4gICAgZGF0ZS5zZXRIb3Vycyhob3VycyA9PT0gMjMgPyBob3VycyArIDIgOiAwKTtcbiAgfTtcblxuICAkc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIGlmICgkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPT09IHNlbGYubWluTW9kZSkge1xuICAgICAgdmFyIGR0ID0gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZSA/IG5ldyBEYXRlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpIDogbmV3IERhdGUoMCwgMCwgMCwgMCwgMCwgMCwgMCk7XG4gICAgICBkdC5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCksIGRhdGUuZ2V0TW9udGgoKSwgZGF0ZS5nZXREYXRlKCkpO1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShkdCk7XG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuYWN0aXZlRGF0ZSA9IGRhdGU7XG4gICAgICAkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPSBzZWxmLm1vZGVzW3NlbGYubW9kZXMuaW5kZXhPZigkc2NvcGUuZGF0ZXBpY2tlck1vZGUpIC0gMV07XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5tb3ZlID0gZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgdmFyIHllYXIgPSBzZWxmLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSArIGRpcmVjdGlvbiAqIChzZWxmLnN0ZXAueWVhcnMgfHwgMCksXG4gICAgICAgIG1vbnRoID0gc2VsZi5hY3RpdmVEYXRlLmdldE1vbnRoKCkgKyBkaXJlY3Rpb24gKiAoc2VsZi5zdGVwLm1vbnRocyB8fCAwKTtcbiAgICBzZWxmLmFjdGl2ZURhdGUuc2V0RnVsbFllYXIoeWVhciwgbW9udGgsIDEpO1xuICAgIHNlbGYucmVmcmVzaFZpZXcoKTtcbiAgfTtcblxuICAkc2NvcGUudG9nZ2xlTW9kZSA9IGZ1bmN0aW9uKGRpcmVjdGlvbikge1xuICAgIGRpcmVjdGlvbiA9IGRpcmVjdGlvbiB8fCAxO1xuXG4gICAgaWYgKCgkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPT09IHNlbGYubWF4TW9kZSAmJiBkaXJlY3Rpb24gPT09IDEpIHx8ICgkc2NvcGUuZGF0ZXBpY2tlck1vZGUgPT09IHNlbGYubWluTW9kZSAmJiBkaXJlY3Rpb24gPT09IC0xKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgICRzY29wZS5kYXRlcGlja2VyTW9kZSA9IHNlbGYubW9kZXNbc2VsZi5tb2Rlcy5pbmRleE9mKCRzY29wZS5kYXRlcGlja2VyTW9kZSkgKyBkaXJlY3Rpb25dO1xuICB9O1xuXG4gIC8vIEtleSBldmVudCBtYXBwZXJcbiAgJHNjb3BlLmtleXMgPSB7IDEzOiAnZW50ZXInLCAzMjogJ3NwYWNlJywgMzM6ICdwYWdldXAnLCAzNDogJ3BhZ2Vkb3duJywgMzU6ICdlbmQnLCAzNjogJ2hvbWUnLCAzNzogJ2xlZnQnLCAzODogJ3VwJywgMzk6ICdyaWdodCcsIDQwOiAnZG93bicgfTtcblxuICB2YXIgZm9jdXNFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5lbGVtZW50WzBdLmZvY3VzKCk7XG4gIH07XG5cbiAgLy8gTGlzdGVuIGZvciBmb2N1cyByZXF1ZXN0cyBmcm9tIHBvcHVwIGRpcmVjdGl2ZVxuICAkc2NvcGUuJG9uKCdkYXRlcGlja2VyLmZvY3VzJywgZm9jdXNFbGVtZW50KTtcblxuICAkc2NvcGUua2V5ZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIHZhciBrZXkgPSAkc2NvcGUua2V5c1tldnQud2hpY2hdO1xuXG4gICAgaWYgKCFrZXkgfHwgZXZ0LnNoaWZ0S2V5IHx8IGV2dC5hbHRLZXkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoIXNlbGYuc2hvcnRjdXRQcm9wYWdhdGlvbikge1xuICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIGlmIChrZXkgPT09ICdlbnRlcicgfHwga2V5ID09PSAnc3BhY2UnKSB7XG4gICAgICBpZiAoc2VsZi5pc0Rpc2FibGVkKHNlbGYuYWN0aXZlRGF0ZSkpIHtcbiAgICAgICAgcmV0dXJuOyAvLyBkbyBub3RoaW5nXG4gICAgICB9XG4gICAgICAkc2NvcGUuc2VsZWN0KHNlbGYuYWN0aXZlRGF0ZSk7XG4gICAgICBmb2N1c0VsZW1lbnQoKTtcbiAgICB9IGVsc2UgaWYgKGV2dC5jdHJsS2V5ICYmIChrZXkgPT09ICd1cCcgfHwga2V5ID09PSAnZG93bicpKSB7XG4gICAgICAkc2NvcGUudG9nZ2xlTW9kZShrZXkgPT09ICd1cCcgPyAxIDogLTEpO1xuICAgICAgZm9jdXNFbGVtZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYuaGFuZGxlS2V5RG93bihrZXksIGV2dCk7XG4gICAgICBzZWxmLnJlZnJlc2hWaWV3KCk7XG4gICAgfVxuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ2RhdGVwaWNrZXInLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd0ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbCc7XG4gICAgfSxcbiAgICBzY29wZToge1xuICAgICAgZGF0ZXBpY2tlck1vZGU6ICc9PycsXG4gICAgICBkYXRlRGlzYWJsZWQ6ICcmJyxcbiAgICAgIGN1c3RvbUNsYXNzOiAnJicsXG4gICAgICBzaG9ydGN1dFByb3BhZ2F0aW9uOiAnJj8nXG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ2RhdGVwaWNrZXInLCAnXm5nTW9kZWwnXSxcbiAgICBjb250cm9sbGVyOiAnRGF0ZXBpY2tlckNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ2RhdGVwaWNrZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBkYXRlcGlja2VyQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBkYXRlcGlja2VyQ3RybC5pbml0KG5nTW9kZWxDdHJsKTtcbiAgICB9XG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCdkYXlwaWNrZXInLCBbJ2RhdGVGaWx0ZXInLCBmdW5jdGlvbihkYXRlRmlsdGVyKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF5Lmh0bWwnLFxuICAgIHJlcXVpcmU6ICdeZGF0ZXBpY2tlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsKSB7XG4gICAgICBzY29wZS5zaG93V2Vla3MgPSBjdHJsLnNob3dXZWVrcztcblxuICAgICAgY3RybC5zdGVwID0geyBtb250aHM6IDEgfTtcbiAgICAgIGN0cmwuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgIHZhciBEQVlTX0lOX01PTlRIID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdO1xuICAgICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgcmV0dXJuICgobW9udGggPT09IDEpICYmICh5ZWFyICUgNCA9PT0gMCkgJiYgKCh5ZWFyICUgMTAwICE9PSAwKSB8fCAoeWVhciAlIDQwMCA9PT0gMCkpKSA/IDI5IDogREFZU19JTl9NT05USFttb250aF07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGdldERhdGVzKHN0YXJ0RGF0ZSwgbikge1xuICAgICAgICB2YXIgZGF0ZXMgPSBuZXcgQXJyYXkobiksIGN1cnJlbnQgPSBuZXcgRGF0ZShzdGFydERhdGUpLCBpID0gMCwgZGF0ZTtcbiAgICAgICAgd2hpbGUgKGkgPCBuKSB7XG4gICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKGN1cnJlbnQpO1xuICAgICAgICAgIGN0cmwuZml4VGltZVpvbmUoZGF0ZSk7XG4gICAgICAgICAgZGF0ZXNbaSsrXSA9IGRhdGU7XG4gICAgICAgICAgY3VycmVudC5zZXREYXRlKGN1cnJlbnQuZ2V0RGF0ZSgpICsgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGVzO1xuICAgICAgfVxuXG4gICAgICBjdHJsLl9yZWZyZXNoVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgeWVhciA9IGN0cmwuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgIG1vbnRoID0gY3RybC5hY3RpdmVEYXRlLmdldE1vbnRoKCksXG4gICAgICAgICAgZmlyc3REYXlPZk1vbnRoID0gbmV3IERhdGUoeWVhciwgbW9udGgsIDEpLFxuICAgICAgICAgIGRpZmZlcmVuY2UgPSBjdHJsLnN0YXJ0aW5nRGF5IC0gZmlyc3REYXlPZk1vbnRoLmdldERheSgpLFxuICAgICAgICAgIG51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoID0gKGRpZmZlcmVuY2UgPiAwKSA/IDcgLSBkaWZmZXJlbmNlIDogLSBkaWZmZXJlbmNlLFxuICAgICAgICAgIGZpcnN0RGF0ZSA9IG5ldyBEYXRlKGZpcnN0RGF5T2ZNb250aCk7XG5cbiAgICAgICAgaWYgKG51bURpc3BsYXllZEZyb21QcmV2aW91c01vbnRoID4gMCkge1xuICAgICAgICAgIGZpcnN0RGF0ZS5zZXREYXRlKC1udW1EaXNwbGF5ZWRGcm9tUHJldmlvdXNNb250aCArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gNDIgaXMgdGhlIG51bWJlciBvZiBkYXlzIG9uIGEgc2l4LW1vbnRoIGNhbGVuZGFyXG4gICAgICAgIHZhciBkYXlzID0gZ2V0RGF0ZXMoZmlyc3REYXRlLCA0Mik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNDI7IGkgKyspIHtcbiAgICAgICAgICBkYXlzW2ldID0gYW5ndWxhci5leHRlbmQoY3RybC5jcmVhdGVEYXRlT2JqZWN0KGRheXNbaV0sIGN0cmwuZm9ybWF0RGF5KSwge1xuICAgICAgICAgICAgc2Vjb25kYXJ5OiBkYXlzW2ldLmdldE1vbnRoKCkgIT09IG1vbnRoLFxuICAgICAgICAgICAgdWlkOiBzY29wZS51bmlxdWVJZCArICctJyArIGlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLmxhYmVscyA9IG5ldyBBcnJheSg3KTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCA3OyBqKyspIHtcbiAgICAgICAgICBzY29wZS5sYWJlbHNbal0gPSB7XG4gICAgICAgICAgICBhYmJyOiBkYXRlRmlsdGVyKGRheXNbal0uZGF0ZSwgY3RybC5mb3JtYXREYXlIZWFkZXIpLFxuICAgICAgICAgICAgZnVsbDogZGF0ZUZpbHRlcihkYXlzW2pdLmRhdGUsICdFRUVFJylcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUudGl0bGUgPSBkYXRlRmlsdGVyKGN0cmwuYWN0aXZlRGF0ZSwgY3RybC5mb3JtYXREYXlUaXRsZSk7XG4gICAgICAgIHNjb3BlLnJvd3MgPSBjdHJsLnNwbGl0KGRheXMsIDcpO1xuXG4gICAgICAgIGlmIChzY29wZS5zaG93V2Vla3MpIHtcbiAgICAgICAgICBzY29wZS53ZWVrTnVtYmVycyA9IFtdO1xuICAgICAgICAgIHZhciB0aHVyc2RheUluZGV4ID0gKDQgKyA3IC0gY3RybC5zdGFydGluZ0RheSkgJSA3LFxuICAgICAgICAgICAgICBudW1XZWVrcyA9IHNjb3BlLnJvd3MubGVuZ3RoO1xuICAgICAgICAgIGZvciAodmFyIGN1cldlZWsgPSAwOyBjdXJXZWVrIDwgbnVtV2Vla3M7IGN1cldlZWsrKykge1xuICAgICAgICAgICAgc2NvcGUud2Vla051bWJlcnMucHVzaChcbiAgICAgICAgICAgICAgZ2V0SVNPODYwMVdlZWtOdW1iZXIoc2NvcGUucm93c1tjdXJXZWVrXVt0aHVyc2RheUluZGV4XS5kYXRlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBjdHJsLmNvbXBhcmUgPSBmdW5jdGlvbihkYXRlMSwgZGF0ZTIpIHtcbiAgICAgICAgcmV0dXJuIChuZXcgRGF0ZShkYXRlMS5nZXRGdWxsWWVhcigpLCBkYXRlMS5nZXRNb250aCgpLCBkYXRlMS5nZXREYXRlKCkpIC0gbmV3IERhdGUoZGF0ZTIuZ2V0RnVsbFllYXIoKSwgZGF0ZTIuZ2V0TW9udGgoKSwgZGF0ZTIuZ2V0RGF0ZSgpKSk7XG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBnZXRJU084NjAxV2Vla051bWJlcihkYXRlKSB7XG4gICAgICAgIHZhciBjaGVja0RhdGUgPSBuZXcgRGF0ZShkYXRlKTtcbiAgICAgICAgY2hlY2tEYXRlLnNldERhdGUoY2hlY2tEYXRlLmdldERhdGUoKSArIDQgLSAoY2hlY2tEYXRlLmdldERheSgpIHx8IDcpKTsgLy8gVGh1cnNkYXlcbiAgICAgICAgdmFyIHRpbWUgPSBjaGVja0RhdGUuZ2V0VGltZSgpO1xuICAgICAgICBjaGVja0RhdGUuc2V0TW9udGgoMCk7IC8vIENvbXBhcmUgd2l0aCBKYW4gMVxuICAgICAgICBjaGVja0RhdGUuc2V0RGF0ZSgxKTtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yb3VuZCgodGltZSAtIGNoZWNrRGF0ZSkgLyA4NjQwMDAwMCkgLyA3KSArIDE7XG4gICAgICB9XG5cbiAgICAgIGN0cmwuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGtleSwgZXZ0KSB7XG4gICAgICAgIHZhciBkYXRlID0gY3RybC5hY3RpdmVEYXRlLmdldERhdGUoKTtcblxuICAgICAgICBpZiAoa2V5ID09PSAnbGVmdCcpIHtcbiAgICAgICAgICBkYXRlID0gZGF0ZSAtIDE7ICAgLy8gdXBcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICd1cCcpIHtcbiAgICAgICAgICBkYXRlID0gZGF0ZSAtIDc7ICAgLy8gZG93blxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIGRhdGUgPSBkYXRlICsgMTsgICAvLyBkb3duXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZG93bicpIHtcbiAgICAgICAgICBkYXRlID0gZGF0ZSArIDc7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAncGFnZXVwJyB8fCBrZXkgPT09ICdwYWdlZG93bicpIHtcbiAgICAgICAgICB2YXIgbW9udGggPSBjdHJsLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSArIChrZXkgPT09ICdwYWdldXAnID8gLSAxIDogMSk7XG4gICAgICAgICAgY3RybC5hY3RpdmVEYXRlLnNldE1vbnRoKG1vbnRoLCAxKTtcbiAgICAgICAgICBkYXRlID0gTWF0aC5taW4oZ2V0RGF5c0luTW9udGgoY3RybC5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCksIGN0cmwuYWN0aXZlRGF0ZS5nZXRNb250aCgpKSwgZGF0ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnaG9tZScpIHtcbiAgICAgICAgICBkYXRlID0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdlbmQnKSB7XG4gICAgICAgICAgZGF0ZSA9IGdldERheXNJbk1vbnRoKGN0cmwuYWN0aXZlRGF0ZS5nZXRGdWxsWWVhcigpLCBjdHJsLmFjdGl2ZURhdGUuZ2V0TW9udGgoKSk7XG4gICAgICAgIH1cbiAgICAgICAgY3RybC5hY3RpdmVEYXRlLnNldERhdGUoZGF0ZSk7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLnJlZnJlc2hWaWV3KCk7XG4gICAgfVxuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ21vbnRocGlja2VyJywgWydkYXRlRmlsdGVyJywgZnVuY3Rpb24oZGF0ZUZpbHRlcikge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWwnLFxuICAgIHJlcXVpcmU6ICdeZGF0ZXBpY2tlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsKSB7XG4gICAgICBjdHJsLnN0ZXAgPSB7IHllYXJzOiAxIH07XG4gICAgICBjdHJsLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICBjdHJsLl9yZWZyZXNoVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbW9udGhzID0gbmV3IEFycmF5KDEyKSxcbiAgICAgICAgICAgIHllYXIgPSBjdHJsLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgIGRhdGU7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHllYXIsIGksIDEpO1xuICAgICAgICAgIGN0cmwuZml4VGltZVpvbmUoZGF0ZSk7XG4gICAgICAgICAgbW9udGhzW2ldID0gYW5ndWxhci5leHRlbmQoY3RybC5jcmVhdGVEYXRlT2JqZWN0KGRhdGUsIGN0cmwuZm9ybWF0TW9udGgpLCB7XG4gICAgICAgICAgICB1aWQ6IHNjb3BlLnVuaXF1ZUlkICsgJy0nICsgaVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUudGl0bGUgPSBkYXRlRmlsdGVyKGN0cmwuYWN0aXZlRGF0ZSwgY3RybC5mb3JtYXRNb250aFRpdGxlKTtcbiAgICAgICAgc2NvcGUucm93cyA9IGN0cmwuc3BsaXQobW9udGhzLCAzKTtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwuY29tcGFyZSA9IGZ1bmN0aW9uKGRhdGUxLCBkYXRlMikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZTEuZ2V0RnVsbFllYXIoKSwgZGF0ZTEuZ2V0TW9udGgoKSkgLSBuZXcgRGF0ZShkYXRlMi5nZXRGdWxsWWVhcigpLCBkYXRlMi5nZXRNb250aCgpKTtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGtleSwgZXZ0KSB7XG4gICAgICAgIHZhciBkYXRlID0gY3RybC5hY3RpdmVEYXRlLmdldE1vbnRoKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgZGF0ZSA9IGRhdGUgLSAxOyAgIC8vIHVwXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndXAnKSB7XG4gICAgICAgICAgZGF0ZSA9IGRhdGUgLSAzOyAgIC8vIGRvd25cbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBkYXRlID0gZGF0ZSArIDE7ICAgLy8gZG93blxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgZGF0ZSA9IGRhdGUgKyAzO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3BhZ2V1cCcgfHwga2V5ID09PSAncGFnZWRvd24nKSB7XG4gICAgICAgICAgdmFyIHllYXIgPSBjdHJsLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSArIChrZXkgPT09ICdwYWdldXAnID8gLSAxIDogMSk7XG4gICAgICAgICAgY3RybC5hY3RpdmVEYXRlLnNldEZ1bGxZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hvbWUnKSB7XG4gICAgICAgICAgZGF0ZSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZW5kJykge1xuICAgICAgICAgIGRhdGUgPSAxMTtcbiAgICAgICAgfVxuICAgICAgICBjdHJsLmFjdGl2ZURhdGUuc2V0TW9udGgoZGF0ZSk7XG4gICAgICB9O1xuXG4gICAgICBjdHJsLnJlZnJlc2hWaWV3KCk7XG4gICAgfVxuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ3llYXJwaWNrZXInLCBbJ2RhdGVGaWx0ZXInLCBmdW5jdGlvbihkYXRlRmlsdGVyKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL2RhdGVwaWNrZXIveWVhci5odG1sJyxcbiAgICByZXF1aXJlOiAnXmRhdGVwaWNrZXInLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCkge1xuICAgICAgdmFyIHJhbmdlID0gY3RybC55ZWFyUmFuZ2U7XG5cbiAgICAgIGN0cmwuc3RlcCA9IHsgeWVhcnM6IHJhbmdlIH07XG4gICAgICBjdHJsLmVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICBmdW5jdGlvbiBnZXRTdGFydGluZ1llYXIoIHllYXIgKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCgoeWVhciAtIDEpIC8gcmFuZ2UsIDEwKSAqIHJhbmdlICsgMTtcbiAgICAgIH1cblxuICAgICAgY3RybC5fcmVmcmVzaFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHllYXJzID0gbmV3IEFycmF5KHJhbmdlKSwgZGF0ZTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgc3RhcnQgPSBnZXRTdGFydGluZ1llYXIoY3RybC5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkpOyBpIDwgcmFuZ2U7IGkrKykge1xuICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShzdGFydCArIGksIDAsIDEpO1xuICAgICAgICAgIGN0cmwuZml4VGltZVpvbmUoZGF0ZSk7XG4gICAgICAgICAgeWVhcnNbaV0gPSBhbmd1bGFyLmV4dGVuZChjdHJsLmNyZWF0ZURhdGVPYmplY3QoZGF0ZSwgY3RybC5mb3JtYXRZZWFyKSwge1xuICAgICAgICAgICAgdWlkOiBzY29wZS51bmlxdWVJZCArICctJyArIGlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLnRpdGxlID0gW3llYXJzWzBdLmxhYmVsLCB5ZWFyc1tyYW5nZSAtIDFdLmxhYmVsXS5qb2luKCcgLSAnKTtcbiAgICAgICAgc2NvcGUucm93cyA9IGN0cmwuc3BsaXQoeWVhcnMsIDUpO1xuICAgICAgfTtcblxuICAgICAgY3RybC5jb21wYXJlID0gZnVuY3Rpb24oZGF0ZTEsIGRhdGUyKSB7XG4gICAgICAgIHJldHVybiBkYXRlMS5nZXRGdWxsWWVhcigpIC0gZGF0ZTIuZ2V0RnVsbFllYXIoKTtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uKGtleSwgZXZ0KSB7XG4gICAgICAgIHZhciBkYXRlID0gY3RybC5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ2xlZnQnKSB7XG4gICAgICAgICAgZGF0ZSA9IGRhdGUgLSAxOyAgIC8vIHVwXG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAndXAnKSB7XG4gICAgICAgICAgZGF0ZSA9IGRhdGUgLSA1OyAgIC8vIGRvd25cbiAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdyaWdodCcpIHtcbiAgICAgICAgICBkYXRlID0gZGF0ZSArIDE7ICAgLy8gZG93blxuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgZGF0ZSA9IGRhdGUgKyA1O1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ3BhZ2V1cCcgfHwga2V5ID09PSAncGFnZWRvd24nKSB7XG4gICAgICAgICAgZGF0ZSArPSAoa2V5ID09PSAncGFnZXVwJyA/IC0gMSA6IDEpICogY3RybC5zdGVwLnllYXJzO1xuICAgICAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2hvbWUnKSB7XG4gICAgICAgICAgZGF0ZSA9IGdldFN0YXJ0aW5nWWVhcihjdHJsLmFjdGl2ZURhdGUuZ2V0RnVsbFllYXIoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZW5kJykge1xuICAgICAgICAgIGRhdGUgPSBnZXRTdGFydGluZ1llYXIoY3RybC5hY3RpdmVEYXRlLmdldEZ1bGxZZWFyKCkpICsgcmFuZ2UgLSAxO1xuICAgICAgICB9XG4gICAgICAgIGN0cmwuYWN0aXZlRGF0ZS5zZXRGdWxsWWVhcihkYXRlKTtcbiAgICAgIH07XG5cbiAgICAgIGN0cmwucmVmcmVzaFZpZXcoKTtcbiAgICB9XG4gIH07XG59XSlcblxuLmNvbnN0YW50KCdkYXRlcGlja2VyUG9wdXBDb25maWcnLCB7XG4gIGRhdGVwaWNrZXJQb3B1cDogJ3l5eXktTU0tZGQnLFxuICBkYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybDogJ3RlbXBsYXRlL2RhdGVwaWNrZXIvcG9wdXAuaHRtbCcsXG4gIGRhdGVwaWNrZXJUZW1wbGF0ZVVybDogJ3RlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sJyxcbiAgaHRtbDVUeXBlczoge1xuICAgIGRhdGU6ICd5eXl5LU1NLWRkJyxcbiAgICAnZGF0ZXRpbWUtbG9jYWwnOiAneXl5eS1NTS1kZFRISDptbTpzcy5zc3MnLFxuICAgICdtb250aCc6ICd5eXl5LU1NJ1xuICB9LFxuICBjdXJyZW50VGV4dDogJ1RvZGF5JyxcbiAgY2xlYXJUZXh0OiAnQ2xlYXInLFxuICBjbG9zZVRleHQ6ICdEb25lJyxcbiAgY2xvc2VPbkRhdGVTZWxlY3Rpb246IHRydWUsXG4gIGFwcGVuZFRvQm9keTogZmFsc2UsXG4gIHNob3dCdXR0b25CYXI6IHRydWUsXG4gIG9uT3BlbkZvY3VzOiB0cnVlXG59KVxuXG4uZGlyZWN0aXZlKCdkYXRlcGlja2VyUG9wdXAnLCBbJyRjb21waWxlJywgJyRwYXJzZScsICckZG9jdW1lbnQnLCAnJHJvb3RTY29wZScsICckcG9zaXRpb24nLCAnZGF0ZUZpbHRlcicsICdkYXRlUGFyc2VyJywgJ2RhdGVwaWNrZXJQb3B1cENvbmZpZycsICckdGltZW91dCcsXG5mdW5jdGlvbigkY29tcGlsZSwgJHBhcnNlLCAkZG9jdW1lbnQsICRyb290U2NvcGUsICRwb3NpdGlvbiwgZGF0ZUZpbHRlciwgZGF0ZVBhcnNlciwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnLCAkdGltZW91dCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICBzY29wZToge1xuICAgICAgaXNPcGVuOiAnPT8nLFxuICAgICAgY3VycmVudFRleHQ6ICdAJyxcbiAgICAgIGNsZWFyVGV4dDogJ0AnLFxuICAgICAgY2xvc2VUZXh0OiAnQCcsXG4gICAgICBkYXRlRGlzYWJsZWQ6ICcmJyxcbiAgICAgIGN1c3RvbUNsYXNzOiAnJidcbiAgICB9LFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbCkge1xuICAgICAgdmFyIGRhdGVGb3JtYXQsXG4gICAgICAgICAgY2xvc2VPbkRhdGVTZWxlY3Rpb24gPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5jbG9zZU9uRGF0ZVNlbGVjdGlvbikgPyBzY29wZS4kcGFyZW50LiRldmFsKGF0dHJzLmNsb3NlT25EYXRlU2VsZWN0aW9uKSA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5jbG9zZU9uRGF0ZVNlbGVjdGlvbixcbiAgICAgICAgICBhcHBlbmRUb0JvZHkgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5kYXRlcGlja2VyQXBwZW5kVG9Cb2R5KSA/IHNjb3BlLiRwYXJlbnQuJGV2YWwoYXR0cnMuZGF0ZXBpY2tlckFwcGVuZFRvQm9keSkgOiBkYXRlcGlja2VyUG9wdXBDb25maWcuYXBwZW5kVG9Cb2R5LFxuICAgICAgICAgIG9uT3BlbkZvY3VzID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMub25PcGVuRm9jdXMpID8gc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5vbk9wZW5Gb2N1cykgOiBkYXRlcGlja2VyUG9wdXBDb25maWcub25PcGVuRm9jdXMsXG4gICAgICAgICAgZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmwgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCkgPyBhdHRycy5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCA6IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5kYXRlcGlja2VyUG9wdXBUZW1wbGF0ZVVybCxcbiAgICAgICAgICBkYXRlcGlja2VyVGVtcGxhdGVVcmwgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5kYXRlcGlja2VyVGVtcGxhdGVVcmwpID8gYXR0cnMuZGF0ZXBpY2tlclRlbXBsYXRlVXJsIDogZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmRhdGVwaWNrZXJUZW1wbGF0ZVVybCxcbiAgICAgICAgICBjYWNoZSA9IHt9O1xuXG4gICAgICBzY29wZS5zaG93QnV0dG9uQmFyID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuc2hvd0J1dHRvbkJhcikgPyBzY29wZS4kcGFyZW50LiRldmFsKGF0dHJzLnNob3dCdXR0b25CYXIpIDogZGF0ZXBpY2tlclBvcHVwQ29uZmlnLnNob3dCdXR0b25CYXI7XG5cbiAgICAgIHNjb3BlLmdldFRleHQgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgcmV0dXJuIHNjb3BlW2tleSArICdUZXh0J10gfHwgZGF0ZXBpY2tlclBvcHVwQ29uZmlnW2tleSArICdUZXh0J107XG4gICAgICB9O1xuXG4gICAgICBzY29wZS5pc0Rpc2FibGVkID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICBpZiAoZGF0ZSA9PT0gJ3RvZGF5Jykge1xuICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICgoc2NvcGUud2F0Y2hEYXRhLm1pbkRhdGUgJiYgc2NvcGUuY29tcGFyZShkYXRlLCBjYWNoZS5taW5EYXRlKSA8IDApIHx8XG4gICAgICAgICAgKHNjb3BlLndhdGNoRGF0YS5tYXhEYXRlICYmIHNjb3BlLmNvbXBhcmUoZGF0ZSwgY2FjaGUubWF4RGF0ZSkgPiAwKSk7XG4gICAgICB9O1xuXG4gICAgICBzY29wZS5jb21wYXJlID0gZnVuY3Rpb24oZGF0ZTEsIGRhdGUyKSB7XG4gICAgICAgIHJldHVybiAobmV3IERhdGUoZGF0ZTEuZ2V0RnVsbFllYXIoKSwgZGF0ZTEuZ2V0TW9udGgoKSwgZGF0ZTEuZ2V0RGF0ZSgpKSAtIG5ldyBEYXRlKGRhdGUyLmdldEZ1bGxZZWFyKCksIGRhdGUyLmdldE1vbnRoKCksIGRhdGUyLmdldERhdGUoKSkpO1xuICAgICAgfTtcblxuICAgICAgdmFyIGlzSHRtbDVEYXRlSW5wdXQgPSBmYWxzZTtcbiAgICAgIGlmIChkYXRlcGlja2VyUG9wdXBDb25maWcuaHRtbDVUeXBlc1thdHRycy50eXBlXSkge1xuICAgICAgICBkYXRlRm9ybWF0ID0gZGF0ZXBpY2tlclBvcHVwQ29uZmlnLmh0bWw1VHlwZXNbYXR0cnMudHlwZV07XG4gICAgICAgIGlzSHRtbDVEYXRlSW5wdXQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0ZUZvcm1hdCA9IGF0dHJzLmRhdGVwaWNrZXJQb3B1cCB8fCBkYXRlcGlja2VyUG9wdXBDb25maWcuZGF0ZXBpY2tlclBvcHVwO1xuICAgICAgICBhdHRycy4kb2JzZXJ2ZSgnZGF0ZXBpY2tlclBvcHVwJywgZnVuY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgbmV3RGF0ZUZvcm1hdCA9IHZhbHVlIHx8IGRhdGVwaWNrZXJQb3B1cENvbmZpZy5kYXRlcGlja2VyUG9wdXA7XG4gICAgICAgICAgICAvLyBJbnZhbGlkYXRlIHRoZSAkbW9kZWxWYWx1ZSB0byBlbnN1cmUgdGhhdCBmb3JtYXR0ZXJzIHJlLXJ1blxuICAgICAgICAgICAgLy8gRklYTUU6IFJlZmFjdG9yIHdoZW4gUFIgaXMgbWVyZ2VkOiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTA3NjRcbiAgICAgICAgICAgIGlmIChuZXdEYXRlRm9ybWF0ICE9PSBkYXRlRm9ybWF0KSB7XG4gICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBuZXdEYXRlRm9ybWF0O1xuICAgICAgICAgICAgICBuZ01vZGVsLiRtb2RlbFZhbHVlID0gbnVsbDtcblxuICAgICAgICAgICAgICBpZiAoIWRhdGVGb3JtYXQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGVwaWNrZXJQb3B1cCBtdXN0IGhhdmUgYSBkYXRlIGZvcm1hdCBzcGVjaWZpZWQuJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZGF0ZUZvcm1hdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2RhdGVwaWNrZXJQb3B1cCBtdXN0IGhhdmUgYSBkYXRlIGZvcm1hdCBzcGVjaWZpZWQuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0h0bWw1RGF0ZUlucHV0ICYmIGF0dHJzLmRhdGVwaWNrZXJQb3B1cCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0hUTUw1IGRhdGUgaW5wdXQgdHlwZXMgZG8gbm90IHN1cHBvcnQgY3VzdG9tIGZvcm1hdHMuJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHBvcHVwIGVsZW1lbnQgdXNlZCB0byBkaXNwbGF5IGNhbGVuZGFyXG4gICAgICB2YXIgcG9wdXBFbCA9IGFuZ3VsYXIuZWxlbWVudCgnPGRpdiBkYXRlcGlja2VyLXBvcHVwLXdyYXA+PGRpdiBkYXRlcGlja2VyPjwvZGl2PjwvZGl2PicpO1xuICAgICAgcG9wdXBFbC5hdHRyKHtcbiAgICAgICAgJ25nLW1vZGVsJzogJ2RhdGUnLFxuICAgICAgICAnbmctY2hhbmdlJzogJ2RhdGVTZWxlY3Rpb24oZGF0ZSknLFxuICAgICAgICAndGVtcGxhdGUtdXJsJzogZGF0ZXBpY2tlclBvcHVwVGVtcGxhdGVVcmxcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBjYW1lbHRvRGFzaChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8oW0EtWl0pL2csIGZ1bmN0aW9uKCQxKSB7IHJldHVybiAnLScgKyAkMS50b0xvd2VyQ2FzZSgpOyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gZGF0ZXBpY2tlciBlbGVtZW50XG4gICAgICB2YXIgZGF0ZXBpY2tlckVsID0gYW5ndWxhci5lbGVtZW50KHBvcHVwRWwuY2hpbGRyZW4oKVswXSk7XG4gICAgICBkYXRlcGlja2VyRWwuYXR0cigndGVtcGxhdGUtdXJsJywgZGF0ZXBpY2tlclRlbXBsYXRlVXJsKTtcblxuICAgICAgaWYgKGlzSHRtbDVEYXRlSW5wdXQpIHtcbiAgICAgICAgaWYgKGF0dHJzLnR5cGUgPT09ICdtb250aCcpIHtcbiAgICAgICAgICBkYXRlcGlja2VyRWwuYXR0cignZGF0ZXBpY2tlci1tb2RlJywgJ1wibW9udGhcIicpO1xuICAgICAgICAgIGRhdGVwaWNrZXJFbC5hdHRyKCdtaW4tbW9kZScsICdtb250aCcpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhdHRycy5kYXRlcGlja2VyT3B0aW9ucykge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHNjb3BlLiRwYXJlbnQuJGV2YWwoYXR0cnMuZGF0ZXBpY2tlck9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmluaXREYXRlKSB7XG4gICAgICAgICAgc2NvcGUuaW5pdERhdGUgPSBvcHRpb25zLmluaXREYXRlO1xuICAgICAgICAgIGRhdGVwaWNrZXJFbC5hdHRyKCdpbml0LWRhdGUnLCAnaW5pdERhdGUnKTtcbiAgICAgICAgICBkZWxldGUgb3B0aW9ucy5pbml0RGF0ZTtcbiAgICAgICAgfVxuICAgICAgICBhbmd1bGFyLmZvckVhY2gob3B0aW9ucywgZnVuY3Rpb24odmFsdWUsIG9wdGlvbikge1xuICAgICAgICAgIGRhdGVwaWNrZXJFbC5hdHRyKCBjYW1lbHRvRGFzaChvcHRpb24pLCB2YWx1ZSApO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgc2NvcGUud2F0Y2hEYXRhID0ge307XG4gICAgICBhbmd1bGFyLmZvckVhY2goWydtaW5Nb2RlJywgJ21heE1vZGUnLCAnbWluRGF0ZScsICdtYXhEYXRlJywgJ2RhdGVwaWNrZXJNb2RlJywgJ2luaXREYXRlJywgJ3Nob3J0Y3V0UHJvcGFnYXRpb24nXSwgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChhdHRyc1trZXldKSB7XG4gICAgICAgICAgdmFyIGdldEF0dHJpYnV0ZSA9ICRwYXJzZShhdHRyc1trZXldKTtcbiAgICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaChnZXRBdHRyaWJ1dGUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBzY29wZS53YXRjaERhdGFba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ21pbkRhdGUnIHx8IGtleSA9PT0gJ21heERhdGUnKSB7XG4gICAgICAgICAgICAgIGNhY2hlW2tleV0gPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGF0ZXBpY2tlckVsLmF0dHIoY2FtZWx0b0Rhc2goa2V5KSwgJ3dhdGNoRGF0YS4nICsga2V5KTtcblxuICAgICAgICAgIC8vIFByb3BhZ2F0ZSBjaGFuZ2VzIGZyb20gZGF0ZXBpY2tlciB0byBvdXRzaWRlXG4gICAgICAgICAgaWYgKGtleSA9PT0gJ2RhdGVwaWNrZXJNb2RlJykge1xuICAgICAgICAgICAgdmFyIHNldEF0dHJpYnV0ZSA9IGdldEF0dHJpYnV0ZS5hc3NpZ247XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2goJ3dhdGNoRGF0YS4nICsga2V5LCBmdW5jdGlvbih2YWx1ZSwgb2xkdmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihzZXRBdHRyaWJ1dGUpICYmIHZhbHVlICE9PSBvbGR2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHNldEF0dHJpYnV0ZShzY29wZS4kcGFyZW50LCB2YWx1ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoYXR0cnMuZGF0ZURpc2FibGVkKSB7XG4gICAgICAgIGRhdGVwaWNrZXJFbC5hdHRyKCdkYXRlLWRpc2FibGVkJywgJ2RhdGVEaXNhYmxlZCh7IGRhdGU6IGRhdGUsIG1vZGU6IG1vZGUgfSknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF0dHJzLnNob3dXZWVrcykge1xuICAgICAgICBkYXRlcGlja2VyRWwuYXR0cignc2hvdy13ZWVrcycsIGF0dHJzLnNob3dXZWVrcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhdHRycy5jdXN0b21DbGFzcykge1xuICAgICAgICBkYXRlcGlja2VyRWwuYXR0cignY3VzdG9tLWNsYXNzJywgJ2N1c3RvbUNsYXNzKHsgZGF0ZTogZGF0ZSwgbW9kZTogbW9kZSB9KScpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwYXJzZURhdGUodmlld1ZhbHVlKSB7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgICAvLyBwcmVzdW1hYmx5IHRpbWVzdGFtcCB0byBkYXRlIG9iamVjdFxuICAgICAgICAgIHZpZXdWYWx1ZSA9IG5ldyBEYXRlKHZpZXdWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZpZXdWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNEYXRlKHZpZXdWYWx1ZSkgJiYgIWlzTmFOKHZpZXdWYWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdmlld1ZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGFuZ3VsYXIuaXNTdHJpbmcodmlld1ZhbHVlKSkge1xuICAgICAgICAgIHZhciBkYXRlID0gZGF0ZVBhcnNlci5wYXJzZSh2aWV3VmFsdWUsIGRhdGVGb3JtYXQsIHNjb3BlLmRhdGUpO1xuICAgICAgICAgIGlmIChpc05hTihkYXRlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICB2YXIgdmFsdWUgPSBtb2RlbFZhbHVlIHx8IHZpZXdWYWx1ZTtcblxuICAgICAgICBpZiAoIWF0dHJzLm5nUmVxdWlyZWQgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYW5ndWxhci5pc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoYW5ndWxhci5pc0RhdGUodmFsdWUpICYmICFpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgIHZhciBkYXRlID0gZGF0ZVBhcnNlci5wYXJzZSh2YWx1ZSwgZGF0ZUZvcm1hdCk7XG4gICAgICAgICAgcmV0dXJuICFpc05hTihkYXRlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0h0bWw1RGF0ZUlucHV0KSB7XG4gICAgICAgIC8vIEludGVybmFsIEFQSSB0byBtYWludGFpbiB0aGUgY29ycmVjdCBuZy1pbnZhbGlkLVtrZXldIGNsYXNzXG4gICAgICAgIG5nTW9kZWwuJCRwYXJzZXJOYW1lID0gJ2RhdGUnO1xuICAgICAgICBuZ01vZGVsLiR2YWxpZGF0b3JzLmRhdGUgPSB2YWxpZGF0b3I7XG4gICAgICAgIG5nTW9kZWwuJHBhcnNlcnMudW5zaGlmdChwYXJzZURhdGUpO1xuICAgICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBzY29wZS5kYXRlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIG5nTW9kZWwuJGlzRW1wdHkodmFsdWUpID8gdmFsdWUgOiBkYXRlRmlsdGVyKHZhbHVlLCBkYXRlRm9ybWF0KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBzY29wZS5kYXRlID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSW5uZXIgY2hhbmdlXG4gICAgICBzY29wZS5kYXRlU2VsZWN0aW9uID0gZnVuY3Rpb24oZHQpIHtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGR0KSkge1xuICAgICAgICAgIHNjb3BlLmRhdGUgPSBkdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGF0ZSA9IHNjb3BlLmRhdGUgPyBkYXRlRmlsdGVyKHNjb3BlLmRhdGUsIGRhdGVGb3JtYXQpIDogbnVsbDsgLy8gU2V0dGluZyB0byBOVUxMIGlzIG5lY2Vzc2FyeSBmb3IgZm9ybSB2YWxpZGF0b3JzIHRvIGZ1bmN0aW9uXG4gICAgICAgIGVsZW1lbnQudmFsKGRhdGUpO1xuICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoZGF0ZSk7XG5cbiAgICAgICAgaWYgKGNsb3NlT25EYXRlU2VsZWN0aW9uKSB7XG4gICAgICAgICAgc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgZWxlbWVudFswXS5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAvLyBEZXRlY3QgY2hhbmdlcyBpbiB0aGUgdmlldyBmcm9tIHRoZSB0ZXh0IGJveFxuICAgICAgbmdNb2RlbC4kdmlld0NoYW5nZUxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS5kYXRlID0gZGF0ZVBhcnNlci5wYXJzZShuZ01vZGVsLiR2aWV3VmFsdWUsIGRhdGVGb3JtYXQsIHNjb3BlLmRhdGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBkb2N1bWVudENsaWNrQmluZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGlmIChzY29wZS5pc09wZW4gJiYgIShlbGVtZW50WzBdLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkgfHwgcG9wdXBFbFswXS5jb250YWlucyhldmVudC50YXJnZXQpKSkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICB2YXIgaW5wdXRLZXlkb3duQmluZCA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBpZiAoZXZ0LndoaWNoID09PSAyNyAmJiBzY29wZS5pc09wZW4pIHtcbiAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2NvcGUuaXNPcGVuID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZWxlbWVudFswXS5mb2N1cygpO1xuICAgICAgICB9IGVsc2UgaWYgKGV2dC53aGljaCA9PT0gNDAgJiYgIXNjb3BlLmlzT3Blbikge1xuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzY29wZS5pc09wZW4gPSB0cnVlO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZWxlbWVudC5iaW5kKCdrZXlkb3duJywgaW5wdXRLZXlkb3duQmluZCk7XG5cbiAgICAgIHNjb3BlLmtleWRvd24gPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgaWYgKGV2dC53aGljaCA9PT0gMjcpIHtcbiAgICAgICAgICBzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgICBlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNjb3BlLiR3YXRjaCgnaXNPcGVuJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgc2NvcGUucG9zaXRpb24gPSBhcHBlbmRUb0JvZHkgPyAkcG9zaXRpb24ub2Zmc2V0KGVsZW1lbnQpIDogJHBvc2l0aW9uLnBvc2l0aW9uKGVsZW1lbnQpO1xuICAgICAgICAgIHNjb3BlLnBvc2l0aW9uLnRvcCA9IHNjb3BlLnBvc2l0aW9uLnRvcCArIGVsZW1lbnQucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG5cbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChvbk9wZW5Gb2N1cykge1xuICAgICAgICAgICAgICBzY29wZS4kYnJvYWRjYXN0KCdkYXRlcGlja2VyLmZvY3VzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAkZG9jdW1lbnQuYmluZCgnY2xpY2snLCBkb2N1bWVudENsaWNrQmluZCk7XG4gICAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRkb2N1bWVudC51bmJpbmQoJ2NsaWNrJywgZG9jdW1lbnRDbGlja0JpbmQpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgICBpZiAoZGF0ZSA9PT0gJ3RvZGF5Jykge1xuICAgICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEYXRlKHNjb3BlLmRhdGUpKSB7XG4gICAgICAgICAgICBkYXRlID0gbmV3IERhdGUoc2NvcGUuZGF0ZSk7XG4gICAgICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHRvZGF5LmdldEZ1bGxZZWFyKCksIHRvZGF5LmdldE1vbnRoKCksIHRvZGF5LmdldERhdGUoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh0b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHNjb3BlLmRhdGVTZWxlY3Rpb24oZGF0ZSk7XG4gICAgICB9O1xuXG4gICAgICBzY29wZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICAgICAgZWxlbWVudFswXS5mb2N1cygpO1xuICAgICAgfTtcblxuICAgICAgdmFyICRwb3B1cCA9ICRjb21waWxlKHBvcHVwRWwpKHNjb3BlKTtcbiAgICAgIC8vIFByZXZlbnQgalF1ZXJ5IGNhY2hlIG1lbW9yeSBsZWFrICh0ZW1wbGF0ZSBpcyBub3cgcmVkdW5kYW50IGFmdGVyIGxpbmtpbmcpXG4gICAgICBwb3B1cEVsLnJlbW92ZSgpO1xuXG4gICAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgICRkb2N1bWVudC5maW5kKCdib2R5JykuYXBwZW5kKCRwb3B1cCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LmFmdGVyKCRwb3B1cCk7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHNjb3BlLmlzT3BlbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgJHBvcHVwLnJlbW92ZSgpO1xuICAgICAgICBlbGVtZW50LnVuYmluZCgna2V5ZG93bicsIGlucHV0S2V5ZG93bkJpbmQpO1xuICAgICAgICAkZG9jdW1lbnQudW5iaW5kKCdjbGljaycsIGRvY3VtZW50Q2xpY2tCaW5kKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCdkYXRlcGlja2VyUG9wdXBXcmFwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6J0VBJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICByZXR1cm4gYXR0cnMudGVtcGxhdGVVcmwgfHwgJ3RlbXBsYXRlL2RhdGVwaWNrZXIvcG9wdXAuaHRtbCc7XG4gICAgfVxuICB9O1xufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAuZHJvcGRvd24nLCBbJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuXG4uY29uc3RhbnQoJ2Ryb3Bkb3duQ29uZmlnJywge1xuICBvcGVuQ2xhc3M6ICdvcGVuJ1xufSlcblxuLnNlcnZpY2UoJ2Ryb3Bkb3duU2VydmljZScsIFsnJGRvY3VtZW50JywgJyRyb290U2NvcGUnLCBmdW5jdGlvbigkZG9jdW1lbnQsICRyb290U2NvcGUpIHtcbiAgdmFyIG9wZW5TY29wZSA9IG51bGw7XG5cbiAgdGhpcy5vcGVuID0gZnVuY3Rpb24oZHJvcGRvd25TY29wZSkge1xuICAgIGlmICghb3BlblNjb3BlKSB7XG4gICAgICAkZG9jdW1lbnQuYmluZCgnY2xpY2snLCBjbG9zZURyb3Bkb3duKTtcbiAgICAgICRkb2N1bWVudC5iaW5kKCdrZXlkb3duJywga2V5YmluZEZpbHRlcik7XG4gICAgfVxuXG4gICAgaWYgKG9wZW5TY29wZSAmJiBvcGVuU2NvcGUgIT09IGRyb3Bkb3duU2NvcGUpIHtcbiAgICAgIG9wZW5TY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvcGVuU2NvcGUgPSBkcm9wZG93blNjb3BlO1xuICB9O1xuXG4gIHRoaXMuY2xvc2UgPSBmdW5jdGlvbihkcm9wZG93blNjb3BlKSB7XG4gICAgaWYgKG9wZW5TY29wZSA9PT0gZHJvcGRvd25TY29wZSkge1xuICAgICAgb3BlblNjb3BlID0gbnVsbDtcbiAgICAgICRkb2N1bWVudC51bmJpbmQoJ2NsaWNrJywgY2xvc2VEcm9wZG93bik7XG4gICAgICAkZG9jdW1lbnQudW5iaW5kKCdrZXlkb3duJywga2V5YmluZEZpbHRlcik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBjbG9zZURyb3Bkb3duID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgLy8gVGhpcyBtZXRob2QgbWF5IHN0aWxsIGJlIGNhbGxlZCBkdXJpbmcgdGhlIHNhbWUgbW91c2UgZXZlbnQgdGhhdFxuICAgIC8vIHVuYm91bmQgdGhpcyBldmVudCBoYW5kbGVyLiBTbyBjaGVjayBvcGVuU2NvcGUgYmVmb3JlIHByb2NlZWRpbmcuXG4gICAgaWYgKCFvcGVuU2NvcGUpIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAoZXZ0ICYmIG9wZW5TY29wZS5nZXRBdXRvQ2xvc2UoKSA9PT0gJ2Rpc2FibGVkJykgIHsgcmV0dXJuIDsgfVxuXG4gICAgdmFyIHRvZ2dsZUVsZW1lbnQgPSBvcGVuU2NvcGUuZ2V0VG9nZ2xlRWxlbWVudCgpO1xuICAgIGlmIChldnQgJiYgdG9nZ2xlRWxlbWVudCAmJiB0b2dnbGVFbGVtZW50WzBdLmNvbnRhaW5zKGV2dC50YXJnZXQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGRyb3Bkb3duRWxlbWVudCA9IG9wZW5TY29wZS5nZXREcm9wZG93bkVsZW1lbnQoKTtcbiAgICBpZiAoZXZ0ICYmIG9wZW5TY29wZS5nZXRBdXRvQ2xvc2UoKSA9PT0gJ291dHNpZGVDbGljaycgJiZcbiAgICAgIGRyb3Bkb3duRWxlbWVudCAmJiBkcm9wZG93bkVsZW1lbnRbMF0uY29udGFpbnMoZXZ0LnRhcmdldCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcGVuU2NvcGUuaXNPcGVuID0gZmFsc2U7XG5cbiAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgb3BlblNjb3BlLiRhcHBseSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIga2V5YmluZEZpbHRlciA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGlmIChldnQud2hpY2ggPT09IDI3KSB7XG4gICAgICBvcGVuU2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50KCk7XG4gICAgICBjbG9zZURyb3Bkb3duKCk7XG4gICAgfSBlbHNlIGlmIChvcGVuU2NvcGUuaXNLZXluYXZFbmFibGVkKCkgJiYgLygzOHw0MCkvLnRlc3QoZXZ0LndoaWNoKSAmJiBvcGVuU2NvcGUuaXNPcGVuKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIG9wZW5TY29wZS5mb2N1c0Ryb3Bkb3duRW50cnkoZXZ0LndoaWNoKTtcbiAgICB9XG4gIH07XG59XSlcblxuLmNvbnRyb2xsZXIoJ0Ryb3Bkb3duQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICckcGFyc2UnLCAnZHJvcGRvd25Db25maWcnLCAnZHJvcGRvd25TZXJ2aWNlJywgJyRhbmltYXRlJywgJyRwb3NpdGlvbicsICckZG9jdW1lbnQnLCAnJGNvbXBpbGUnLCAnJHRlbXBsYXRlUmVxdWVzdCcsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCAkcGFyc2UsIGRyb3Bkb3duQ29uZmlnLCBkcm9wZG93blNlcnZpY2UsICRhbmltYXRlLCAkcG9zaXRpb24sICRkb2N1bWVudCwgJGNvbXBpbGUsICR0ZW1wbGF0ZVJlcXVlc3QpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgIHNjb3BlID0gJHNjb3BlLiRuZXcoKSwgLy8gY3JlYXRlIGEgY2hpbGQgc2NvcGUgc28gd2UgYXJlIG5vdCBwb2xsdXRpbmcgb3JpZ2luYWwgb25lXG4gICAgdGVtcGxhdGVTY29wZSxcbiAgICBvcGVuQ2xhc3MgPSBkcm9wZG93bkNvbmZpZy5vcGVuQ2xhc3MsXG4gICAgZ2V0SXNPcGVuLFxuICAgIHNldElzT3BlbiA9IGFuZ3VsYXIubm9vcCxcbiAgICB0b2dnbGVJbnZva2VyID0gJGF0dHJzLm9uVG9nZ2xlID8gJHBhcnNlKCRhdHRycy5vblRvZ2dsZSkgOiBhbmd1bGFyLm5vb3AsXG4gICAgYXBwZW5kVG9Cb2R5ID0gZmFsc2UsXG4gICAga2V5bmF2RW5hYmxlZCA9IGZhbHNlLFxuICAgIHNlbGVjdGVkT3B0aW9uID0gbnVsbCxcbiAgICBib2R5ID0gJGRvY3VtZW50LmZpbmQoJ2JvZHknKTtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgc2VsZi4kZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoJGF0dHJzLmlzT3Blbikge1xuICAgICAgZ2V0SXNPcGVuID0gJHBhcnNlKCRhdHRycy5pc09wZW4pO1xuICAgICAgc2V0SXNPcGVuID0gZ2V0SXNPcGVuLmFzc2lnbjtcblxuICAgICAgJHNjb3BlLiR3YXRjaChnZXRJc09wZW4sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHNjb3BlLmlzT3BlbiA9ICEhdmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBhcHBlbmRUb0JvZHkgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuZHJvcGRvd25BcHBlbmRUb0JvZHkpO1xuICAgIGtleW5hdkVuYWJsZWQgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMua2V5Ym9hcmROYXYpO1xuXG4gICAgaWYgKGFwcGVuZFRvQm9keSAmJiBzZWxmLmRyb3Bkb3duTWVudSkge1xuICAgICAgYm9keS5hcHBlbmQoc2VsZi5kcm9wZG93bk1lbnUpO1xuICAgICAgYm9keS5hZGRDbGFzcygnZHJvcGRvd24nKTtcbiAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24gaGFuZGxlRGVzdHJveUV2ZW50KCkge1xuICAgICAgICBzZWxmLmRyb3Bkb3duTWVudS5yZW1vdmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnRvZ2dsZSA9IGZ1bmN0aW9uKG9wZW4pIHtcbiAgICByZXR1cm4gc2NvcGUuaXNPcGVuID0gYXJndW1lbnRzLmxlbmd0aCA/ICEhb3BlbiA6ICFzY29wZS5pc09wZW47XG4gIH07XG5cbiAgLy8gQWxsb3cgb3RoZXIgZGlyZWN0aXZlcyB0byB3YXRjaCBzdGF0dXNcbiAgdGhpcy5pc09wZW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2NvcGUuaXNPcGVuO1xuICB9O1xuXG4gIHNjb3BlLmdldFRvZ2dsZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi50b2dnbGVFbGVtZW50O1xuICB9O1xuXG4gIHNjb3BlLmdldEF1dG9DbG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkYXR0cnMuYXV0b0Nsb3NlIHx8ICdhbHdheXMnOyAvL29yICdvdXRzaWRlQ2xpY2snIG9yICdkaXNhYmxlZCdcbiAgfTtcblxuICBzY29wZS5nZXRFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuJGVsZW1lbnQ7XG4gIH07XG5cbiAgc2NvcGUuaXNLZXluYXZFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGtleW5hdkVuYWJsZWQ7XG4gIH07XG5cbiAgc2NvcGUuZm9jdXNEcm9wZG93bkVudHJ5ID0gZnVuY3Rpb24oa2V5Q29kZSkge1xuICAgIHZhciBlbGVtcyA9IHNlbGYuZHJvcGRvd25NZW51ID8gLy9JZiBhcHBlbmQgdG8gYm9keSBpcyB1c2VkLlxuICAgICAgKGFuZ3VsYXIuZWxlbWVudChzZWxmLmRyb3Bkb3duTWVudSkuZmluZCgnYScpKSA6XG4gICAgICAoYW5ndWxhci5lbGVtZW50KHNlbGYuJGVsZW1lbnQpLmZpbmQoJ3VsJykuZXEoMCkuZmluZCgnYScpKTtcblxuICAgIHN3aXRjaCAoa2V5Q29kZSkge1xuICAgICAgY2FzZSAoNDApOiB7XG4gICAgICAgIGlmICghYW5ndWxhci5pc051bWJlcihzZWxmLnNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSAoc2VsZi5zZWxlY3RlZE9wdGlvbiA9PT0gZWxlbXMubGVuZ3RoIC0xID9cbiAgICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gOlxuICAgICAgICAgICAgc2VsZi5zZWxlY3RlZE9wdGlvbiArIDEpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAoMzgpOiB7XG4gICAgICAgIGlmICghYW5ndWxhci5pc051bWJlcihzZWxmLnNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSBlbGVtcy5sZW5ndGggLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuc2VsZWN0ZWRPcHRpb24gPSBzZWxmLnNlbGVjdGVkT3B0aW9uID09PSAwID9cbiAgICAgICAgICAgIDAgOiBzZWxmLnNlbGVjdGVkT3B0aW9uIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgZWxlbXNbc2VsZi5zZWxlY3RlZE9wdGlvbl0uZm9jdXMoKTtcbiAgfTtcblxuICBzY29wZS5nZXREcm9wZG93bkVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gc2VsZi5kcm9wZG93bk1lbnU7XG4gIH07XG5cbiAgc2NvcGUuZm9jdXNUb2dnbGVFbGVtZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYudG9nZ2xlRWxlbWVudCkge1xuICAgICAgc2VsZi50b2dnbGVFbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIHNjb3BlLiR3YXRjaCgnaXNPcGVuJywgZnVuY3Rpb24oaXNPcGVuLCB3YXNPcGVuKSB7XG4gICAgaWYgKGFwcGVuZFRvQm9keSAmJiBzZWxmLmRyb3Bkb3duTWVudSkge1xuICAgICAgdmFyIHBvcyA9ICRwb3NpdGlvbi5wb3NpdGlvbkVsZW1lbnRzKHNlbGYuJGVsZW1lbnQsIHNlbGYuZHJvcGRvd25NZW51LCAnYm90dG9tLWxlZnQnLCB0cnVlKTtcbiAgICAgIHZhciBjc3MgPSB7XG4gICAgICAgIHRvcDogcG9zLnRvcCArICdweCcsXG4gICAgICAgIGRpc3BsYXk6IGlzT3BlbiA/ICdibG9jaycgOiAnbm9uZSdcbiAgICAgIH07XG5cbiAgICAgIHZhciByaWdodGFsaWduID0gc2VsZi5kcm9wZG93bk1lbnUuaGFzQ2xhc3MoJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnKTtcbiAgICAgIGlmICghcmlnaHRhbGlnbikge1xuICAgICAgICBjc3MubGVmdCA9IHBvcy5sZWZ0ICsgJ3B4JztcbiAgICAgICAgY3NzLnJpZ2h0ID0gJ2F1dG8nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3NzLmxlZnQgPSAnYXV0byc7XG4gICAgICAgIGNzcy5yaWdodCA9ICh3aW5kb3cuaW5uZXJXaWR0aCAtIChwb3MubGVmdCArIHNlbGYuJGVsZW1lbnQucHJvcCgnb2Zmc2V0V2lkdGgnKSkpICsgJ3B4JztcbiAgICAgIH1cblxuICAgICAgc2VsZi5kcm9wZG93bk1lbnUuY3NzKGNzcyk7XG4gICAgfVxuXG4gICAgdmFyIG9wZW5Db250YWluZXIgPSBhcHBlbmRUb0JvZHkgPyBib2R5IDogc2VsZi4kZWxlbWVudDtcblxuICAgICRhbmltYXRlW2lzT3BlbiA/ICdhZGRDbGFzcycgOiAncmVtb3ZlQ2xhc3MnXShvcGVuQ29udGFpbmVyLCBvcGVuQ2xhc3MpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQoaXNPcGVuKSAmJiBpc09wZW4gIT09IHdhc09wZW4pIHtcbiAgICAgICAgdG9nZ2xlSW52b2tlcigkc2NvcGUsIHsgb3BlbjogISFpc09wZW4gfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaXNPcGVuKSB7XG4gICAgICBpZiAoc2VsZi5kcm9wZG93bk1lbnVUZW1wbGF0ZVVybCkge1xuICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNlbGYuZHJvcGRvd25NZW51VGVtcGxhdGVVcmwpLnRoZW4oZnVuY3Rpb24odHBsQ29udGVudCkge1xuICAgICAgICAgIHRlbXBsYXRlU2NvcGUgPSBzY29wZS4kbmV3KCk7XG4gICAgICAgICAgJGNvbXBpbGUodHBsQ29udGVudC50cmltKCkpKHRlbXBsYXRlU2NvcGUsIGZ1bmN0aW9uKGRyb3Bkb3duRWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIG5ld0VsID0gZHJvcGRvd25FbGVtZW50O1xuICAgICAgICAgICAgc2VsZi5kcm9wZG93bk1lbnUucmVwbGFjZVdpdGgobmV3RWwpO1xuICAgICAgICAgICAgc2VsZi5kcm9wZG93bk1lbnUgPSBuZXdFbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHNjb3BlLmZvY3VzVG9nZ2xlRWxlbWVudCgpO1xuICAgICAgZHJvcGRvd25TZXJ2aWNlLm9wZW4oc2NvcGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc2VsZi5kcm9wZG93bk1lbnVUZW1wbGF0ZVVybCkge1xuICAgICAgICBpZiAodGVtcGxhdGVTY29wZSkge1xuICAgICAgICAgIHRlbXBsYXRlU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmV3RWwgPSBhbmd1bGFyLmVsZW1lbnQoJzx1bCBjbGFzcz1cImRyb3Bkb3duLW1lbnVcIj48L3VsPicpO1xuICAgICAgICBzZWxmLmRyb3Bkb3duTWVudS5yZXBsYWNlV2l0aChuZXdFbCk7XG4gICAgICAgIHNlbGYuZHJvcGRvd25NZW51ID0gbmV3RWw7XG4gICAgICB9XG5cbiAgICAgIGRyb3Bkb3duU2VydmljZS5jbG9zZShzY29wZSk7XG4gICAgICBzZWxmLnNlbGVjdGVkT3B0aW9uID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoYW5ndWxhci5pc0Z1bmN0aW9uKHNldElzT3BlbikpIHtcbiAgICAgIHNldElzT3Blbigkc2NvcGUsIGlzT3Blbik7XG4gICAgfVxuICB9KTtcblxuICAkc2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNjb3BlLmdldEF1dG9DbG9zZSgpICE9PSAnZGlzYWJsZWQnKSB7XG4gICAgICBzY29wZS5pc09wZW4gPSBmYWxzZTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBvZmZEZXN0cm95ID0gJHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICBzY29wZS4kZGVzdHJveSgpO1xuICB9KTtcbiAgc2NvcGUuJG9uKCckZGVzdHJveScsIG9mZkRlc3Ryb3kpO1xufV0pXG5cbi5kaXJlY3RpdmUoJ2Ryb3Bkb3duJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgY29udHJvbGxlcjogJ0Ryb3Bkb3duQ29udHJvbGxlcicsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBkcm9wZG93bkN0cmwpIHtcbiAgICAgIGRyb3Bkb3duQ3RybC5pbml0KCBlbGVtZW50ICk7XG4gICAgICBlbGVtZW50LmFkZENsYXNzKCdkcm9wZG93bicpO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ2Ryb3Bkb3duTWVudScsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgIHJlcXVpcmU6ICc/XmRyb3Bkb3duJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGRyb3Bkb3duQ3RybCkge1xuICAgICAgaWYgKCFkcm9wZG93bkN0cmwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHRwbFVybCA9IGF0dHJzLnRlbXBsYXRlVXJsO1xuICAgICAgaWYgKHRwbFVybCkge1xuICAgICAgICBkcm9wZG93bkN0cmwuZHJvcGRvd25NZW51VGVtcGxhdGVVcmwgPSB0cGxVcmw7XG4gICAgICB9XG4gICAgICBpZiAoIWRyb3Bkb3duQ3RybC5kcm9wZG93bk1lbnUpIHtcbiAgICAgICAgZHJvcGRvd25DdHJsLmRyb3Bkb3duTWVudSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgna2V5Ym9hcmROYXYnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/XmRyb3Bkb3duJyxcbiAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBkcm9wZG93bkN0cmwpIHtcblxuICAgICAgZWxlbWVudC5iaW5kKCdrZXlkb3duJywgZnVuY3Rpb24oZSkge1xuICAgICAgICBpZiAoWzM4LCA0MF0uaW5kZXhPZihlLndoaWNoKSAhPT0gLTEpIHtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgIHZhciBlbGVtcyA9IGRyb3Bkb3duQ3RybC5kcm9wZG93bk1lbnUuZmluZCgnYScpO1xuXG4gICAgICAgICAgc3dpdGNoIChlLndoaWNoKSB7XG4gICAgICAgICAgICBjYXNlICg0MCk6IHsgLy8gRG93blxuICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNOdW1iZXIoZHJvcGRvd25DdHJsLnNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duQ3RybC5zZWxlY3RlZE9wdGlvbiA9IDA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd25DdHJsLnNlbGVjdGVkT3B0aW9uID0gZHJvcGRvd25DdHJsLnNlbGVjdGVkT3B0aW9uID09PSBlbGVtcy5sZW5ndGggLTEgP1xuICAgICAgICAgICAgICAgICAgZHJvcGRvd25DdHJsLnNlbGVjdGVkT3B0aW9uIDogZHJvcGRvd25DdHJsLnNlbGVjdGVkT3B0aW9uICsgMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgKDM4KTogeyAvLyBVcFxuICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuaXNOdW1iZXIoZHJvcGRvd25DdHJsLnNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgICAgICAgICAgIGRyb3Bkb3duQ3RybC5zZWxlY3RlZE9wdGlvbiA9IGVsZW1zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHJvcGRvd25DdHJsLnNlbGVjdGVkT3B0aW9uID0gZHJvcGRvd25DdHJsLnNlbGVjdGVkT3B0aW9uID09PSAwID9cbiAgICAgICAgICAgICAgICAgIDAgOiBkcm9wZG93bkN0cmwuc2VsZWN0ZWRPcHRpb24gLSAxO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbGVtc1tkcm9wZG93bkN0cmwuc2VsZWN0ZWRPcHRpb25dLmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ2Ryb3Bkb3duVG9nZ2xlJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVxdWlyZTogJz9eZHJvcGRvd24nLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgZHJvcGRvd25DdHJsKSB7XG4gICAgICBpZiAoIWRyb3Bkb3duQ3RybCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoJ2Ryb3Bkb3duLXRvZ2dsZScpO1xuXG4gICAgICBkcm9wZG93bkN0cmwudG9nZ2xlRWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgIHZhciB0b2dnbGVEcm9wZG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50Lmhhc0NsYXNzKCdkaXNhYmxlZCcpICYmICFhdHRycy5kaXNhYmxlZCkge1xuICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRyb3Bkb3duQ3RybC50b2dnbGUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZWxlbWVudC5iaW5kKCdjbGljaycsIHRvZ2dsZURyb3Bkb3duKTtcblxuICAgICAgLy8gV0FJLUFSSUFcbiAgICAgIGVsZW1lbnQuYXR0cih7ICdhcmlhLWhhc3BvcHVwJzogdHJ1ZSwgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSB9KTtcbiAgICAgIHNjb3BlLiR3YXRjaChkcm9wZG93bkN0cmwuaXNPcGVuLCBmdW5jdGlvbiggaXNPcGVuICkge1xuICAgICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAhIWlzT3Blbik7XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50LnVuYmluZCgnY2xpY2snLCB0b2dnbGVEcm9wZG93bik7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59KTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5tb2RhbCcsIFtdKVxuXG4vKipcbiAqIEEgaGVscGVyLCBpbnRlcm5hbCBkYXRhIHN0cnVjdHVyZSB0aGF0IGFjdHMgYXMgYSBtYXAgYnV0IGFsc28gYWxsb3dzIGdldHRpbmcgLyByZW1vdmluZ1xuICogZWxlbWVudHMgaW4gdGhlIExJRk8gb3JkZXJcbiAqL1xuICAuZmFjdG9yeSgnJCRzdGFja2VkTWFwJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZU5ldzogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFjayA9IFtdO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYWRkOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoa2V5ID09IHN0YWNrW2ldLmtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGFja1tpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAga2V5czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBrZXlzLnB1c2goc3RhY2tbaV0ua2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlzO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICB2YXIgaWR4ID0gLTE7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChrZXkgPT0gc3RhY2tbaV0ua2V5KSB7XG4gICAgICAgICAgICAgICAgaWR4ID0gaTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnNwbGljZShpZHgsIDEpWzBdO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlVG9wOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGFjay5zcGxpY2Uoc3RhY2subGVuZ3RoIC0gMSwgMSlbMF07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBsZW5ndGg6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfSlcblxuLyoqXG4gKiBBIGhlbHBlciwgaW50ZXJuYWwgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBzdG9yZXMgYWxsIHJlZmVyZW5jZXMgYXR0YWNoZWQgdG8ga2V5XG4gKi9cbiAgLmZhY3RvcnkoJyQkbXVsdGlNYXAnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlTmV3OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1hcCA9IHt9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZW50cmllczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXMobWFwKS5tYXAoZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgICAgICAgdmFsdWU6IG1hcFtrZXldXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbWFwW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBoYXNLZXk6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuICEhbWFwW2tleV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXlzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIW1hcFtrZXldKSB7XG4gICAgICAgICAgICAgIG1hcFtrZXldID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hcFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gbWFwW2tleV07XG5cbiAgICAgICAgICAgIGlmICghdmFsdWVzKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGlkeCA9IHZhbHVlcy5pbmRleE9mKHZhbHVlKTtcblxuICAgICAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgdmFsdWVzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG1hcFtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuICB9KVxuXG4vKipcbiAqIEEgaGVscGVyIGRpcmVjdGl2ZSBmb3IgdGhlICRtb2RhbCBzZXJ2aWNlLiBJdCBjcmVhdGVzIGEgYmFja2Ryb3AgZWxlbWVudC5cbiAqL1xuICAuZGlyZWN0aXZlKCdtb2RhbEJhY2tkcm9wJywgW1xuICAgICAgICAgICAnJGFuaW1hdGUnLCAnJGluamVjdG9yJywgJyRtb2RhbFN0YWNrJyxcbiAgZnVuY3Rpb24oJGFuaW1hdGUgLCAgJGluamVjdG9yLCAgICRtb2RhbFN0YWNrKSB7XG4gICAgdmFyICRhbmltYXRlQ3NzID0gbnVsbDtcblxuICAgIGlmICgkaW5qZWN0b3IuaGFzKCckYW5pbWF0ZUNzcycpKSB7XG4gICAgICAkYW5pbWF0ZUNzcyA9ICRpbmplY3Rvci5nZXQoJyRhbmltYXRlQ3NzJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvbW9kYWwvYmFja2Ryb3AuaHRtbCcsXG4gICAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgIHRFbGVtZW50LmFkZENsYXNzKHRBdHRycy5iYWNrZHJvcENsYXNzKTtcbiAgICAgICAgcmV0dXJuIGxpbmtGbjtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgaWYgKGF0dHJzLm1vZGFsSW5DbGFzcykge1xuICAgICAgICBpZiAoJGFuaW1hdGVDc3MpIHtcbiAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICBhZGRDbGFzczogYXR0cnMubW9kYWxJbkNsYXNzXG4gICAgICAgICAgfSkuc3RhcnQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkYW5pbWF0ZS5hZGRDbGFzcyhlbGVtZW50LCBhdHRycy5tb2RhbEluQ2xhc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2NvcGUuJG9uKCRtb2RhbFN0YWNrLk5PV19DTE9TSU5HX0VWRU5ULCBmdW5jdGlvbihlLCBzZXRJc0FzeW5jKSB7XG4gICAgICAgICAgdmFyIGRvbmUgPSBzZXRJc0FzeW5jKCk7XG4gICAgICAgICAgaWYgKCRhbmltYXRlQ3NzKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBhdHRycy5tb2RhbEluQ2xhc3NcbiAgICAgICAgICAgIH0pLnN0YXJ0KCkudGhlbihkb25lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgJGFuaW1hdGUucmVtb3ZlQ2xhc3MoZWxlbWVudCwgYXR0cnMubW9kYWxJbkNsYXNzKS50aGVuKGRvbmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XSlcblxuICAuZGlyZWN0aXZlKCdtb2RhbFdpbmRvdycsIFtcbiAgICAgICAgICAgJyRtb2RhbFN0YWNrJywgJyRxJywgJyRhbmltYXRlJywgJyRpbmplY3RvcicsXG4gIGZ1bmN0aW9uKCRtb2RhbFN0YWNrICwgICRxICwgICRhbmltYXRlLCAgICRpbmplY3Rvcikge1xuICAgIHZhciAkYW5pbWF0ZUNzcyA9IG51bGw7XG5cbiAgICBpZiAoJGluamVjdG9yLmhhcygnJGFuaW1hdGVDc3MnKSkge1xuICAgICAgJGFuaW1hdGVDc3MgPSAkaW5qZWN0b3IuZ2V0KCckYW5pbWF0ZUNzcycpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGluZGV4OiAnQCdcbiAgICAgIH0sXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgIHJldHVybiB0QXR0cnMudGVtcGxhdGVVcmwgfHwgJ3RlbXBsYXRlL21vZGFsL3dpbmRvdy5odG1sJztcbiAgICAgIH0sXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhhdHRycy53aW5kb3dDbGFzcyB8fCAnJyk7XG4gICAgICAgIHNjb3BlLnNpemUgPSBhdHRycy5zaXplO1xuXG4gICAgICAgIHNjb3BlLmNsb3NlID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgdmFyIG1vZGFsID0gJG1vZGFsU3RhY2suZ2V0VG9wKCk7XG4gICAgICAgICAgaWYgKG1vZGFsICYmIG1vZGFsLnZhbHVlLmJhY2tkcm9wICYmIG1vZGFsLnZhbHVlLmJhY2tkcm9wICE9PSAnc3RhdGljJyAmJiAoZXZ0LnRhcmdldCA9PT0gZXZ0LmN1cnJlbnRUYXJnZXQpKSB7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICRtb2RhbFN0YWNrLmRpc21pc3MobW9kYWwua2V5LCAnYmFja2Ryb3AgY2xpY2snKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGhpcyBwcm9wZXJ0eSBpcyBvbmx5IGFkZGVkIHRvIHRoZSBzY29wZSBmb3IgdGhlIHB1cnBvc2Ugb2YgZGV0ZWN0aW5nIHdoZW4gdGhpcyBkaXJlY3RpdmUgaXMgcmVuZGVyZWQuXG4gICAgICAgIC8vIFdlIGNhbiBkZXRlY3QgdGhhdCBieSB1c2luZyB0aGlzIHByb3BlcnR5IGluIHRoZSB0ZW1wbGF0ZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBkaXJlY3RpdmUgYW5kIHRoZW4gdXNlXG4gICAgICAgIC8vIHtAbGluayBBdHRyaWJ1dGUjJG9ic2VydmV9IG9uIGl0LiBGb3IgbW9yZSBkZXRhaWxzIHBsZWFzZSBzZWUge0BsaW5rIFRhYmxlQ29sdW1uUmVzaXplfS5cbiAgICAgICAgc2NvcGUuJGlzUmVuZGVyZWQgPSB0cnVlO1xuXG4gICAgICAgIC8vIERlZmVycmVkIG9iamVjdCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiB0aGlzIG1vZGFsIGlzIHJlbmRlci5cbiAgICAgICAgdmFyIG1vZGFsUmVuZGVyRGVmZXJPYmogPSAkcS5kZWZlcigpO1xuICAgICAgICAvLyBPYnNlcnZlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIG9uIG5leHQgZGlnZXN0IGN5Y2xlIGFmdGVyIGNvbXBpbGF0aW9uLCBlbnN1cmluZyB0aGF0IHRoZSBET00gaXMgcmVhZHkuXG4gICAgICAgIC8vIEluIG9yZGVyIHRvIHVzZSB0aGlzIHdheSBvZiBmaW5kaW5nIHdoZXRoZXIgRE9NIGlzIHJlYWR5LCB3ZSBuZWVkIHRvIG9ic2VydmUgYSBzY29wZSBwcm9wZXJ0eSB1c2VkIGluIG1vZGFsJ3MgdGVtcGxhdGUuXG4gICAgICAgIGF0dHJzLiRvYnNlcnZlKCdtb2RhbFJlbmRlcicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKHZhbHVlID09ICd0cnVlJykge1xuICAgICAgICAgICAgbW9kYWxSZW5kZXJEZWZlck9iai5yZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtb2RhbFJlbmRlckRlZmVyT2JqLnByb21pc2UudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYW5pbWF0aW9uUHJvbWlzZSA9IG51bGw7XG5cbiAgICAgICAgICBpZiAoYXR0cnMubW9kYWxJbkNsYXNzKSB7XG4gICAgICAgICAgICBpZiAoJGFuaW1hdGVDc3MpIHtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uUHJvbWlzZSA9ICRhbmltYXRlQ3NzKGVsZW1lbnQsIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzczogYXR0cnMubW9kYWxJbkNsYXNzXG4gICAgICAgICAgICAgIH0pLnN0YXJ0KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhbmltYXRpb25Qcm9taXNlID0gJGFuaW1hdGUuYWRkQ2xhc3MoZWxlbWVudCwgYXR0cnMubW9kYWxJbkNsYXNzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2NvcGUuJG9uKCRtb2RhbFN0YWNrLk5PV19DTE9TSU5HX0VWRU5ULCBmdW5jdGlvbihlLCBzZXRJc0FzeW5jKSB7XG4gICAgICAgICAgICAgIHZhciBkb25lID0gc2V0SXNBc3luYygpO1xuICAgICAgICAgICAgICBpZiAoJGFuaW1hdGVDc3MpIHtcbiAgICAgICAgICAgICAgICAkYW5pbWF0ZUNzcyhlbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogYXR0cnMubW9kYWxJbkNsYXNzXG4gICAgICAgICAgICAgICAgfSkuc3RhcnQoKS50aGVuKGRvbmUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKGVsZW1lbnQsIGF0dHJzLm1vZGFsSW5DbGFzcykudGhlbihkb25lKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG5cbiAgICAgICAgICAkcS53aGVuKGFuaW1hdGlvblByb21pc2UpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXRzV2l0aEF1dG9mb2N1cyA9IGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnW2F1dG9mb2N1c10nKTtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQXV0by1mb2N1c2luZyBvZiBhIGZyZXNobHktb3BlbmVkIG1vZGFsIGVsZW1lbnQgY2F1c2VzIGFueSBjaGlsZCBlbGVtZW50c1xuICAgICAgICAgICAgICogd2l0aCB0aGUgYXV0b2ZvY3VzIGF0dHJpYnV0ZSB0byBsb3NlIGZvY3VzLiBUaGlzIGlzIGFuIGlzc3VlIG9uIHRvdWNoXG4gICAgICAgICAgICAgKiBiYXNlZCBkZXZpY2VzIHdoaWNoIHdpbGwgc2hvdyBhbmQgdGhlbiBoaWRlIHRoZSBvbnNjcmVlbiBrZXlib2FyZC5cbiAgICAgICAgICAgICAqIEF0dGVtcHRzIHRvIHJlZm9jdXMgdGhlIGF1dG9mb2N1cyBlbGVtZW50IHZpYSBKYXZhU2NyaXB0IHdpbGwgbm90IHJlb3BlblxuICAgICAgICAgICAgICogdGhlIG9uc2NyZWVuIGtleWJvYXJkLiBGaXhlZCBieSB1cGRhdGVkIHRoZSBmb2N1c2luZyBsb2dpYyB0byBvbmx5IGF1dG9mb2N1c1xuICAgICAgICAgICAgICogdGhlIG1vZGFsIGVsZW1lbnQgaWYgdGhlIG1vZGFsIGRvZXMgbm90IGNvbnRhaW4gYW4gYXV0b2ZvY3VzIGVsZW1lbnQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChpbnB1dHNXaXRoQXV0b2ZvY3VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBpbnB1dHNXaXRoQXV0b2ZvY3VzWzBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBlbGVtZW50WzBdLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICAvLyBOb3RpZnkge0BsaW5rICRtb2RhbFN0YWNrfSB0aGF0IG1vZGFsIGlzIHJlbmRlcmVkLlxuICAgICAgICAgIHZhciBtb2RhbCA9ICRtb2RhbFN0YWNrLmdldFRvcCgpO1xuICAgICAgICAgIGlmIChtb2RhbCkge1xuICAgICAgICAgICAgJG1vZGFsU3RhY2subW9kYWxSZW5kZXJlZChtb2RhbC5rZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pXG5cbiAgLmRpcmVjdGl2ZSgnbW9kYWxBbmltYXRpb25DbGFzcycsIFtcbiAgICBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7XG4gICAgICAgICAgaWYgKHRBdHRycy5tb2RhbEFuaW1hdGlvbikge1xuICAgICAgICAgICAgdEVsZW1lbnQuYWRkQ2xhc3ModEF0dHJzLm1vZGFsQW5pbWF0aW9uQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XSlcblxuICAuZGlyZWN0aXZlKCdtb2RhbFRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBjb250cm9sbGVyLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICAkdHJhbnNjbHVkZSgkc2NvcGUuJHBhcmVudCwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pXG5cbiAgLmZhY3RvcnkoJyRtb2RhbFN0YWNrJywgW1xuICAgICAgICAgICAgICckYW5pbWF0ZScsICckdGltZW91dCcsICckZG9jdW1lbnQnLCAnJGNvbXBpbGUnLCAnJHJvb3RTY29wZScsXG4gICAgICAgICAgICAgJyRxJyxcbiAgICAgICAgICAgICAnJGluamVjdG9yJyxcbiAgICAgICAgICAgICAnJCRtdWx0aU1hcCcsXG4gICAgICAgICAgICAgJyQkc3RhY2tlZE1hcCcsXG4gICAgZnVuY3Rpb24oJGFuaW1hdGUgLCAgJHRpbWVvdXQgLCAgJGRvY3VtZW50ICwgICRjb21waWxlICwgICRyb290U2NvcGUgLFxuICAgICAgICAgICAgICAkcSxcbiAgICAgICAgICAgICAgJGluamVjdG9yLFxuICAgICAgICAgICAgICAkJG11bHRpTWFwLFxuICAgICAgICAgICAgICAkJHN0YWNrZWRNYXApIHtcbiAgICAgIHZhciAkYW5pbWF0ZUNzcyA9IG51bGw7XG5cbiAgICAgIGlmICgkaW5qZWN0b3IuaGFzKCckYW5pbWF0ZUNzcycpKSB7XG4gICAgICAgICRhbmltYXRlQ3NzID0gJGluamVjdG9yLmdldCgnJGFuaW1hdGVDc3MnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIE9QRU5FRF9NT0RBTF9DTEFTUyA9ICdtb2RhbC1vcGVuJztcblxuICAgICAgdmFyIGJhY2tkcm9wRG9tRWwsIGJhY2tkcm9wU2NvcGU7XG4gICAgICB2YXIgb3BlbmVkV2luZG93cyA9ICQkc3RhY2tlZE1hcC5jcmVhdGVOZXcoKTtcbiAgICAgIHZhciBvcGVuZWRDbGFzc2VzID0gJCRtdWx0aU1hcC5jcmVhdGVOZXcoKTtcbiAgICAgIHZhciAkbW9kYWxTdGFjayA9IHtcbiAgICAgICAgTk9XX0NMT1NJTkdfRVZFTlQ6ICdtb2RhbC5zdGFjay5ub3ctY2xvc2luZydcbiAgICAgIH07XG5cbiAgICAgIC8vTW9kYWwgZm9jdXMgYmVoYXZpb3JcbiAgICAgIHZhciBmb2N1c2FibGVFbGVtZW50TGlzdDtcbiAgICAgIHZhciBmb2N1c0luZGV4ID0gMDtcbiAgICAgIHZhciB0YWJhYmJsZVNlbGVjdG9yID0gJ2FbaHJlZl0sIGFyZWFbaHJlZl0sIGlucHV0Om5vdChbZGlzYWJsZWRdKSwgJyArXG4gICAgICAgICdidXR0b246bm90KFtkaXNhYmxlZF0pLHNlbGVjdDpub3QoW2Rpc2FibGVkXSksIHRleHRhcmVhOm5vdChbZGlzYWJsZWRdKSwgJyArXG4gICAgICAgICdpZnJhbWUsIG9iamVjdCwgZW1iZWQsICpbdGFiaW5kZXhdLCAqW2NvbnRlbnRlZGl0YWJsZT10cnVlXSc7XG5cbiAgICAgIGZ1bmN0aW9uIGJhY2tkcm9wSW5kZXgoKSB7XG4gICAgICAgIHZhciB0b3BCYWNrZHJvcEluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvcGVuZWQgPSBvcGVuZWRXaW5kb3dzLmtleXMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcGVuZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpZiAob3BlbmVkV2luZG93cy5nZXQob3BlbmVkW2ldKS52YWx1ZS5iYWNrZHJvcCkge1xuICAgICAgICAgICAgdG9wQmFja2Ryb3BJbmRleCA9IGk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3BCYWNrZHJvcEluZGV4O1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiR3YXRjaChiYWNrZHJvcEluZGV4LCBmdW5jdGlvbihuZXdCYWNrZHJvcEluZGV4KSB7XG4gICAgICAgIGlmIChiYWNrZHJvcFNjb3BlKSB7XG4gICAgICAgICAgYmFja2Ryb3BTY29wZS5pbmRleCA9IG5ld0JhY2tkcm9wSW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiByZW1vdmVNb2RhbFdpbmRvdyhtb2RhbEluc3RhbmNlLCBlbGVtZW50VG9SZWNlaXZlRm9jdXMpIHtcbiAgICAgICAgdmFyIGJvZHkgPSAkZG9jdW1lbnQuZmluZCgnYm9keScpLmVxKDApO1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKS52YWx1ZTtcblxuICAgICAgICAvL2NsZWFuIHVwIHRoZSBzdGFja1xuICAgICAgICBvcGVuZWRXaW5kb3dzLnJlbW92ZShtb2RhbEluc3RhbmNlKTtcblxuICAgICAgICByZW1vdmVBZnRlckFuaW1hdGUobW9kYWxXaW5kb3cubW9kYWxEb21FbCwgbW9kYWxXaW5kb3cubW9kYWxTY29wZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIG1vZGFsQm9keUNsYXNzID0gbW9kYWxXaW5kb3cub3BlbmVkQ2xhc3MgfHwgT1BFTkVEX01PREFMX0NMQVNTO1xuICAgICAgICAgIG9wZW5lZENsYXNzZXMucmVtb3ZlKG1vZGFsQm9keUNsYXNzLCBtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgICBib2R5LnRvZ2dsZUNsYXNzKG1vZGFsQm9keUNsYXNzLCBvcGVuZWRDbGFzc2VzLmhhc0tleShtb2RhbEJvZHlDbGFzcykpO1xuICAgICAgICB9KTtcbiAgICAgICAgY2hlY2tSZW1vdmVCYWNrZHJvcCgpO1xuXG4gICAgICAgIC8vbW92ZSBmb2N1cyB0byBzcGVjaWZpZWQgZWxlbWVudCBpZiBhdmFpbGFibGUsIG9yIGVsc2UgdG8gYm9keVxuICAgICAgICBpZiAoZWxlbWVudFRvUmVjZWl2ZUZvY3VzICYmIGVsZW1lbnRUb1JlY2VpdmVGb2N1cy5mb2N1cykge1xuICAgICAgICAgIGVsZW1lbnRUb1JlY2VpdmVGb2N1cy5mb2N1cygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJvZHkuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBjaGVja1JlbW92ZUJhY2tkcm9wKCkge1xuICAgICAgICAgIC8vcmVtb3ZlIGJhY2tkcm9wIGlmIG5vIGxvbmdlciBuZWVkZWRcbiAgICAgICAgICBpZiAoYmFja2Ryb3BEb21FbCAmJiBiYWNrZHJvcEluZGV4KCkgPT0gLTEpIHtcbiAgICAgICAgICAgIHZhciBiYWNrZHJvcFNjb3BlUmVmID0gYmFja2Ryb3BTY29wZTtcbiAgICAgICAgICAgIHJlbW92ZUFmdGVyQW5pbWF0ZShiYWNrZHJvcERvbUVsLCBiYWNrZHJvcFNjb3BlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgYmFja2Ryb3BTY29wZVJlZiA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJhY2tkcm9wRG9tRWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBiYWNrZHJvcFNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlQWZ0ZXJBbmltYXRlKGRvbUVsLCBzY29wZSwgZG9uZSkge1xuICAgICAgICB2YXIgYXN5bmNEZWZlcnJlZDtcbiAgICAgICAgdmFyIGFzeW5jUHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHZhciBzZXRJc0FzeW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKCFhc3luY0RlZmVycmVkKSB7XG4gICAgICAgICAgICBhc3luY0RlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICAgICAgICAgIGFzeW5jUHJvbWlzZSA9IGFzeW5jRGVmZXJyZWQucHJvbWlzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gYXN5bmNEb25lKCkge1xuICAgICAgICAgICAgYXN5bmNEZWZlcnJlZC5yZXNvbHZlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgc2NvcGUuJGJyb2FkY2FzdCgkbW9kYWxTdGFjay5OT1dfQ0xPU0lOR19FVkVOVCwgc2V0SXNBc3luYyk7XG5cbiAgICAgICAgLy8gTm90ZSB0aGF0IGl0J3MgaW50ZW50aW9uYWwgdGhhdCBhc3luY1Byb21pc2UgbWlnaHQgYmUgbnVsbC5cbiAgICAgICAgLy8gVGhhdCdzIHdoZW4gc2V0SXNBc3luYyBoYXMgbm90IGJlZW4gY2FsbGVkIGR1cmluZyB0aGVcbiAgICAgICAgLy8gTk9XX0NMT1NJTkdfRVZFTlQgYnJvYWRjYXN0LlxuICAgICAgICByZXR1cm4gJHEud2hlbihhc3luY1Byb21pc2UpLnRoZW4oYWZ0ZXJBbmltYXRpbmcpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGFmdGVyQW5pbWF0aW5nKCkge1xuICAgICAgICAgIGlmIChhZnRlckFuaW1hdGluZy5kb25lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQW5pbWF0aW5nLmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKCRhbmltYXRlQ3NzKSB7XG4gICAgICAgICAgICAkYW5pbWF0ZUNzcyhkb21FbCwge1xuICAgICAgICAgICAgICBldmVudDogJ2xlYXZlJ1xuICAgICAgICAgICAgfSkuc3RhcnQoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBkb21FbC5yZW1vdmUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShkb21FbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJGRvY3VtZW50LmJpbmQoJ2tleWRvd24nLCBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgaWYgKGV2dC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAgIHJldHVybiBldnQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbW9kYWwgPSBvcGVuZWRXaW5kb3dzLnRvcCgpO1xuICAgICAgICBpZiAobW9kYWwgJiYgbW9kYWwudmFsdWUua2V5Ym9hcmQpIHtcbiAgICAgICAgICBzd2l0Y2ggKGV2dC53aGljaCl7XG4gICAgICAgICAgICBjYXNlIDI3OiB7XG4gICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAkbW9kYWxTdGFjay5kaXNtaXNzKG1vZGFsLmtleSwgJ2VzY2FwZSBrZXkgcHJlc3MnKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSA5OiB7XG4gICAgICAgICAgICAgICRtb2RhbFN0YWNrLmxvYWRGb2N1c0VsZW1lbnRMaXN0KG1vZGFsKTtcbiAgICAgICAgICAgICAgdmFyIGZvY3VzQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoZXZ0LnNoaWZ0S2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCRtb2RhbFN0YWNrLmlzRm9jdXNJbkZpcnN0SXRlbShldnQpKSB7XG4gICAgICAgICAgICAgICAgICBmb2N1c0NoYW5nZWQgPSAkbW9kYWxTdGFjay5mb2N1c0xhc3RGb2N1c2FibGVFbGVtZW50KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgkbW9kYWxTdGFjay5pc0ZvY3VzSW5MYXN0SXRlbShldnQpKSB7XG4gICAgICAgICAgICAgICAgICBmb2N1c0NoYW5nZWQgPSAkbW9kYWxTdGFjay5mb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChmb2N1c0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgJG1vZGFsU3RhY2sub3BlbiA9IGZ1bmN0aW9uKG1vZGFsSW5zdGFuY2UsIG1vZGFsKSB7XG4gICAgICAgIHZhciBtb2RhbE9wZW5lciA9ICRkb2N1bWVudFswXS5hY3RpdmVFbGVtZW50LFxuICAgICAgICAgIG1vZGFsQm9keUNsYXNzID0gbW9kYWwub3BlbmVkQ2xhc3MgfHwgT1BFTkVEX01PREFMX0NMQVNTO1xuXG4gICAgICAgIG9wZW5lZFdpbmRvd3MuYWRkKG1vZGFsSW5zdGFuY2UsIHtcbiAgICAgICAgICBkZWZlcnJlZDogbW9kYWwuZGVmZXJyZWQsXG4gICAgICAgICAgcmVuZGVyRGVmZXJyZWQ6IG1vZGFsLnJlbmRlckRlZmVycmVkLFxuICAgICAgICAgIG1vZGFsU2NvcGU6IG1vZGFsLnNjb3BlLFxuICAgICAgICAgIGJhY2tkcm9wOiBtb2RhbC5iYWNrZHJvcCxcbiAgICAgICAgICBrZXlib2FyZDogbW9kYWwua2V5Ym9hcmQsXG4gICAgICAgICAgb3BlbmVkQ2xhc3M6IG1vZGFsLm9wZW5lZENsYXNzXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9wZW5lZENsYXNzZXMucHV0KG1vZGFsQm9keUNsYXNzLCBtb2RhbEluc3RhbmNlKTtcblxuICAgICAgICB2YXIgYm9keSA9ICRkb2N1bWVudC5maW5kKCdib2R5JykuZXEoMCksXG4gICAgICAgICAgICBjdXJyQmFja2Ryb3BJbmRleCA9IGJhY2tkcm9wSW5kZXgoKTtcblxuICAgICAgICBpZiAoY3VyckJhY2tkcm9wSW5kZXggPj0gMCAmJiAhYmFja2Ryb3BEb21FbCkge1xuICAgICAgICAgIGJhY2tkcm9wU2NvcGUgPSAkcm9vdFNjb3BlLiRuZXcodHJ1ZSk7XG4gICAgICAgICAgYmFja2Ryb3BTY29wZS5pbmRleCA9IGN1cnJCYWNrZHJvcEluZGV4O1xuICAgICAgICAgIHZhciBhbmd1bGFyQmFja2dyb3VuZERvbUVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IG1vZGFsLWJhY2tkcm9wPVwibW9kYWwtYmFja2Ryb3BcIj48L2Rpdj4nKTtcbiAgICAgICAgICBhbmd1bGFyQmFja2dyb3VuZERvbUVsLmF0dHIoJ2JhY2tkcm9wLWNsYXNzJywgbW9kYWwuYmFja2Ryb3BDbGFzcyk7XG4gICAgICAgICAgaWYgKG1vZGFsLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgYW5ndWxhckJhY2tncm91bmREb21FbC5hdHRyKCdtb2RhbC1hbmltYXRpb24nLCAndHJ1ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiYWNrZHJvcERvbUVsID0gJGNvbXBpbGUoYW5ndWxhckJhY2tncm91bmREb21FbCkoYmFja2Ryb3BTY29wZSk7XG4gICAgICAgICAgYm9keS5hcHBlbmQoYmFja2Ryb3BEb21FbCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYW5ndWxhckRvbUVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IG1vZGFsLXdpbmRvdz1cIm1vZGFsLXdpbmRvd1wiPjwvZGl2PicpO1xuICAgICAgICBhbmd1bGFyRG9tRWwuYXR0cih7XG4gICAgICAgICAgJ3RlbXBsYXRlLXVybCc6IG1vZGFsLndpbmRvd1RlbXBsYXRlVXJsLFxuICAgICAgICAgICd3aW5kb3ctY2xhc3MnOiBtb2RhbC53aW5kb3dDbGFzcyxcbiAgICAgICAgICAnc2l6ZSc6IG1vZGFsLnNpemUsXG4gICAgICAgICAgJ2luZGV4Jzogb3BlbmVkV2luZG93cy5sZW5ndGgoKSAtIDEsXG4gICAgICAgICAgJ2FuaW1hdGUnOiAnYW5pbWF0ZSdcbiAgICAgICAgfSkuaHRtbChtb2RhbC5jb250ZW50KTtcbiAgICAgICAgaWYgKG1vZGFsLmFuaW1hdGlvbikge1xuICAgICAgICAgIGFuZ3VsYXJEb21FbC5hdHRyKCdtb2RhbC1hbmltYXRpb24nLCAndHJ1ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1vZGFsRG9tRWwgPSAkY29tcGlsZShhbmd1bGFyRG9tRWwpKG1vZGFsLnNjb3BlKTtcbiAgICAgICAgb3BlbmVkV2luZG93cy50b3AoKS52YWx1ZS5tb2RhbERvbUVsID0gbW9kYWxEb21FbDtcbiAgICAgICAgb3BlbmVkV2luZG93cy50b3AoKS52YWx1ZS5tb2RhbE9wZW5lciA9IG1vZGFsT3BlbmVyO1xuICAgICAgICBib2R5LmFwcGVuZChtb2RhbERvbUVsKTtcbiAgICAgICAgYm9keS5hZGRDbGFzcyhtb2RhbEJvZHlDbGFzcyk7XG5cbiAgICAgICAgJG1vZGFsU3RhY2suY2xlYXJGb2N1c0xpc3RDYWNoZSgpO1xuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gYnJvYWRjYXN0Q2xvc2luZyhtb2RhbFdpbmRvdywgcmVzdWx0T3JSZWFzb24sIGNsb3NpbmcpIHtcbiAgICAgICAgICByZXR1cm4gIW1vZGFsV2luZG93LnZhbHVlLm1vZGFsU2NvcGUuJGJyb2FkY2FzdCgnbW9kYWwuY2xvc2luZycsIHJlc3VsdE9yUmVhc29uLCBjbG9zaW5nKS5kZWZhdWx0UHJldmVudGVkO1xuICAgICAgfVxuXG4gICAgICAkbW9kYWxTdGFjay5jbG9zZSA9IGZ1bmN0aW9uKG1vZGFsSW5zdGFuY2UsIHJlc3VsdCkge1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgaWYgKG1vZGFsV2luZG93ICYmIGJyb2FkY2FzdENsb3NpbmcobW9kYWxXaW5kb3csIHJlc3VsdCwgdHJ1ZSkpIHtcbiAgICAgICAgICBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbFNjb3BlLiQkdWliRGVzdHJ1Y3Rpb25TY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLmRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICByZW1vdmVNb2RhbFdpbmRvdyhtb2RhbEluc3RhbmNlLCBtb2RhbFdpbmRvdy52YWx1ZS5tb2RhbE9wZW5lcik7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICFtb2RhbFdpbmRvdztcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmRpc21pc3MgPSBmdW5jdGlvbihtb2RhbEluc3RhbmNlLCByZWFzb24pIHtcbiAgICAgICAgdmFyIG1vZGFsV2luZG93ID0gb3BlbmVkV2luZG93cy5nZXQobW9kYWxJbnN0YW5jZSk7XG4gICAgICAgIGlmIChtb2RhbFdpbmRvdyAmJiBicm9hZGNhc3RDbG9zaW5nKG1vZGFsV2luZG93LCByZWFzb24sIGZhbHNlKSkge1xuICAgICAgICAgIG1vZGFsV2luZG93LnZhbHVlLm1vZGFsU2NvcGUuJCR1aWJEZXN0cnVjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgbW9kYWxXaW5kb3cudmFsdWUuZGVmZXJyZWQucmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgcmVtb3ZlTW9kYWxXaW5kb3cobW9kYWxJbnN0YW5jZSwgbW9kYWxXaW5kb3cudmFsdWUubW9kYWxPcGVuZXIpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhbW9kYWxXaW5kb3c7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5kaXNtaXNzQWxsID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIHZhciB0b3BNb2RhbCA9IHRoaXMuZ2V0VG9wKCk7XG4gICAgICAgIHdoaWxlICh0b3BNb2RhbCAmJiB0aGlzLmRpc21pc3ModG9wTW9kYWwua2V5LCByZWFzb24pKSB7XG4gICAgICAgICAgdG9wTW9kYWwgPSB0aGlzLmdldFRvcCgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5nZXRUb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG9wZW5lZFdpbmRvd3MudG9wKCk7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5tb2RhbFJlbmRlcmVkID0gZnVuY3Rpb24obW9kYWxJbnN0YW5jZSkge1xuICAgICAgICB2YXIgbW9kYWxXaW5kb3cgPSBvcGVuZWRXaW5kb3dzLmdldChtb2RhbEluc3RhbmNlKTtcbiAgICAgICAgaWYgKG1vZGFsV2luZG93KSB7XG4gICAgICAgICAgbW9kYWxXaW5kb3cudmFsdWUucmVuZGVyRGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5mb2N1c0ZpcnN0Rm9jdXNhYmxlRWxlbWVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoZm9jdXNhYmxlRWxlbWVudExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGZvY3VzYWJsZUVsZW1lbnRMaXN0WzBdLmZvY3VzKCk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICAgICRtb2RhbFN0YWNrLmZvY3VzTGFzdEZvY3VzYWJsZUVsZW1lbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGZvY3VzYWJsZUVsZW1lbnRMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBmb2N1c2FibGVFbGVtZW50TGlzdFtmb2N1c2FibGVFbGVtZW50TGlzdC5sZW5ndGggLSAxXS5mb2N1cygpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmlzRm9jdXNJbkZpcnN0SXRlbSA9IGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICBpZiAoZm9jdXNhYmxlRWxlbWVudExpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJldHVybiAoZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudCkgPT0gZm9jdXNhYmxlRWxlbWVudExpc3RbMF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcblxuICAgICAgJG1vZGFsU3RhY2suaXNGb2N1c0luTGFzdEl0ZW0gPSBmdW5jdGlvbihldnQpIHtcbiAgICAgICAgaWYgKGZvY3VzYWJsZUVsZW1lbnRMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gKGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQpID09IGZvY3VzYWJsZUVsZW1lbnRMaXN0W2ZvY3VzYWJsZUVsZW1lbnRMaXN0Lmxlbmd0aCAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG5cbiAgICAgICRtb2RhbFN0YWNrLmNsZWFyRm9jdXNMaXN0Q2FjaGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9jdXNhYmxlRWxlbWVudExpc3QgPSBbXTtcbiAgICAgICAgZm9jdXNJbmRleCA9IDA7XG4gICAgICB9O1xuXG4gICAgICAkbW9kYWxTdGFjay5sb2FkRm9jdXNFbGVtZW50TGlzdCA9IGZ1bmN0aW9uKG1vZGFsV2luZG93KSB7XG4gICAgICAgIGlmIChmb2N1c2FibGVFbGVtZW50TGlzdCA9PT0gdW5kZWZpbmVkIHx8ICFmb2N1c2FibGVFbGVtZW50TGlzdC5sZW5ndGgwKSB7XG4gICAgICAgICAgaWYgKG1vZGFsV2luZG93KSB7XG4gICAgICAgICAgICB2YXIgbW9kYWxEb21FMSA9IG1vZGFsV2luZG93LnZhbHVlLm1vZGFsRG9tRWw7XG4gICAgICAgICAgICBpZiAobW9kYWxEb21FMSAmJiBtb2RhbERvbUUxLmxlbmd0aCkge1xuICAgICAgICAgICAgICBmb2N1c2FibGVFbGVtZW50TGlzdCA9IG1vZGFsRG9tRTFbMF0ucXVlcnlTZWxlY3RvckFsbCh0YWJhYmJsZVNlbGVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAkbW9kYWxTdGFjaztcbiAgICB9XSlcblxuICAucHJvdmlkZXIoJyRtb2RhbCcsIGZ1bmN0aW9uKCkge1xuICAgIHZhciAkbW9kYWxQcm92aWRlciA9IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgICAgICBiYWNrZHJvcDogdHJ1ZSwgLy9jYW4gYWxzbyBiZSBmYWxzZSBvciAnc3RhdGljJ1xuICAgICAgICBrZXlib2FyZDogdHJ1ZVxuICAgICAgfSxcbiAgICAgICRnZXQ6IFsnJGluamVjdG9yJywgJyRyb290U2NvcGUnLCAnJHEnLCAnJHRlbXBsYXRlUmVxdWVzdCcsICckY29udHJvbGxlcicsICckbW9kYWxTdGFjaycsXG4gICAgICAgIGZ1bmN0aW9uICgkaW5qZWN0b3IsICRyb290U2NvcGUsICRxLCAkdGVtcGxhdGVSZXF1ZXN0LCAkY29udHJvbGxlciwgJG1vZGFsU3RhY2spIHtcbiAgICAgICAgICB2YXIgJG1vZGFsID0ge307XG5cbiAgICAgICAgICBmdW5jdGlvbiBnZXRUZW1wbGF0ZVByb21pc2Uob3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMudGVtcGxhdGUgPyAkcS53aGVuKG9wdGlvbnMudGVtcGxhdGUpIDpcbiAgICAgICAgICAgICAgJHRlbXBsYXRlUmVxdWVzdChhbmd1bGFyLmlzRnVuY3Rpb24ob3B0aW9ucy50ZW1wbGF0ZVVybCkgPyAob3B0aW9ucy50ZW1wbGF0ZVVybCkoKSA6IG9wdGlvbnMudGVtcGxhdGVVcmwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGdldFJlc29sdmVQcm9taXNlcyhyZXNvbHZlcykge1xuICAgICAgICAgICAgdmFyIHByb21pc2VzQXJyID0gW107XG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzb2x2ZXMsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRnVuY3Rpb24odmFsdWUpIHx8IGFuZ3VsYXIuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlc0Fyci5wdXNoKCRxLndoZW4oJGluamVjdG9yLmludm9rZSh2YWx1ZSkpKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChhbmd1bGFyLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHByb21pc2VzQXJyLnB1c2goJHEud2hlbigkaW5qZWN0b3IuZ2V0KHZhbHVlKSkpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHByb21pc2VzQXJyLnB1c2goJHEud2hlbih2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlc0FycjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJvbWlzZUNoYWluID0gbnVsbDtcbiAgICAgICAgICAkbW9kYWwuZ2V0UHJvbWlzZUNoYWluID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZUNoYWluO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICAkbW9kYWwub3BlbiA9IGZ1bmN0aW9uIChtb2RhbE9wdGlvbnMpIHtcblxuICAgICAgICAgICAgdmFyIG1vZGFsUmVzdWx0RGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIG1vZGFsT3BlbmVkRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgICAgICAgdmFyIG1vZGFsUmVuZGVyRGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXG4gICAgICAgICAgICAvL3ByZXBhcmUgYW4gaW5zdGFuY2Ugb2YgYSBtb2RhbCB0byBiZSBpbmplY3RlZCBpbnRvIGNvbnRyb2xsZXJzIGFuZCByZXR1cm5lZCB0byBhIGNhbGxlclxuICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSB7XG4gICAgICAgICAgICAgIHJlc3VsdDogbW9kYWxSZXN1bHREZWZlcnJlZC5wcm9taXNlLFxuICAgICAgICAgICAgICBvcGVuZWQ6IG1vZGFsT3BlbmVkRGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICAgICAgcmVuZGVyZWQ6IG1vZGFsUmVuZGVyRGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICAgICAgY2xvc2U6IGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJG1vZGFsU3RhY2suY2xvc2UobW9kYWxJbnN0YW5jZSwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgZGlzbWlzczogZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgICAgICAgIHJldHVybiAkbW9kYWxTdGFjay5kaXNtaXNzKG1vZGFsSW5zdGFuY2UsIHJlYXNvbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8vbWVyZ2UgYW5kIGNsZWFuIHVwIG9wdGlvbnNcbiAgICAgICAgICAgIG1vZGFsT3B0aW9ucyA9IGFuZ3VsYXIuZXh0ZW5kKHt9LCAkbW9kYWxQcm92aWRlci5vcHRpb25zLCBtb2RhbE9wdGlvbnMpO1xuICAgICAgICAgICAgbW9kYWxPcHRpb25zLnJlc29sdmUgPSBtb2RhbE9wdGlvbnMucmVzb2x2ZSB8fCB7fTtcblxuICAgICAgICAgICAgLy92ZXJpZnkgb3B0aW9uc1xuICAgICAgICAgICAgaWYgKCFtb2RhbE9wdGlvbnMudGVtcGxhdGUgJiYgIW1vZGFsT3B0aW9ucy50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09uZSBvZiB0ZW1wbGF0ZSBvciB0ZW1wbGF0ZVVybCBvcHRpb25zIGlzIHJlcXVpcmVkLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZSA9XG4gICAgICAgICAgICAgICRxLmFsbChbZ2V0VGVtcGxhdGVQcm9taXNlKG1vZGFsT3B0aW9ucyldLmNvbmNhdChnZXRSZXNvbHZlUHJvbWlzZXMobW9kYWxPcHRpb25zLnJlc29sdmUpKSk7XG5cbiAgICAgICAgICAgIC8vIFdhaXQgZm9yIHRoZSByZXNvbHV0aW9uIG9mIHRoZSBleGlzdGluZyBwcm9taXNlIGNoYWluLlxuICAgICAgICAgICAgLy8gVGhlbiBzd2l0Y2ggdG8gb3VyIG93biBjb21iaW5lZCBwcm9taXNlIGRlcGVuZGVuY3kgKHJlZ2FyZGxlc3Mgb2YgaG93IHRoZSBwcmV2aW91cyBtb2RhbCBmYXJlZCkuXG4gICAgICAgICAgICAvLyBUaGVuIGFkZCB0byAkbW9kYWxTdGFjayBhbmQgcmVzb2x2ZSBvcGVuZWQuXG4gICAgICAgICAgICAvLyBGaW5hbGx5IGNsZWFuIHVwIHRoZSBjaGFpbiB2YXJpYWJsZSBpZiBubyBzdWJzZXF1ZW50IG1vZGFsIGhhcyBvdmVyd3JpdHRlbiBpdC5cbiAgICAgICAgICAgIHZhciBzYW1lUHJvbWlzZTtcbiAgICAgICAgICAgIHNhbWVQcm9taXNlID0gcHJvbWlzZUNoYWluID0gJHEuYWxsKFtwcm9taXNlQ2hhaW5dKVxuICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbigpIHsgcmV0dXJuIHRlbXBsYXRlQW5kUmVzb2x2ZVByb21pc2U7IH0sIGZ1bmN0aW9uKCkgeyByZXR1cm4gdGVtcGxhdGVBbmRSZXNvbHZlUHJvbWlzZTsgfSlcbiAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gcmVzb2x2ZVN1Y2Nlc3ModHBsQW5kVmFycykge1xuXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsU2NvcGUgPSAobW9kYWxPcHRpb25zLnNjb3BlIHx8ICRyb290U2NvcGUpLiRuZXcoKTtcbiAgICAgICAgICAgICAgICBtb2RhbFNjb3BlLiRjbG9zZSA9IG1vZGFsSW5zdGFuY2UuY2xvc2U7XG4gICAgICAgICAgICAgICAgbW9kYWxTY29wZS4kZGlzbWlzcyA9IG1vZGFsSW5zdGFuY2UuZGlzbWlzcztcblxuICAgICAgICAgICAgICAgIG1vZGFsU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbFNjb3BlLiQkdWliRGVzdHJ1Y3Rpb25TY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxTY29wZS4kZGlzbWlzcygnJHVpYlVuc2NoZWR1bGVkRGVzdHJ1Y3Rpb24nKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZhciBjdHJsSW5zdGFuY2UsIGN0cmxMb2NhbHMgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgcmVzb2x2ZUl0ZXIgPSAxO1xuXG4gICAgICAgICAgICAgICAgLy9jb250cm9sbGVyc1xuICAgICAgICAgICAgICAgIGlmIChtb2RhbE9wdGlvbnMuY29udHJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgY3RybExvY2Fscy4kc2NvcGUgPSBtb2RhbFNjb3BlO1xuICAgICAgICAgICAgICAgICAgY3RybExvY2Fscy4kbW9kYWxJbnN0YW5jZSA9IG1vZGFsSW5zdGFuY2U7XG4gICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gobW9kYWxPcHRpb25zLnJlc29sdmUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3RybExvY2Fsc1trZXldID0gdHBsQW5kVmFyc1tyZXNvbHZlSXRlcisrXTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBjdHJsSW5zdGFuY2UgPSAkY29udHJvbGxlcihtb2RhbE9wdGlvbnMuY29udHJvbGxlciwgY3RybExvY2Fscyk7XG4gICAgICAgICAgICAgICAgICBpZiAobW9kYWxPcHRpb25zLmNvbnRyb2xsZXJBcykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWxPcHRpb25zLmJpbmRUb0NvbnRyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZChjdHJsSW5zdGFuY2UsIG1vZGFsU2NvcGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbW9kYWxTY29wZVttb2RhbE9wdGlvbnMuY29udHJvbGxlckFzXSA9IGN0cmxJbnN0YW5jZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkbW9kYWxTdGFjay5vcGVuKG1vZGFsSW5zdGFuY2UsIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlOiBtb2RhbFNjb3BlLFxuICAgICAgICAgICAgICAgICAgZGVmZXJyZWQ6IG1vZGFsUmVzdWx0RGVmZXJyZWQsXG4gICAgICAgICAgICAgICAgICByZW5kZXJEZWZlcnJlZDogbW9kYWxSZW5kZXJEZWZlcnJlZCxcbiAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHRwbEFuZFZhcnNbMF0sXG4gICAgICAgICAgICAgICAgICBhbmltYXRpb246IG1vZGFsT3B0aW9ucy5hbmltYXRpb24sXG4gICAgICAgICAgICAgICAgICBiYWNrZHJvcDogbW9kYWxPcHRpb25zLmJhY2tkcm9wLFxuICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IG1vZGFsT3B0aW9ucy5rZXlib2FyZCxcbiAgICAgICAgICAgICAgICAgIGJhY2tkcm9wQ2xhc3M6IG1vZGFsT3B0aW9ucy5iYWNrZHJvcENsYXNzLFxuICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6IG1vZGFsT3B0aW9ucy53aW5kb3dDbGFzcyxcbiAgICAgICAgICAgICAgICAgIHdpbmRvd1RlbXBsYXRlVXJsOiBtb2RhbE9wdGlvbnMud2luZG93VGVtcGxhdGVVcmwsXG4gICAgICAgICAgICAgICAgICBzaXplOiBtb2RhbE9wdGlvbnMuc2l6ZSxcbiAgICAgICAgICAgICAgICAgIG9wZW5lZENsYXNzOiBtb2RhbE9wdGlvbnMub3BlbmVkQ2xhc3NcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBtb2RhbE9wZW5lZERlZmVycmVkLnJlc29sdmUodHJ1ZSk7XG5cbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIHJlc29sdmVFcnJvcihyZWFzb24pIHtcbiAgICAgICAgICAgICAgbW9kYWxPcGVuZWREZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgICAgbW9kYWxSZXN1bHREZWZlcnJlZC5yZWplY3QocmVhc29uKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmluYWxseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHByb21pc2VDaGFpbiA9PT0gc2FtZVByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlQ2hhaW4gPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIG1vZGFsSW5zdGFuY2U7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiAkbW9kYWw7XG4gICAgICAgIH1dXG4gICAgfTtcblxuICAgIHJldHVybiAkbW9kYWxQcm92aWRlcjtcbiAgfSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAucGFnaW5hdGlvbicsIFtdKVxuLmNvbnRyb2xsZXIoJ1BhZ2luYXRpb25Db250cm9sbGVyJywgWyckc2NvcGUnLCAnJGF0dHJzJywgJyRwYXJzZScsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCAkcGFyc2UpIHtcbiAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgbmdNb2RlbEN0cmwgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9LCAvLyBudWxsTW9kZWxDdHJsXG4gICAgICBzZXROdW1QYWdlcyA9ICRhdHRycy5udW1QYWdlcyA/ICRwYXJzZSgkYXR0cnMubnVtUGFnZXMpLmFzc2lnbiA6IGFuZ3VsYXIubm9vcDtcblxuICB0aGlzLmluaXQgPSBmdW5jdGlvbihuZ01vZGVsQ3RybF8sIGNvbmZpZykge1xuICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmxfO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuXG4gICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgc2VsZi5yZW5kZXIoKTtcbiAgICB9O1xuXG4gICAgaWYgKCRhdHRycy5pdGVtc1BlclBhZ2UpIHtcbiAgICAgICRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLml0ZW1zUGVyUGFnZSksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHNlbGYuaXRlbXNQZXJQYWdlID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgICAgJHNjb3BlLnRvdGFsUGFnZXMgPSBzZWxmLmNhbGN1bGF0ZVRvdGFsUGFnZXMoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLml0ZW1zUGVyUGFnZSA9IGNvbmZpZy5pdGVtc1BlclBhZ2U7XG4gICAgfVxuXG4gICAgJHNjb3BlLiR3YXRjaCgndG90YWxJdGVtcycsIGZ1bmN0aW9uKCkge1xuICAgICAgJHNjb3BlLnRvdGFsUGFnZXMgPSBzZWxmLmNhbGN1bGF0ZVRvdGFsUGFnZXMoKTtcbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJ3RvdGFsUGFnZXMnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgc2V0TnVtUGFnZXMoJHNjb3BlLiRwYXJlbnQsIHZhbHVlKTsgLy8gUmVhZG9ubHkgdmFyaWFibGVcblxuICAgICAgaWYgKCAkc2NvcGUucGFnZSA+IHZhbHVlICkge1xuICAgICAgICAkc2NvcGUuc2VsZWN0UGFnZSh2YWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5jYWxjdWxhdGVUb3RhbFBhZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHRvdGFsUGFnZXMgPSB0aGlzLml0ZW1zUGVyUGFnZSA8IDEgPyAxIDogTWF0aC5jZWlsKCRzY29wZS50b3RhbEl0ZW1zIC8gdGhpcy5pdGVtc1BlclBhZ2UpO1xuICAgIHJldHVybiBNYXRoLm1heCh0b3RhbFBhZ2VzIHx8IDAsIDEpO1xuICB9O1xuXG4gIHRoaXMucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgJHNjb3BlLnBhZ2UgPSBwYXJzZUludChuZ01vZGVsQ3RybC4kdmlld1ZhbHVlLCAxMCkgfHwgMTtcbiAgfTtcblxuICAkc2NvcGUuc2VsZWN0UGFnZSA9IGZ1bmN0aW9uKHBhZ2UsIGV2dCkge1xuICAgIGlmIChldnQpIHtcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciBjbGlja0FsbG93ZWQgPSAhJHNjb3BlLm5nRGlzYWJsZWQgfHwgIWV2dDtcbiAgICBpZiAoY2xpY2tBbGxvd2VkICYmICRzY29wZS5wYWdlICE9PSBwYWdlICYmIHBhZ2UgPiAwICYmIHBhZ2UgPD0gJHNjb3BlLnRvdGFsUGFnZXMpIHtcbiAgICAgIGlmIChldnQgJiYgZXZ0LnRhcmdldCkge1xuICAgICAgICBldnQudGFyZ2V0LmJsdXIoKTtcbiAgICAgIH1cbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUocGFnZSk7XG4gICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5nZXRUZXh0ID0gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuICRzY29wZVtrZXkgKyAnVGV4dCddIHx8IHNlbGYuY29uZmlnW2tleSArICdUZXh0J107XG4gIH07XG5cbiAgJHNjb3BlLm5vUHJldmlvdXMgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJHNjb3BlLnBhZ2UgPT09IDE7XG4gIH07XG5cbiAgJHNjb3BlLm5vTmV4dCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAkc2NvcGUucGFnZSA9PT0gJHNjb3BlLnRvdGFsUGFnZXM7XG4gIH07XG59XSlcblxuLmNvbnN0YW50KCdwYWdpbmF0aW9uQ29uZmlnJywge1xuICBpdGVtc1BlclBhZ2U6IDEwLFxuICBib3VuZGFyeUxpbmtzOiBmYWxzZSxcbiAgZGlyZWN0aW9uTGlua3M6IHRydWUsXG4gIGZpcnN0VGV4dDogJ0ZpcnN0JyxcbiAgcHJldmlvdXNUZXh0OiAnUHJldmlvdXMnLFxuICBuZXh0VGV4dDogJ05leHQnLFxuICBsYXN0VGV4dDogJ0xhc3QnLFxuICByb3RhdGU6IHRydWVcbn0pXG5cbi5kaXJlY3RpdmUoJ3BhZ2luYXRpb24nLCBbJyRwYXJzZScsICdwYWdpbmF0aW9uQ29uZmlnJywgZnVuY3Rpb24oJHBhcnNlLCBwYWdpbmF0aW9uQ29uZmlnKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHRvdGFsSXRlbXM6ICc9JyxcbiAgICAgIGZpcnN0VGV4dDogJ0AnLFxuICAgICAgcHJldmlvdXNUZXh0OiAnQCcsXG4gICAgICBuZXh0VGV4dDogJ0AnLFxuICAgICAgbGFzdFRleHQ6ICdAJyxcbiAgICAgIG5nRGlzYWJsZWQ6Jz0nXG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ3BhZ2luYXRpb24nLCAnP25nTW9kZWwnXSxcbiAgICBjb250cm9sbGVyOiAnUGFnaW5hdGlvbkNvbnRyb2xsZXInLFxuICAgIGNvbnRyb2xsZXJBczogJ3BhZ2luYXRpb24nLFxuICAgIHRlbXBsYXRlVXJsOiBmdW5jdGlvbihlbGVtZW50LCBhdHRycykge1xuICAgICAgcmV0dXJuIGF0dHJzLnRlbXBsYXRlVXJsIHx8ICd0ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2luYXRpb24uaHRtbCc7XG4gICAgfSxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAgICAgIHZhciBwYWdpbmF0aW9uQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuXG4gICAgICBpZiAoIW5nTW9kZWxDdHJsKSB7XG4gICAgICAgICByZXR1cm47IC8vIGRvIG5vdGhpbmcgaWYgbm8gbmctbW9kZWxcbiAgICAgIH1cblxuICAgICAgLy8gU2V0dXAgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzXG4gICAgICB2YXIgbWF4U2l6ZSA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLm1heFNpemUpID8gc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5tYXhTaXplKSA6IHBhZ2luYXRpb25Db25maWcubWF4U2l6ZSxcbiAgICAgICAgICByb3RhdGUgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5yb3RhdGUpID8gc2NvcGUuJHBhcmVudC4kZXZhbChhdHRycy5yb3RhdGUpIDogcGFnaW5hdGlvbkNvbmZpZy5yb3RhdGU7XG4gICAgICBzY29wZS5ib3VuZGFyeUxpbmtzID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuYm91bmRhcnlMaW5rcykgPyBzY29wZS4kcGFyZW50LiRldmFsKGF0dHJzLmJvdW5kYXJ5TGlua3MpIDogcGFnaW5hdGlvbkNvbmZpZy5ib3VuZGFyeUxpbmtzO1xuICAgICAgc2NvcGUuZGlyZWN0aW9uTGlua3MgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy5kaXJlY3Rpb25MaW5rcykgPyBzY29wZS4kcGFyZW50LiRldmFsKGF0dHJzLmRpcmVjdGlvbkxpbmtzKSA6IHBhZ2luYXRpb25Db25maWcuZGlyZWN0aW9uTGlua3M7XG5cbiAgICAgIHBhZ2luYXRpb25DdHJsLmluaXQobmdNb2RlbEN0cmwsIHBhZ2luYXRpb25Db25maWcpO1xuXG4gICAgICBpZiAoYXR0cnMubWF4U2l6ZSkge1xuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoYXR0cnMubWF4U2l6ZSksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgbWF4U2l6ZSA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgICAgICAgcGFnaW5hdGlvbkN0cmwucmVuZGVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgcGFnZSBvYmplY3QgdXNlZCBpbiB0ZW1wbGF0ZVxuICAgICAgZnVuY3Rpb24gbWFrZVBhZ2UobnVtYmVyLCB0ZXh0LCBpc0FjdGl2ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG51bWJlcjogbnVtYmVyLFxuICAgICAgICAgIHRleHQ6IHRleHQsXG4gICAgICAgICAgYWN0aXZlOiBpc0FjdGl2ZVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRQYWdlcyhjdXJyZW50UGFnZSwgdG90YWxQYWdlcykge1xuICAgICAgICB2YXIgcGFnZXMgPSBbXTtcblxuICAgICAgICAvLyBEZWZhdWx0IHBhZ2UgbGltaXRzXG4gICAgICAgIHZhciBzdGFydFBhZ2UgPSAxLCBlbmRQYWdlID0gdG90YWxQYWdlcztcbiAgICAgICAgdmFyIGlzTWF4U2l6ZWQgPSBhbmd1bGFyLmlzRGVmaW5lZChtYXhTaXplKSAmJiBtYXhTaXplIDwgdG90YWxQYWdlcztcblxuICAgICAgICAvLyByZWNvbXB1dGUgaWYgbWF4U2l6ZVxuICAgICAgICBpZiAoaXNNYXhTaXplZCkge1xuICAgICAgICAgIGlmIChyb3RhdGUpIHtcbiAgICAgICAgICAgIC8vIEN1cnJlbnQgcGFnZSBpcyBkaXNwbGF5ZWQgaW4gdGhlIG1pZGRsZSBvZiB0aGUgdmlzaWJsZSBvbmVzXG4gICAgICAgICAgICBzdGFydFBhZ2UgPSBNYXRoLm1heChjdXJyZW50UGFnZSAtIE1hdGguZmxvb3IobWF4U2l6ZS8yKSwgMSk7XG4gICAgICAgICAgICBlbmRQYWdlICAgPSBzdGFydFBhZ2UgKyBtYXhTaXplIC0gMTtcblxuICAgICAgICAgICAgLy8gQWRqdXN0IGlmIGxpbWl0IGlzIGV4Y2VlZGVkXG4gICAgICAgICAgICBpZiAoZW5kUGFnZSA+IHRvdGFsUGFnZXMpIHtcbiAgICAgICAgICAgICAgZW5kUGFnZSAgID0gdG90YWxQYWdlcztcbiAgICAgICAgICAgICAgc3RhcnRQYWdlID0gZW5kUGFnZSAtIG1heFNpemUgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBWaXNpYmxlIHBhZ2VzIGFyZSBwYWdpbmF0ZWQgd2l0aCBtYXhTaXplXG4gICAgICAgICAgICBzdGFydFBhZ2UgPSAoKE1hdGguY2VpbChjdXJyZW50UGFnZSAvIG1heFNpemUpIC0gMSkgKiBtYXhTaXplKSArIDE7XG5cbiAgICAgICAgICAgIC8vIEFkanVzdCBsYXN0IHBhZ2UgaWYgbGltaXQgaXMgZXhjZWVkZWRcbiAgICAgICAgICAgIGVuZFBhZ2UgPSBNYXRoLm1pbihzdGFydFBhZ2UgKyBtYXhTaXplIC0gMSwgdG90YWxQYWdlcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHBhZ2UgbnVtYmVyIGxpbmtzXG4gICAgICAgIGZvciAodmFyIG51bWJlciA9IHN0YXJ0UGFnZTsgbnVtYmVyIDw9IGVuZFBhZ2U7IG51bWJlcisrKSB7XG4gICAgICAgICAgdmFyIHBhZ2UgPSBtYWtlUGFnZShudW1iZXIsIG51bWJlciwgbnVtYmVyID09PSBjdXJyZW50UGFnZSk7XG4gICAgICAgICAgcGFnZXMucHVzaChwYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBsaW5rcyB0byBtb3ZlIGJldHdlZW4gcGFnZSBzZXRzXG4gICAgICAgIGlmIChpc01heFNpemVkICYmICEgcm90YXRlKSB7XG4gICAgICAgICAgaWYgKHN0YXJ0UGFnZSA+IDEpIHtcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1BhZ2VTZXQgPSBtYWtlUGFnZShzdGFydFBhZ2UgLSAxLCAnLi4uJywgZmFsc2UpO1xuICAgICAgICAgICAgcGFnZXMudW5zaGlmdChwcmV2aW91c1BhZ2VTZXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChlbmRQYWdlIDwgdG90YWxQYWdlcykge1xuICAgICAgICAgICAgdmFyIG5leHRQYWdlU2V0ID0gbWFrZVBhZ2UoZW5kUGFnZSArIDEsICcuLi4nLCBmYWxzZSk7XG4gICAgICAgICAgICBwYWdlcy5wdXNoKG5leHRQYWdlU2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IHBhZ2luYXRpb25DdHJsLnJlbmRlcjtcbiAgICAgIHBhZ2luYXRpb25DdHJsLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBvcmlnaW5hbFJlbmRlcigpO1xuICAgICAgICBpZiAoc2NvcGUucGFnZSA+IDAgJiYgc2NvcGUucGFnZSA8PSBzY29wZS50b3RhbFBhZ2VzKSB7XG4gICAgICAgICAgc2NvcGUucGFnZXMgPSBnZXRQYWdlcyhzY29wZS5wYWdlLCBzY29wZS50b3RhbFBhZ2VzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XSlcblxuLmNvbnN0YW50KCdwYWdlckNvbmZpZycsIHtcbiAgaXRlbXNQZXJQYWdlOiAxMCxcbiAgcHJldmlvdXNUZXh0OiAnwqsgUHJldmlvdXMnLFxuICBuZXh0VGV4dDogJ05leHQgwrsnLFxuICBhbGlnbjogdHJ1ZVxufSlcblxuLmRpcmVjdGl2ZSgncGFnZXInLCBbJ3BhZ2VyQ29uZmlnJywgZnVuY3Rpb24ocGFnZXJDb25maWcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICBzY29wZToge1xuICAgICAgdG90YWxJdGVtczogJz0nLFxuICAgICAgcHJldmlvdXNUZXh0OiAnQCcsXG4gICAgICBuZXh0VGV4dDogJ0AnLFxuICAgICAgbmdEaXNhYmxlZDogJz0nXG4gICAgfSxcbiAgICByZXF1aXJlOiBbJ3BhZ2VyJywgJz9uZ01vZGVsJ10sXG4gICAgY29udHJvbGxlcjogJ1BhZ2luYXRpb25Db250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICdwYWdpbmF0aW9uJyxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdlci5odG1sJztcbiAgICB9LFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIHBhZ2luYXRpb25DdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHtcbiAgICAgICAgIHJldHVybjsgLy8gZG8gbm90aGluZyBpZiBubyBuZy1tb2RlbFxuICAgICAgfVxuXG4gICAgICBzY29wZS5hbGlnbiA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLmFsaWduKSA/IHNjb3BlLiRwYXJlbnQuJGV2YWwoYXR0cnMuYWxpZ24pIDogcGFnZXJDb25maWcuYWxpZ247XG4gICAgICBwYWdpbmF0aW9uQ3RybC5pbml0KG5nTW9kZWxDdHJsLCBwYWdlckNvbmZpZyk7XG4gICAgfVxuICB9O1xufV0pO1xuXG4vKipcbiAqIFRoZSBmb2xsb3dpbmcgZmVhdHVyZXMgYXJlIHN0aWxsIG91dHN0YW5kaW5nOiBhbmltYXRpb24gYXMgYVxuICogZnVuY3Rpb24sIHBsYWNlbWVudCBhcyBhIGZ1bmN0aW9uLCBpbnNpZGUsIHN1cHBvcnQgZm9yIG1vcmUgdHJpZ2dlcnMgdGhhblxuICoganVzdCBtb3VzZSBlbnRlci9sZWF2ZSwgaHRtbCB0b29sdGlwcywgYW5kIHNlbGVjdG9yIGRlbGVnYXRpb24uXG4gKi9cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudG9vbHRpcCcsIFsndWkuYm9vdHN0cmFwLnBvc2l0aW9uJywgJ3VpLmJvb3RzdHJhcC5iaW5kSHRtbCddKVxuXG4vKipcbiAqIFRoZSAkdG9vbHRpcCBzZXJ2aWNlIGNyZWF0ZXMgdG9vbHRpcC0gYW5kIHBvcG92ZXItbGlrZSBkaXJlY3RpdmVzIGFzIHdlbGwgYXNcbiAqIGhvdXNlcyBnbG9iYWwgb3B0aW9ucyBmb3IgdGhlbS5cbiAqL1xuLnByb3ZpZGVyKCckdG9vbHRpcCcsIGZ1bmN0aW9uKCkge1xuICAvLyBUaGUgZGVmYXVsdCBvcHRpb25zIHRvb2x0aXAgYW5kIHBvcG92ZXIuXG4gIHZhciBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICBwb3B1cERlbGF5OiAwLFxuICAgIHVzZUNvbnRlbnRFeHA6IGZhbHNlXG4gIH07XG5cbiAgLy8gRGVmYXVsdCBoaWRlIHRyaWdnZXJzIGZvciBlYWNoIHNob3cgdHJpZ2dlclxuICB2YXIgdHJpZ2dlck1hcCA9IHtcbiAgICAnbW91c2VlbnRlcic6ICdtb3VzZWxlYXZlJyxcbiAgICAnY2xpY2snOiAnY2xpY2snLFxuICAgICdmb2N1cyc6ICdibHVyJyxcbiAgICAnbm9uZSc6ICcnXG4gIH07XG5cbiAgLy8gVGhlIG9wdGlvbnMgc3BlY2lmaWVkIHRvIHRoZSBwcm92aWRlciBnbG9iYWxseS5cbiAgdmFyIGdsb2JhbE9wdGlvbnMgPSB7fTtcblxuICAvKipcbiAgICogYG9wdGlvbnMoe30pYCBhbGxvd3MgZ2xvYmFsIGNvbmZpZ3VyYXRpb24gb2YgYWxsIHRvb2x0aXBzIGluIHRoZVxuICAgKiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoICdBcHAnLCBbJ3VpLmJvb3RzdHJhcC50b29sdGlwJ10sIGZ1bmN0aW9uKCAkdG9vbHRpcFByb3ZpZGVyICkge1xuICAgKiAgICAgLy8gcGxhY2UgdG9vbHRpcHMgbGVmdCBpbnN0ZWFkIG9mIHRvcCBieSBkZWZhdWx0XG4gICAqICAgICAkdG9vbHRpcFByb3ZpZGVyLm9wdGlvbnMoIHsgcGxhY2VtZW50OiAnbGVmdCcgfSApO1xuICAgKiAgIH0pO1xuICAgKi9cblx0dGhpcy5vcHRpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcblx0XHRhbmd1bGFyLmV4dGVuZChnbG9iYWxPcHRpb25zLCB2YWx1ZSk7XG5cdH07XG5cbiAgLyoqXG4gICAqIFRoaXMgYWxsb3dzIHlvdSB0byBleHRlbmQgdGhlIHNldCBvZiB0cmlnZ2VyIG1hcHBpbmdzIGF2YWlsYWJsZS4gRS5nLjpcbiAgICpcbiAgICogICAkdG9vbHRpcFByb3ZpZGVyLnNldFRyaWdnZXJzKCAnb3BlblRyaWdnZXInOiAnY2xvc2VUcmlnZ2VyJyApO1xuICAgKi9cbiAgdGhpcy5zZXRUcmlnZ2VycyA9IGZ1bmN0aW9uIHNldFRyaWdnZXJzKHRyaWdnZXJzKSB7XG4gICAgYW5ndWxhci5leHRlbmQodHJpZ2dlck1hcCwgdHJpZ2dlcnMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBUaGlzIGlzIGEgaGVscGVyIGZ1bmN0aW9uIGZvciB0cmFuc2xhdGluZyBjYW1lbC1jYXNlIHRvIHNuYWtlLWNhc2UuXG4gICAqL1xuICBmdW5jdGlvbiBzbmFrZV9jYXNlKG5hbWUpIHtcbiAgICB2YXIgcmVnZXhwID0gL1tBLVpdL2c7XG4gICAgdmFyIHNlcGFyYXRvciA9ICctJztcbiAgICByZXR1cm4gbmFtZS5yZXBsYWNlKHJlZ2V4cCwgZnVuY3Rpb24obGV0dGVyLCBwb3MpIHtcbiAgICAgIHJldHVybiAocG9zID8gc2VwYXJhdG9yIDogJycpICsgbGV0dGVyLnRvTG93ZXJDYXNlKCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWN0dWFsIGluc3RhbmNlIG9mIHRoZSAkdG9vbHRpcCBzZXJ2aWNlLlxuICAgKiBUT0RPIHN1cHBvcnQgbXVsdGlwbGUgdHJpZ2dlcnNcbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckY29tcGlsZScsICckdGltZW91dCcsICckZG9jdW1lbnQnLCAnJHBvc2l0aW9uJywgJyRpbnRlcnBvbGF0ZScsICckcm9vdFNjb3BlJywgJyRwYXJzZScsIGZ1bmN0aW9uKCR3aW5kb3csICRjb21waWxlLCAkdGltZW91dCwgJGRvY3VtZW50LCAkcG9zaXRpb24sICRpbnRlcnBvbGF0ZSwgJHJvb3RTY29wZSwgJHBhcnNlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICR0b29sdGlwKHR5cGUsIHByZWZpeCwgZGVmYXVsdFRyaWdnZXJTaG93LCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gYW5ndWxhci5leHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBnbG9iYWxPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBzaG93IGFuZCBoaWRlIHRyaWdnZXJzLlxuICAgICAgICpcbiAgICAgICAqIElmIGEgdHJpZ2dlciBpcyBzdXBwbGllZCxcbiAgICAgICAqIGl0IGlzIHVzZWQgdG8gc2hvdyB0aGUgdG9vbHRpcDsgb3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRyaWdnZXJgXG4gICAgICAgKiBvcHRpb24gcGFzc2VkIHRvIHRoZSBgJHRvb2x0aXBQcm92aWRlci5vcHRpb25zYCBtZXRob2Q7IGVsc2UgaXQgd2lsbFxuICAgICAgICogZGVmYXVsdCB0byB0aGUgdHJpZ2dlciBzdXBwbGllZCB0byB0aGlzIGRpcmVjdGl2ZSBmYWN0b3J5LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBoaWRlIHRyaWdnZXIgaXMgYmFzZWQgb24gdGhlIHNob3cgdHJpZ2dlci4gSWYgdGhlIGB0cmlnZ2VyYCBvcHRpb25cbiAgICAgICAqIHdhcyBwYXNzZWQgdG8gdGhlIGAkdG9vbHRpcFByb3ZpZGVyLm9wdGlvbnNgIG1ldGhvZCwgaXQgd2lsbCB1c2UgdGhlXG4gICAgICAgKiBtYXBwZWQgdHJpZ2dlciBmcm9tIGB0cmlnZ2VyTWFwYCBvciB0aGUgcGFzc2VkIHRyaWdnZXIgaWYgdGhlIG1hcCBpc1xuICAgICAgICogdW5kZWZpbmVkOyBvdGhlcndpc2UsIGl0IHVzZXMgdGhlIGB0cmlnZ2VyTWFwYCB2YWx1ZSBvZiB0aGUgc2hvd1xuICAgICAgICogdHJpZ2dlcjsgZWxzZSBpdCB3aWxsIGp1c3QgdXNlIHRoZSBzaG93IHRyaWdnZXIuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGdldFRyaWdnZXJzKHRyaWdnZXIpIHtcbiAgICAgICAgdmFyIHNob3cgPSAodHJpZ2dlciB8fCBvcHRpb25zLnRyaWdnZXIgfHwgZGVmYXVsdFRyaWdnZXJTaG93KS5zcGxpdCgnICcpO1xuICAgICAgICB2YXIgaGlkZSA9IHNob3cubWFwKGZ1bmN0aW9uKHRyaWdnZXIpIHtcbiAgICAgICAgICByZXR1cm4gdHJpZ2dlck1hcFt0cmlnZ2VyXSB8fCB0cmlnZ2VyO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG93OiBzaG93LFxuICAgICAgICAgIGhpZGU6IGhpZGVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBzbmFrZV9jYXNlKHR5cGUpO1xuXG4gICAgICB2YXIgc3RhcnRTeW0gPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKTtcbiAgICAgIHZhciBlbmRTeW0gPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCk7XG4gICAgICB2YXIgdGVtcGxhdGUgPVxuICAgICAgICAnPGRpdiAnKyBkaXJlY3RpdmVOYW1lICsnLXBvcHVwICcrXG4gICAgICAgICAgJ3RpdGxlPVwiJytzdGFydFN5bSsndGl0bGUnK2VuZFN5bSsnXCIgJytcbiAgICAgICAgICAob3B0aW9ucy51c2VDb250ZW50RXhwID9cbiAgICAgICAgICAgICdjb250ZW50LWV4cD1cImNvbnRlbnRFeHAoKVwiICcgOlxuICAgICAgICAgICAgJ2NvbnRlbnQ9XCInK3N0YXJ0U3ltKydjb250ZW50JytlbmRTeW0rJ1wiICcpICtcbiAgICAgICAgICAncGxhY2VtZW50PVwiJytzdGFydFN5bSsncGxhY2VtZW50JytlbmRTeW0rJ1wiICcrXG4gICAgICAgICAgJ3BvcHVwLWNsYXNzPVwiJytzdGFydFN5bSsncG9wdXBDbGFzcycrZW5kU3ltKydcIiAnK1xuICAgICAgICAgICdhbmltYXRpb249XCJhbmltYXRpb25cIiAnK1xuICAgICAgICAgICdpcy1vcGVuPVwiaXNPcGVuXCInK1xuICAgICAgICAgICdvcmlnaW4tc2NvcGU9XCJvcmlnU2NvcGVcIiAnK1xuICAgICAgICAgICc+JytcbiAgICAgICAgJzwvZGl2Pic7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbih0RWxlbSwgdEF0dHJzKSB7XG4gICAgICAgICAgdmFyIHRvb2x0aXBMaW5rZXIgPSAkY29tcGlsZSggdGVtcGxhdGUgKTtcblxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBsaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgdG9vbHRpcEN0cmwpIHtcbiAgICAgICAgICAgIHZhciB0b29sdGlwO1xuICAgICAgICAgICAgdmFyIHRvb2x0aXBMaW5rZWRTY29wZTtcbiAgICAgICAgICAgIHZhciB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgICAgICAgIHZhciBwb3B1cFRpbWVvdXQ7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb25UaW1lb3V0O1xuICAgICAgICAgICAgdmFyIGFwcGVuZFRvQm9keSA9IGFuZ3VsYXIuaXNEZWZpbmVkKG9wdGlvbnMuYXBwZW5kVG9Cb2R5KSA/IG9wdGlvbnMuYXBwZW5kVG9Cb2R5IDogZmFsc2U7XG4gICAgICAgICAgICB2YXIgdHJpZ2dlcnMgPSBnZXRUcmlnZ2Vycyh1bmRlZmluZWQpO1xuICAgICAgICAgICAgdmFyIGhhc0VuYWJsZUV4cCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzW3ByZWZpeCArICdFbmFibGUnXSk7XG4gICAgICAgICAgICB2YXIgdHRTY29wZSA9IHNjb3BlLiRuZXcodHJ1ZSk7XG4gICAgICAgICAgICB2YXIgcmVwb3NpdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGlzT3BlbkV4cCA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzW3ByZWZpeCArICdJc09wZW4nXSkgPyAkcGFyc2UoYXR0cnNbcHJlZml4ICsgJ0lzT3BlbiddKSA6IGZhbHNlO1xuXG4gICAgICAgICAgICB2YXIgcG9zaXRpb25Ub29sdGlwID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICghdG9vbHRpcCkgeyByZXR1cm47IH1cblxuICAgICAgICAgICAgICBpZiAoIXBvc2l0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uVGltZW91dCA9ICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgdGhlIHBvc2l0aW9uaW5nIGFuZCBib3ggc2l6ZSBmb3IgY29ycmVjdCB3aWR0aCBhbmQgaGVpZ2h0IHZhbHVlcy5cbiAgICAgICAgICAgICAgICAgIHRvb2x0aXAuY3NzKHsgdG9wOiAwLCBsZWZ0OiAwLCB3aWR0aDogJ2F1dG8nLCBoZWlnaHQ6ICdhdXRvJyB9KTtcblxuICAgICAgICAgICAgICAgICAgdmFyIHR0Qm94ID0gJHBvc2l0aW9uLnBvc2l0aW9uKHRvb2x0aXApO1xuICAgICAgICAgICAgICAgICAgdmFyIHR0Q3NzID0gJHBvc2l0aW9uLnBvc2l0aW9uRWxlbWVudHMoZWxlbWVudCwgdG9vbHRpcCwgdHRTY29wZS5wbGFjZW1lbnQsIGFwcGVuZFRvQm9keSk7XG4gICAgICAgICAgICAgICAgICB0dENzcy50b3AgKz0gJ3B4JztcbiAgICAgICAgICAgICAgICAgIHR0Q3NzLmxlZnQgKz0gJ3B4JztcblxuICAgICAgICAgICAgICAgICAgdHRDc3Mud2lkdGggPSB0dEJveC53aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgICB0dENzcy5oZWlnaHQgPSB0dEJveC5oZWlnaHQgKyAncHgnO1xuXG4gICAgICAgICAgICAgICAgICAvLyBOb3cgc2V0IHRoZSBjYWxjdWxhdGVkIHBvc2l0aW9uaW5nIGFuZCBzaXplLlxuICAgICAgICAgICAgICAgICAgdG9vbHRpcC5jc3ModHRDc3MpO1xuXG4gICAgICAgICAgICAgICAgICBwb3NpdGlvblRpbWVvdXQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgfSwgMCwgZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBTZXQgdXAgdGhlIGNvcnJlY3Qgc2NvcGUgdG8gYWxsb3cgdHJhbnNjbHVzaW9uIGxhdGVyXG4gICAgICAgICAgICB0dFNjb3BlLm9yaWdTY29wZSA9IHNjb3BlO1xuXG4gICAgICAgICAgICAvLyBCeSBkZWZhdWx0LCB0aGUgdG9vbHRpcCBpcyBub3Qgb3Blbi5cbiAgICAgICAgICAgIC8vIFRPRE8gYWRkIGFiaWxpdHkgdG8gc3RhcnQgdG9vbHRpcCBvcGVuZWRcbiAgICAgICAgICAgIHR0U2NvcGUuaXNPcGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRvZ2dsZVRvb2x0aXBCaW5kKCkge1xuICAgICAgICAgICAgICBpZiAoIXR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgc2hvd1Rvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGlkZVRvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2hvdyB0aGUgdG9vbHRpcCB3aXRoIGRlbGF5IGlmIHNwZWNpZmllZCwgb3RoZXJ3aXNlIHNob3cgaXQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dUb29sdGlwQmluZCgpIHtcbiAgICAgICAgICAgICAgaWYgKGhhc0VuYWJsZUV4cCAmJiAhc2NvcGUuJGV2YWwoYXR0cnNbcHJlZml4ICsgJ0VuYWJsZSddKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHByZXBhcmVUb29sdGlwKCk7XG5cbiAgICAgICAgICAgICAgaWYgKHR0U2NvcGUucG9wdXBEZWxheSkge1xuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmcgaWYgdGhlIHRvb2x0aXAgd2FzIGFscmVhZHkgc2NoZWR1bGVkIHRvIHBvcC11cC5cbiAgICAgICAgICAgICAgICAvLyBUaGlzIGhhcHBlbnMgaWYgc2hvdyBpcyB0cmlnZ2VyZWQgbXVsdGlwbGUgdGltZXMgYmVmb3JlIGFueSBoaWRlIGlzIHRyaWdnZXJlZC5cbiAgICAgICAgICAgICAgICBpZiAoIXBvcHVwVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgcG9wdXBUaW1lb3V0ID0gJHRpbWVvdXQoc2hvdywgdHRTY29wZS5wb3B1cERlbGF5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNob3coKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBoaWRlVG9vbHRpcEJpbmQgKCkge1xuICAgICAgICAgICAgICBoaWRlKCk7XG4gICAgICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU2hvdyB0aGUgdG9vbHRpcCBwb3B1cCBlbGVtZW50LlxuICAgICAgICAgICAgZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgICAgICAgICAgcG9wdXBUaW1lb3V0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHBlbmRpbmcgcmVtb3ZlIHRyYW5zaXRpb24sIHdlIG11c3QgY2FuY2VsIGl0LCBsZXN0IHRoZVxuICAgICAgICAgICAgICAvLyB0b29sdGlwIGJlIG15c3RlcmlvdXNseSByZW1vdmVkLlxuICAgICAgICAgICAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodHJhbnNpdGlvblRpbWVvdXQpO1xuICAgICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIC8vIERvbid0IHNob3cgZW1wdHkgdG9vbHRpcHMuXG4gICAgICAgICAgICAgIGlmICghKG9wdGlvbnMudXNlQ29udGVudEV4cCA/IHR0U2NvcGUuY29udGVudEV4cCgpIDogdHRTY29wZS5jb250ZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbmd1bGFyLm5vb3A7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjcmVhdGVUb29sdGlwKCk7XG5cbiAgICAgICAgICAgICAgLy8gQW5kIHNob3cgdGhlIHRvb2x0aXAuXG4gICAgICAgICAgICAgIHR0U2NvcGUuaXNPcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgaWYgKGlzT3BlbkV4cCkge1xuICAgICAgICAgICAgICAgIGlzT3BlbkV4cC5hc3NpZ24odHRTY29wZS5vcmlnU2NvcGUsIHR0U2NvcGUuaXNPcGVuKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgdHRTY29wZS4kYXBwbHkoKTsgLy8gZGlnZXN0IHJlcXVpcmVkIGFzICRhcHBseSBpcyBub3QgY2FsbGVkXG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0b29sdGlwLmNzcyh7IGRpc3BsYXk6ICdibG9jaycgfSk7XG5cbiAgICAgICAgICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEhpZGUgdGhlIHRvb2x0aXAgcG9wdXAgZWxlbWVudC5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgICAgICAgIC8vIEZpcnN0IHRoaW5ncyBmaXJzdDogd2UgZG9uJ3Qgc2hvdyBpdCBhbnltb3JlLlxuICAgICAgICAgICAgICB0dFNjb3BlLmlzT3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICBpZiAoaXNPcGVuRXhwKSB7XG4gICAgICAgICAgICAgICAgaXNPcGVuRXhwLmFzc2lnbih0dFNjb3BlLm9yaWdTY29wZSwgdHRTY29wZS5pc09wZW4pO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy9pZiB0b29sdGlwIGlzIGdvaW5nIHRvIGJlIHNob3duIGFmdGVyIGRlbGF5LCB3ZSBtdXN0IGNhbmNlbCB0aGlzXG4gICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChwb3B1cFRpbWVvdXQpO1xuICAgICAgICAgICAgICBwb3B1cFRpbWVvdXQgPSBudWxsO1xuXG4gICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChwb3NpdGlvblRpbWVvdXQpO1xuICAgICAgICAgICAgICBwb3NpdGlvblRpbWVvdXQgPSBudWxsO1xuXG4gICAgICAgICAgICAgIC8vIEFuZCBub3cgd2UgcmVtb3ZlIGl0IGZyb20gdGhlIERPTS4gSG93ZXZlciwgaWYgd2UgaGF2ZSBhbmltYXRpb24sIHdlXG4gICAgICAgICAgICAgIC8vIG5lZWQgdG8gd2FpdCBmb3IgaXQgdG8gZXhwaXJlIGJlZm9yZWhhbmQuXG4gICAgICAgICAgICAgIC8vIEZJWE1FOiB0aGlzIGlzIGEgcGxhY2Vob2xkZXIgZm9yIGEgcG9ydCBvZiB0aGUgdHJhbnNpdGlvbnMgbGlicmFyeS5cbiAgICAgICAgICAgICAgaWYgKHR0U2NvcGUuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0cmFuc2l0aW9uVGltZW91dCkge1xuICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWVvdXQgPSAkdGltZW91dChyZW1vdmVUb29sdGlwLCA1MDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVUb29sdGlwKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlVG9vbHRpcCgpIHtcbiAgICAgICAgICAgICAgLy8gVGhlcmUgY2FuIG9ubHkgYmUgb25lIHRvb2x0aXAgZWxlbWVudCBwZXIgZGlyZWN0aXZlIHNob3duIGF0IG9uY2UuXG4gICAgICAgICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZSA9IHR0U2NvcGUuJG5ldygpO1xuICAgICAgICAgICAgICB0b29sdGlwID0gdG9vbHRpcExpbmtlcih0b29sdGlwTGlua2VkU2NvcGUsIGZ1bmN0aW9uKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgICAgICAgICAgICAkZG9jdW1lbnQuZmluZCgnYm9keScpLmFwcGVuZCh0b29sdGlwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZnRlcih0b29sdGlwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnVzZUNvbnRlbnRFeHApIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwTGlua2VkU2NvcGUuJHdhdGNoKCdjb250ZW50RXhwKCknLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghdmFsICYmIHR0U2NvcGUuaXNPcGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZS4kd2F0Y2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIXJlcG9zaXRpb25TY2hlZHVsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3NpdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXBMaW5rZWRTY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVwb3NpdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Ub29sdGlwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZVRvb2x0aXAoKSB7XG4gICAgICAgICAgICAgIHRyYW5zaXRpb25UaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHRvb2x0aXAgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0b29sdGlwTGlua2VkU2NvcGUpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwTGlua2VkU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICB0b29sdGlwTGlua2VkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHByZXBhcmVUb29sdGlwKCkge1xuICAgICAgICAgICAgICBwcmVwUG9wdXBDbGFzcygpO1xuICAgICAgICAgICAgICBwcmVwUGxhY2VtZW50KCk7XG4gICAgICAgICAgICAgIHByZXBQb3B1cERlbGF5KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHR0U2NvcGUuY29udGVudEV4cCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnNbdHlwZV0pO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBPYnNlcnZlIHRoZSByZWxldmFudCBhdHRyaWJ1dGVzLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMudXNlQ29udGVudEV4cCkge1xuICAgICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZSh0eXBlLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICB0dFNjb3BlLmNvbnRlbnQgPSB2YWw7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXZhbCAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgICAgaGlkZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZSgnZGlzYWJsZWQnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgaWYgKHBvcHVwVGltZW91dCAmJiB2YWwpIHtcbiAgICAgICAgICAgICAgICAkdGltZW91dC5jYW5jZWwocG9wdXBUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICBwb3B1cFRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHZhbCAmJiB0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGF0dHJzLiRvYnNlcnZlKHByZWZpeCArICdUaXRsZScsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgICAgICB0dFNjb3BlLnRpdGxlID0gdmFsO1xuICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhdHRycy4kb2JzZXJ2ZShwcmVmaXggKyAnUGxhY2VtZW50JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICh0dFNjb3BlLmlzT3Blbikge1xuICAgICAgICAgICAgICAgIHByZXBQbGFjZW1lbnQoKTtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblRvb2x0aXAoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChpc09wZW5FeHApIHtcbiAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGlzT3BlbkV4cCwgZnVuY3Rpb24odmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbCAhPT0gdHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZVRvb2x0aXBCaW5kKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcHJlcFBvcHVwQ2xhc3MoKSB7XG4gICAgICAgICAgICAgIHR0U2NvcGUucG9wdXBDbGFzcyA9IGF0dHJzW3ByZWZpeCArICdDbGFzcyddO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmVwUGxhY2VtZW50KCkge1xuICAgICAgICAgICAgICB2YXIgdmFsID0gYXR0cnNbcHJlZml4ICsgJ1BsYWNlbWVudCddO1xuICAgICAgICAgICAgICB0dFNjb3BlLnBsYWNlbWVudCA9IGFuZ3VsYXIuaXNEZWZpbmVkKHZhbCkgPyB2YWwgOiBvcHRpb25zLnBsYWNlbWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gcHJlcFBvcHVwRGVsYXkoKSB7XG4gICAgICAgICAgICAgIHZhciB2YWwgPSBhdHRyc1twcmVmaXggKyAnUG9wdXBEZWxheSddO1xuICAgICAgICAgICAgICB2YXIgZGVsYXkgPSBwYXJzZUludCh2YWwsIDEwKTtcbiAgICAgICAgICAgICAgdHRTY29wZS5wb3B1cERlbGF5ID0gIWlzTmFOKGRlbGF5KSA/IGRlbGF5IDogb3B0aW9ucy5wb3B1cERlbGF5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdW5yZWdpc3RlclRyaWdnZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHRyaWdnZXJzLnNob3cuZm9yRWFjaChmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC51bmJpbmQodHJpZ2dlciwgc2hvd1Rvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHRyaWdnZXJzLmhpZGUuZm9yRWFjaChmdW5jdGlvbih0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC51bmJpbmQodHJpZ2dlciwgaGlkZVRvb2x0aXBCaW5kKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBwcmVwVHJpZ2dlcnMoKSB7XG4gICAgICAgICAgICAgIHZhciB2YWwgPSBhdHRyc1twcmVmaXggKyAnVHJpZ2dlciddO1xuICAgICAgICAgICAgICB1bnJlZ2lzdGVyVHJpZ2dlcnMoKTtcblxuICAgICAgICAgICAgICB0cmlnZ2VycyA9IGdldFRyaWdnZXJzKHZhbCk7XG5cbiAgICAgICAgICAgICAgaWYgKHRyaWdnZXJzLnNob3cgIT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIHRyaWdnZXJzLnNob3cuZm9yRWFjaChmdW5jdGlvbih0cmlnZ2VyLCBpZHgpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFVzaW5nIHJhdyBhZGRFdmVudExpc3RlbmVyIGR1ZSB0byBqcUxpdGUvalF1ZXJ5IGJ1ZyAtICM0MDYwXG4gICAgICAgICAgICAgICAgICBpZiAodHJpZ2dlciA9PT0gdHJpZ2dlcnMuaGlkZVtpZHhdKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcih0cmlnZ2VyLCB0b2dnbGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFswXS5hZGRFdmVudExpc3RlbmVyKHRyaWdnZXIsIHNob3dUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcih0cmlnZ2Vycy5oaWRlW2lkeF0sIGhpZGVUb29sdGlwQmluZCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByZXBUcmlnZ2VycygpO1xuXG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gc2NvcGUuJGV2YWwoYXR0cnNbcHJlZml4ICsgJ0FuaW1hdGlvbiddKTtcbiAgICAgICAgICAgIHR0U2NvcGUuYW5pbWF0aW9uID0gYW5ndWxhci5pc0RlZmluZWQoYW5pbWF0aW9uKSA/ICEhYW5pbWF0aW9uIDogb3B0aW9ucy5hbmltYXRpb247XG5cbiAgICAgICAgICAgIHZhciBhcHBlbmRUb0JvZHlWYWwgPSBzY29wZS4kZXZhbChhdHRyc1twcmVmaXggKyAnQXBwZW5kVG9Cb2R5J10pO1xuICAgICAgICAgICAgYXBwZW5kVG9Cb2R5ID0gYW5ndWxhci5pc0RlZmluZWQoYXBwZW5kVG9Cb2R5VmFsKSA/IGFwcGVuZFRvQm9keVZhbCA6IGFwcGVuZFRvQm9keTtcblxuICAgICAgICAgICAgLy8gaWYgYSB0b29sdGlwIGlzIGF0dGFjaGVkIHRvIDxib2R5PiB3ZSBuZWVkIHRvIHJlbW92ZSBpdCBvblxuICAgICAgICAgICAgLy8gbG9jYXRpb24gY2hhbmdlIGFzIGl0cyBwYXJlbnQgc2NvcGUgd2lsbCBwcm9iYWJseSBub3QgYmUgZGVzdHJveWVkXG4gICAgICAgICAgICAvLyBieSB0aGUgY2hhbmdlLlxuICAgICAgICAgICAgaWYgKGFwcGVuZFRvQm9keSkge1xuICAgICAgICAgICAgICBzY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiBjbG9zZVRvb2x0aXBPbkxvY2F0aW9uQ2hhbmdlU3VjY2VzcygpIHtcbiAgICAgICAgICAgICAgICBpZiAodHRTY29wZS5pc09wZW4pIHtcbiAgICAgICAgICAgICAgICAgIGhpZGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdG9vbHRpcCBpcyBkZXN0cm95ZWQgYW5kIHJlbW92ZWQuXG4gICAgICAgICAgICBzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gb25EZXN0cm95VG9vbHRpcCgpIHtcbiAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHRyYW5zaXRpb25UaW1lb3V0KTtcbiAgICAgICAgICAgICAgJHRpbWVvdXQuY2FuY2VsKHBvcHVwVGltZW91dCk7XG4gICAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbChwb3NpdGlvblRpbWVvdXQpO1xuICAgICAgICAgICAgICB1bnJlZ2lzdGVyVHJpZ2dlcnMoKTtcbiAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcCgpO1xuICAgICAgICAgICAgICB0dFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgfV07XG59KVxuXG4vLyBUaGlzIGlzIG1vc3RseSBuZ0luY2x1ZGUgY29kZSBidXQgd2l0aCBhIGN1c3RvbSBzY29wZVxuLmRpcmVjdGl2ZSgndG9vbHRpcFRlbXBsYXRlVHJhbnNjbHVkZScsIFtcbiAgICAgICAgICckYW5pbWF0ZScsICckc2NlJywgJyRjb21waWxlJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLFxuZnVuY3Rpb24gKCRhbmltYXRlICwgICRzY2UgLCAgJGNvbXBpbGUgLCAgJHRlbXBsYXRlUmVxdWVzdCkge1xuICByZXR1cm4ge1xuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtLCBhdHRycykge1xuICAgICAgdmFyIG9yaWdTY29wZSA9IHNjb3BlLiRldmFsKGF0dHJzLnRvb2x0aXBUZW1wbGF0ZVRyYW5zY2x1ZGVTY29wZSk7XG5cbiAgICAgIHZhciBjaGFuZ2VDb3VudGVyID0gMCxcbiAgICAgICAgY3VycmVudFNjb3BlLFxuICAgICAgICBwcmV2aW91c0VsZW1lbnQsXG4gICAgICAgIGN1cnJlbnRFbGVtZW50O1xuXG4gICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50KSB7XG4gICAgICAgICAgcHJldmlvdXNFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRTY29wZSkge1xuICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgJGFuaW1hdGUubGVhdmUoY3VycmVudEVsZW1lbnQpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IGN1cnJlbnRFbGVtZW50O1xuICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2NvcGUuJHdhdGNoKCRzY2UucGFyc2VBc1Jlc291cmNlVXJsKGF0dHJzLnRvb2x0aXBUZW1wbGF0ZVRyYW5zY2x1ZGUpLCBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgdmFyIHRoaXNDaGFuZ2VJZCA9ICsrY2hhbmdlQ291bnRlcjtcblxuICAgICAgICBpZiAoc3JjKSB7XG4gICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lclxuICAgICAgICAgIC8vY29udGVudHMgYW5kIHNjb3BlIGNhbiBiZSBjbGVhbmVkIHVwLlxuICAgICAgICAgICR0ZW1wbGF0ZVJlcXVlc3Qoc3JjLCB0cnVlKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSB7IHJldHVybjsgfVxuICAgICAgICAgICAgdmFyIG5ld1Njb3BlID0gb3JpZ1Njb3BlLiRuZXcoKTtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICB2YXIgY2xvbmUgPSAkY29tcGlsZSh0ZW1wbGF0ZSkobmV3U2NvcGUsIGZ1bmN0aW9uKGNsb25lKSB7XG4gICAgICAgICAgICAgIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQoKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIGVsZW0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGN1cnJlbnRTY29wZSA9IG5ld1Njb3BlO1xuICAgICAgICAgICAgY3VycmVudEVsZW1lbnQgPSBjbG9uZTtcblxuICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHRoaXNDaGFuZ2VJZCA9PT0gY2hhbmdlQ291bnRlcikge1xuICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgIHNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRFcnJvcicsIHNyYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZCcsIHNyYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGNsZWFudXBMYXN0SW5jbHVkZUNvbnRlbnQpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4vKipcbiAqIE5vdGUgdGhhdCBpdCdzIGludGVudGlvbmFsIHRoYXQgdGhlc2UgY2xhc3NlcyBhcmUgKm5vdCogYXBwbGllZCB0aHJvdWdoICRhbmltYXRlLlxuICogVGhleSBtdXN0IG5vdCBiZSBhbmltYXRlZCBhcyB0aGV5J3JlIGV4cGVjdGVkIHRvIGJlIHByZXNlbnQgb24gdGhlIHRvb2x0aXAgb25cbiAqIGluaXRpYWxpemF0aW9uLlxuICovXG4uZGlyZWN0aXZlKCd0b29sdGlwQ2xhc3NlcycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICBpZiAoc2NvcGUucGxhY2VtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3Moc2NvcGUucGxhY2VtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzY29wZS5wb3B1cENsYXNzKSB7XG4gICAgICAgIGVsZW1lbnQuYWRkQ2xhc3Moc2NvcGUucG9wdXBDbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoc2NvcGUuYW5pbWF0aW9uKCkpIHtcbiAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhhdHRycy50b29sdGlwQW5pbWF0aW9uQ2xhc3MpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3Rvb2x0aXBQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgc2NvcGU6IHsgY29udGVudDogJ0AnLCBwbGFjZW1lbnQ6ICdAJywgcG9wdXBDbGFzczogJ0AnLCBhbmltYXRpb246ICcmJywgaXNPcGVuOiAnJicgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1wb3B1cC5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndG9vbHRpcCcsIFsgJyR0b29sdGlwJywgZnVuY3Rpb24oJHRvb2x0aXApIHtcbiAgcmV0dXJuICR0b29sdGlwKCd0b29sdGlwJywgJ3Rvb2x0aXAnLCAnbW91c2VlbnRlcicpO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3Rvb2x0aXBUZW1wbGF0ZVBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBzY29wZTogeyBjb250ZW50RXhwOiAnJicsIHBsYWNlbWVudDogJ0AnLCBwb3B1cENsYXNzOiAnQCcsIGFuaW1hdGlvbjogJyYnLCBpc09wZW46ICcmJyxcbiAgICAgIG9yaWdpblNjb3BlOiAnJicgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC10ZW1wbGF0ZS1wb3B1cC5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndG9vbHRpcFRlbXBsYXRlJywgWyckdG9vbHRpcCcsIGZ1bmN0aW9uKCR0b29sdGlwKSB7XG4gIHJldHVybiAkdG9vbHRpcCgndG9vbHRpcFRlbXBsYXRlJywgJ3Rvb2x0aXAnLCAnbW91c2VlbnRlcicsIHtcbiAgICB1c2VDb250ZW50RXhwOiB0cnVlXG4gIH0pO1xufV0pXG5cbi5kaXJlY3RpdmUoJ3Rvb2x0aXBIdG1sUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHNjb3BlOiB7IGNvbnRlbnRFeHA6ICcmJywgcGxhY2VtZW50OiAnQCcsIHBvcHVwQ2xhc3M6ICdAJywgYW5pbWF0aW9uOiAnJicsIGlzT3BlbjogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC1wb3B1cC5odG1sJ1xuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndG9vbHRpcEh0bWwnLCBbJyR0b29sdGlwJywgZnVuY3Rpb24oJHRvb2x0aXApIHtcbiAgcmV0dXJuICR0b29sdGlwKCd0b29sdGlwSHRtbCcsICd0b29sdGlwJywgJ21vdXNlZW50ZXInLCB7XG4gICAgdXNlQ29udGVudEV4cDogdHJ1ZVxuICB9KTtcbn1dKVxuXG4vKlxuRGVwcmVjYXRlZFxuKi9cbi5kaXJlY3RpdmUoJ3Rvb2x0aXBIdG1sVW5zYWZlUG9wdXAnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHNjb3BlOiB7IGNvbnRlbnQ6ICdAJywgcGxhY2VtZW50OiAnQCcsIHBvcHVwQ2xhc3M6ICdAJywgYW5pbWF0aW9uOiAnJicsIGlzT3BlbjogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC11bnNhZmUtcG9wdXAuaHRtbCdcbiAgfTtcbn0pXG5cbi52YWx1ZSgndG9vbHRpcEh0bWxVbnNhZmVTdXBwcmVzc0RlcHJlY2F0ZWQnLCBmYWxzZSlcbi5kaXJlY3RpdmUoJ3Rvb2x0aXBIdG1sVW5zYWZlJywgW1xuICAgICAgICAgICckdG9vbHRpcCcsICd0b29sdGlwSHRtbFVuc2FmZVN1cHByZXNzRGVwcmVjYXRlZCcsICckbG9nJyxcbmZ1bmN0aW9uKCR0b29sdGlwICwgIHRvb2x0aXBIdG1sVW5zYWZlU3VwcHJlc3NEZXByZWNhdGVkICwgICRsb2cpIHtcbiAgaWYgKCF0b29sdGlwSHRtbFVuc2FmZVN1cHByZXNzRGVwcmVjYXRlZCkge1xuICAgICRsb2cud2FybigndG9vbHRpcC1odG1sLXVuc2FmZSBpcyBub3cgZGVwcmVjYXRlZC4gVXNlIHRvb2x0aXAtaHRtbCBvciB0b29sdGlwLXRlbXBsYXRlIGluc3RlYWQuJyk7XG4gIH1cbiAgcmV0dXJuICR0b29sdGlwKCd0b29sdGlwSHRtbFVuc2FmZScsICd0b29sdGlwJywgJ21vdXNlZW50ZXInKTtcbn1dKTtcblxuLyoqXG4gKiBUaGUgZm9sbG93aW5nIGZlYXR1cmVzIGFyZSBzdGlsbCBvdXRzdGFuZGluZzogcG9wdXAgZGVsYXksIGFuaW1hdGlvbiBhcyBhXG4gKiBmdW5jdGlvbiwgcGxhY2VtZW50IGFzIGEgZnVuY3Rpb24sIGluc2lkZSwgc3VwcG9ydCBmb3IgbW9yZSB0cmlnZ2VycyB0aGFuXG4gKiBqdXN0IG1vdXNlIGVudGVyL2xlYXZlLCBhbmQgc2VsZWN0b3IgZGVsZWdhdGF0aW9uLlxuICovXG5hbmd1bGFyLm1vZHVsZSggJ3VpLmJvb3RzdHJhcC5wb3BvdmVyJywgWyd1aS5ib290c3RyYXAudG9vbHRpcCddKVxuXG4uZGlyZWN0aXZlKCdwb3BvdmVyVGVtcGxhdGVQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgc2NvcGU6IHsgdGl0bGU6ICdAJywgY29udGVudEV4cDogJyYnLCBwbGFjZW1lbnQ6ICdAJywgcG9wdXBDbGFzczogJ0AnLCBhbmltYXRpb246ICcmJywgaXNPcGVuOiAnJicsXG4gICAgICBvcmlnaW5TY29wZTogJyYnIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItdGVtcGxhdGUuaHRtbCdcbiAgfTtcbn0pXG5cbi5kaXJlY3RpdmUoJ3BvcG92ZXJUZW1wbGF0ZScsIFsnJHRvb2x0aXAnLCBmdW5jdGlvbigkdG9vbHRpcCkge1xuICByZXR1cm4gJHRvb2x0aXAoJ3BvcG92ZXJUZW1wbGF0ZScsICdwb3BvdmVyJywgJ2NsaWNrJywge1xuICAgIHVzZUNvbnRlbnRFeHA6IHRydWVcbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgncG9wb3Zlckh0bWxQb3B1cCcsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgc2NvcGU6IHsgY29udGVudEV4cDogJyYnLCB0aXRsZTogJ0AnLCBwbGFjZW1lbnQ6ICdAJywgcG9wdXBDbGFzczogJ0AnLCBhbmltYXRpb246ICcmJywgaXNPcGVuOiAnJicgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci1odG1sLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCdwb3BvdmVySHRtbCcsIFsnJHRvb2x0aXAnLCBmdW5jdGlvbigkdG9vbHRpcCkge1xuICByZXR1cm4gJHRvb2x0aXAoICdwb3BvdmVySHRtbCcsICdwb3BvdmVyJywgJ2NsaWNrJywge1xuICAgIHVzZUNvbnRlbnRFeHA6IHRydWVcbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgncG9wb3ZlclBvcHVwJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBzY29wZTogeyB0aXRsZTogJ0AnLCBjb250ZW50OiAnQCcsIHBsYWNlbWVudDogJ0AnLCBwb3B1cENsYXNzOiAnQCcsIGFuaW1hdGlvbjogJyYnLCBpc09wZW46ICcmJyB9LFxuICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCdwb3BvdmVyJywgWyckdG9vbHRpcCcsIGZ1bmN0aW9uKCR0b29sdGlwKSB7XG4gIHJldHVybiAkdG9vbHRpcCggJ3BvcG92ZXInLCAncG9wb3ZlcicsICdjbGljaycgKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC5wcm9ncmVzc2JhcicsIFtdKVxuXG4uY29uc3RhbnQoJ3Byb2dyZXNzQ29uZmlnJywge1xuICBhbmltYXRlOiB0cnVlLFxuICBtYXg6IDEwMFxufSlcblxuLnZhbHVlKCckcHJvZ3Jlc3NTdXBwcmVzc1dhcm5pbmcnLCBmYWxzZSlcblxuLmNvbnRyb2xsZXIoJ1Byb2dyZXNzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICdwcm9ncmVzc0NvbmZpZycsIGZ1bmN0aW9uKCRzY29wZSwgJGF0dHJzLCBwcm9ncmVzc0NvbmZpZykge1xuICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICBhbmltYXRlID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLmFuaW1hdGUpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLmFuaW1hdGUpIDogcHJvZ3Jlc3NDb25maWcuYW5pbWF0ZTtcblxuICB0aGlzLmJhcnMgPSBbXTtcbiAgJHNjb3BlLm1heCA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRzY29wZS5tYXgpID8gJHNjb3BlLm1heCA6IHByb2dyZXNzQ29uZmlnLm1heDtcblxuICB0aGlzLmFkZEJhciA9IGZ1bmN0aW9uKGJhciwgZWxlbWVudCkge1xuICAgIGlmICghYW5pbWF0ZSkge1xuICAgICAgZWxlbWVudC5jc3Moeyd0cmFuc2l0aW9uJzogJ25vbmUnfSk7XG4gICAgfVxuXG4gICAgdGhpcy5iYXJzLnB1c2goYmFyKTtcblxuICAgIGJhci5tYXggPSAkc2NvcGUubWF4O1xuXG4gICAgYmFyLiR3YXRjaCgndmFsdWUnLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSgpO1xuICAgIH0pO1xuXG4gICAgYmFyLnJlY2FsY3VsYXRlUGVyY2VudGFnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgYmFyLnBlcmNlbnQgPSArKDEwMCAqIGJhci52YWx1ZSAvIGJhci5tYXgpLnRvRml4ZWQoMik7XG5cbiAgICAgIHZhciB0b3RhbFBlcmNlbnRhZ2UgPSBzZWxmLmJhcnMucmVkdWNlKGZ1bmN0aW9uKHRvdGFsLCBiYXIpIHtcbiAgICAgICAgcmV0dXJuIHRvdGFsICsgYmFyLnBlcmNlbnQ7XG4gICAgICB9LCAwKTtcblxuICAgICAgaWYgKHRvdGFsUGVyY2VudGFnZSA+IDEwMCkge1xuICAgICAgICBiYXIucGVyY2VudCAtPSB0b3RhbFBlcmNlbnRhZ2UgLSAxMDA7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGJhci4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICBlbGVtZW50ID0gbnVsbDtcbiAgICAgIHNlbGYucmVtb3ZlQmFyKGJhcik7XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5yZW1vdmVCYXIgPSBmdW5jdGlvbihiYXIpIHtcbiAgICAgIHRoaXMuYmFycy5zcGxpY2UodGhpcy5iYXJzLmluZGV4T2YoYmFyKSwgMSk7XG4gIH07XG5cbiAgJHNjb3BlLiR3YXRjaCgnbWF4JywgZnVuY3Rpb24obWF4KSB7XG4gICAgc2VsZi5iYXJzLmZvckVhY2goZnVuY3Rpb24oYmFyKSB7XG4gICAgICBiYXIubWF4ID0gJHNjb3BlLm1heDtcbiAgICAgIGJhci5yZWNhbGN1bGF0ZVBlcmNlbnRhZ2UoKTtcbiAgICB9KTtcbiAgfSk7XG59XSlcblxuLmRpcmVjdGl2ZSgndWliUHJvZ3Jlc3MnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgY29udHJvbGxlcjogJ1Byb2dyZXNzQ29udHJvbGxlcicsXG4gICAgcmVxdWlyZTogJ3VpYlByb2dyZXNzJyxcbiAgICBzY29wZToge1xuICAgICAgbWF4OiAnPT8nXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWwnXG4gIH07XG59KVxuXG4uZGlyZWN0aXZlKCdwcm9ncmVzcycsIFsnJGxvZycsICckcHJvZ3Jlc3NTdXBwcmVzc1dhcm5pbmcnLCBmdW5jdGlvbigkbG9nLCAkcHJvZ3Jlc3NTdXBwcmVzc1dhcm5pbmcpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgY29udHJvbGxlcjogJ1Byb2dyZXNzQ29udHJvbGxlcicsXG4gICAgcmVxdWlyZTogJ3Byb2dyZXNzJyxcbiAgICBzY29wZToge1xuICAgICAgbWF4OiAnPT8nXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCRwcm9ncmVzc1N1cHByZXNzV2FybmluZykge1xuICAgICAgICAkbG9nLndhcm4oJ3Byb2dyZXNzIGlzIG5vdyBkZXByZWNhdGVkLiBVc2UgdWliLXByb2dyZXNzIGluc3RlYWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndWliQmFyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiB0cnVlLFxuICAgIHJlcXVpcmU6ICdedWliUHJvZ3Jlc3MnLFxuICAgIHNjb3BlOiB7XG4gICAgICB2YWx1ZTogJz0nLFxuICAgICAgdHlwZTogJ0AnXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3Byb2dyZXNzYmFyL2Jhci5odG1sJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIHByb2dyZXNzQ3RybCkge1xuICAgICAgcHJvZ3Jlc3NDdHJsLmFkZEJhcihzY29wZSwgZWxlbWVudCk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgnYmFyJywgWyckbG9nJywgJyRwcm9ncmVzc1N1cHByZXNzV2FybmluZycsIGZ1bmN0aW9uKCRsb2csICRwcm9ncmVzc1N1cHByZXNzV2FybmluZykge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICByZXF1aXJlOiAnXnByb2dyZXNzJyxcbiAgICBzY29wZToge1xuICAgICAgdmFsdWU6ICc9JyxcbiAgICAgIHR5cGU6ICdAJ1xuICAgIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBwcm9ncmVzc0N0cmwpIHtcbiAgICAgIGlmICgkcHJvZ3Jlc3NTdXBwcmVzc1dhcm5pbmcpIHtcbiAgICAgICAgJGxvZy53YXJuKCdiYXIgaXMgbm93IGRlcHJlY2F0ZWQuIFVzZSB1aWItYmFyIGluc3RlYWQnKTtcbiAgICAgIH1cbiAgICAgIHByb2dyZXNzQ3RybC5hZGRCYXIoc2NvcGUsIGVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCdwcm9ncmVzc2JhcicsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcGxhY2U6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnUHJvZ3Jlc3NDb250cm9sbGVyJyxcbiAgICBzY29wZToge1xuICAgICAgdmFsdWU6ICc9JyxcbiAgICAgIG1heDogJz0/JyxcbiAgICAgIHR5cGU6ICdAJ1xuICAgIH0sXG4gICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIHByb2dyZXNzQ3RybCkge1xuICAgICAgcHJvZ3Jlc3NDdHJsLmFkZEJhcihzY29wZSwgYW5ndWxhci5lbGVtZW50KGVsZW1lbnQuY2hpbGRyZW4oKVswXSkpO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnJhdGluZycsIFtdKVxuXG4uY29uc3RhbnQoJ3JhdGluZ0NvbmZpZycsIHtcbiAgbWF4OiA1LFxuICBzdGF0ZU9uOiBudWxsLFxuICBzdGF0ZU9mZjogbnVsbCxcbiAgdGl0bGVzIDogWydvbmUnLCAndHdvJywgJ3RocmVlJywgJ2ZvdXInLCAnZml2ZSddXG59KVxuXG4uY29udHJvbGxlcignUmF0aW5nQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRhdHRycycsICdyYXRpbmdDb25maWcnLCBmdW5jdGlvbigkc2NvcGUsICRhdHRycywgcmF0aW5nQ29uZmlnKSB7XG4gIHZhciBuZ01vZGVsQ3RybCAgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9O1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKG5nTW9kZWxDdHJsXykge1xuICAgIG5nTW9kZWxDdHJsID0gbmdNb2RlbEN0cmxfO1xuICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSB0aGlzLnJlbmRlcjtcblxuICAgIG5nTW9kZWxDdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGlmIChhbmd1bGFyLmlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSA8PCAwICE9PSB2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuXG4gICAgdGhpcy5zdGF0ZU9uID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnN0YXRlT24pID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnN0YXRlT24pIDogcmF0aW5nQ29uZmlnLnN0YXRlT247XG4gICAgdGhpcy5zdGF0ZU9mZiA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5zdGF0ZU9mZikgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMuc3RhdGVPZmYpIDogcmF0aW5nQ29uZmlnLnN0YXRlT2ZmO1xuICAgIHZhciB0bXBUaXRsZXMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMudGl0bGVzKSAgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMudGl0bGVzKSA6IHJhdGluZ0NvbmZpZy50aXRsZXMgOyAgICBcbiAgICB0aGlzLnRpdGxlcyA9IGFuZ3VsYXIuaXNBcnJheSh0bXBUaXRsZXMpICYmIHRtcFRpdGxlcy5sZW5ndGggPiAwID9cbiAgICAgIHRtcFRpdGxlcyA6IHJhdGluZ0NvbmZpZy50aXRsZXM7XG4gICAgXG4gICAgdmFyIHJhdGluZ1N0YXRlcyA9IGFuZ3VsYXIuaXNEZWZpbmVkKCRhdHRycy5yYXRpbmdTdGF0ZXMpID9cbiAgICAgICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5yYXRpbmdTdGF0ZXMpIDpcbiAgICAgIG5ldyBBcnJheShhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubWF4KSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5tYXgpIDogcmF0aW5nQ29uZmlnLm1heCk7XG4gICAgJHNjb3BlLnJhbmdlID0gdGhpcy5idWlsZFRlbXBsYXRlT2JqZWN0cyhyYXRpbmdTdGF0ZXMpO1xuICB9O1xuXG4gIHRoaXMuYnVpbGRUZW1wbGF0ZU9iamVjdHMgPSBmdW5jdGlvbihzdGF0ZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHN0YXRlcy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgIHN0YXRlc1tpXSA9IGFuZ3VsYXIuZXh0ZW5kKHsgaW5kZXg6IGkgfSwgeyBzdGF0ZU9uOiB0aGlzLnN0YXRlT24sIHN0YXRlT2ZmOiB0aGlzLnN0YXRlT2ZmLCB0aXRsZTogdGhpcy5nZXRUaXRsZShpKSB9LCBzdGF0ZXNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGVzO1xuICB9O1xuICBcbiAgdGhpcy5nZXRUaXRsZSA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHRoaXMudGl0bGVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGluZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMudGl0bGVzW2luZGV4XTtcbiAgICB9XG4gIH07XG4gIFxuICAkc2NvcGUucmF0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCEkc2NvcGUucmVhZG9ubHkgJiYgdmFsdWUgPj0gMCAmJiB2YWx1ZSA8PSAkc2NvcGUucmFuZ2UubGVuZ3RoKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUgPT09IHZhbHVlID8gMCA6IHZhbHVlKTtcbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmVudGVyID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoISRzY29wZS5yZWFkb25seSkge1xuICAgICAgJHNjb3BlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgICRzY29wZS5vbkhvdmVyKHt2YWx1ZTogdmFsdWV9KTtcbiAgfTtcblxuICAkc2NvcGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUudmFsdWUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICAgICRzY29wZS5vbkxlYXZlKCk7XG4gIH07XG5cbiAgJHNjb3BlLm9uS2V5ZG93biA9IGZ1bmN0aW9uKGV2dCkge1xuICAgIGlmICgvKDM3fDM4fDM5fDQwKS8udGVzdChldnQud2hpY2gpKSB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICRzY29wZS5yYXRlKCRzY29wZS52YWx1ZSArIChldnQud2hpY2ggPT09IDM4IHx8IGV2dC53aGljaCA9PT0gMzkgPyAxIDogLTEpKTtcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAkc2NvcGUudmFsdWUgPSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlO1xuICB9O1xufV0pXG5cbi5kaXJlY3RpdmUoJ3JhdGluZycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgIHJlcXVpcmU6IFsncmF0aW5nJywgJ25nTW9kZWwnXSxcbiAgICBzY29wZToge1xuICAgICAgcmVhZG9ubHk6ICc9PycsXG4gICAgICBvbkhvdmVyOiAnJicsXG4gICAgICBvbkxlYXZlOiAnJidcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6ICdSYXRpbmdDb250cm9sbGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3JhdGluZy9yYXRpbmcuaHRtbCcsXG4gICAgcmVwbGFjZTogdHJ1ZSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICB2YXIgcmF0aW5nQ3RybCA9IGN0cmxzWzBdLCBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgcmF0aW5nQ3RybC5pbml0KCBuZ01vZGVsQ3RybCApO1xuICAgIH1cbiAgfTtcbn0pO1xuXG5cbi8qKlxuICogQG5nZG9jIG92ZXJ2aWV3XG4gKiBAbmFtZSB1aS5ib290c3RyYXAudGFic1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQW5ndWxhckpTIHZlcnNpb24gb2YgdGhlIHRhYnMgZGlyZWN0aXZlLlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGFicycsIFtdKVxuXG4uY29udHJvbGxlcignVGFic2V0Q29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24gVGFic2V0Q3RybCgkc2NvcGUpIHtcbiAgdmFyIGN0cmwgPSB0aGlzLFxuICAgICAgdGFicyA9IGN0cmwudGFicyA9ICRzY29wZS50YWJzID0gW107XG5cbiAgY3RybC5zZWxlY3QgPSBmdW5jdGlvbihzZWxlY3RlZFRhYikge1xuICAgIGFuZ3VsYXIuZm9yRWFjaCh0YWJzLCBmdW5jdGlvbih0YWIpIHtcbiAgICAgIGlmICh0YWIuYWN0aXZlICYmIHRhYiAhPT0gc2VsZWN0ZWRUYWIpIHtcbiAgICAgICAgdGFiLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0YWIub25EZXNlbGVjdCgpO1xuICAgICAgICBzZWxlY3RlZFRhYi5zZWxlY3RDYWxsZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzZWxlY3RlZFRhYi5hY3RpdmUgPSB0cnVlO1xuICAgIC8vIG9ubHkgY2FsbCBzZWxlY3QgaWYgaXQgaGFzIG5vdCBhbHJlYWR5IGJlZW4gY2FsbGVkXG4gICAgaWYgKCFzZWxlY3RlZFRhYi5zZWxlY3RDYWxsZWQpIHtcbiAgICAgIHNlbGVjdGVkVGFiLm9uU2VsZWN0KCk7XG4gICAgICBzZWxlY3RlZFRhYi5zZWxlY3RDYWxsZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBjdHJsLmFkZFRhYiA9IGZ1bmN0aW9uIGFkZFRhYih0YWIpIHtcbiAgICB0YWJzLnB1c2godGFiKTtcbiAgICAvLyB3ZSBjYW4ndCBydW4gdGhlIHNlbGVjdCBmdW5jdGlvbiBvbiB0aGUgZmlyc3QgdGFiXG4gICAgLy8gc2luY2UgdGhhdCB3b3VsZCBzZWxlY3QgaXQgdHdpY2VcbiAgICBpZiAodGFicy5sZW5ndGggPT09IDEgJiYgdGFiLmFjdGl2ZSAhPT0gZmFsc2UpIHtcbiAgICAgIHRhYi5hY3RpdmUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGFiLmFjdGl2ZSkge1xuICAgICAgY3RybC5zZWxlY3QodGFiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFiLmFjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBjdHJsLnJlbW92ZVRhYiA9IGZ1bmN0aW9uIHJlbW92ZVRhYih0YWIpIHtcbiAgICB2YXIgaW5kZXggPSB0YWJzLmluZGV4T2YodGFiKTtcbiAgICAvL1NlbGVjdCBhIG5ldyB0YWIgaWYgdGhlIHRhYiB0byBiZSByZW1vdmVkIGlzIHNlbGVjdGVkIGFuZCBub3QgZGVzdHJveWVkXG4gICAgaWYgKHRhYi5hY3RpdmUgJiYgdGFicy5sZW5ndGggPiAxICYmICFkZXN0cm95ZWQpIHtcbiAgICAgIC8vSWYgdGhpcyBpcyB0aGUgbGFzdCB0YWIsIHNlbGVjdCB0aGUgcHJldmlvdXMgdGFiLiBlbHNlLCB0aGUgbmV4dCB0YWIuXG4gICAgICB2YXIgbmV3QWN0aXZlSW5kZXggPSBpbmRleCA9PSB0YWJzLmxlbmd0aCAtIDEgPyBpbmRleCAtIDEgOiBpbmRleCArIDE7XG4gICAgICBjdHJsLnNlbGVjdCh0YWJzW25ld0FjdGl2ZUluZGV4XSk7XG4gICAgfVxuICAgIHRhYnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgfTtcblxuICB2YXIgZGVzdHJveWVkO1xuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIGRlc3Ryb3llZCA9IHRydWU7XG4gIH0pO1xufV0pXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdWkuYm9vdHN0cmFwLnRhYnMuZGlyZWN0aXZlOnRhYnNldFxuICogQHJlc3RyaWN0IEVBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUYWJzZXQgaXMgdGhlIG91dGVyIGNvbnRhaW5lciBmb3IgdGhlIHRhYnMgZGlyZWN0aXZlXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gdmVydGljYWwgV2hldGhlciBvciBub3QgdG8gdXNlIHZlcnRpY2FsIHN0eWxpbmcgZm9yIHRoZSB0YWJzLlxuICogQHBhcmFtIHtib29sZWFuPX0ganVzdGlmaWVkIFdoZXRoZXIgb3Igbm90IHRvIHVzZSBqdXN0aWZpZWQgc3R5bGluZyBmb3IgdGhlIHRhYnMuXG4gKlxuICogQGV4YW1wbGVcbjxleGFtcGxlIG1vZHVsZT1cInVpLmJvb3RzdHJhcFwiPlxuICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgIDx0YWJzZXQ+XG4gICAgICA8dGFiIGhlYWRpbmc9XCJUYWIgMVwiPjxiPkZpcnN0PC9iPiBDb250ZW50ITwvdGFiPlxuICAgICAgPHRhYiBoZWFkaW5nPVwiVGFiIDJcIj48aT5TZWNvbmQ8L2k+IENvbnRlbnQhPC90YWI+XG4gICAgPC90YWJzZXQ+XG4gICAgPGhyIC8+XG4gICAgPHRhYnNldCB2ZXJ0aWNhbD1cInRydWVcIj5cbiAgICAgIDx0YWIgaGVhZGluZz1cIlZlcnRpY2FsIFRhYiAxXCI+PGI+Rmlyc3Q8L2I+IFZlcnRpY2FsIENvbnRlbnQhPC90YWI+XG4gICAgICA8dGFiIGhlYWRpbmc9XCJWZXJ0aWNhbCBUYWIgMlwiPjxpPlNlY29uZDwvaT4gVmVydGljYWwgQ29udGVudCE8L3RhYj5cbiAgICA8L3RhYnNldD5cbiAgICA8dGFic2V0IGp1c3RpZmllZD1cInRydWVcIj5cbiAgICAgIDx0YWIgaGVhZGluZz1cIkp1c3RpZmllZCBUYWIgMVwiPjxiPkZpcnN0PC9iPiBKdXN0aWZpZWQgQ29udGVudCE8L3RhYj5cbiAgICAgIDx0YWIgaGVhZGluZz1cIkp1c3RpZmllZCBUYWIgMlwiPjxpPlNlY29uZDwvaT4gSnVzdGlmaWVkIENvbnRlbnQhPC90YWI+XG4gICAgPC90YWJzZXQ+XG4gIDwvZmlsZT5cbjwvZXhhbXBsZT5cbiAqL1xuLmRpcmVjdGl2ZSgndGFic2V0JywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHNjb3BlOiB7XG4gICAgICB0eXBlOiAnQCdcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6ICdUYWJzZXRDb250cm9sbGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJ3RlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgc2NvcGUudmVydGljYWwgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRycy52ZXJ0aWNhbCkgPyBzY29wZS4kcGFyZW50LiRldmFsKGF0dHJzLnZlcnRpY2FsKSA6IGZhbHNlO1xuICAgICAgc2NvcGUuanVzdGlmaWVkID0gYW5ndWxhci5pc0RlZmluZWQoYXR0cnMuanVzdGlmaWVkKSA/IHNjb3BlLiRwYXJlbnQuJGV2YWwoYXR0cnMuanVzdGlmaWVkKSA6IGZhbHNlO1xuICAgIH1cbiAgfTtcbn0pXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdWkuYm9vdHN0cmFwLnRhYnMuZGlyZWN0aXZlOnRhYlxuICogQHJlc3RyaWN0IEVBXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBoZWFkaW5nIFRoZSB2aXNpYmxlIGhlYWRpbmcsIG9yIHRpdGxlLCBvZiB0aGUgdGFiLiBTZXQgSFRNTCBoZWFkaW5ncyB3aXRoIHtAbGluayB1aS5ib290c3RyYXAudGFicy5kaXJlY3RpdmU6dGFiSGVhZGluZyB0YWJIZWFkaW5nfS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gc2VsZWN0IEFuIGV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiB0aGUgdGFiIGlzIHNlbGVjdGVkLlxuICogQHBhcmFtIHtib29sZWFuPX0gYWN0aXZlIEEgYmluZGluZywgdGVsbGluZyB3aGV0aGVyIG9yIG5vdCB0aGlzIHRhYiBpcyBzZWxlY3RlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IGRpc2FibGVkIEEgYmluZGluZywgdGVsbGluZyB3aGV0aGVyIG9yIG5vdCB0aGlzIHRhYiBpcyBkaXNhYmxlZC5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSB0YWIgd2l0aCBhIGhlYWRpbmcgYW5kIGNvbnRlbnQuIE11c3QgYmUgcGxhY2VkIHdpdGhpbiBhIHtAbGluayB1aS5ib290c3RyYXAudGFicy5kaXJlY3RpdmU6dGFic2V0IHRhYnNldH0uXG4gKlxuICogQGV4YW1wbGVcbjxleGFtcGxlIG1vZHVsZT1cInVpLmJvb3RzdHJhcFwiPlxuICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgIDxkaXYgbmctY29udHJvbGxlcj1cIlRhYnNEZW1vQ3RybFwiPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc21hbGxcIiBuZy1jbGljaz1cIml0ZW1zWzBdLmFjdGl2ZSA9IHRydWVcIj5cbiAgICAgICAgU2VsZWN0IGl0ZW0gMSwgdXNpbmcgYWN0aXZlIGJpbmRpbmdcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tc21hbGxcIiBuZy1jbGljaz1cIml0ZW1zWzFdLmRpc2FibGVkID0gIWl0ZW1zWzFdLmRpc2FibGVkXCI+XG4gICAgICAgIEVuYWJsZS9kaXNhYmxlIGl0ZW0gMiwgdXNpbmcgZGlzYWJsZWQgYmluZGluZ1xuICAgICAgPC9idXR0b24+XG4gICAgICA8YnIgLz5cbiAgICAgIDx0YWJzZXQ+XG4gICAgICAgIDx0YWIgaGVhZGluZz1cIlRhYiAxXCI+Rmlyc3QgVGFiPC90YWI+XG4gICAgICAgIDx0YWIgc2VsZWN0PVwiYWxlcnRNZSgpXCI+XG4gICAgICAgICAgPHRhYi1oZWFkaW5nPjxpIGNsYXNzPVwiaWNvbi1iZWxsXCI+PC9pPiBBbGVydCBtZSE8L3RhYi1oZWFkaW5nPlxuICAgICAgICAgIFNlY29uZCBUYWIsIHdpdGggYWxlcnQgY2FsbGJhY2sgYW5kIGh0bWwgaGVhZGluZyFcbiAgICAgICAgPC90YWI+XG4gICAgICAgIDx0YWIgbmctcmVwZWF0PVwiaXRlbSBpbiBpdGVtc1wiXG4gICAgICAgICAgaGVhZGluZz1cInt7aXRlbS50aXRsZX19XCJcbiAgICAgICAgICBkaXNhYmxlZD1cIml0ZW0uZGlzYWJsZWRcIlxuICAgICAgICAgIGFjdGl2ZT1cIml0ZW0uYWN0aXZlXCI+XG4gICAgICAgICAge3tpdGVtLmNvbnRlbnR9fVxuICAgICAgICA8L3RhYj5cbiAgICAgIDwvdGFic2V0PlxuICAgIDwvZGl2PlxuICA8L2ZpbGU+XG4gIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICBmdW5jdGlvbiBUYWJzRGVtb0N0cmwoJHNjb3BlKSB7XG4gICAgICAkc2NvcGUuaXRlbXMgPSBbXG4gICAgICAgIHsgdGl0bGU6XCJEeW5hbWljIFRpdGxlIDFcIiwgY29udGVudDpcIkR5bmFtaWMgSXRlbSAwXCIgfSxcbiAgICAgICAgeyB0aXRsZTpcIkR5bmFtaWMgVGl0bGUgMlwiLCBjb250ZW50OlwiRHluYW1pYyBJdGVtIDFcIiwgZGlzYWJsZWQ6IHRydWUgfVxuICAgICAgXTtcblxuICAgICAgJHNjb3BlLmFsZXJ0TWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBhbGVydChcIllvdSd2ZSBzZWxlY3RlZCB0aGUgYWxlcnQgdGFiIVwiKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIDwvZmlsZT5cbjwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHVpLmJvb3RzdHJhcC50YWJzLmRpcmVjdGl2ZTp0YWJIZWFkaW5nXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYW4gSFRNTCBoZWFkaW5nIGZvciBhIHtAbGluayB1aS5ib290c3RyYXAudGFicy5kaXJlY3RpdmU6dGFiIHRhYn0uIE11c3QgYmUgcGxhY2VkIGFzIGEgY2hpbGQgb2YgYSB0YWIgZWxlbWVudC5cbiAqXG4gKiBAZXhhbXBsZVxuPGV4YW1wbGUgbW9kdWxlPVwidWkuYm9vdHN0cmFwXCI+XG4gIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPHRhYnNldD5cbiAgICAgIDx0YWI+XG4gICAgICAgIDx0YWItaGVhZGluZz48Yj5IVE1MPC9iPiBpbiBteSB0aXRsZXM/ITwvdGFiLWhlYWRpbmc+XG4gICAgICAgIEFuZCBzb21lIGNvbnRlbnQsIHRvbyFcbiAgICAgIDwvdGFiPlxuICAgICAgPHRhYj5cbiAgICAgICAgPHRhYi1oZWFkaW5nPjxpIGNsYXNzPVwiaWNvbi1oZWFydFwiPjwvaT4gSWNvbiBoZWFkaW5nPyE/PC90YWItaGVhZGluZz5cbiAgICAgICAgVGhhdCdzIHJpZ2h0LlxuICAgICAgPC90YWI+XG4gICAgPC90YWJzZXQ+XG4gIDwvZmlsZT5cbjwvZXhhbXBsZT5cbiAqL1xuLmRpcmVjdGl2ZSgndGFiJywgWyckcGFyc2UnLCAnJGxvZycsIGZ1bmN0aW9uKCRwYXJzZSwgJGxvZykge1xuICByZXR1cm4ge1xuICAgIHJlcXVpcmU6ICdedGFic2V0JyxcbiAgICByZXN0cmljdDogJ0VBJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHRlbXBsYXRlVXJsOiAndGVtcGxhdGUvdGFicy90YWIuaHRtbCcsXG4gICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgICBzY29wZToge1xuICAgICAgYWN0aXZlOiAnPT8nLFxuICAgICAgaGVhZGluZzogJ0AnLFxuICAgICAgb25TZWxlY3Q6ICcmc2VsZWN0JywgLy9UaGlzIGNhbGxiYWNrIGlzIGNhbGxlZCBpbiBjb250ZW50SGVhZGluZ1RyYW5zY2x1ZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vbmNlIGl0IGluc2VydHMgdGhlIHRhYidzIGNvbnRlbnQgaW50byB0aGUgZG9tXG4gICAgICBvbkRlc2VsZWN0OiAnJmRlc2VsZWN0J1xuICAgIH0sXG4gICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICAvL0VtcHR5IGNvbnRyb2xsZXIgc28gb3RoZXIgZGlyZWN0aXZlcyBjYW4gcmVxdWlyZSBiZWluZyAndW5kZXInIGEgdGFiXG4gICAgfSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgdGFic2V0Q3RybCwgdHJhbnNjbHVkZSkge1xuICAgICAgc2NvcGUuJHdhdGNoKCdhY3RpdmUnLCBmdW5jdGlvbihhY3RpdmUpIHtcbiAgICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICAgIHRhYnNldEN0cmwuc2VsZWN0KHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICBpZiAoYXR0cnMuZGlzYWJsZSkge1xuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoYXR0cnMuZGlzYWJsZSksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgc2NvcGUuZGlzYWJsZWQgPSAhISB2YWx1ZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIERlcHJlY2F0aW9uIHN1cHBvcnQgb2YgXCJkaXNhYmxlZFwiIHBhcmFtZXRlclxuICAgICAgLy8gZml4KHRhYik6IElFOSBkaXNhYmxlZCBhdHRyIHJlbmRlcnMgZ3JleSB0ZXh0IG9uIGVuYWJsZWQgdGFiICMyNjc3XG4gICAgICAvLyBUaGlzIGNvZGUgaXMgZHVwbGljYXRlZCBmcm9tIHRoZSBsaW5lcyBhYm92ZSB0byBtYWtlIGl0IGVhc3kgdG8gcmVtb3ZlIG9uY2VcbiAgICAgIC8vIHRoZSBmZWF0dXJlIGhhcyBiZWVuIGNvbXBsZXRlbHkgZGVwcmVjYXRlZFxuICAgICAgaWYgKGF0dHJzLmRpc2FibGVkKSB7XG4gICAgICAgICRsb2cud2FybignVXNlIG9mIFwiZGlzYWJsZWRcIiBhdHRyaWJ1dGUgaGFzIGJlZW4gZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBcImRpc2FibGVcIicpO1xuICAgICAgICBzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoYXR0cnMuZGlzYWJsZWQpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHNjb3BlLmRpc2FibGVkID0gISEgdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzY29wZS5zZWxlY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCFzY29wZS5kaXNhYmxlZCkge1xuICAgICAgICAgIHNjb3BlLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRhYnNldEN0cmwuYWRkVGFiKHNjb3BlKTtcbiAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdGFic2V0Q3RybC5yZW1vdmVUYWIoc2NvcGUpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vV2UgbmVlZCB0byB0cmFuc2NsdWRlIGxhdGVyLCBvbmNlIHRoZSBjb250ZW50IGNvbnRhaW5lciBpcyByZWFkeS5cbiAgICAgIC8vd2hlbiB0aGlzIGxpbmsgaGFwcGVucywgd2UncmUgaW5zaWRlIGEgdGFiIGhlYWRpbmcuXG4gICAgICBzY29wZS4kdHJhbnNjbHVkZUZuID0gdHJhbnNjbHVkZTtcbiAgICB9XG4gIH07XG59XSlcblxuLmRpcmVjdGl2ZSgndGFiSGVhZGluZ1RyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICdedGFiJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycywgdGFiQ3RybCkge1xuICAgICAgc2NvcGUuJHdhdGNoKCdoZWFkaW5nRWxlbWVudCcsIGZ1bmN0aW9uIHVwZGF0ZUhlYWRpbmdFbGVtZW50KGhlYWRpbmcpIHtcbiAgICAgICAgaWYgKGhlYWRpbmcpIHtcbiAgICAgICAgICBlbG0uaHRtbCgnJyk7XG4gICAgICAgICAgZWxtLmFwcGVuZChoZWFkaW5nKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufSlcblxuLmRpcmVjdGl2ZSgndGFiQ29udGVudFRyYW5zY2x1ZGUnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICdedGFic2V0JyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycykge1xuICAgICAgdmFyIHRhYiA9IHNjb3BlLiRldmFsKGF0dHJzLnRhYkNvbnRlbnRUcmFuc2NsdWRlKTtcblxuICAgICAgLy9Ob3cgb3VyIHRhYiBpcyByZWFkeSB0byBiZSB0cmFuc2NsdWRlZDogYm90aCB0aGUgdGFiIGhlYWRpbmcgYXJlYVxuICAgICAgLy9hbmQgdGhlIHRhYiBjb250ZW50IGFyZWEgYXJlIGxvYWRlZC4gIFRyYW5zY2x1ZGUgJ2VtIGJvdGguXG4gICAgICB0YWIuJHRyYW5zY2x1ZGVGbih0YWIuJHBhcmVudCwgZnVuY3Rpb24oY29udGVudHMpIHtcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbnRlbnRzLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgaWYgKGlzVGFiSGVhZGluZyhub2RlKSkge1xuICAgICAgICAgICAgLy9MZXQgdGFiSGVhZGluZ1RyYW5zY2x1ZGUga25vdy5cbiAgICAgICAgICAgIHRhYi5oZWFkaW5nRWxlbWVudCA9IG5vZGU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsbS5hcHBlbmQobm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBpc1RhYkhlYWRpbmcobm9kZSkge1xuICAgIHJldHVybiBub2RlLnRhZ05hbWUgJiYgKFxuICAgICAgbm9kZS5oYXNBdHRyaWJ1dGUoJ3RhYi1oZWFkaW5nJykgfHxcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCdkYXRhLXRhYi1oZWFkaW5nJykgfHxcbiAgICAgIG5vZGUuaGFzQXR0cmlidXRlKCd4LXRhYi1oZWFkaW5nJykgfHxcbiAgICAgIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGFiLWhlYWRpbmcnIHx8XG4gICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2RhdGEtdGFiLWhlYWRpbmcnIHx8XG4gICAgICBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3gtdGFiLWhlYWRpbmcnXG4gICAgKTtcbiAgfVxufSk7XG5cbmFuZ3VsYXIubW9kdWxlKCd1aS5ib290c3RyYXAudGltZXBpY2tlcicsIFtdKVxuXG4uY29uc3RhbnQoJ3RpbWVwaWNrZXJDb25maWcnLCB7XG4gIGhvdXJTdGVwOiAxLFxuICBtaW51dGVTdGVwOiAxLFxuICBzaG93TWVyaWRpYW46IHRydWUsXG4gIG1lcmlkaWFuczogbnVsbCxcbiAgcmVhZG9ubHlJbnB1dDogZmFsc2UsXG4gIG1vdXNld2hlZWw6IHRydWUsXG4gIGFycm93a2V5czogdHJ1ZSxcbiAgc2hvd1NwaW5uZXJzOiB0cnVlXG59KVxuXG4uY29udHJvbGxlcignVGltZXBpY2tlckNvbnRyb2xsZXInLCBbJyRzY29wZScsICckYXR0cnMnLCAnJHBhcnNlJywgJyRsb2cnLCAnJGxvY2FsZScsICd0aW1lcGlja2VyQ29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCAkYXR0cnMsICRwYXJzZSwgJGxvZywgJGxvY2FsZSwgdGltZXBpY2tlckNvbmZpZykge1xuICB2YXIgc2VsZWN0ZWQgPSBuZXcgRGF0ZSgpLFxuICAgICAgbmdNb2RlbEN0cmwgPSB7ICRzZXRWaWV3VmFsdWU6IGFuZ3VsYXIubm9vcCB9LCAvLyBudWxsTW9kZWxDdHJsXG4gICAgICBtZXJpZGlhbnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubWVyaWRpYW5zKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5tZXJpZGlhbnMpIDogdGltZXBpY2tlckNvbmZpZy5tZXJpZGlhbnMgfHwgJGxvY2FsZS5EQVRFVElNRV9GT1JNQVRTLkFNUE1TO1xuXG4gIHRoaXMuaW5pdCA9IGZ1bmN0aW9uKG5nTW9kZWxDdHJsXywgaW5wdXRzKSB7XG4gICAgbmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybF87XG4gICAgbmdNb2RlbEN0cmwuJHJlbmRlciA9IHRoaXMucmVuZGVyO1xuXG4gICAgbmdNb2RlbEN0cmwuJGZvcm1hdHRlcnMudW5zaGlmdChmdW5jdGlvbihtb2RlbFZhbHVlKSB7XG4gICAgICByZXR1cm4gbW9kZWxWYWx1ZSA/IG5ldyBEYXRlKG1vZGVsVmFsdWUpIDogbnVsbDtcbiAgICB9KTtcblxuICAgIHZhciBob3Vyc0lucHV0RWwgPSBpbnB1dHMuZXEoMCksXG4gICAgICAgIG1pbnV0ZXNJbnB1dEVsID0gaW5wdXRzLmVxKDEpO1xuXG4gICAgdmFyIG1vdXNld2hlZWwgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMubW91c2V3aGVlbCkgPyAkc2NvcGUuJHBhcmVudC4kZXZhbCgkYXR0cnMubW91c2V3aGVlbCkgOiB0aW1lcGlja2VyQ29uZmlnLm1vdXNld2hlZWw7XG4gICAgaWYgKG1vdXNld2hlZWwpIHtcbiAgICAgIHRoaXMuc2V0dXBNb3VzZXdoZWVsRXZlbnRzKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwpO1xuICAgIH1cblxuICAgIHZhciBhcnJvd2tleXMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuYXJyb3drZXlzKSA/ICRzY29wZS4kcGFyZW50LiRldmFsKCRhdHRycy5hcnJvd2tleXMpIDogdGltZXBpY2tlckNvbmZpZy5hcnJvd2tleXM7XG4gICAgaWYgKGFycm93a2V5cykge1xuICAgICAgdGhpcy5zZXR1cEFycm93a2V5RXZlbnRzKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwpO1xuICAgIH1cblxuICAgICRzY29wZS5yZWFkb25seUlucHV0ID0gYW5ndWxhci5pc0RlZmluZWQoJGF0dHJzLnJlYWRvbmx5SW5wdXQpID8gJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnJlYWRvbmx5SW5wdXQpIDogdGltZXBpY2tlckNvbmZpZy5yZWFkb25seUlucHV0O1xuICAgIHRoaXMuc2V0dXBJbnB1dEV2ZW50cyhob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsKTtcbiAgfTtcblxuICB2YXIgaG91clN0ZXAgPSB0aW1lcGlja2VyQ29uZmlnLmhvdXJTdGVwO1xuICBpZiAoJGF0dHJzLmhvdXJTdGVwKSB7XG4gICAgJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMuaG91clN0ZXApLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaG91clN0ZXAgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIG1pbnV0ZVN0ZXAgPSB0aW1lcGlja2VyQ29uZmlnLm1pbnV0ZVN0ZXA7XG4gIGlmICgkYXR0cnMubWludXRlU3RlcCkge1xuICAgICRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLm1pbnV0ZVN0ZXApLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgbWludXRlU3RlcCA9IHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbWluO1xuICAkc2NvcGUuJHBhcmVudC4kd2F0Y2goJHBhcnNlKCRhdHRycy5taW4pLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBkdCA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICBtaW4gPSBpc05hTihkdCkgPyB1bmRlZmluZWQgOiBkdDtcbiAgfSk7XG5cbiAgdmFyIG1heDtcbiAgJHNjb3BlLiRwYXJlbnQuJHdhdGNoKCRwYXJzZSgkYXR0cnMubWF4KSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgZHQgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgbWF4ID0gaXNOYU4oZHQpID8gdW5kZWZpbmVkIDogZHQ7XG4gIH0pO1xuXG4gICRzY29wZS5ub0luY3JlbWVudEhvdXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluY3JlbWVudGVkU2VsZWN0ZWQgPSBhZGRNaW51dGVzKHNlbGVjdGVkLCBob3VyU3RlcCAqIDYwKTtcbiAgICByZXR1cm4gaW5jcmVtZW50ZWRTZWxlY3RlZCA+IG1heCB8fFxuICAgICAgKGluY3JlbWVudGVkU2VsZWN0ZWQgPCBzZWxlY3RlZCAmJiBpbmNyZW1lbnRlZFNlbGVjdGVkIDwgbWluKTtcbiAgfTtcblxuICAkc2NvcGUubm9EZWNyZW1lbnRIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWNyZW1lbnRlZFNlbGVjdGVkID0gYWRkTWludXRlcyhzZWxlY3RlZCwgLWhvdXJTdGVwICogNjApO1xuICAgIHJldHVybiBkZWNyZW1lbnRlZFNlbGVjdGVkIDwgbWluIHx8XG4gICAgICAoZGVjcmVtZW50ZWRTZWxlY3RlZCA+IHNlbGVjdGVkICYmIGRlY3JlbWVudGVkU2VsZWN0ZWQgPiBtYXgpO1xuICB9O1xuXG4gICRzY29wZS5ub0luY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaW5jcmVtZW50ZWRTZWxlY3RlZCA9IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIG1pbnV0ZVN0ZXApO1xuICAgIHJldHVybiBpbmNyZW1lbnRlZFNlbGVjdGVkID4gbWF4IHx8XG4gICAgICAoaW5jcmVtZW50ZWRTZWxlY3RlZCA8IHNlbGVjdGVkICYmIGluY3JlbWVudGVkU2VsZWN0ZWQgPCBtaW4pO1xuICB9O1xuXG4gICRzY29wZS5ub0RlY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGVjcmVtZW50ZWRTZWxlY3RlZCA9IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIC1taW51dGVTdGVwKTtcbiAgICByZXR1cm4gZGVjcmVtZW50ZWRTZWxlY3RlZCA8IG1pbiB8fFxuICAgICAgKGRlY3JlbWVudGVkU2VsZWN0ZWQgPiBzZWxlY3RlZCAmJiBkZWNyZW1lbnRlZFNlbGVjdGVkID4gbWF4KTtcbiAgfTtcblxuICAkc2NvcGUubm9Ub2dnbGVNZXJpZGlhbiA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChzZWxlY3RlZC5nZXRIb3VycygpIDwgMTMpIHtcbiAgICAgIHJldHVybiBhZGRNaW51dGVzKHNlbGVjdGVkLCAxMiAqIDYwKSA+IG1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIC0xMiAqIDYwKSA8IG1pbjtcbiAgICB9XG4gIH07XG5cbiAgLy8gMTJIIC8gMjRIIG1vZGVcbiAgJHNjb3BlLnNob3dNZXJpZGlhbiA9IHRpbWVwaWNrZXJDb25maWcuc2hvd01lcmlkaWFuO1xuICBpZiAoJGF0dHJzLnNob3dNZXJpZGlhbikge1xuICAgICRzY29wZS4kcGFyZW50LiR3YXRjaCgkcGFyc2UoJGF0dHJzLnNob3dNZXJpZGlhbiksIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAkc2NvcGUuc2hvd01lcmlkaWFuID0gISF2YWx1ZTtcblxuICAgICAgaWYgKG5nTW9kZWxDdHJsLiRlcnJvci50aW1lKSB7XG4gICAgICAgIC8vIEV2YWx1YXRlIGZyb20gdGVtcGxhdGVcbiAgICAgICAgdmFyIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKSwgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKTtcbiAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSAmJiBhbmd1bGFyLmlzRGVmaW5lZChtaW51dGVzKSkge1xuICAgICAgICAgIHNlbGVjdGVkLnNldEhvdXJzKGhvdXJzKTtcbiAgICAgICAgICByZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVwZGF0ZVRlbXBsYXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvLyBHZXQgJHNjb3BlLmhvdXJzIGluIDI0SCBtb2RlIGlmIHZhbGlkXG4gIGZ1bmN0aW9uIGdldEhvdXJzRnJvbVRlbXBsYXRlKCkge1xuICAgIHZhciBob3VycyA9IHBhcnNlSW50KCRzY29wZS5ob3VycywgMTApO1xuICAgIHZhciB2YWxpZCA9ICRzY29wZS5zaG93TWVyaWRpYW4gPyAoaG91cnMgPiAwICYmIGhvdXJzIDwgMTMpIDogKGhvdXJzID49IDAgJiYgaG91cnMgPCAyNCk7XG4gICAgaWYgKCF2YWxpZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpZiAoJHNjb3BlLnNob3dNZXJpZGlhbikge1xuICAgICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgICBob3VycyA9IDA7XG4gICAgICB9XG4gICAgICBpZiAoJHNjb3BlLm1lcmlkaWFuID09PSBtZXJpZGlhbnNbMV0pIHtcbiAgICAgICAgaG91cnMgPSBob3VycyArIDEyO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaG91cnM7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNaW51dGVzRnJvbVRlbXBsYXRlKCkge1xuICAgIHZhciBtaW51dGVzID0gcGFyc2VJbnQoJHNjb3BlLm1pbnV0ZXMsIDEwKTtcbiAgICByZXR1cm4gKG1pbnV0ZXMgPj0gMCAmJiBtaW51dGVzIDwgNjApID8gbWludXRlcyA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhZCh2YWx1ZSkge1xuICAgIHJldHVybiAoYW5ndWxhci5pc0RlZmluZWQodmFsdWUpICYmIHZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoIDwgMikgPyAnMCcgKyB2YWx1ZSA6IHZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvLyBSZXNwb25kIG9uIG1vdXNld2hlZWwgc3BpblxuICB0aGlzLnNldHVwTW91c2V3aGVlbEV2ZW50cyA9IGZ1bmN0aW9uKGhvdXJzSW5wdXRFbCwgbWludXRlc0lucHV0RWwpIHtcbiAgICB2YXIgaXNTY3JvbGxpbmdVcCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIHtcbiAgICAgICAgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgICAgIH1cbiAgICAgIC8vcGljayBjb3JyZWN0IGRlbHRhIHZhcmlhYmxlIGRlcGVuZGluZyBvbiBldmVudFxuICAgICAgdmFyIGRlbHRhID0gKGUud2hlZWxEZWx0YSkgPyBlLndoZWVsRGVsdGEgOiAtZS5kZWx0YVk7XG4gICAgICByZXR1cm4gKGUuZGV0YWlsIHx8IGRlbHRhID4gMCk7XG4gICAgfTtcblxuICAgIGhvdXJzSW5wdXRFbC5iaW5kKCdtb3VzZXdoZWVsIHdoZWVsJywgZnVuY3Rpb24oZSkge1xuICAgICAgJHNjb3BlLiRhcHBseShpc1Njcm9sbGluZ1VwKGUpID8gJHNjb3BlLmluY3JlbWVudEhvdXJzKCkgOiAkc2NvcGUuZGVjcmVtZW50SG91cnMoKSk7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSk7XG5cbiAgICBtaW51dGVzSW5wdXRFbC5iaW5kKCdtb3VzZXdoZWVsIHdoZWVsJywgZnVuY3Rpb24oZSkge1xuICAgICAgJHNjb3BlLiRhcHBseShpc1Njcm9sbGluZ1VwKGUpID8gJHNjb3BlLmluY3JlbWVudE1pbnV0ZXMoKSA6ICRzY29wZS5kZWNyZW1lbnRNaW51dGVzKCkpO1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xuXG4gIH07XG5cbiAgLy8gUmVzcG9uZCBvbiB1cC9kb3duIGFycm93a2V5c1xuICB0aGlzLnNldHVwQXJyb3drZXlFdmVudHMgPSBmdW5jdGlvbihob3Vyc0lucHV0RWwsIG1pbnV0ZXNJbnB1dEVsKSB7XG4gICAgaG91cnNJbnB1dEVsLmJpbmQoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoZS53aGljaCA9PT0gMzgpIHsgLy8gdXBcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkc2NvcGUuaW5jcmVtZW50SG91cnMoKTtcbiAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xuICAgICAgfSBlbHNlIGlmIChlLndoaWNoID09PSA0MCkgeyAvLyBkb3duXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgJHNjb3BlLmRlY3JlbWVudEhvdXJzKCk7XG4gICAgICAgICRzY29wZS4kYXBwbHkoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG1pbnV0ZXNJbnB1dEVsLmJpbmQoJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoZS53aGljaCA9PT0gMzgpIHsgLy8gdXBcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkc2NvcGUuaW5jcmVtZW50TWludXRlcygpO1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICB9IGVsc2UgaWYgKGUud2hpY2ggPT09IDQwKSB7IC8vIGRvd25cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkc2NvcGUuZGVjcmVtZW50TWludXRlcygpO1xuICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdGhpcy5zZXR1cElucHV0RXZlbnRzID0gZnVuY3Rpb24oaG91cnNJbnB1dEVsLCBtaW51dGVzSW5wdXRFbCkge1xuICAgIGlmICgkc2NvcGUucmVhZG9ubHlJbnB1dCkge1xuICAgICAgJHNjb3BlLnVwZGF0ZUhvdXJzID0gYW5ndWxhci5ub29wO1xuICAgICAgJHNjb3BlLnVwZGF0ZU1pbnV0ZXMgPSBhbmd1bGFyLm5vb3A7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGludmFsaWRhdGUgPSBmdW5jdGlvbihpbnZhbGlkSG91cnMsIGludmFsaWRNaW51dGVzKSB7XG4gICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAgICAgbmdNb2RlbEN0cmwuJHNldFZhbGlkaXR5KCd0aW1lJywgZmFsc2UpO1xuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGludmFsaWRIb3VycykpIHtcbiAgICAgICAgJHNjb3BlLmludmFsaWRIb3VycyA9IGludmFsaWRIb3VycztcbiAgICAgIH1cbiAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnZhbGlkTWludXRlcykpIHtcbiAgICAgICAgJHNjb3BlLmludmFsaWRNaW51dGVzID0gaW52YWxpZE1pbnV0ZXM7XG4gICAgICB9XG4gICAgfTtcblxuICAgICRzY29wZS51cGRhdGVIb3VycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhvdXJzID0gZ2V0SG91cnNGcm9tVGVtcGxhdGUoKSxcbiAgICAgICAgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKTtcblxuICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGhvdXJzKSAmJiBhbmd1bGFyLmlzRGVmaW5lZChtaW51dGVzKSkge1xuICAgICAgICBzZWxlY3RlZC5zZXRIb3Vycyhob3Vycyk7XG4gICAgICAgIGlmIChzZWxlY3RlZCA8IG1pbiB8fCBzZWxlY3RlZCA+IG1heCkge1xuICAgICAgICAgIGludmFsaWRhdGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVmcmVzaCgnaCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbnZhbGlkYXRlKHRydWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBob3Vyc0lucHV0RWwuYmluZCgnYmx1cicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghJHNjb3BlLmludmFsaWRIb3VycyAmJiAkc2NvcGUuaG91cnMgPCAxMCkge1xuICAgICAgICAkc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5ob3VycyA9IHBhZCgkc2NvcGUuaG91cnMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS51cGRhdGVNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbWludXRlcyA9IGdldE1pbnV0ZXNGcm9tVGVtcGxhdGUoKSxcbiAgICAgICAgaG91cnMgPSBnZXRIb3Vyc0Zyb21UZW1wbGF0ZSgpO1xuXG4gICAgICBpZiAoYW5ndWxhci5pc0RlZmluZWQobWludXRlcykgJiYgYW5ndWxhci5pc0RlZmluZWQoaG91cnMpKSB7XG4gICAgICAgIHNlbGVjdGVkLnNldE1pbnV0ZXMobWludXRlcyk7XG4gICAgICAgIGlmIChzZWxlY3RlZCA8IG1pbiB8fCBzZWxlY3RlZCA+IG1heCkge1xuICAgICAgICAgIGludmFsaWRhdGUodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWZyZXNoKCdtJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGludmFsaWRhdGUodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbWludXRlc0lucHV0RWwuYmluZCgnYmx1cicsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmICghJHNjb3BlLmludmFsaWRNaW51dGVzICYmICRzY29wZS5taW51dGVzIDwgMTApIHtcbiAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAkc2NvcGUubWludXRlcyA9IHBhZCgkc2NvcGUubWludXRlcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIH07XG5cbiAgdGhpcy5yZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZGF0ZSA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG5cbiAgICBpZiAoaXNOYU4oZGF0ZSkpIHtcbiAgICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgndGltZScsIGZhbHNlKTtcbiAgICAgICRsb2cuZXJyb3IoJ1RpbWVwaWNrZXIgZGlyZWN0aXZlOiBcIm5nLW1vZGVsXCIgdmFsdWUgbXVzdCBiZSBhIERhdGUgb2JqZWN0LCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMgc2luY2UgMDEuMDEuMTk3MCBvciBhIHN0cmluZyByZXByZXNlbnRpbmcgYW4gUkZDMjgyMiBvciBJU08gODYwMSBkYXRlLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGF0ZSkge1xuICAgICAgICBzZWxlY3RlZCA9IGRhdGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RlZCA8IG1pbiB8fCBzZWxlY3RlZCA+IG1heCkge1xuICAgICAgICBuZ01vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ3RpbWUnLCBmYWxzZSk7XG4gICAgICAgICRzY29wZS5pbnZhbGlkSG91cnMgPSB0cnVlO1xuICAgICAgICAkc2NvcGUuaW52YWxpZE1pbnV0ZXMgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWFrZVZhbGlkKCk7XG4gICAgICB9XG4gICAgICB1cGRhdGVUZW1wbGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBDYWxsIGludGVybmFsbHkgd2hlbiB3ZSBrbm93IHRoYXQgbW9kZWwgaXMgdmFsaWQuXG4gIGZ1bmN0aW9uIHJlZnJlc2goa2V5Ym9hcmRDaGFuZ2UpIHtcbiAgICBtYWtlVmFsaWQoKTtcbiAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG5ldyBEYXRlKHNlbGVjdGVkKSk7XG4gICAgdXBkYXRlVGVtcGxhdGUoa2V5Ym9hcmRDaGFuZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFrZVZhbGlkKCkge1xuICAgIG5nTW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgndGltZScsIHRydWUpO1xuICAgICRzY29wZS5pbnZhbGlkSG91cnMgPSBmYWxzZTtcbiAgICAkc2NvcGUuaW52YWxpZE1pbnV0ZXMgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVRlbXBsYXRlKGtleWJvYXJkQ2hhbmdlKSB7XG4gICAgdmFyIGhvdXJzID0gc2VsZWN0ZWQuZ2V0SG91cnMoKSwgbWludXRlcyA9IHNlbGVjdGVkLmdldE1pbnV0ZXMoKTtcblxuICAgIGlmICgkc2NvcGUuc2hvd01lcmlkaWFuKSB7XG4gICAgICBob3VycyA9IChob3VycyA9PT0gMCB8fCBob3VycyA9PT0gMTIpID8gMTIgOiBob3VycyAlIDEyOyAvLyBDb252ZXJ0IDI0IHRvIDEyIGhvdXIgc3lzdGVtXG4gICAgfVxuXG4gICAgJHNjb3BlLmhvdXJzID0ga2V5Ym9hcmRDaGFuZ2UgPT09ICdoJyA/IGhvdXJzIDogcGFkKGhvdXJzKTtcbiAgICBpZiAoa2V5Ym9hcmRDaGFuZ2UgIT09ICdtJykge1xuICAgICAgJHNjb3BlLm1pbnV0ZXMgPSBwYWQobWludXRlcyk7XG4gICAgfVxuICAgICRzY29wZS5tZXJpZGlhbiA9IHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMiA/IG1lcmlkaWFuc1swXSA6IG1lcmlkaWFuc1sxXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1pbnV0ZXMoZGF0ZSwgbWludXRlcykge1xuICAgIHZhciBkdCA9IG5ldyBEYXRlKGRhdGUuZ2V0VGltZSgpICsgbWludXRlcyAqIDYwMDAwKTtcbiAgICB2YXIgbmV3RGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIG5ld0RhdGUuc2V0SG91cnMoZHQuZ2V0SG91cnMoKSwgZHQuZ2V0TWludXRlcygpKTtcbiAgICByZXR1cm4gbmV3RGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZE1pbnV0ZXNUb1NlbGVjdGVkKG1pbnV0ZXMpIHtcbiAgICBzZWxlY3RlZCA9IGFkZE1pbnV0ZXMoc2VsZWN0ZWQsIG1pbnV0ZXMpO1xuICAgIHJlZnJlc2goKTtcbiAgfVxuXG4gICRzY29wZS5zaG93U3Bpbm5lcnMgPSBhbmd1bGFyLmlzRGVmaW5lZCgkYXR0cnMuc2hvd1NwaW5uZXJzKSA/XG4gICAgJHNjb3BlLiRwYXJlbnQuJGV2YWwoJGF0dHJzLnNob3dTcGlubmVycykgOiB0aW1lcGlja2VyQ29uZmlnLnNob3dTcGlubmVycztcblxuICAkc2NvcGUuaW5jcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0luY3JlbWVudEhvdXJzKCkpIHtcbiAgICAgIGFkZE1pbnV0ZXNUb1NlbGVjdGVkKGhvdXJTdGVwICogNjApO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuZGVjcmVtZW50SG91cnMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0RlY3JlbWVudEhvdXJzKCkpIHtcbiAgICAgIGFkZE1pbnV0ZXNUb1NlbGVjdGVkKC1ob3VyU3RlcCAqIDYwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLmluY3JlbWVudE1pbnV0ZXMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoISRzY29wZS5ub0luY3JlbWVudE1pbnV0ZXMoKSkge1xuICAgICAgYWRkTWludXRlc1RvU2VsZWN0ZWQobWludXRlU3RlcCk7XG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5kZWNyZW1lbnRNaW51dGVzID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9EZWNyZW1lbnRNaW51dGVzKCkpIHtcbiAgICAgIGFkZE1pbnV0ZXNUb1NlbGVjdGVkKC1taW51dGVTdGVwKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLnRvZ2dsZU1lcmlkaWFuID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEkc2NvcGUubm9Ub2dnbGVNZXJpZGlhbigpKSB7XG4gICAgICBhZGRNaW51dGVzVG9TZWxlY3RlZCgxMiAqIDYwICogKHNlbGVjdGVkLmdldEhvdXJzKCkgPCAxMiA/IDEgOiAtMSkpO1xuICAgIH1cbiAgfTtcbn1dKVxuXG4uZGlyZWN0aXZlKCd0aW1lcGlja2VyJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFQScsXG4gICAgcmVxdWlyZTogWyd0aW1lcGlja2VyJywgJz9ebmdNb2RlbCddLFxuICAgIGNvbnRyb2xsZXI6J1RpbWVwaWNrZXJDb250cm9sbGVyJyxcbiAgICBjb250cm9sbGVyQXM6ICd0aW1lcGlja2VyJyxcbiAgICByZXBsYWNlOiB0cnVlLFxuICAgIHNjb3BlOiB7fSxcbiAgICB0ZW1wbGF0ZVVybDogZnVuY3Rpb24oZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgIHJldHVybiBhdHRycy50ZW1wbGF0ZVVybCB8fCAndGVtcGxhdGUvdGltZXBpY2tlci90aW1lcGlja2VyLmh0bWwnO1xuICAgIH0sXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJscykge1xuICAgICAgdmFyIHRpbWVwaWNrZXJDdHJsID0gY3RybHNbMF0sIG5nTW9kZWxDdHJsID0gY3RybHNbMV07XG5cbiAgICAgIGlmIChuZ01vZGVsQ3RybCkge1xuICAgICAgICB0aW1lcGlja2VyQ3RybC5pbml0KG5nTW9kZWxDdHJsLCBlbGVtZW50LmZpbmQoJ2lucHV0JykpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZSgndWkuYm9vdHN0cmFwLnRyYW5zaXRpb24nLCBbXSlcblxuLnZhbHVlKCckdHJhbnNpdGlvblN1cHByZXNzRGVwcmVjYXRlZCcsIGZhbHNlKVxuLyoqXG4gKiAkdHJhbnNpdGlvbiBzZXJ2aWNlIHByb3ZpZGVzIGEgY29uc2lzdGVudCBpbnRlcmZhY2UgdG8gdHJpZ2dlciBDU1MgMyB0cmFuc2l0aW9ucyBhbmQgdG8gYmUgaW5mb3JtZWQgd2hlbiB0aGV5IGNvbXBsZXRlLlxuICogQHBhcmFtICB7RE9NRWxlbWVudH0gZWxlbWVudCAgVGhlIERPTUVsZW1lbnQgdGhhdCB3aWxsIGJlIGFuaW1hdGVkLlxuICogQHBhcmFtICB7c3RyaW5nfG9iamVjdHxmdW5jdGlvbn0gdHJpZ2dlciAgVGhlIHRoaW5nIHRoYXQgd2lsbCBjYXVzZSB0aGUgdHJhbnNpdGlvbiB0byBzdGFydDpcbiAqICAgLSBBcyBhIHN0cmluZywgaXQgcmVwcmVzZW50cyB0aGUgY3NzIGNsYXNzIHRvIGJlIGFkZGVkIHRvIHRoZSBlbGVtZW50LlxuICogICAtIEFzIGFuIG9iamVjdCwgaXQgcmVwcmVzZW50cyBhIGhhc2ggb2Ygc3R5bGUgYXR0cmlidXRlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICogICAtIEFzIGEgZnVuY3Rpb24sIGl0IHJlcHJlc2VudHMgYSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgdGhhdCB3aWxsIGNhdXNlIHRoZSB0cmFuc2l0aW9uIHRvIG9jY3VyLlxuICogQHJldHVybiB7UHJvbWlzZX0gIEEgcHJvbWlzZSB0aGF0IGlzIHJlc29sdmVkIHdoZW4gdGhlIHRyYW5zaXRpb24gZmluaXNoZXMuXG4gKi9cbi5mYWN0b3J5KCckdHJhbnNpdGlvbicsIFtcbiAgICAgICAgJyRxJywgJyR0aW1lb3V0JywgJyRyb290U2NvcGUnLCAnJGxvZycsICckdHJhbnNpdGlvblN1cHByZXNzRGVwcmVjYXRlZCcsXG5mdW5jdGlvbigkcSAsICAkdGltZW91dCAsICAkcm9vdFNjb3BlICwgICRsb2cgLCAgJHRyYW5zaXRpb25TdXBwcmVzc0RlcHJlY2F0ZWQpIHtcblxuICBpZiAoISR0cmFuc2l0aW9uU3VwcHJlc3NEZXByZWNhdGVkKSB7XG4gICAgJGxvZy53YXJuKCckdHJhbnNpdGlvbiBpcyBub3cgZGVwcmVjYXRlZC4gVXNlICRhbmltYXRlIGZyb20gbmdBbmltYXRlIGluc3RlYWQuJyk7XG4gIH1cblxuICB2YXIgJHRyYW5zaXRpb24gPSBmdW5jdGlvbihlbGVtZW50LCB0cmlnZ2VyLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcbiAgICB2YXIgZW5kRXZlbnROYW1lID0gJHRyYW5zaXRpb25bb3B0aW9ucy5hbmltYXRpb24gPyAnYW5pbWF0aW9uRW5kRXZlbnROYW1lJyA6ICd0cmFuc2l0aW9uRW5kRXZlbnROYW1lJ107XG5cbiAgICB2YXIgdHJhbnNpdGlvbkVuZEhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIGVsZW1lbnQudW5iaW5kKGVuZEV2ZW50TmFtZSwgdHJhbnNpdGlvbkVuZEhhbmRsZXIpO1xuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGVsZW1lbnQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmIChlbmRFdmVudE5hbWUpIHtcbiAgICAgIGVsZW1lbnQuYmluZChlbmRFdmVudE5hbWUsIHRyYW5zaXRpb25FbmRIYW5kbGVyKTtcbiAgICB9XG5cbiAgICAvLyBXcmFwIGluIGEgdGltZW91dCB0byBhbGxvdyB0aGUgYnJvd3NlciB0aW1lIHRvIHVwZGF0ZSB0aGUgRE9NIGJlZm9yZSB0aGUgdHJhbnNpdGlvbiBpcyB0byBvY2N1clxuICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCBhbmd1bGFyLmlzU3RyaW5nKHRyaWdnZXIpICkge1xuICAgICAgICBlbGVtZW50LmFkZENsYXNzKHRyaWdnZXIpO1xuICAgICAgfSBlbHNlIGlmICggYW5ndWxhci5pc0Z1bmN0aW9uKHRyaWdnZXIpICkge1xuICAgICAgICB0cmlnZ2VyKGVsZW1lbnQpO1xuICAgICAgfSBlbHNlIGlmICggYW5ndWxhci5pc09iamVjdCh0cmlnZ2VyKSApIHtcbiAgICAgICAgZWxlbWVudC5jc3ModHJpZ2dlcik7XG4gICAgICB9XG4gICAgICAvL0lmIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0cmFuc2l0aW9ucywgaW5zdGFudGx5IHJlc29sdmVcbiAgICAgIGlmICggIWVuZEV2ZW50TmFtZSApIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFkZCBvdXIgY3VzdG9tIGNhbmNlbCBmdW5jdGlvbiB0byB0aGUgcHJvbWlzZSB0aGF0IGlzIHJldHVybmVkXG4gICAgLy8gV2UgY2FuIGNhbGwgdGhpcyBpZiB3ZSBhcmUgYWJvdXQgdG8gcnVuIGEgbmV3IHRyYW5zaXRpb24sIHdoaWNoIHdlIGtub3cgd2lsbCBwcmV2ZW50IHRoaXMgdHJhbnNpdGlvbiBmcm9tIGVuZGluZyxcbiAgICAvLyBpLmUuIGl0IHdpbGwgdGhlcmVmb3JlIG5ldmVyIHJhaXNlIGEgdHJhbnNpdGlvbkVuZCBldmVudCBmb3IgdGhhdCB0cmFuc2l0aW9uXG4gICAgZGVmZXJyZWQucHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICggZW5kRXZlbnROYW1lICkge1xuICAgICAgICBlbGVtZW50LnVuYmluZChlbmRFdmVudE5hbWUsIHRyYW5zaXRpb25FbmRIYW5kbGVyKTtcbiAgICAgIH1cbiAgICAgIGRlZmVycmVkLnJlamVjdCgnVHJhbnNpdGlvbiBjYW5jZWxsZWQnKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH07XG5cbiAgLy8gV29yayBvdXQgdGhlIG5hbWUgb2YgdGhlIHRyYW5zaXRpb25FbmQgZXZlbnRcbiAgdmFyIHRyYW5zRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RyYW5zJyk7XG4gIHZhciB0cmFuc2l0aW9uRW5kRXZlbnROYW1lcyA9IHtcbiAgICAnV2Via2l0VHJhbnNpdGlvbic6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAnTW96VHJhbnNpdGlvbic6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICAnT1RyYW5zaXRpb24nOiAnb1RyYW5zaXRpb25FbmQnLFxuICAgICd0cmFuc2l0aW9uJzogJ3RyYW5zaXRpb25lbmQnXG4gIH07XG4gIHZhciBhbmltYXRpb25FbmRFdmVudE5hbWVzID0ge1xuICAgICdXZWJraXRUcmFuc2l0aW9uJzogJ3dlYmtpdEFuaW1hdGlvbkVuZCcsXG4gICAgJ01velRyYW5zaXRpb24nOiAnYW5pbWF0aW9uZW5kJyxcbiAgICAnT1RyYW5zaXRpb24nOiAnb0FuaW1hdGlvbkVuZCcsXG4gICAgJ3RyYW5zaXRpb24nOiAnYW5pbWF0aW9uZW5kJ1xuICB9O1xuICBmdW5jdGlvbiBmaW5kRW5kRXZlbnROYW1lKGVuZEV2ZW50TmFtZXMpIHtcbiAgICBmb3IgKHZhciBuYW1lIGluIGVuZEV2ZW50TmFtZXMpe1xuICAgICAgaWYgKHRyYW5zRWxlbWVudC5zdHlsZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBlbmRFdmVudE5hbWVzW25hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAkdHJhbnNpdGlvbi50cmFuc2l0aW9uRW5kRXZlbnROYW1lID0gZmluZEVuZEV2ZW50TmFtZSh0cmFuc2l0aW9uRW5kRXZlbnROYW1lcyk7XG4gICR0cmFuc2l0aW9uLmFuaW1hdGlvbkVuZEV2ZW50TmFtZSA9IGZpbmRFbmRFdmVudE5hbWUoYW5pbWF0aW9uRW5kRXZlbnROYW1lcyk7XG4gIHJldHVybiAkdHJhbnNpdGlvbjtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoJ3VpLmJvb3RzdHJhcC50eXBlYWhlYWQnLCBbJ3VpLmJvb3RzdHJhcC5wb3NpdGlvbiddKVxuXG4vKipcbiAqIEEgaGVscGVyIHNlcnZpY2UgdGhhdCBjYW4gcGFyc2UgdHlwZWFoZWFkJ3Mgc3ludGF4IChzdHJpbmcgcHJvdmlkZWQgYnkgdXNlcnMpXG4gKiBFeHRyYWN0ZWQgdG8gYSBzZXBhcmF0ZSBzZXJ2aWNlIGZvciBlYXNlIG9mIHVuaXQgdGVzdGluZ1xuICovXG4gIC5mYWN0b3J5KCd0eXBlYWhlYWRQYXJzZXInLCBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuXG4gIC8vICAgICAgICAgICAgICAgICAgICAgIDAwMDAwMTExMDAwMDAwMDAwMDAwMDIyMjAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMzMzMzMwMDAwMDAwMDAwMDQ0MDAwXG4gIHZhciBUWVBFQUhFQURfUkVHRVhQID0gL15cXHMqKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/XFxzK2ZvclxccysoPzooW1xcJFxcd11bXFwkXFx3XFxkXSopKVxccytpblxccysoW1xcc1xcU10rPykkLztcblxuICByZXR1cm4ge1xuICAgIHBhcnNlOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgdmFyIG1hdGNoID0gaW5wdXQubWF0Y2goVFlQRUFIRUFEX1JFR0VYUCk7XG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnRXhwZWN0ZWQgdHlwZWFoZWFkIHNwZWNpZmljYXRpb24gaW4gZm9ybSBvZiBcIl9tb2RlbFZhbHVlXyAoYXMgX2xhYmVsXyk/IGZvciBfaXRlbV8gaW4gX2NvbGxlY3Rpb25fXCInICtcbiAgICAgICAgICAgICcgYnV0IGdvdCBcIicgKyBpbnB1dCArICdcIi4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXRlbU5hbWU6bWF0Y2hbM10sXG4gICAgICAgIHNvdXJjZTokcGFyc2UobWF0Y2hbNF0pLFxuICAgICAgICB2aWV3TWFwcGVyOiRwYXJzZShtYXRjaFsyXSB8fCBtYXRjaFsxXSksXG4gICAgICAgIG1vZGVsTWFwcGVyOiRwYXJzZShtYXRjaFsxXSlcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV0pXG5cbiAgLmRpcmVjdGl2ZSgndHlwZWFoZWFkJywgWyckY29tcGlsZScsICckcGFyc2UnLCAnJHEnLCAnJHRpbWVvdXQnLCAnJGRvY3VtZW50JywgJyR3aW5kb3cnLCAnJHJvb3RTY29wZScsICckcG9zaXRpb24nLCAndHlwZWFoZWFkUGFyc2VyJyxcbiAgICBmdW5jdGlvbigkY29tcGlsZSwgJHBhcnNlLCAkcSwgJHRpbWVvdXQsICRkb2N1bWVudCwgJHdpbmRvdywgJHJvb3RTY29wZSwgJHBvc2l0aW9uLCB0eXBlYWhlYWRQYXJzZXIpIHtcbiAgICB2YXIgSE9UX0tFWVMgPSBbOSwgMTMsIDI3LCAzOCwgNDBdO1xuICAgIHZhciBldmVudERlYm91bmNlVGltZSA9IDIwMDtcblxuICAgIHJldHVybiB7XG4gICAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnXj9uZ01vZGVsT3B0aW9ucyddLFxuICAgICAgbGluazogZnVuY3Rpb24ob3JpZ2luYWxTY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICAgIHZhciBtb2RlbEN0cmwgPSBjdHJsc1swXTtcbiAgICAgICAgdmFyIG5nTW9kZWxPcHRpb25zID0gY3RybHNbMV07XG4gICAgICAgIC8vU1VQUE9SVEVEIEFUVFJJQlVURVMgKE9QVElPTlMpXG5cbiAgICAgICAgLy9taW5pbWFsIG5vIG9mIGNoYXJhY3RlcnMgdGhhdCBuZWVkcyB0byBiZSBlbnRlcmVkIGJlZm9yZSB0eXBlYWhlYWQga2lja3MtaW5cbiAgICAgICAgdmFyIG1pbkxlbmd0aCA9IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkTWluTGVuZ3RoKTtcbiAgICAgICAgaWYgKCFtaW5MZW5ndGggJiYgbWluTGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgbWluTGVuZ3RoID0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vbWluaW1hbCB3YWl0IHRpbWUgYWZ0ZXIgbGFzdCBjaGFyYWN0ZXIgdHlwZWQgYmVmb3JlIHR5cGVhaGVhZCBraWNrcy1pblxuICAgICAgICB2YXIgd2FpdFRpbWUgPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZFdhaXRNcykgfHwgMDtcblxuICAgICAgICAvL3Nob3VsZCBpdCByZXN0cmljdCBtb2RlbCB2YWx1ZXMgdG8gdGhlIG9uZXMgc2VsZWN0ZWQgZnJvbSB0aGUgcG9wdXAgb25seT9cbiAgICAgICAgdmFyIGlzRWRpdGFibGUgPSBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZEVkaXRhYmxlKSAhPT0gZmFsc2U7XG5cbiAgICAgICAgLy9iaW5kaW5nIHRvIGEgdmFyaWFibGUgdGhhdCBpbmRpY2F0ZXMgaWYgbWF0Y2hlcyBhcmUgYmVpbmcgcmV0cmlldmVkIGFzeW5jaHJvbm91c2x5XG4gICAgICAgIHZhciBpc0xvYWRpbmdTZXR0ZXIgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkTG9hZGluZykuYXNzaWduIHx8IGFuZ3VsYXIubm9vcDtcblxuICAgICAgICAvL2EgY2FsbGJhY2sgZXhlY3V0ZWQgd2hlbiBhIG1hdGNoIGlzIHNlbGVjdGVkXG4gICAgICAgIHZhciBvblNlbGVjdENhbGxiYWNrID0gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZE9uU2VsZWN0KTtcblxuICAgICAgICAvL3Nob3VsZCBpdCBzZWxlY3QgaGlnaGxpZ2h0ZWQgcG9wdXAgdmFsdWUgd2hlbiBsb3NpbmcgZm9jdXM/XG4gICAgICAgIHZhciBpc1NlbGVjdE9uQmx1ciA9IGFuZ3VsYXIuaXNEZWZpbmVkKGF0dHJzLnR5cGVhaGVhZFNlbGVjdE9uQmx1cikgPyBvcmlnaW5hbFNjb3BlLiRldmFsKGF0dHJzLnR5cGVhaGVhZFNlbGVjdE9uQmx1cikgOiBmYWxzZTtcblxuICAgICAgICAvL2JpbmRpbmcgdG8gYSB2YXJpYWJsZSB0aGF0IGluZGljYXRlcyBpZiB0aGVyZSB3ZXJlIG5vIHJlc3VsdHMgYWZ0ZXIgdGhlIHF1ZXJ5IGlzIGNvbXBsZXRlZFxuICAgICAgICB2YXIgaXNOb1Jlc3VsdHNTZXR0ZXIgPSAkcGFyc2UoYXR0cnMudHlwZWFoZWFkTm9SZXN1bHRzKS5hc3NpZ24gfHwgYW5ndWxhci5ub29wO1xuXG4gICAgICAgIHZhciBpbnB1dEZvcm1hdHRlciA9IGF0dHJzLnR5cGVhaGVhZElucHV0Rm9ybWF0dGVyID8gJHBhcnNlKGF0dHJzLnR5cGVhaGVhZElucHV0Rm9ybWF0dGVyKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgYXBwZW5kVG9Cb2R5ID0gIGF0dHJzLnR5cGVhaGVhZEFwcGVuZFRvQm9keSA/IG9yaWdpbmFsU2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkQXBwZW5kVG9Cb2R5KSA6IGZhbHNlO1xuXG4gICAgICAgIHZhciBmb2N1c0ZpcnN0ID0gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRGb2N1c0ZpcnN0KSAhPT0gZmFsc2U7XG5cbiAgICAgICAgLy9JZiBpbnB1dCBtYXRjaGVzIGFuIGl0ZW0gb2YgdGhlIGxpc3QgZXhhY3RseSwgc2VsZWN0IGl0IGF1dG9tYXRpY2FsbHlcbiAgICAgICAgdmFyIHNlbGVjdE9uRXhhY3QgPSBhdHRycy50eXBlYWhlYWRTZWxlY3RPbkV4YWN0ID8gb3JpZ2luYWxTY29wZS4kZXZhbChhdHRycy50eXBlYWhlYWRTZWxlY3RPbkV4YWN0KSA6IGZhbHNlO1xuXG4gICAgICAgIC8vSU5URVJOQUwgVkFSSUFCTEVTXG5cbiAgICAgICAgLy9tb2RlbCBzZXR0ZXIgZXhlY3V0ZWQgdXBvbiBtYXRjaCBzZWxlY3Rpb25cbiAgICAgICAgdmFyIHBhcnNlZE1vZGVsID0gJHBhcnNlKGF0dHJzLm5nTW9kZWwpO1xuICAgICAgICB2YXIgaW52b2tlTW9kZWxTZXR0ZXIgPSAkcGFyc2UoYXR0cnMubmdNb2RlbCArICcoJCQkcCknKTtcbiAgICAgICAgdmFyICRzZXRNb2RlbFZhbHVlID0gZnVuY3Rpb24oc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNGdW5jdGlvbihwYXJzZWRNb2RlbChvcmlnaW5hbFNjb3BlKSkgJiZcbiAgICAgICAgICAgIG5nTW9kZWxPcHRpb25zICYmIG5nTW9kZWxPcHRpb25zLiRvcHRpb25zICYmIG5nTW9kZWxPcHRpb25zLiRvcHRpb25zLmdldHRlclNldHRlcikge1xuICAgICAgICAgICAgcmV0dXJuIGludm9rZU1vZGVsU2V0dGVyKHNjb3BlLCB7JCQkcDogbmV3VmFsdWV9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZE1vZGVsLmFzc2lnbihzY29wZSwgbmV3VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvL2V4cHJlc3Npb25zIHVzZWQgYnkgdHlwZWFoZWFkXG4gICAgICAgIHZhciBwYXJzZXJSZXN1bHQgPSB0eXBlYWhlYWRQYXJzZXIucGFyc2UoYXR0cnMudHlwZWFoZWFkKTtcblxuICAgICAgICB2YXIgaGFzRm9jdXM7XG5cbiAgICAgICAgLy9Vc2VkIHRvIGF2b2lkIGJ1ZyBpbiBpT1Mgd2VidmlldyB3aGVyZSBpT1Mga2V5Ym9hcmQgZG9lcyBub3QgZmlyZVxuICAgICAgICAvL21vdXNlZG93biAmIG1vdXNldXAgZXZlbnRzXG4gICAgICAgIC8vSXNzdWUgIzM2OTlcbiAgICAgICAgdmFyIHNlbGVjdGVkO1xuXG4gICAgICAgIC8vY3JlYXRlIGEgY2hpbGQgc2NvcGUgZm9yIHRoZSB0eXBlYWhlYWQgZGlyZWN0aXZlIHNvIHdlIGFyZSBub3QgcG9sbHV0aW5nIG9yaWdpbmFsIHNjb3BlXG4gICAgICAgIC8vd2l0aCB0eXBlYWhlYWQtc3BlY2lmaWMgZGF0YSAobWF0Y2hlcywgcXVlcnkgZXRjLilcbiAgICAgICAgdmFyIHNjb3BlID0gb3JpZ2luYWxTY29wZS4kbmV3KCk7XG4gICAgICAgIHZhciBvZmZEZXN0cm95ID0gb3JpZ2luYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgc2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNjb3BlLiRvbignJGRlc3Ryb3knLCBvZmZEZXN0cm95KTtcblxuICAgICAgICAvLyBXQUktQVJJQVxuICAgICAgICB2YXIgcG9wdXBJZCA9ICd0eXBlYWhlYWQtJyArIHNjb3BlLiRpZCArICctJyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwKTtcbiAgICAgICAgZWxlbWVudC5hdHRyKHtcbiAgICAgICAgICAnYXJpYS1hdXRvY29tcGxldGUnOiAnbGlzdCcsXG4gICAgICAgICAgJ2FyaWEtZXhwYW5kZWQnOiBmYWxzZSxcbiAgICAgICAgICAnYXJpYS1vd25zJzogcG9wdXBJZFxuICAgICAgICB9KTtcblxuICAgICAgICAvL3BvcC11cCBlbGVtZW50IHVzZWQgdG8gZGlzcGxheSBtYXRjaGVzXG4gICAgICAgIHZhciBwb3BVcEVsID0gYW5ndWxhci5lbGVtZW50KCc8ZGl2IHR5cGVhaGVhZC1wb3B1cD48L2Rpdj4nKTtcbiAgICAgICAgcG9wVXBFbC5hdHRyKHtcbiAgICAgICAgICBpZDogcG9wdXBJZCxcbiAgICAgICAgICBtYXRjaGVzOiAnbWF0Y2hlcycsXG4gICAgICAgICAgYWN0aXZlOiAnYWN0aXZlSWR4JyxcbiAgICAgICAgICBzZWxlY3Q6ICdzZWxlY3QoYWN0aXZlSWR4KScsXG4gICAgICAgICAgJ21vdmUtaW4tcHJvZ3Jlc3MnOiAnbW92ZUluUHJvZ3Jlc3MnLFxuICAgICAgICAgIHF1ZXJ5OiAncXVlcnknLFxuICAgICAgICAgIHBvc2l0aW9uOiAncG9zaXRpb24nXG4gICAgICAgIH0pO1xuICAgICAgICAvL2N1c3RvbSBpdGVtIHRlbXBsYXRlXG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdHRycy50eXBlYWhlYWRUZW1wbGF0ZVVybCkpIHtcbiAgICAgICAgICBwb3BVcEVsLmF0dHIoJ3RlbXBsYXRlLXVybCcsIGF0dHJzLnR5cGVhaGVhZFRlbXBsYXRlVXJsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChhdHRycy50eXBlYWhlYWRQb3B1cFRlbXBsYXRlVXJsKSkge1xuICAgICAgICAgIHBvcFVwRWwuYXR0cigncG9wdXAtdGVtcGxhdGUtdXJsJywgYXR0cnMudHlwZWFoZWFkUG9wdXBUZW1wbGF0ZVVybCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzZXRNYXRjaGVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2NvcGUubWF0Y2hlcyA9IFtdO1xuICAgICAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IC0xO1xuICAgICAgICAgIGVsZW1lbnQuYXR0cignYXJpYS1leHBhbmRlZCcsIGZhbHNlKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0TWF0Y2hJZCA9IGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgICAgcmV0dXJuIHBvcHVwSWQgKyAnLW9wdGlvbi0nICsgaW5kZXg7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW5kaWNhdGUgdGhhdCB0aGUgc3BlY2lmaWVkIG1hdGNoIGlzIHRoZSBhY3RpdmUgKHByZS1zZWxlY3RlZCkgaXRlbSBpbiB0aGUgbGlzdCBvd25lZCBieSB0aGlzIHR5cGVhaGVhZC5cbiAgICAgICAgLy8gVGhpcyBhdHRyaWJ1dGUgaXMgYWRkZWQgb3IgcmVtb3ZlZCBhdXRvbWF0aWNhbGx5IHdoZW4gdGhlIGBhY3RpdmVJZHhgIGNoYW5nZXMuXG4gICAgICAgIHNjb3BlLiR3YXRjaCgnYWN0aXZlSWR4JywgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCcsIGdldE1hdGNoSWQoaW5kZXgpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciBpbnB1dElzRXhhY3RNYXRjaCA9IGZ1bmN0aW9uKGlucHV0VmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgaWYgKHNjb3BlLm1hdGNoZXMubGVuZ3RoID4gaW5kZXggJiYgaW5wdXRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0VmFsdWUudG9VcHBlckNhc2UoKSA9PT0gc2NvcGUubWF0Y2hlc1tpbmRleF0ubGFiZWwudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGdldE1hdGNoZXNBc3luYyA9IGZ1bmN0aW9uKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICB2YXIgbG9jYWxzID0geyR2aWV3VmFsdWU6IGlucHV0VmFsdWV9O1xuICAgICAgICAgIGlzTG9hZGluZ1NldHRlcihvcmlnaW5hbFNjb3BlLCB0cnVlKTtcbiAgICAgICAgICBpc05vUmVzdWx0c1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgJHEud2hlbihwYXJzZXJSZXN1bHQuc291cmNlKG9yaWdpbmFsU2NvcGUsIGxvY2FscykpLnRoZW4oZnVuY3Rpb24obWF0Y2hlcykge1xuICAgICAgICAgICAgLy9pdCBtaWdodCBoYXBwZW4gdGhhdCBzZXZlcmFsIGFzeW5jIHF1ZXJpZXMgd2VyZSBpbiBwcm9ncmVzcyBpZiBhIHVzZXIgd2VyZSB0eXBpbmcgZmFzdFxuICAgICAgICAgICAgLy9idXQgd2UgYXJlIGludGVyZXN0ZWQgb25seSBpbiByZXNwb25zZXMgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSBjdXJyZW50IHZpZXcgdmFsdWVcbiAgICAgICAgICAgIHZhciBvbkN1cnJlbnRSZXF1ZXN0ID0gKGlucHV0VmFsdWUgPT09IG1vZGVsQ3RybC4kdmlld1ZhbHVlKTtcbiAgICAgICAgICAgIGlmIChvbkN1cnJlbnRSZXF1ZXN0ICYmIGhhc0ZvY3VzKSB7XG4gICAgICAgICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgICAgICAgICAgc2NvcGUuYWN0aXZlSWR4ID0gZm9jdXNGaXJzdCA/IDAgOiAtMTtcbiAgICAgICAgICAgICAgICBpc05vUmVzdWx0c1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgc2NvcGUubWF0Y2hlcy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICAgICAgLy90cmFuc2Zvcm0gbGFiZWxzXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXRjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICBsb2NhbHNbcGFyc2VyUmVzdWx0Lml0ZW1OYW1lXSA9IG1hdGNoZXNbaV07XG4gICAgICAgICAgICAgICAgICBzY29wZS5tYXRjaGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpZDogZ2V0TWF0Y2hJZChpKSxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHBhcnNlclJlc3VsdC52aWV3TWFwcGVyKHNjb3BlLCBsb2NhbHMpLFxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogbWF0Y2hlc1tpXVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgc2NvcGUucXVlcnkgPSBpbnB1dFZhbHVlO1xuICAgICAgICAgICAgICAgIC8vcG9zaXRpb24gcG9wLXVwIHdpdGggbWF0Y2hlcyAtIHdlIG5lZWQgdG8gcmUtY2FsY3VsYXRlIGl0cyBwb3NpdGlvbiBlYWNoIHRpbWUgd2UgYXJlIG9wZW5pbmcgYSB3aW5kb3dcbiAgICAgICAgICAgICAgICAvL3dpdGggbWF0Y2hlcyBhcyBhIHBvcC11cCBtaWdodCBiZSBhYnNvbHV0ZS1wb3NpdGlvbmVkIGFuZCBwb3NpdGlvbiBvZiBhbiBpbnB1dCBtaWdodCBoYXZlIGNoYW5nZWQgb24gYSBwYWdlXG4gICAgICAgICAgICAgICAgLy9kdWUgdG8gb3RoZXIgZWxlbWVudHMgYmVpbmcgcmVuZGVyZWRcbiAgICAgICAgICAgICAgICByZWNhbGN1bGF0ZVBvc2l0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICBlbGVtZW50LmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcblxuICAgICAgICAgICAgICAgIC8vU2VsZWN0IHRoZSBzaW5nbGUgcmVtYWluaW5nIG9wdGlvbiBpZiB1c2VyIGlucHV0IG1hdGNoZXNcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0T25FeGFjdCAmJiBzY29wZS5tYXRjaGVzLmxlbmd0aCA9PT0gMSAmJiBpbnB1dElzRXhhY3RNYXRjaChpbnB1dFZhbHVlLCAwKSkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0KDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgICAgICAgICBpc05vUmVzdWx0c1NldHRlcihvcmlnaW5hbFNjb3BlLCB0cnVlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9uQ3VycmVudFJlcXVlc3QpIHtcbiAgICAgICAgICAgICAgaXNMb2FkaW5nU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgICAgaXNMb2FkaW5nU2V0dGVyKG9yaWdpbmFsU2NvcGUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlzTm9SZXN1bHRzU2V0dGVyKG9yaWdpbmFsU2NvcGUsIHRydWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGJpbmQgZXZlbnRzIG9ubHkgaWYgYXBwZW5kVG9Cb2R5IHBhcmFtcyBleGlzdCAtIHBlcmZvcm1hbmNlIGZlYXR1cmVcbiAgICAgICAgaWYgKGFwcGVuZFRvQm9keSkge1xuICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgkd2luZG93KS5iaW5kKCdyZXNpemUnLCBmaXJlUmVjYWxjdWxhdGluZyk7XG4gICAgICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5iaW5kKCdzY3JvbGwnLCBmaXJlUmVjYWxjdWxhdGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWNsYXJlIHRoZSB0aW1lb3V0IHByb21pc2UgdmFyIG91dHNpZGUgdGhlIGZ1bmN0aW9uIHNjb3BlIHNvIHRoYXQgc3RhY2tlZCBjYWxscyBjYW4gYmUgY2FuY2VsbGVkIGxhdGVyXG4gICAgICAgIHZhciB0aW1lb3V0RXZlbnRQcm9taXNlO1xuXG4gICAgICAgIC8vIERlZmF1bHQgcHJvZ3Jlc3MgdHlwZVxuICAgICAgICBzY29wZS5tb3ZlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVSZWNhbGN1bGF0aW5nKCkge1xuICAgICAgICAgIGlmICghc2NvcGUubW92ZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgIHNjb3BlLm1vdmVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDYW5jZWwgcHJldmlvdXMgdGltZW91dFxuICAgICAgICAgIGlmICh0aW1lb3V0RXZlbnRQcm9taXNlKSB7XG4gICAgICAgICAgICAkdGltZW91dC5jYW5jZWwodGltZW91dEV2ZW50UHJvbWlzZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gRGVib3VuY2VkIGV4ZWN1dGluZyByZWNhbGN1bGF0ZSBhZnRlciBldmVudHMgZmlyZWRcbiAgICAgICAgICB0aW1lb3V0RXZlbnRQcm9taXNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBpZiBwb3B1cCBpcyB2aXNpYmxlXG4gICAgICAgICAgICBpZiAoc2NvcGUubWF0Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcmVjYWxjdWxhdGVQb3NpdGlvbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY29wZS5tb3ZlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIH0sIGV2ZW50RGVib3VuY2VUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlY2FsY3VsYXRlIGFjdHVhbCBwb3NpdGlvbiBhbmQgc2V0IG5ldyB2YWx1ZXMgdG8gc2NvcGVcbiAgICAgICAgLy8gYWZ0ZXIgZGlnZXN0IGxvb3AgaXMgcG9wdXAgaW4gcmlnaHQgcG9zaXRpb25cbiAgICAgICAgZnVuY3Rpb24gcmVjYWxjdWxhdGVQb3NpdGlvbigpIHtcbiAgICAgICAgICBzY29wZS5wb3NpdGlvbiA9IGFwcGVuZFRvQm9keSA/ICRwb3NpdGlvbi5vZmZzZXQoZWxlbWVudCkgOiAkcG9zaXRpb24ucG9zaXRpb24oZWxlbWVudCk7XG4gICAgICAgICAgc2NvcGUucG9zaXRpb24udG9wICs9IGVsZW1lbnQucHJvcCgnb2Zmc2V0SGVpZ2h0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXNldE1hdGNoZXMoKTtcblxuICAgICAgICAvL3dlIG5lZWQgdG8gcHJvcGFnYXRlIHVzZXIncyBxdWVyeSBzbyB3ZSBjYW4gaGlnbGlnaHQgbWF0Y2hlc1xuICAgICAgICBzY29wZS5xdWVyeSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAvL0RlY2xhcmUgdGhlIHRpbWVvdXQgcHJvbWlzZSB2YXIgb3V0c2lkZSB0aGUgZnVuY3Rpb24gc2NvcGUgc28gdGhhdCBzdGFja2VkIGNhbGxzIGNhbiBiZSBjYW5jZWxsZWQgbGF0ZXJcbiAgICAgICAgdmFyIHRpbWVvdXRQcm9taXNlO1xuXG4gICAgICAgIHZhciBzY2hlZHVsZVNlYXJjaFdpdGhUaW1lb3V0ID0gZnVuY3Rpb24oaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIHRpbWVvdXRQcm9taXNlID0gJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBnZXRNYXRjaGVzQXN5bmMoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgfSwgd2FpdFRpbWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjYW5jZWxQcmV2aW91c1RpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAodGltZW91dFByb21pc2UpIHtcbiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lb3V0UHJvbWlzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vcGx1ZyBpbnRvICRwYXJzZXJzIHBpcGVsaW5lIHRvIG9wZW4gYSB0eXBlYWhlYWQgb24gdmlldyBjaGFuZ2VzIGluaXRpYXRlZCBmcm9tIERPTVxuICAgICAgICAvLyRwYXJzZXJzIGtpY2staW4gb24gYWxsIHRoZSBjaGFuZ2VzIGNvbWluZyBmcm9tIHRoZSB2aWV3IGFzIHdlbGwgYXMgbWFudWFsbHkgdHJpZ2dlcmVkIGJ5ICRzZXRWaWV3VmFsdWVcbiAgICAgICAgbW9kZWxDdHJsLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24oaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIGhhc0ZvY3VzID0gdHJ1ZTtcblxuICAgICAgICAgIGlmIChtaW5MZW5ndGggPT09IDAgfHwgaW5wdXRWYWx1ZSAmJiBpbnB1dFZhbHVlLmxlbmd0aCA+PSBtaW5MZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICh3YWl0VGltZSA+IDApIHtcbiAgICAgICAgICAgICAgY2FuY2VsUHJldmlvdXNUaW1lb3V0KCk7XG4gICAgICAgICAgICAgIHNjaGVkdWxlU2VhcmNoV2l0aFRpbWVvdXQoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBnZXRNYXRjaGVzQXN5bmMoaW5wdXRWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzTG9hZGluZ1NldHRlcihvcmlnaW5hbFNjb3BlLCBmYWxzZSk7XG4gICAgICAgICAgICBjYW5jZWxQcmV2aW91c1RpbWVvdXQoKTtcbiAgICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0VkaXRhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgICAgIC8vIFJlc2V0IGluIGNhc2UgdXNlciBoYWQgdHlwZWQgc29tZXRoaW5nIHByZXZpb3VzbHkuXG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgnZWRpdGFibGUnLCBmYWxzZSk7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBtb2RlbEN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbihtb2RlbFZhbHVlKSB7XG4gICAgICAgICAgdmFyIGNhbmRpZGF0ZVZpZXdWYWx1ZSwgZW1wdHlWaWV3VmFsdWU7XG4gICAgICAgICAgdmFyIGxvY2FscyA9IHt9O1xuXG4gICAgICAgICAgLy8gVGhlIHZhbGlkaXR5IG1heSBiZSBzZXQgdG8gZmFsc2UgdmlhICRwYXJzZXJzIChzZWUgYWJvdmUpIGlmXG4gICAgICAgICAgLy8gdGhlIG1vZGVsIGlzIHJlc3RyaWN0ZWQgdG8gc2VsZWN0ZWQgdmFsdWVzLiBJZiB0aGUgbW9kZWxcbiAgICAgICAgICAvLyBpcyBzZXQgbWFudWFsbHkgaXQgaXMgY29uc2lkZXJlZCB0byBiZSB2YWxpZC5cbiAgICAgICAgICBpZiAoIWlzRWRpdGFibGUpIHtcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlucHV0Rm9ybWF0dGVyKSB7XG4gICAgICAgICAgICBsb2NhbHMuJG1vZGVsID0gbW9kZWxWYWx1ZTtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dEZvcm1hdHRlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvL2l0IG1pZ2h0IGhhcHBlbiB0aGF0IHdlIGRvbid0IGhhdmUgZW5vdWdoIGluZm8gdG8gcHJvcGVybHkgcmVuZGVyIGlucHV0IHZhbHVlXG4gICAgICAgICAgICAvL3dlIG5lZWQgdG8gY2hlY2sgZm9yIHRoaXMgc2l0dWF0aW9uIGFuZCBzaW1wbHkgcmV0dXJuIG1vZGVsIHZhbHVlIGlmIHdlIGNhbid0IGFwcGx5IGN1c3RvbSBmb3JtYXR0aW5nXG4gICAgICAgICAgICBsb2NhbHNbcGFyc2VyUmVzdWx0Lml0ZW1OYW1lXSA9IG1vZGVsVmFsdWU7XG4gICAgICAgICAgICBjYW5kaWRhdGVWaWV3VmFsdWUgPSBwYXJzZXJSZXN1bHQudmlld01hcHBlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgbG9jYWxzW3BhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBlbXB0eVZpZXdWYWx1ZSA9IHBhcnNlclJlc3VsdC52aWV3TWFwcGVyKG9yaWdpbmFsU2NvcGUsIGxvY2Fscyk7XG5cbiAgICAgICAgICAgIHJldHVybiBjYW5kaWRhdGVWaWV3VmFsdWUhPT0gZW1wdHlWaWV3VmFsdWUgPyBjYW5kaWRhdGVWaWV3VmFsdWUgOiBtb2RlbFZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUuc2VsZWN0ID0gZnVuY3Rpb24oYWN0aXZlSWR4KSB7XG4gICAgICAgICAgLy9jYWxsZWQgZnJvbSB3aXRoaW4gdGhlICRkaWdlc3QoKSBjeWNsZVxuICAgICAgICAgIHZhciBsb2NhbHMgPSB7fTtcbiAgICAgICAgICB2YXIgbW9kZWwsIGl0ZW07XG5cbiAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgbG9jYWxzW3BhcnNlclJlc3VsdC5pdGVtTmFtZV0gPSBpdGVtID0gc2NvcGUubWF0Y2hlc1thY3RpdmVJZHhdLm1vZGVsO1xuICAgICAgICAgIG1vZGVsID0gcGFyc2VyUmVzdWx0Lm1vZGVsTWFwcGVyKG9yaWdpbmFsU2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgJHNldE1vZGVsVmFsdWUob3JpZ2luYWxTY29wZSwgbW9kZWwpO1xuICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VmFsaWRpdHkoJ2VkaXRhYmxlJywgdHJ1ZSk7XG4gICAgICAgICAgbW9kZWxDdHJsLiRzZXRWYWxpZGl0eSgncGFyc2UnLCB0cnVlKTtcblxuICAgICAgICAgIG9uU2VsZWN0Q2FsbGJhY2sob3JpZ2luYWxTY29wZSwge1xuICAgICAgICAgICAgJGl0ZW06IGl0ZW0sXG4gICAgICAgICAgICAkbW9kZWw6IG1vZGVsLFxuICAgICAgICAgICAgJGxhYmVsOiBwYXJzZXJSZXN1bHQudmlld01hcHBlcihvcmlnaW5hbFNjb3BlLCBsb2NhbHMpXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXNldE1hdGNoZXMoKTtcblxuICAgICAgICAgIC8vcmV0dXJuIGZvY3VzIHRvIHRoZSBpbnB1dCBlbGVtZW50IGlmIGEgbWF0Y2ggd2FzIHNlbGVjdGVkIHZpYSBhIG1vdXNlIGNsaWNrIGV2ZW50XG4gICAgICAgICAgLy8gdXNlIHRpbWVvdXQgdG8gYXZvaWQgJHJvb3RTY29wZTppbnByb2cgZXJyb3JcbiAgICAgICAgICBpZiAoc2NvcGUuJGV2YWwoYXR0cnMudHlwZWFoZWFkRm9jdXNPblNlbGVjdCkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbigpIHsgZWxlbWVudFswXS5mb2N1cygpOyB9LCAwLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vYmluZCBrZXlib2FyZCBldmVudHM6IGFycm93cyB1cCgzOCkgLyBkb3duKDQwKSwgZW50ZXIoMTMpIGFuZCB0YWIoOSksIGVzYygyNylcbiAgICAgICAgZWxlbWVudC5iaW5kKCdrZXlkb3duJywgZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgLy90eXBlYWhlYWQgaXMgb3BlbiBhbmQgYW4gXCJpbnRlcmVzdGluZ1wiIGtleSB3YXMgcHJlc3NlZFxuICAgICAgICAgIGlmIChzY29wZS5tYXRjaGVzLmxlbmd0aCA9PT0gMCB8fCBIT1RfS0VZUy5pbmRleE9mKGV2dC53aGljaCkgPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaWYgdGhlcmUncyBub3RoaW5nIHNlbGVjdGVkIChpLmUuIGZvY3VzRmlyc3QpIGFuZCBlbnRlciBvciB0YWIgaXMgaGl0LCBjbGVhciB0aGUgcmVzdWx0c1xuICAgICAgICAgIGlmIChzY29wZS5hY3RpdmVJZHggPT09IC0xICYmIChldnQud2hpY2ggPT09IDkgfHwgZXZ0LndoaWNoID09PSAxMykpIHtcbiAgICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgaWYgKGV2dC53aGljaCA9PT0gNDApIHtcbiAgICAgICAgICAgIHNjb3BlLmFjdGl2ZUlkeCA9IChzY29wZS5hY3RpdmVJZHggKyAxKSAlIHNjb3BlLm1hdGNoZXMubGVuZ3RoO1xuICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuXG4gICAgICAgICAgfSBlbHNlIGlmIChldnQud2hpY2ggPT09IDM4KSB7XG4gICAgICAgICAgICBzY29wZS5hY3RpdmVJZHggPSAoc2NvcGUuYWN0aXZlSWR4ID4gMCA/IHNjb3BlLmFjdGl2ZUlkeCA6IHNjb3BlLm1hdGNoZXMubGVuZ3RoKSAtIDE7XG4gICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGV2dC53aGljaCA9PT0gMTMgfHwgZXZ0LndoaWNoID09PSA5KSB7XG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBzY29wZS5zZWxlY3Qoc2NvcGUuYWN0aXZlSWR4KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgfSBlbHNlIGlmIChldnQud2hpY2ggPT09IDI3KSB7XG4gICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIHJlc2V0TWF0Y2hlcygpO1xuICAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWxlbWVudC5iaW5kKCdibHVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKGlzU2VsZWN0T25CbHVyICYmIHNjb3BlLm1hdGNoZXMubGVuZ3RoICYmIHNjb3BlLmFjdGl2ZUlkeCAhPT0gLTEgJiYgIXNlbGVjdGVkKSB7XG4gICAgICAgICAgICBzZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHNjb3BlLnNlbGVjdChzY29wZS5hY3RpdmVJZHgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhc0ZvY3VzID0gZmFsc2U7XG4gICAgICAgICAgc2VsZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gS2VlcCByZWZlcmVuY2UgdG8gY2xpY2sgaGFuZGxlciB0byB1bmJpbmQgaXQuXG4gICAgICAgIHZhciBkaXNtaXNzQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZ0KSB7XG4gICAgICAgICAgLy8gSXNzdWUgIzM5NzNcbiAgICAgICAgICAvLyBGaXJlZm94IHRyZWF0cyByaWdodCBjbGljayBhcyBhIGNsaWNrIG9uIGRvY3VtZW50XG4gICAgICAgICAgaWYgKGVsZW1lbnRbMF0gIT09IGV2dC50YXJnZXQgJiYgZXZ0LndoaWNoICE9PSAzICYmIHNjb3BlLm1hdGNoZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICByZXNldE1hdGNoZXMoKTtcbiAgICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgJGRvY3VtZW50LmJpbmQoJ2NsaWNrJywgZGlzbWlzc0NsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgb3JpZ2luYWxTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJGRvY3VtZW50LnVuYmluZCgnY2xpY2snLCBkaXNtaXNzQ2xpY2tIYW5kbGVyKTtcbiAgICAgICAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgICAgICAkcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFByZXZlbnQgalF1ZXJ5IGNhY2hlIG1lbW9yeSBsZWFrXG4gICAgICAgICAgcG9wVXBFbC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyICRwb3B1cCA9ICRjb21waWxlKHBvcFVwRWwpKHNjb3BlKTtcblxuICAgICAgICBpZiAoYXBwZW5kVG9Cb2R5KSB7XG4gICAgICAgICAgJGRvY3VtZW50LmZpbmQoJ2JvZHknKS5hcHBlbmQoJHBvcHVwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtZW50LmFmdGVyKCRwb3B1cCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gIH1dKVxuXG4gIC5kaXJlY3RpdmUoJ3R5cGVhaGVhZFBvcHVwJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUEnLFxuICAgICAgc2NvcGU6IHtcbiAgICAgICAgbWF0Y2hlczogJz0nLFxuICAgICAgICBxdWVyeTogJz0nLFxuICAgICAgICBhY3RpdmU6ICc9JyxcbiAgICAgICAgcG9zaXRpb246ICcmJyxcbiAgICAgICAgbW92ZUluUHJvZ3Jlc3M6ICc9JyxcbiAgICAgICAgc2VsZWN0OiAnJidcbiAgICAgIH0sXG4gICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgdGVtcGxhdGVVcmw6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgIHJldHVybiBhdHRycy5wb3B1cFRlbXBsYXRlVXJsIHx8ICd0ZW1wbGF0ZS90eXBlYWhlYWQvdHlwZWFoZWFkLXBvcHVwLmh0bWwnO1xuICAgICAgfSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICBzY29wZS50ZW1wbGF0ZVVybCA9IGF0dHJzLnRlbXBsYXRlVXJsO1xuXG4gICAgICAgIHNjb3BlLmlzT3BlbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBzY29wZS5tYXRjaGVzLmxlbmd0aCA+IDA7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuaXNBY3RpdmUgPSBmdW5jdGlvbihtYXRjaElkeCkge1xuICAgICAgICAgIHJldHVybiBzY29wZS5hY3RpdmUgPT0gbWF0Y2hJZHg7XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuc2VsZWN0QWN0aXZlID0gZnVuY3Rpb24obWF0Y2hJZHgpIHtcbiAgICAgICAgICBzY29wZS5hY3RpdmUgPSBtYXRjaElkeDtcbiAgICAgICAgfTtcblxuICAgICAgICBzY29wZS5zZWxlY3RNYXRjaCA9IGZ1bmN0aW9uKGFjdGl2ZUlkeCkge1xuICAgICAgICAgIHNjb3BlLnNlbGVjdCh7YWN0aXZlSWR4OmFjdGl2ZUlkeH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH07XG4gIH0pXG5cbiAgLmRpcmVjdGl2ZSgndHlwZWFoZWFkTWF0Y2gnLCBbJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJGNvbXBpbGUnLCAnJHBhcnNlJywgZnVuY3Rpb24oJHRlbXBsYXRlUmVxdWVzdCwgJGNvbXBpbGUsICRwYXJzZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0VBJyxcbiAgICAgIHNjb3BlOiB7XG4gICAgICAgIGluZGV4OiAnPScsXG4gICAgICAgIG1hdGNoOiAnPScsXG4gICAgICAgIHF1ZXJ5OiAnPSdcbiAgICAgIH0sXG4gICAgICBsaW5rOmZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICB2YXIgdHBsVXJsID0gJHBhcnNlKGF0dHJzLnRlbXBsYXRlVXJsKShzY29wZS4kcGFyZW50KSB8fCAndGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1tYXRjaC5odG1sJztcbiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdCh0cGxVcmwpLnRoZW4oZnVuY3Rpb24odHBsQ29udGVudCkge1xuICAgICAgICAgICRjb21waWxlKHRwbENvbnRlbnQudHJpbSgpKShzY29wZSwgZnVuY3Rpb24oY2xvbmVkRWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZXBsYWNlV2l0aChjbG9uZWRFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfV0pXG5cbiAgLmZpbHRlcigndHlwZWFoZWFkSGlnaGxpZ2h0JywgWyckc2NlJywgJyRpbmplY3RvcicsICckbG9nJywgZnVuY3Rpb24oJHNjZSwgJGluamVjdG9yLCAkbG9nKSB7XG4gICAgdmFyIGlzU2FuaXRpemVQcmVzZW50O1xuICAgIGlzU2FuaXRpemVQcmVzZW50ID0gJGluamVjdG9yLmhhcygnJHNhbml0aXplJyk7XG5cbiAgICBmdW5jdGlvbiBlc2NhcGVSZWdleHAocXVlcnlUb0VzY2FwZSkge1xuICAgICAgLy8gUmVnZXg6IGNhcHR1cmUgdGhlIHdob2xlIHF1ZXJ5IHN0cmluZyBhbmQgcmVwbGFjZSBpdCB3aXRoIHRoZSBzdHJpbmcgdGhhdCB3aWxsIGJlIHVzZWQgdG8gbWF0Y2hcbiAgICAgIC8vIHRoZSByZXN1bHRzLCBmb3IgZXhhbXBsZSBpZiB0aGUgY2FwdHVyZSBpcyBcImFcIiB0aGUgcmVzdWx0IHdpbGwgYmUgXFxhXG4gICAgICByZXR1cm4gcXVlcnlUb0VzY2FwZS5yZXBsYWNlKC8oWy4/KiteJFtcXF1cXFxcKCl7fXwtXSkvZywgJ1xcXFwkMScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRhaW5zSHRtbChtYXRjaEl0ZW0pIHtcbiAgICAgIHJldHVybiAvPC4qPi9nLnRlc3QobWF0Y2hJdGVtKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24obWF0Y2hJdGVtLCBxdWVyeSkge1xuICAgICAgaWYgKCFpc1Nhbml0aXplUHJlc2VudCAmJiBjb250YWluc0h0bWwobWF0Y2hJdGVtKSkge1xuICAgICAgICAkbG9nLndhcm4oJ1Vuc2FmZSB1c2Ugb2YgdHlwZWFoZWFkIHBsZWFzZSB1c2UgbmdTYW5pdGl6ZScpOyAvLyBXYXJuIHRoZSB1c2VyIGFib3V0IHRoZSBkYW5nZXJcbiAgICAgIH1cbiAgICAgIG1hdGNoSXRlbSA9IHF1ZXJ5PyAoJycgKyBtYXRjaEl0ZW0pLnJlcGxhY2UobmV3IFJlZ0V4cChlc2NhcGVSZWdleHAocXVlcnkpLCAnZ2knKSwgJzxzdHJvbmc+JCY8L3N0cm9uZz4nKSA6IG1hdGNoSXRlbTsgLy8gUmVwbGFjZXMgdGhlIGNhcHR1cmUgc3RyaW5nIHdpdGggYSB0aGUgc2FtZSBzdHJpbmcgaW5zaWRlIG9mIGEgXCJzdHJvbmdcIiB0YWdcbiAgICAgIGlmICghaXNTYW5pdGl6ZVByZXNlbnQpIHtcbiAgICAgICAgbWF0Y2hJdGVtID0gJHNjZS50cnVzdEFzSHRtbChtYXRjaEl0ZW0pOyAvLyBJZiAkc2FuaXRpemUgaXMgbm90IHByZXNlbnQgd2UgcGFjayB0aGUgc3RyaW5nIGluIGEgJHNjZSBvYmplY3QgZm9yIHRoZSBuZy1iaW5kLWh0bWwgZGlyZWN0aXZlXG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2hJdGVtO1xuICAgIH07XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLWdyb3VwLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInBhbmVsIHt7cGFuZWxDbGFzcyB8fCAncGFuZWwtZGVmYXVsdCd9fVxcXCI+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJwYW5lbC1oZWFkaW5nXFxcIiBuZy1rZXlwcmVzcz1cXFwidG9nZ2xlT3BlbigkZXZlbnQpXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGg0IGNsYXNzPVxcXCJwYW5lbC10aXRsZVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPGEgaHJlZiB0YWJpbmRleD1cXFwiMFxcXCIgY2xhc3M9XFxcImFjY29yZGlvbi10b2dnbGVcXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVPcGVuKClcXFwiIGFjY29yZGlvbi10cmFuc2NsdWRlPVxcXCJoZWFkaW5nXFxcIj48c3BhbiBuZy1jbGFzcz1cXFwieyd0ZXh0LW11dGVkJzogaXNEaXNhYmxlZH1cXFwiPnt7aGVhZGluZ319PC9zcGFuPjwvYT5cXG5cIiArXG4gICAgXCIgICAgPC9oND5cXG5cIiArXG4gICAgXCIgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwicGFuZWwtY29sbGFwc2UgY29sbGFwc2VcXFwiIGNvbGxhcHNlPVxcXCIhaXNPcGVuXFxcIj5cXG5cIiArXG4gICAgXCJcdCAgPGRpdiBjbGFzcz1cXFwicGFuZWwtYm9keVxcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCIgIDwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9hY2NvcmRpb24vYWNjb3JkaW9uLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInBhbmVsLWdyb3VwXFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9hbGVydC9hbGVydC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvYWxlcnQvYWxlcnQuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwiYWxlcnRcXFwiIG5nLWNsYXNzPVxcXCJbJ2FsZXJ0LScgKyAodHlwZSB8fCAnd2FybmluZycpLCBjbG9zZWFibGUgPyAnYWxlcnQtZGlzbWlzc2libGUnIDogbnVsbF1cXFwiIHJvbGU9XFxcImFsZXJ0XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGJ1dHRvbiBuZy1zaG93PVxcXCJjbG9zZWFibGVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImNsb3NlXFxcIiBuZy1jbGljaz1cXFwiY2xvc2UoJGV2ZW50KVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8c3BhbiBhcmlhLWhpZGRlbj1cXFwidHJ1ZVxcXCI+JnRpbWVzOzwvc3Bhbj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJzci1vbmx5XFxcIj5DbG9zZTwvc3Bhbj5cXG5cIiArXG4gICAgXCIgICAgPC9idXR0b24+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvY2Fyb3VzZWwvY2Fyb3VzZWwuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL2Nhcm91c2VsL2Nhcm91c2VsLmh0bWxcIixcbiAgICBcIjxkaXYgbmctbW91c2VlbnRlcj1cXFwicGF1c2UoKVxcXCIgbmctbW91c2VsZWF2ZT1cXFwicGxheSgpXFxcIiBjbGFzcz1cXFwiY2Fyb3VzZWxcXFwiIG5nLXN3aXBlLXJpZ2h0PVxcXCJwcmV2KClcXFwiIG5nLXN3aXBlLWxlZnQ9XFxcIm5leHQoKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxvbCBjbGFzcz1cXFwiY2Fyb3VzZWwtaW5kaWNhdG9yc1xcXCIgbmctc2hvdz1cXFwic2xpZGVzLmxlbmd0aCA+IDFcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGxpIG5nLXJlcGVhdD1cXFwic2xpZGUgaW4gc2xpZGVzIHwgb3JkZXJCeTppbmRleE9mU2xpZGUgdHJhY2sgYnkgJGluZGV4XFxcIiBuZy1jbGFzcz1cXFwie2FjdGl2ZTogaXNBY3RpdmUoc2xpZGUpfVxcXCIgbmctY2xpY2s9XFxcInNlbGVjdChzbGlkZSlcXFwiPjwvbGk+XFxuXCIgK1xuICAgIFwiICAgIDwvb2w+XFxuXCIgK1xuICAgIFwiICAgIDxkaXYgY2xhc3M9XFxcImNhcm91c2VsLWlubmVyXFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiICtcbiAgICBcIiAgICA8YSBjbGFzcz1cXFwibGVmdCBjYXJvdXNlbC1jb250cm9sXFxcIiBuZy1jbGljaz1cXFwicHJldigpXFxcIiBuZy1zaG93PVxcXCJzbGlkZXMubGVuZ3RoID4gMVxcXCI+PHNwYW4gY2xhc3M9XFxcImdseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1sZWZ0XFxcIj48L3NwYW4+PC9hPlxcblwiICtcbiAgICBcIiAgICA8YSBjbGFzcz1cXFwicmlnaHQgY2Fyb3VzZWwtY29udHJvbFxcXCIgbmctY2xpY2s9XFxcIm5leHQoKVxcXCIgbmctc2hvdz1cXFwic2xpZGVzLmxlbmd0aCA+IDFcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvc3Bhbj48L2E+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL2Nhcm91c2VsL3NsaWRlLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9jYXJvdXNlbC9zbGlkZS5odG1sXCIsXG4gICAgXCI8ZGl2IG5nLWNsYXNzPVxcXCJ7XFxuXCIgK1xuICAgIFwiICAgICdhY3RpdmUnOiBhY3RpdmVcXG5cIiArXG4gICAgXCIgIH1cXFwiIGNsYXNzPVxcXCJpdGVtIHRleHQtY2VudGVyXFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL2RhdGVwaWNrZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5odG1sXCIsXG4gICAgXCI8ZGl2IG5nLXN3aXRjaD1cXFwiZGF0ZXBpY2tlck1vZGVcXFwiIHJvbGU9XFxcImFwcGxpY2F0aW9uXFxcIiBuZy1rZXlkb3duPVxcXCJrZXlkb3duKCRldmVudClcXFwiPlxcblwiICtcbiAgICBcIiAgPGRheXBpY2tlciBuZy1zd2l0Y2gtd2hlbj1cXFwiZGF5XFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+PC9kYXlwaWNrZXI+XFxuXCIgK1xuICAgIFwiICA8bW9udGhwaWNrZXIgbmctc3dpdGNoLXdoZW49XFxcIm1vbnRoXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+PC9tb250aHBpY2tlcj5cXG5cIiArXG4gICAgXCIgIDx5ZWFycGlja2VyIG5nLXN3aXRjaC13aGVuPVxcXCJ5ZWFyXFxcIiB0YWJpbmRleD1cXFwiMFxcXCI+PC95ZWFycGlja2VyPlxcblwiICtcbiAgICBcIjwvZGl2PlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL2RheS5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvZGF0ZXBpY2tlci9kYXkuaHRtbFwiLFxuICAgIFwiPHRhYmxlIHJvbGU9XFxcImdyaWRcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cXFwie3thY3RpdmVEYXRlSWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtbGVmdFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoLTEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIGNvbHNwYW49XFxcInt7Ojo1ICsgc2hvd1dlZWtzfX1cXFwiPjxidXR0b24gaWQ9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiByb2xlPVxcXCJoZWFkaW5nXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVNb2RlKClcXFwiIG5nLWRpc2FibGVkPVxcXCJkYXRlcGlja2VyTW9kZSA9PT0gbWF4TW9kZVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIiBzdHlsZT1cXFwid2lkdGg6MTAwJTtcXFwiPjxzdHJvbmc+e3t0aXRsZX19PC9zdHJvbmc+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtcmlnaHRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKDEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvaT48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIG5nLWlmPVxcXCJzaG93V2Vla3NcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGggbmctcmVwZWF0PVxcXCJsYWJlbCBpbiA6OmxhYmVscyB0cmFjayBieSAkaW5kZXhcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCI+PHNtYWxsIGFyaWEtbGFiZWw9XFxcInt7OjpsYWJlbC5mdWxsfX1cXFwiPnt7OjpsYWJlbC5hYmJyfX08L3NtYWxsPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3RoZWFkPlxcblwiICtcbiAgICBcIiAgPHRib2R5PlxcblwiICtcbiAgICBcIiAgICA8dHIgbmctcmVwZWF0PVxcXCJyb3cgaW4gcm93cyB0cmFjayBieSAkaW5kZXhcXFwiPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1pZj1cXFwic2hvd1dlZWtzXFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXIgaDZcXFwiPjxlbT57eyB3ZWVrTnVtYmVyc1skaW5kZXhdIH19PC9lbT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1yZXBlYXQ9XFxcImR0IGluIHJvdyB0cmFjayBieSBkdC5kYXRlXFxcIiBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIHJvbGU9XFxcImdyaWRjZWxsXFxcIiBpZD1cXFwie3s6OmR0LnVpZH19XFxcIiBuZy1jbGFzcz1cXFwiOjpkdC5jdXN0b21DbGFzc1xcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgc3R5bGU9XFxcIm1pbi13aWR0aDoxMDAlO1xcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIG5nLWNsYXNzPVxcXCJ7J2J0bi1pbmZvJzogZHQuc2VsZWN0ZWQsIGFjdGl2ZTogaXNBY3RpdmUoZHQpfVxcXCIgbmctY2xpY2s9XFxcInNlbGVjdChkdC5kYXRlKVxcXCIgbmctZGlzYWJsZWQ9XFxcImR0LmRpc2FibGVkXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxzcGFuIG5nLWNsYXNzPVxcXCI6OnsndGV4dC1tdXRlZCc6IGR0LnNlY29uZGFyeSwgJ3RleHQtaW5mbyc6IGR0LmN1cnJlbnR9XFxcIj57ezo6ZHQubGFiZWx9fTwvc3Bhbj48L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90Ym9keT5cXG5cIiArXG4gICAgXCI8L3RhYmxlPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL21vbnRoLmh0bWxcIixcbiAgICBcIjx0YWJsZSByb2xlPVxcXCJncmlkXFxcIiBhcmlhLWxhYmVsbGVkYnk9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiBhcmlhLWFjdGl2ZWRlc2NlbmRhbnQ9XFxcInt7YWN0aXZlRGF0ZUlkfX1cXFwiPlxcblwiICtcbiAgICBcIiAgPHRoZWFkPlxcblwiICtcbiAgICBcIiAgICA8dHI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLWxlZnRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKC0xKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWxlZnRcXFwiPjwvaT48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICAgIDx0aD48YnV0dG9uIGlkPVxcXCJ7ezo6dW5pcXVlSWR9fS10aXRsZVxcXCIgcm9sZT1cXFwiaGVhZGluZ1xcXCIgYXJpYS1saXZlPVxcXCJhc3NlcnRpdmVcXFwiIGFyaWEtYXRvbWljPVxcXCJ0cnVlXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtXFxcIiBuZy1jbGljaz1cXFwidG9nZ2xlTW9kZSgpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZGF0ZXBpY2tlck1vZGUgPT09IG1heE1vZGVcXFwiIHRhYmluZGV4PVxcXCItMVxcXCIgc3R5bGU9XFxcIndpZHRoOjEwMCU7XFxcIj48c3Ryb25nPnt7dGl0bGV9fTwvc3Ryb25nPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoPjxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0IGJ0bi1zbSBwdWxsLXJpZ2h0XFxcIiBuZy1jbGljaz1cXFwibW92ZSgxKVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48aSBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXJpZ2h0XFxcIj48L2k+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGhlYWQ+XFxuXCIgK1xuICAgIFwiICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBuZy1yZXBlYXQ9XFxcInJvdyBpbiByb3dzIHRyYWNrIGJ5ICRpbmRleFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXJlcGVhdD1cXFwiZHQgaW4gcm93IHRyYWNrIGJ5IGR0LmRhdGVcXFwiIGNsYXNzPVxcXCJ0ZXh0LWNlbnRlclxcXCIgcm9sZT1cXFwiZ3JpZGNlbGxcXFwiIGlkPVxcXCJ7ezo6ZHQudWlkfX1cXFwiIG5nLWNsYXNzPVxcXCI6OmR0LmN1c3RvbUNsYXNzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBzdHlsZT1cXFwibWluLXdpZHRoOjEwMCU7XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1kZWZhdWx0XFxcIiBuZy1jbGFzcz1cXFwieydidG4taW5mbyc6IGR0LnNlbGVjdGVkLCBhY3RpdmU6IGlzQWN0aXZlKGR0KX1cXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3QoZHQuZGF0ZSlcXFwiIG5nLWRpc2FibGVkPVxcXCJkdC5kaXNhYmxlZFxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIj48c3BhbiBuZy1jbGFzcz1cXFwiOjp7J3RleHQtaW5mbyc6IGR0LmN1cnJlbnR9XFxcIj57ezo6ZHQubGFiZWx9fTwvc3Bhbj48L2J1dHRvbj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90Ym9keT5cXG5cIiArXG4gICAgXCI8L3RhYmxlPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL3BvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL3BvcHVwLmh0bWxcIixcbiAgICBcIjx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudVxcXCIgbmctaWY9XFxcImlzT3BlblxcXCIgc3R5bGU9XFxcImRpc3BsYXk6IGJsb2NrXFxcIiBuZy1zdHlsZT1cXFwie3RvcDogcG9zaXRpb24udG9wKydweCcsIGxlZnQ6IHBvc2l0aW9uLmxlZnQrJ3B4J31cXFwiIG5nLWtleWRvd249XFxcImtleWRvd24oJGV2ZW50KVxcXCIgbmctY2xpY2s9XFxcIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKVxcXCI+XFxuXCIgK1xuICAgIFwiXHQ8bGkgbmctdHJhbnNjbHVkZT48L2xpPlxcblwiICtcbiAgICBcIlx0PGxpIG5nLWlmPVxcXCJzaG93QnV0dG9uQmFyXFxcIiBzdHlsZT1cXFwicGFkZGluZzoxMHB4IDlweCAycHhcXFwiPlxcblwiICtcbiAgICBcIlx0XHQ8c3BhbiBjbGFzcz1cXFwiYnRuLWdyb3VwIHB1bGwtbGVmdFxcXCI+XFxuXCIgK1xuICAgIFwiXHRcdFx0PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1pbmZvXFxcIiBuZy1jbGljaz1cXFwic2VsZWN0KCd0b2RheScpXFxcIiBuZy1kaXNhYmxlZD1cXFwiaXNEaXNhYmxlZCgndG9kYXknKVxcXCI+e3sgZ2V0VGV4dCgnY3VycmVudCcpIH19PC9idXR0b24+XFxuXCIgK1xuICAgIFwiXHRcdFx0PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXNtIGJ0bi1kYW5nZXJcXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3QobnVsbClcXFwiPnt7IGdldFRleHQoJ2NsZWFyJykgfX08L2J1dHRvbj5cXG5cIiArXG4gICAgXCJcdFx0PC9zcGFuPlxcblwiICtcbiAgICBcIlx0XHQ8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tc20gYnRuLXN1Y2Nlc3MgcHVsbC1yaWdodFxcXCIgbmctY2xpY2s9XFxcImNsb3NlKClcXFwiPnt7IGdldFRleHQoJ2Nsb3NlJykgfX08L2J1dHRvbj5cXG5cIiArXG4gICAgXCJcdDwvbGk+XFxuXCIgK1xuICAgIFwiPC91bD5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvZGF0ZXBpY2tlci95ZWFyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9kYXRlcGlja2VyL3llYXIuaHRtbFwiLFxuICAgIFwiPHRhYmxlIHJvbGU9XFxcImdyaWRcXFwiIGFyaWEtbGFiZWxsZWRieT1cXFwie3s6OnVuaXF1ZUlkfX0tdGl0bGVcXFwiIGFyaWEtYWN0aXZlZGVzY2VuZGFudD1cXFwie3thY3RpdmVEYXRlSWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICA8dGhlYWQ+XFxuXCIgK1xuICAgIFwiICAgIDx0cj5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtbGVmdFxcXCIgbmctY2xpY2s9XFxcIm1vdmUoLTEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tbGVmdFxcXCI+PC9pPjwvYnV0dG9uPjwvdGg+XFxuXCIgK1xuICAgIFwiICAgICAgPHRoIGNvbHNwYW49XFxcIjNcXFwiPjxidXR0b24gaWQ9XFxcInt7Ojp1bmlxdWVJZH19LXRpdGxlXFxcIiByb2xlPVxcXCJoZWFkaW5nXFxcIiBhcmlhLWxpdmU9XFxcImFzc2VydGl2ZVxcXCIgYXJpYS1hdG9taWM9XFxcInRydWVcXFwiIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCBidG4tc21cXFwiIG5nLWNsaWNrPVxcXCJ0b2dnbGVNb2RlKClcXFwiIG5nLWRpc2FibGVkPVxcXCJkYXRlcGlja2VyTW9kZSA9PT0gbWF4TW9kZVxcXCIgdGFiaW5kZXg9XFxcIi0xXFxcIiBzdHlsZT1cXFwid2lkdGg6MTAwJTtcXFwiPjxzdHJvbmc+e3t0aXRsZX19PC9zdHJvbmc+PC9idXR0b24+PC90aD5cXG5cIiArXG4gICAgXCIgICAgICA8dGg+PGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLXNtIHB1bGwtcmlnaHRcXFwiIG5nLWNsaWNrPVxcXCJtb3ZlKDEpXFxcIiB0YWJpbmRleD1cXFwiLTFcXFwiPjxpIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tcmlnaHRcXFwiPjwvaT48L2J1dHRvbj48L3RoPlxcblwiICtcbiAgICBcIiAgICA8L3RyPlxcblwiICtcbiAgICBcIiAgPC90aGVhZD5cXG5cIiArXG4gICAgXCIgIDx0Ym9keT5cXG5cIiArXG4gICAgXCIgICAgPHRyIG5nLXJlcGVhdD1cXFwicm93IGluIHJvd3MgdHJhY2sgYnkgJGluZGV4XFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctcmVwZWF0PVxcXCJkdCBpbiByb3cgdHJhY2sgYnkgZHQuZGF0ZVxcXCIgY2xhc3M9XFxcInRleHQtY2VudGVyXFxcIiByb2xlPVxcXCJncmlkY2VsbFxcXCIgaWQ9XFxcInt7OjpkdC51aWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgc3R5bGU9XFxcIm1pbi13aWR0aDoxMDAlO1xcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgbmctY2xhc3M9XFxcInsnYnRuLWluZm8nOiBkdC5zZWxlY3RlZCwgYWN0aXZlOiBpc0FjdGl2ZShkdCl9XFxcIiBuZy1jbGljaz1cXFwic2VsZWN0KGR0LmRhdGUpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZHQuZGlzYWJsZWRcXFwiIHRhYmluZGV4PVxcXCItMVxcXCI+PHNwYW4gbmctY2xhc3M9XFxcIjo6eyd0ZXh0LWluZm8nOiBkdC5jdXJyZW50fVxcXCI+e3s6OmR0LmxhYmVsfX08L3NwYW4+PC9idXR0b24+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgIDwvdGJvZHk+XFxuXCIgK1xuICAgIFwiPC90YWJsZT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvbW9kYWwvYmFja2Ryb3AuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL21vZGFsL2JhY2tkcm9wLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcIm1vZGFsLWJhY2tkcm9wXFxcIlxcblwiICtcbiAgICBcIiAgICAgbW9kYWwtYW5pbWF0aW9uLWNsYXNzPVxcXCJmYWRlXFxcIlxcblwiICtcbiAgICBcIiAgICAgbW9kYWwtaW4tY2xhc3M9XFxcImluXFxcIlxcblwiICtcbiAgICBcIiAgICAgbmctc3R5bGU9XFxcInsnei1pbmRleCc6IDEwNDAgKyAoaW5kZXggJiYgMSB8fCAwKSArIGluZGV4KjEwfVxcXCJcXG5cIiArXG4gICAgXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL21vZGFsL3dpbmRvdy5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvbW9kYWwvd2luZG93Lmh0bWxcIixcbiAgICBcIjxkaXYgbW9kYWwtcmVuZGVyPVxcXCJ7eyRpc1JlbmRlcmVkfX1cXFwiIHRhYmluZGV4PVxcXCItMVxcXCIgcm9sZT1cXFwiZGlhbG9nXFxcIiBjbGFzcz1cXFwibW9kYWxcXFwiXFxuXCIgK1xuICAgIFwiICAgIG1vZGFsLWFuaW1hdGlvbi1jbGFzcz1cXFwiZmFkZVxcXCJcXG5cIiArXG4gICAgXCIgICAgbW9kYWwtaW4tY2xhc3M9XFxcImluXFxcIlxcblwiICtcbiAgICBcIlx0bmctc3R5bGU9XFxcInsnei1pbmRleCc6IDEwNTAgKyBpbmRleCoxMCwgZGlzcGxheTogJ2Jsb2NrJ31cXFwiIG5nLWNsaWNrPVxcXCJjbG9zZSgkZXZlbnQpXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwibW9kYWwtZGlhbG9nXFxcIiBuZy1jbGFzcz1cXFwic2l6ZSA/ICdtb2RhbC0nICsgc2l6ZSA6ICcnXFxcIj48ZGl2IGNsYXNzPVxcXCJtb2RhbC1jb250ZW50XFxcIiBtb2RhbC10cmFuc2NsdWRlPjwvZGl2PjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2VyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9wYWdpbmF0aW9uL3BhZ2VyLmh0bWxcIixcbiAgICBcIjx1bCBjbGFzcz1cXFwicGFnZXJcXFwiPlxcblwiICtcbiAgICBcIiAgPGxpIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vUHJldmlvdXMoKXx8bmdEaXNhYmxlZCwgcHJldmlvdXM6IGFsaWdufVxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlIC0gMSwgJGV2ZW50KVxcXCI+e3s6OmdldFRleHQoJ3ByZXZpb3VzJyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIiAgPGxpIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vTmV4dCgpfHxuZ0Rpc2FibGVkLCBuZXh0OiBhbGlnbn1cXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UocGFnZSArIDEsICRldmVudClcXFwiPnt7OjpnZXRUZXh0KCduZXh0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIjwvdWw+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3BhZ2luYXRpb24vcGFnaW5hdGlvbi5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmh0bWxcIixcbiAgICBcIjx1bCBjbGFzcz1cXFwicGFnaW5hdGlvblxcXCI+XFxuXCIgK1xuICAgIFwiICA8bGkgbmctaWY9XFxcIjo6Ym91bmRhcnlMaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9QcmV2aW91cygpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tZmlyc3RcXFwiPjxhIGhyZWYgbmctY2xpY2s9XFxcInNlbGVjdFBhZ2UoMSwgJGV2ZW50KVxcXCI+e3s6OmdldFRleHQoJ2ZpcnN0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIiAgPGxpIG5nLWlmPVxcXCI6OmRpcmVjdGlvbkxpbmtzXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub1ByZXZpb3VzKCl8fG5nRGlzYWJsZWR9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1wcmV2XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UgLSAxLCAkZXZlbnQpXFxcIj57ezo6Z2V0VGV4dCgncHJldmlvdXMnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiICA8bGkgbmctcmVwZWF0PVxcXCJwYWdlIGluIHBhZ2VzIHRyYWNrIGJ5ICRpbmRleFxcXCIgbmctY2xhc3M9XFxcInthY3RpdmU6IHBhZ2UuYWN0aXZlLGRpc2FibGVkOiBuZ0Rpc2FibGVkJiYhcGFnZS5hY3RpdmV9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1wYWdlXFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHBhZ2UubnVtYmVyLCAkZXZlbnQpXFxcIj57e3BhZ2UudGV4dH19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiICA8bGkgbmctaWY9XFxcIjo6ZGlyZWN0aW9uTGlua3NcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vTmV4dCgpfHxuZ0Rpc2FibGVkfVxcXCIgY2xhc3M9XFxcInBhZ2luYXRpb24tbmV4dFxcXCI+PGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0UGFnZShwYWdlICsgMSwgJGV2ZW50KVxcXCI+e3s6OmdldFRleHQoJ25leHQnKX19PC9hPjwvbGk+XFxuXCIgK1xuICAgIFwiICA8bGkgbmctaWY9XFxcIjo6Ym91bmRhcnlMaW5rc1xcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9OZXh0KCl8fG5nRGlzYWJsZWR9XFxcIiBjbGFzcz1cXFwicGFnaW5hdGlvbi1sYXN0XFxcIj48YSBocmVmIG5nLWNsaWNrPVxcXCJzZWxlY3RQYWdlKHRvdGFsUGFnZXMsICRldmVudClcXFwiPnt7OjpnZXRUZXh0KCdsYXN0Jyl9fTwvYT48L2xpPlxcblwiICtcbiAgICBcIjwvdWw+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC1wb3B1cC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwXFxcIlxcblwiICtcbiAgICBcIiAgdG9vbHRpcC1hbmltYXRpb24tY2xhc3M9XFxcImZhZGVcXFwiXFxuXCIgK1xuICAgIFwiICB0b29sdGlwLWNsYXNzZXNcXG5cIiArXG4gICAgXCIgIG5nLWNsYXNzPVxcXCJ7IGluOiBpc09wZW4oKSB9XFxcIj5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInRvb2x0aXAtYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCIgbmctYmluZC1odG1sPVxcXCJjb250ZW50RXhwKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtaHRtbC11bnNhZmUtcG9wdXAuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1odG1sLXVuc2FmZS1wb3B1cC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwXFxcIlxcblwiICtcbiAgICBcIiAgdG9vbHRpcC1hbmltYXRpb24tY2xhc3M9XFxcImZhZGVcXFwiXFxuXCIgK1xuICAgIFwiICB0b29sdGlwLWNsYXNzZXNcXG5cIiArXG4gICAgXCIgIG5nLWNsYXNzPVxcXCJ7IGluOiBpc09wZW4oKSB9XFxcIj5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInRvb2x0aXAtYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1pbm5lclxcXCIgYmluZC1odG1sLXVuc2FmZT1cXFwiY29udGVudFxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3Rvb2x0aXAvdG9vbHRpcC1wb3B1cC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXBvcHVwLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInRvb2x0aXBcXFwiXFxuXCIgK1xuICAgIFwiICB0b29sdGlwLWFuaW1hdGlvbi1jbGFzcz1cXFwiZmFkZVxcXCJcXG5cIiArXG4gICAgXCIgIHRvb2x0aXAtY2xhc3Nlc1xcblwiICtcbiAgICBcIiAgbmctY2xhc3M9XFxcInsgaW46IGlzT3BlbigpIH1cXFwiPlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwidG9vbHRpcC1hcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwLWlubmVyXFxcIiBuZy1iaW5kPVxcXCJjb250ZW50XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvdG9vbHRpcC90b29sdGlwLXRlbXBsYXRlLXBvcHVwLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS90b29sdGlwL3Rvb2x0aXAtdGVtcGxhdGUtcG9wdXAuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwidG9vbHRpcFxcXCJcXG5cIiArXG4gICAgXCIgIHRvb2x0aXAtYW5pbWF0aW9uLWNsYXNzPVxcXCJmYWRlXFxcIlxcblwiICtcbiAgICBcIiAgdG9vbHRpcC1jbGFzc2VzXFxuXCIgK1xuICAgIFwiICBuZy1jbGFzcz1cXFwieyBpbjogaXNPcGVuKCkgfVxcXCI+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJ0b29sdGlwLWFycm93XFxcIj48L2Rpdj5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInRvb2x0aXAtaW5uZXJcXFwiXFxuXCIgK1xuICAgIFwiICAgIHRvb2x0aXAtdGVtcGxhdGUtdHJhbnNjbHVkZT1cXFwiY29udGVudEV4cCgpXFxcIlxcblwiICtcbiAgICBcIiAgICB0b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGUtc2NvcGU9XFxcIm9yaWdpblNjb3BlKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItaHRtbC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLWh0bWwuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3ZlclxcXCJcXG5cIiArXG4gICAgXCIgIHRvb2x0aXAtYW5pbWF0aW9uLWNsYXNzPVxcXCJmYWRlXFxcIlxcblwiICtcbiAgICBcIiAgdG9vbHRpcC1jbGFzc2VzXFxuXCIgK1xuICAgIFwiICBuZy1jbGFzcz1cXFwieyBpbjogaXNPcGVuKCkgfVxcXCI+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWlubmVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8aDMgY2xhc3M9XFxcInBvcG92ZXItdGl0bGVcXFwiIG5nLWJpbmQ9XFxcInRpdGxlXFxcIiBuZy1pZj1cXFwidGl0bGVcXFwiPjwvaDM+XFxuXCIgK1xuICAgIFwiICAgICAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1jb250ZW50XFxcIiBuZy1iaW5kLWh0bWw9XFxcImNvbnRlbnRFeHAoKVxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiICA8L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLXRlbXBsYXRlLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9wb3BvdmVyL3BvcG92ZXItdGVtcGxhdGUuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwicG9wb3ZlclxcXCJcXG5cIiArXG4gICAgXCIgIHRvb2x0aXAtYW5pbWF0aW9uLWNsYXNzPVxcXCJmYWRlXFxcIlxcblwiICtcbiAgICBcIiAgdG9vbHRpcC1jbGFzc2VzXFxuXCIgK1xuICAgIFwiICBuZy1jbGFzcz1cXFwieyBpbjogaXNPcGVuKCkgfVxcXCI+XFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJhcnJvd1xcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiXFxuXCIgK1xuICAgIFwiICA8ZGl2IGNsYXNzPVxcXCJwb3BvdmVyLWlubmVyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8aDMgY2xhc3M9XFxcInBvcG92ZXItdGl0bGVcXFwiIG5nLWJpbmQ9XFxcInRpdGxlXFxcIiBuZy1pZj1cXFwidGl0bGVcXFwiPjwvaDM+XFxuXCIgK1xuICAgIFwiICAgICAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1jb250ZW50XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgdG9vbHRpcC10ZW1wbGF0ZS10cmFuc2NsdWRlPVxcXCJjb250ZW50RXhwKClcXFwiXFxuXCIgK1xuICAgIFwiICAgICAgICB0b29sdGlwLXRlbXBsYXRlLXRyYW5zY2x1ZGUtc2NvcGU9XFxcIm9yaWdpblNjb3BlKClcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIiAgPC9kaXY+XFxuXCIgK1xuICAgIFwiPC9kaXY+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3BvcG92ZXIvcG9wb3Zlci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcG9wb3Zlci9wb3BvdmVyLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInBvcG92ZXJcXFwiXFxuXCIgK1xuICAgIFwiICB0b29sdGlwLWFuaW1hdGlvbi1jbGFzcz1cXFwiZmFkZVxcXCJcXG5cIiArXG4gICAgXCIgIHRvb2x0aXAtY2xhc3Nlc1xcblwiICtcbiAgICBcIiAgbmctY2xhc3M9XFxcInsgaW46IGlzT3BlbigpIH1cXFwiPlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwiYXJyb3dcXFwiPjwvZGl2PlxcblwiICtcbiAgICBcIlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwicG9wb3Zlci1pbm5lclxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPGgzIGNsYXNzPVxcXCJwb3BvdmVyLXRpdGxlXFxcIiBuZy1iaW5kPVxcXCJ0aXRsZVxcXCIgbmctaWY9XFxcInRpdGxlXFxcIj48L2gzPlxcblwiICtcbiAgICBcIiAgICAgIDxkaXYgY2xhc3M9XFxcInBvcG92ZXItY29udGVudFxcXCIgbmctYmluZD1cXFwiY29udGVudFxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiICA8L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcHJvZ3Jlc3NiYXIvYmFyLmh0bWxcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9iYXIuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtYmFyXFxcIiBuZy1jbGFzcz1cXFwidHlwZSAmJiAncHJvZ3Jlc3MtYmFyLScgKyB0eXBlXFxcIiByb2xlPVxcXCJwcm9ncmVzc2JhclxcXCIgYXJpYS12YWx1ZW5vdz1cXFwie3t2YWx1ZX19XFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCJ7e21heH19XFxcIiBuZy1zdHlsZT1cXFwie3dpZHRoOiAocGVyY2VudCA8IDEwMCA/IHBlcmNlbnQgOiAxMDApICsgJyUnfVxcXCIgYXJpYS12YWx1ZXRleHQ9XFxcInt7cGVyY2VudCB8IG51bWJlcjowfX0lXFxcIiBzdHlsZT1cXFwibWluLXdpZHRoOiAwO1xcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3MuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3Byb2dyZXNzYmFyL3Byb2dyZXNzLmh0bWxcIixcbiAgICBcIjxkaXYgY2xhc3M9XFxcInByb2dyZXNzXFxcIiBuZy10cmFuc2NsdWRlPjwvZGl2PlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS9wcm9ncmVzc2Jhci9wcm9ncmVzc2Jhci5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcHJvZ3Jlc3NiYXIvcHJvZ3Jlc3NiYXIuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3NcXFwiPlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwicHJvZ3Jlc3MtYmFyXFxcIiBuZy1jbGFzcz1cXFwidHlwZSAmJiAncHJvZ3Jlc3MtYmFyLScgKyB0eXBlXFxcIiByb2xlPVxcXCJwcm9ncmVzc2JhclxcXCIgYXJpYS12YWx1ZW5vdz1cXFwie3t2YWx1ZX19XFxcIiBhcmlhLXZhbHVlbWluPVxcXCIwXFxcIiBhcmlhLXZhbHVlbWF4PVxcXCJ7e21heH19XFxcIiBuZy1zdHlsZT1cXFwie3dpZHRoOiAocGVyY2VudCA8IDEwMCA/IHBlcmNlbnQgOiAxMDApICsgJyUnfVxcXCIgYXJpYS12YWx1ZXRleHQ9XFxcInt7cGVyY2VudCB8IG51bWJlcjowfX0lXFxcIiBzdHlsZT1cXFwibWluLXdpZHRoOiAwO1xcXCIgbmctdHJhbnNjbHVkZT48L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvcmF0aW5nL3JhdGluZy5odG1sXCIsXG4gICAgXCI8c3BhbiBuZy1tb3VzZWxlYXZlPVxcXCJyZXNldCgpXFxcIiBuZy1rZXlkb3duPVxcXCJvbktleWRvd24oJGV2ZW50KVxcXCIgdGFiaW5kZXg9XFxcIjBcXFwiIHJvbGU9XFxcInNsaWRlclxcXCIgYXJpYS12YWx1ZW1pbj1cXFwiMFxcXCIgYXJpYS12YWx1ZW1heD1cXFwie3tyYW5nZS5sZW5ndGh9fVxcXCIgYXJpYS12YWx1ZW5vdz1cXFwie3t2YWx1ZX19XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPHNwYW4gbmctcmVwZWF0LXN0YXJ0PVxcXCJyIGluIHJhbmdlIHRyYWNrIGJ5ICRpbmRleFxcXCIgY2xhc3M9XFxcInNyLW9ubHlcXFwiPih7eyAkaW5kZXggPCB2YWx1ZSA/ICcqJyA6ICcgJyB9fSk8L3NwYW4+XFxuXCIgK1xuICAgIFwiICAgIDxpIG5nLXJlcGVhdC1lbmQgbmctbW91c2VlbnRlcj1cXFwiZW50ZXIoJGluZGV4ICsgMSlcXFwiIG5nLWNsaWNrPVxcXCJyYXRlKCRpbmRleCArIDEpXFxcIiBjbGFzcz1cXFwiZ2x5cGhpY29uXFxcIiBuZy1jbGFzcz1cXFwiJGluZGV4IDwgdmFsdWUgJiYgKHIuc3RhdGVPbiB8fCAnZ2x5cGhpY29uLXN0YXInKSB8fCAoci5zdGF0ZU9mZiB8fCAnZ2x5cGhpY29uLXN0YXItZW1wdHknKVxcXCIgbmctYXR0ci10aXRsZT1cXFwie3tyLnRpdGxlfX1cXFwiID48L2k+XFxuXCIgK1xuICAgIFwiPC9zcGFuPlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90YWJzL3RhYi5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvdGFicy90YWIuaHRtbFwiLFxuICAgIFwiPGxpIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiBhY3RpdmUsIGRpc2FibGVkOiBkaXNhYmxlZH1cXFwiPlxcblwiICtcbiAgICBcIiAgPGEgaHJlZiBuZy1jbGljaz1cXFwic2VsZWN0KClcXFwiIHRhYi1oZWFkaW5nLXRyYW5zY2x1ZGU+e3toZWFkaW5nfX08L2E+XFxuXCIgK1xuICAgIFwiPC9saT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvdGFicy90YWJzZXQuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3RhYnMvdGFic2V0Lmh0bWxcIixcbiAgICBcIjxkaXY+XFxuXCIgK1xuICAgIFwiICA8dWwgY2xhc3M9XFxcIm5hdiBuYXYte3t0eXBlIHx8ICd0YWJzJ319XFxcIiBuZy1jbGFzcz1cXFwieyduYXYtc3RhY2tlZCc6IHZlcnRpY2FsLCAnbmF2LWp1c3RpZmllZCc6IGp1c3RpZmllZH1cXFwiIG5nLXRyYW5zY2x1ZGU+PC91bD5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcInRhYi1jb250ZW50XFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwidGFiLXBhbmVcXFwiIFxcblwiICtcbiAgICBcIiAgICAgICAgIG5nLXJlcGVhdD1cXFwidGFiIGluIHRhYnNcXFwiIFxcblwiICtcbiAgICBcIiAgICAgICAgIG5nLWNsYXNzPVxcXCJ7YWN0aXZlOiB0YWIuYWN0aXZlfVxcXCJcXG5cIiArXG4gICAgXCIgICAgICAgICB0YWItY29udGVudC10cmFuc2NsdWRlPVxcXCJ0YWJcXFwiPlxcblwiICtcbiAgICBcIiAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgIDwvZGl2PlxcblwiICtcbiAgICBcIjwvZGl2PlxcblwiICtcbiAgICBcIlwiKTtcbn1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJ0ZW1wbGF0ZS90aW1lcGlja2VyL3RpbWVwaWNrZXIuaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3RpbWVwaWNrZXIvdGltZXBpY2tlci5odG1sXCIsXG4gICAgXCI8dGFibGU+XFxuXCIgK1xuICAgIFwiICA8dGJvZHk+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIG5nLXNob3c9XFxcIjo6c2hvd1NwaW5uZXJzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQ+PGEgbmctY2xpY2s9XFxcImluY3JlbWVudEhvdXJzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vSW5jcmVtZW50SG91cnMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXBcXFwiPjwvc3Bhbj48L2E+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQ+Jm5ic3A7PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQ+PGEgbmctY2xpY2s9XFxcImluY3JlbWVudE1pbnV0ZXMoKVxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9JbmNyZW1lbnRNaW51dGVzKCl9XFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1saW5rXFxcIj48c3BhbiBjbGFzcz1cXFwiZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwXFxcIj48L3NwYW4+PC9hPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgICAgPHRkIG5nLXNob3c9XFxcInNob3dNZXJpZGlhblxcXCI+PC90ZD5cXG5cIiArXG4gICAgXCIgICAgPC90cj5cXG5cIiArXG4gICAgXCIgICAgPHRyPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCIgbmctY2xhc3M9XFxcInsnaGFzLWVycm9yJzogaW52YWxpZEhvdXJzfVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8aW5wdXQgc3R5bGU9XFxcIndpZHRoOjUwcHg7XFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuZy1tb2RlbD1cXFwiaG91cnNcXFwiIG5nLWNoYW5nZT1cXFwidXBkYXRlSG91cnMoKVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbCB0ZXh0LWNlbnRlclxcXCIgbmctcmVhZG9ubHk9XFxcIjo6cmVhZG9ubHlJbnB1dFxcXCIgbWF4bGVuZ3RoPVxcXCIyXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZD46PC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiIG5nLWNsYXNzPVxcXCJ7J2hhcy1lcnJvcic6IGludmFsaWRNaW51dGVzfVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8aW5wdXQgc3R5bGU9XFxcIndpZHRoOjUwcHg7XFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBuZy1tb2RlbD1cXFwibWludXRlc1xcXCIgbmctY2hhbmdlPVxcXCJ1cGRhdGVNaW51dGVzKClcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdGV4dC1jZW50ZXJcXFwiIG5nLXJlYWRvbmx5PVxcXCI6OnJlYWRvbmx5SW5wdXRcXFwiIG1heGxlbmd0aD1cXFwiMlxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPC90ZD5cXG5cIiArXG4gICAgXCIgICAgICA8dGQgbmctc2hvdz1cXFwic2hvd01lcmlkaWFuXFxcIj48YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgbmctY2xhc3M9XFxcIntkaXNhYmxlZDogbm9Ub2dnbGVNZXJpZGlhbigpfVxcXCIgY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdCB0ZXh0LWNlbnRlclxcXCIgbmctY2xpY2s9XFxcInRvZ2dsZU1lcmlkaWFuKClcXFwiPnt7bWVyaWRpYW59fTwvYnV0dG9uPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICAgIDx0ciBjbGFzcz1cXFwidGV4dC1jZW50ZXJcXFwiIG5nLXNob3c9XFxcIjo6c2hvd1NwaW5uZXJzXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8dGQ+PGEgbmctY2xpY2s9XFxcImRlY3JlbWVudEhvdXJzKClcXFwiIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6IG5vRGVjcmVtZW50SG91cnMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZD4mbmJzcDs8L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZD48YSBuZy1jbGljaz1cXFwiZGVjcmVtZW50TWludXRlcygpXFxcIiBuZy1jbGFzcz1cXFwie2Rpc2FibGVkOiBub0RlY3JlbWVudE1pbnV0ZXMoKX1cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWxpbmtcXFwiPjxzcGFuIGNsYXNzPVxcXCJnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93blxcXCI+PC9zcGFuPjwvYT48L3RkPlxcblwiICtcbiAgICBcIiAgICAgIDx0ZCBuZy1zaG93PVxcXCJzaG93TWVyaWRpYW5cXFwiPjwvdGQ+XFxuXCIgK1xuICAgIFwiICAgIDwvdHI+XFxuXCIgK1xuICAgIFwiICA8L3Rib2R5PlxcblwiICtcbiAgICBcIjwvdGFibGU+XFxuXCIgK1xuICAgIFwiXCIpO1xufV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInRlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcInRlbXBsYXRlL3R5cGVhaGVhZC90eXBlYWhlYWQtbWF0Y2guaHRtbFwiLFxuICAgIFwiPGEgaHJlZiB0YWJpbmRleD1cXFwiLTFcXFwiIG5nLWJpbmQtaHRtbD1cXFwibWF0Y2gubGFiZWwgfCB0eXBlYWhlYWRIaWdobGlnaHQ6cXVlcnlcXFwiPjwvYT5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwidGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsIFtdKS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwidGVtcGxhdGUvdHlwZWFoZWFkL3R5cGVhaGVhZC1wb3B1cC5odG1sXCIsXG4gICAgXCI8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnVcXFwiIG5nLXNob3c9XFxcImlzT3BlbigpICYmICFtb3ZlSW5Qcm9ncmVzc1xcXCIgbmctc3R5bGU9XFxcInt0b3A6IHBvc2l0aW9uKCkudG9wKydweCcsIGxlZnQ6IHBvc2l0aW9uKCkubGVmdCsncHgnfVxcXCIgc3R5bGU9XFxcImRpc3BsYXk6IGJsb2NrO1xcXCIgcm9sZT1cXFwibGlzdGJveFxcXCIgYXJpYS1oaWRkZW49XFxcInt7IWlzT3BlbigpfX1cXFwiPlxcblwiICtcbiAgICBcIiAgICA8bGkgbmctcmVwZWF0PVxcXCJtYXRjaCBpbiBtYXRjaGVzIHRyYWNrIGJ5ICRpbmRleFxcXCIgbmctY2xhc3M9XFxcInthY3RpdmU6IGlzQWN0aXZlKCRpbmRleCkgfVxcXCIgbmctbW91c2VlbnRlcj1cXFwic2VsZWN0QWN0aXZlKCRpbmRleClcXFwiIG5nLWNsaWNrPVxcXCJzZWxlY3RNYXRjaCgkaW5kZXgpXFxcIiByb2xlPVxcXCJvcHRpb25cXFwiIGlkPVxcXCJ7ezo6bWF0Y2guaWR9fVxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgICA8ZGl2IHR5cGVhaGVhZC1tYXRjaCBpbmRleD1cXFwiJGluZGV4XFxcIiBtYXRjaD1cXFwibWF0Y2hcXFwiIHF1ZXJ5PVxcXCJxdWVyeVxcXCIgdGVtcGxhdGUtdXJsPVxcXCJ0ZW1wbGF0ZVVybFxcXCI+PC9kaXY+XFxuXCIgK1xuICAgIFwiICAgIDwvbGk+XFxuXCIgK1xuICAgIFwiPC91bD5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG4hYW5ndWxhci4kJGNzcCgpICYmIGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCgnaGVhZCcpLnByZXBlbmQoJzxzdHlsZSB0eXBlPVwidGV4dC9jc3NcIj4ubmctYW5pbWF0ZS5pdGVtOm5vdCgubGVmdCk6bm90KC5yaWdodCl7LXdlYmtpdC10cmFuc2l0aW9uOjBzIGVhc2UtaW4tb3V0IGxlZnQ7dHJhbnNpdGlvbjowcyBlYXNlLWluLW91dCBsZWZ0fTwvc3R5bGU+Jyk7XG4vKiBhbmd1bGFyLWxvYWQuanMgLyB2MC40LjEgLyAoYykgMjAxNCwgMjAxNSwgMjAxNiBVcmkgU2hha2VkIC8gTUlUIExpY2VuY2UgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdGFuZ3VsYXIubW9kdWxlKCdhbmd1bGFyTG9hZCcsIFtdKVxuXHRcdC5zZXJ2aWNlKCdhbmd1bGFyTG9hZCcsIFsnJGRvY3VtZW50JywgJyRxJywgJyR0aW1lb3V0JywgZnVuY3Rpb24gKCRkb2N1bWVudCwgJHEsICR0aW1lb3V0KSB7XG5cdFx0XHR2YXIgZG9jdW1lbnQgPSAkZG9jdW1lbnRbMF07XG5cblx0XHRcdGZ1bmN0aW9uIGxvYWRlcihjcmVhdGVFbGVtZW50KSB7XG5cdFx0XHRcdHZhciBwcm9taXNlcyA9IHt9O1xuXG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbih1cmwpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIHByb21pc2VzW3VybF0gPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdFx0XHR2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXHRcdFx0XHRcdFx0dmFyIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50KHVybCk7XG5cblx0XHRcdFx0XHRcdGVsZW1lbnQub25sb2FkID0gZWxlbWVudC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRcdFx0XHRpZiAoZWxlbWVudC5yZWFkeVN0YXRlICYmIGVsZW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2NvbXBsZXRlJyAmJiBlbGVtZW50LnJlYWR5U3RhdGUgIT09ICdsb2FkZWQnKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0JHRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUoZSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdGVsZW1lbnQub25lcnJvciA9IGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdFx0XHRcdCR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZSk7XG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0cHJvbWlzZXNbdXJsXSA9IGRlZmVycmVkLnByb21pc2U7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2VzW3VybF07XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogRHluYW1pY2FsbHkgbG9hZHMgdGhlIGdpdmVuIHNjcmlwdFxuXHRcdFx0ICogQHBhcmFtIHNyYyBUaGUgdXJsIG9mIHRoZSBzY3JpcHQgdG8gbG9hZCBkeW5hbWljYWxseVxuXHRcdFx0ICogQHJldHVybnMgeyp9IFByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIG9uY2UgdGhlIHNjcmlwdCBoYXMgYmVlbiBsb2FkZWQuXG5cdFx0XHQgKi9cblx0XHRcdHRoaXMubG9hZFNjcmlwdCA9IGxvYWRlcihmdW5jdGlvbiAoc3JjKSB7XG5cdFx0XHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdFx0XHRzY3JpcHQuc3JjID0gc3JjO1xuXG5cdFx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblx0XHRcdFx0cmV0dXJuIHNjcmlwdDtcblx0XHRcdH0pO1xuXG5cdFx0XHQvKipcblx0XHRcdCAqIER5bmFtaWNhbGx5IGxvYWRzIHRoZSBnaXZlbiBDU1MgZmlsZVxuXHRcdFx0ICogQHBhcmFtIGhyZWYgVGhlIHVybCBvZiB0aGUgQ1NTIHRvIGxvYWQgZHluYW1pY2FsbHlcblx0XHRcdCAqIEByZXR1cm5zIHsqfSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBvbmNlIHRoZSBDU1MgZmlsZSBoYXMgYmVlbiBsb2FkZWQuXG5cdFx0XHQgKi9cblx0XHRcdHRoaXMubG9hZENTUyA9IGxvYWRlcihmdW5jdGlvbiAoaHJlZikge1xuXHRcdFx0XHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG5cblx0XHRcdFx0c3R5bGUucmVsID0gJ3N0eWxlc2hlZXQnO1xuXHRcdFx0XHRzdHlsZS50eXBlID0gJ3RleHQvY3NzJztcblx0XHRcdFx0c3R5bGUuaHJlZiA9IGhyZWY7XG5cblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0XHRcdHJldHVybiBzdHlsZTtcblx0XHRcdH0pO1xuXHRcdH1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi53aWRnZXQuY29tbW9uLnRvb2x0aXBcIiwgW1widWkuYm9vdHN0cmFwXCJdKVxuICAgIC5kaXJlY3RpdmUoXCJydlRvb2x0aXBcIiwgW2Z1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiBcIkFcIixcbiAgICAgICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImZhXCIpO1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoXCJmYS1xdWVzdGlvbi1jaXJjbGVcIik7XG4gICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyhcImZhLWxnXCIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dKTtcbn0oKSk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi53aWRnZXQuY29tbW9uLnNjcm9sbC1zZXR0aW5nXCIsXG4gICAgW1wicmlzZXZpc2lvbi5jb21tb24uaTE4blwiLCBcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vbi50b29sdGlwXCJdKVxuICAgIC5kaXJlY3RpdmUoXCJzY3JvbGxTZXR0aW5nXCIsIFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uICgkdGVtcGxhdGVDYWNoZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgIHNjcm9sbDogXCI9XCJcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcIl9hbmd1bGFyL3Njcm9sbC1zZXR0aW5nL3Njcm9sbC1zZXR0aW5nLmh0bWxcIiksXG4gICAgICAgIHRyYW5zY2x1ZGU6IGZhbHNlLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZGVmYXVsdFNldHRpbmcgPSB7XG4gICAgICAgICAgICBieTogXCJub25lXCIsXG4gICAgICAgICAgICBzcGVlZDogXCJtZWRpdW1cIixcbiAgICAgICAgICAgIHBhdXNlOiA1LFxuICAgICAgICAgICAgcHVkOiAxMFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICAkc2NvcGUuZGVmYXVsdHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmopIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKG9ialtwcm9wXSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvYmo7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgICRzY29wZS4kd2F0Y2goXCJzY3JvbGxcIiwgZnVuY3Rpb24oc2Nyb2xsKSB7XG4gICAgICAgICAgICAkc2NvcGUuZGVmYXVsdHMoc2Nyb2xsLCAkc2NvcGUuZGVmYXVsdFNldHRpbmcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1dKTtcbn0oKSk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7IG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi53aWRnZXQuY29tbW9uLnNjcm9sbC1zZXR0aW5nXCIpOyB9XG5jYXRjaChlcnIpIHsgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLndpZGdldC5jb21tb24uc2Nyb2xsLXNldHRpbmdcIiwgW10pOyB9XG5tb2R1bGUucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoXCJfYW5ndWxhci9zY3JvbGwtc2V0dGluZy9zY3JvbGwtc2V0dGluZy5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTNcXFwiPlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7XFxcInNjcm9sbC5oZWFkaW5nXFxcIiB8IHRyYW5zbGF0ZX19PC9sYWJlbD5cXG5cIiArXG4gICAgXCIgICAgICA8c2VsZWN0IGlkPVxcXCJzY3JvbGwtYnlcXFwiIG5nLW1vZGVsPVxcXCJzY3JvbGwuYnlcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwibm9uZVxcXCI+e3snc2Nyb2xsLmJ5Lm5vbmUnIHwgdHJhbnNsYXRlfX08L29wdGlvbj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcImNvbnRpbnVvdXNcXFwiPnt7J3Njcm9sbC5ieS5jb250aW51b3VzJyB8IHRyYW5zbGF0ZX19PC9vcHRpb24+XFxuXCIgK1xuICAgIFwiICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCJwYWdlXFxcIj57eydzY3JvbGwuYnkucGFnZScgfCB0cmFuc2xhdGV9fTwvb3B0aW9uPlxcblwiICtcbiAgICBcIiAgICAgIDwvc2VsZWN0PlxcblwiICtcbiAgICBcIiAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTNcXFwiIG5nLXNob3c9XFxcInNjcm9sbC5ieSAhPSAnbm9uZSdcXFwiPlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7J3Njcm9sbC5zcGVlZC5sYWJlbCcgfCB0cmFuc2xhdGV9fTwvbGFiZWw+XFxuXCIgK1xuICAgIFwiICAgICAgPHNlbGVjdCBpZD1cXFwic2Nyb2xsLXNwZWVkXFxcIiBuZy1tb2RlbD1cXFwic2Nyb2xsLnNwZWVkXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxvcHRpb24gdmFsdWU9XFxcInNsb3dlc3RcXFwiPnt7J3Njcm9sbC5zcGVlZC5zbG93ZXN0JyB8IHRyYW5zbGF0ZX19PC9vcHRpb24+XFxuXCIgK1xuICAgIFwiICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCJzbG93XFxcIj57eydzY3JvbGwuc3BlZWQuc2xvdycgfCB0cmFuc2xhdGV9fTwvb3B0aW9uPlxcblwiICtcbiAgICBcIiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwibWVkaXVtXFxcIj57eydzY3JvbGwuc3BlZWQubWVkaXVtJyB8IHRyYW5zbGF0ZX19PC9vcHRpb24+XFxuXCIgK1xuICAgIFwiICAgICAgICA8b3B0aW9uIHZhbHVlPVxcXCJmYXN0XFxcIj57eydzY3JvbGwuc3BlZWQuZmFzdCcgfCB0cmFuc2xhdGV9fTwvb3B0aW9uPlxcblwiICtcbiAgICBcIiAgICAgICAgPG9wdGlvbiB2YWx1ZT1cXFwiZmFzdGVzdFxcXCI+e3snc2Nyb2xsLnNwZWVkLmZhc3Rlc3QnIHwgdHJhbnNsYXRlfX08L29wdGlvbj5cXG5cIiArXG4gICAgXCIgICAgICA8L3NlbGVjdD5cXG5cIiArXG4gICAgXCIgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcImNvbC1tZC0zXFxcIiBuZy1zaG93PVxcXCJzY3JvbGwuYnkgIT0gJ25vbmUnXFxcIj5cXG5cIiArXG4gICAgXCIgICAgPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+XFxuXCIgK1xuICAgIFwiICAgICAgPGxhYmVsIGNsYXNzPVxcXCJjb250cm9sLWxhYmVsXFxcIj57eydzY3JvbGwucGF1c2UubGFiZWwnIHwgdHJhbnNsYXRlfX08L2xhYmVsPlxcblwiICtcbiAgICBcIiAgICAgIDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICAgIDxpbnB1dCBpZD1cXFwic2Nyb2xsLXBhdXNlXFxcIiB0eXBlPVxcXCJudW1iZXJcXFwiIG5nLW1vZGVsPVxcXCJzY3JvbGwucGF1c2VcXFwiIGNsYXNzPVxcXCJmb3JtLWNvbnRyb2xcXFwiIC8+XFxuXCIgK1xuICAgIFwiICAgICAgICA8c3BhbiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAtYWRkb25cXFwiPnt7J2NvbW1vbi51bml0cy5zZWNvbmRzJyB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcblwiICtcbiAgICBcIiAgICAgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgIDwvZGl2PlxcblwiICtcbiAgICBcIiAgPGRpdiBjbGFzcz1cXFwiY29sLW1kLTNcXFwiIG5nLXNob3c9XFxcInNjcm9sbC5ieSAhPSAnbm9uZSdcXFwiPlxcblwiICtcbiAgICBcIiAgICA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj5cXG5cIiArXG4gICAgXCIgICAgICA8bGFiZWwgY2xhc3M9XFxcImNvbnRyb2wtbGFiZWxcXFwiPnt7J3Njcm9sbC5wdWQubGFiZWwnIHwgdHJhbnNsYXRlfX08L2xhYmVsPlxcblwiICtcbiAgICBcIiAgICAgIDxzcGFuIHBvcG92ZXI9XFxcInt7J3Njcm9sbC5wdWQudG9vbHRpcCcgfCB0cmFuc2xhdGV9fVxcXCIgcG9wb3Zlci10cmlnZ2VyPVxcXCJjbGlja1xcXCJcXG5cIiArXG4gICAgXCIgICAgICAgIHBvcG92ZXItcGxhY2VtZW50PVxcXCJyaWdodFxcXCIgcnYtdG9vbHRpcD48L3NwYW4+XFxuXCIgK1xuICAgIFwiICAgICAgPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPlxcblwiICtcbiAgICBcIiAgICAgICAgPGlucHV0IGlkPVxcXCJzY3JvbGwtcHVkXFxcIiB0eXBlPVxcXCJudW1iZXJcXFwiIG5nLW1vZGVsPVxcXCJzY3JvbGwucHVkXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIiAvPlxcblwiICtcbiAgICBcIiAgICAgICAgPHNwYW4gY2xhc3M9XFxcImlucHV0LWdyb3VwLWFkZG9uXFxcIj57eydjb21tb24udW5pdHMuc2Vjb25kcycgfCB0cmFuc2xhdGV9fTwvc3Bhbj5cXG5cIiArXG4gICAgXCIgICAgICA8L2Rpdj5cXG5cIiArXG4gICAgXCIgICAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICA8L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG59KSgpO1xuXG4vKipcbiAqIEJpbmRzIGEgVGlueU1DRSB3aWRnZXQgdG8gPHRleHRhcmVhPiBlbGVtZW50cy5cbiAqL1xuYW5ndWxhci5tb2R1bGUoJ3VpLnRpbnltY2UnLCBbXSlcbiAgLnZhbHVlKCd1aVRpbnltY2VDb25maWcnLCB7fSlcbiAgLmRpcmVjdGl2ZSgndWlUaW55bWNlJywgWyckcm9vdFNjb3BlJywgJyRjb21waWxlJywgJyR0aW1lb3V0JywgJyR3aW5kb3cnLCAnJHNjZScsICd1aVRpbnltY2VDb25maWcnLCBmdW5jdGlvbigkcm9vdFNjb3BlLCAkY29tcGlsZSwgJHRpbWVvdXQsICR3aW5kb3csICRzY2UsIHVpVGlueW1jZUNvbmZpZykge1xuICAgIHVpVGlueW1jZUNvbmZpZyA9IHVpVGlueW1jZUNvbmZpZyB8fCB7fTtcbiAgICB2YXIgZ2VuZXJhdGVkSWRzID0gMDtcbiAgICB2YXIgSURfQVRUUiA9ICd1aS10aW55bWNlJztcbiAgICBpZiAodWlUaW55bWNlQ29uZmlnLmJhc2VVcmwpIHtcbiAgICAgIHRpbnltY2UuYmFzZVVSTCA9IHVpVGlueW1jZUNvbmZpZy5iYXNlVXJsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnXj9mb3JtJ10sXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICAgIGlmICghJHdpbmRvdy50aW55bWNlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5nTW9kZWwgPSBjdHJsc1swXSxcbiAgICAgICAgICBmb3JtID0gY3RybHNbMV0gfHwgbnVsbDtcblxuICAgICAgICB2YXIgZXhwcmVzc2lvbiwgb3B0aW9ucyA9IHt9LCB0aW55SW5zdGFuY2UsXG4gICAgICAgICAgdXBkYXRlVmlldyA9IGZ1bmN0aW9uKGVkaXRvcikge1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBlZGl0b3IuZ2V0Q29udGVudCh7Zm9ybWF0OiBvcHRpb25zLmZvcm1hdH0pLnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnRlbnQgPSAkc2NlLnRydXN0QXNIdG1sKGNvbnRlbnQpO1xuXG4gICAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoY29udGVudCk7XG4gICAgICAgICAgICBpZiAoISRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHRvZ2dsZURpc2FibGUoZGlzYWJsZWQpIHtcbiAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGVuc3VyZUluc3RhbmNlKCk7XG5cbiAgICAgICAgICAgIGlmICh0aW55SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgdGlueUluc3RhbmNlLmdldEJvZHkoKS5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW5zdXJlSW5zdGFuY2UoKTtcblxuICAgICAgICAgICAgaWYgKHRpbnlJbnN0YW5jZSAmJiAhdGlueUluc3RhbmNlLnNldHRpbmdzLnJlYWRvbmx5KSB7XG4gICAgICAgICAgICAgIHRpbnlJbnN0YW5jZS5nZXRCb2R5KCkuc2V0QXR0cmlidXRlKCdjb250ZW50ZWRpdGFibGUnLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBnZW5lcmF0ZSBhbiBJRFxuICAgICAgICBhdHRycy4kc2V0KCdpZCcsIElEX0FUVFIgKyAnLScgKyBnZW5lcmF0ZWRJZHMrKyk7XG5cbiAgICAgICAgZXhwcmVzc2lvbiA9IHt9O1xuXG4gICAgICAgIGFuZ3VsYXIuZXh0ZW5kKGV4cHJlc3Npb24sIHNjb3BlLiRldmFsKGF0dHJzLnVpVGlueW1jZSkpO1xuXG4gICAgICAgIHZhciBzZXR1cE9wdGlvbnMgPSB7XG4gICAgICAgICAgLy8gVXBkYXRlIG1vZGVsIHdoZW4gY2FsbGluZyBzZXRDb250ZW50XG4gICAgICAgICAgLy8gKHN1Y2ggYXMgZnJvbSB0aGUgc291cmNlIGVkaXRvciBwb3B1cClcbiAgICAgICAgICBzZXR1cDogZnVuY3Rpb24oZWQpIHtcbiAgICAgICAgICAgIGVkLm9uKCdpbml0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIG5nTW9kZWwuJHJlbmRlcigpO1xuICAgICAgICAgICAgICBuZ01vZGVsLiRzZXRQcmlzdGluZSgpO1xuICAgICAgICAgICAgICBpZiAoZm9ybSkge1xuICAgICAgICAgICAgICAgIGZvcm0uJHNldFByaXN0aW5lKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgbW9kZWwgb24gYnV0dG9uIGNsaWNrXG4gICAgICAgICAgICBlZC5vbignRXhlY0NvbW1hbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZWQuc2F2ZSgpO1xuICAgICAgICAgICAgICB1cGRhdGVWaWV3KGVkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgbW9kZWwgb24gY2hhbmdlXG4gICAgICAgICAgICBlZC5vbignY2hhbmdlIE5vZGVDaGFuZ2UnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZWQuc2F2ZSgpO1xuICAgICAgICAgICAgICB1cGRhdGVWaWV3KGVkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBlZC5vbignYmx1cicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBlbGVtZW50WzBdLmJsdXIoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgbW9kZWwgd2hlbiBhbiBvYmplY3QgaGFzIGJlZW4gcmVzaXplZCAodGFibGUsIGltYWdlKVxuICAgICAgICAgICAgZWQub24oJ09iamVjdFJlc2l6ZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgZWQuc2F2ZSgpO1xuICAgICAgICAgICAgICB1cGRhdGVWaWV3KGVkKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBlZC5vbigncmVtb3ZlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGV4cHJlc3Npb24uc2V0dXApIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbi5zZXR1cChlZCwge1xuICAgICAgICAgICAgICAgIHVwZGF0ZVZpZXc6IHVwZGF0ZVZpZXdcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmb3JtYXQ6IGV4cHJlc3Npb24uZm9ybWF0IHx8ICdodG1sJyxcbiAgICAgICAgICBzZWxlY3RvcjogJyMnICsgYXR0cnMuaWRcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXh0ZW5kIG9wdGlvbnMgd2l0aCBpbml0aWFsIHVpVGlueW1jZUNvbmZpZyBhbmRcbiAgICAgICAgLy8gb3B0aW9ucyBmcm9tIGRpcmVjdGl2ZSBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgICAgYW5ndWxhci5leHRlbmQob3B0aW9ucywgdWlUaW55bWNlQ29uZmlnLCBleHByZXNzaW9uLCBzZXR1cE9wdGlvbnMpO1xuICAgICAgICAvLyBXcmFwcGVkIGluICR0aW1lb3V0IGR1ZSB0byAkdGlueW1jZTpyZWZyZXNoIGltcGxlbWVudGF0aW9uLCByZXF1aXJlc1xuICAgICAgICAvLyBlbGVtZW50IHRvIGJlIHByZXNlbnQgaW4gRE9NIGJlZm9yZSBpbnN0YW50aWF0aW5nIGVkaXRvciB3aGVuXG4gICAgICAgIC8vIHJlLXJlbmRlcmluZyBkaXJlY3RpdmVcbiAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMuYmFzZVVSTCl7XG4gICAgICAgICAgICB0aW55bWNlLmJhc2VVUkwgPSBvcHRpb25zLmJhc2VVUkw7ICAgICAgICAgICAgXG4gICAgICAgICAgfVxuICAgICAgICAgIHRpbnltY2UuaW5pdChvcHRpb25zKTtcbiAgICAgICAgICB0b2dnbGVEaXNhYmxlKHNjb3BlLiRldmFsKGF0dHJzLm5nRGlzYWJsZWQpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy51bnNoaWZ0KGZ1bmN0aW9uKG1vZGVsVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gbW9kZWxWYWx1ZSA/ICRzY2UudHJ1c3RBc0h0bWwobW9kZWxWYWx1ZSkgOiAnJztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbmdNb2RlbC4kcGFyc2Vycy51bnNoaWZ0KGZ1bmN0aW9uKHZpZXdWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2aWV3VmFsdWUgPyAkc2NlLmdldFRydXN0ZWRIdG1sKHZpZXdWYWx1ZSkgOiAnJztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZW5zdXJlSW5zdGFuY2UoKTtcblxuICAgICAgICAgIHZhciB2aWV3VmFsdWUgPSBuZ01vZGVsLiR2aWV3VmFsdWUgP1xuICAgICAgICAgICAgJHNjZS5nZXRUcnVzdGVkSHRtbChuZ01vZGVsLiR2aWV3VmFsdWUpIDogJyc7XG5cbiAgICAgICAgICAvLyBpbnN0YW5jZS5nZXREb2MoKSBjaGVjayBpcyBhIGd1YXJkIGFnYWluc3QgbnVsbCB2YWx1ZVxuICAgICAgICAgIC8vIHdoZW4gZGVzdHJ1Y3Rpb24gJiByZWNyZWF0aW9uIG9mIGluc3RhbmNlcyBoYXBwZW5cbiAgICAgICAgICBpZiAodGlueUluc3RhbmNlICYmXG4gICAgICAgICAgICB0aW55SW5zdGFuY2UuZ2V0RG9jKClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRpbnlJbnN0YW5jZS5zZXRDb250ZW50KHZpZXdWYWx1ZSk7XG4gICAgICAgICAgICAvLyBUcmlnZ2VyaW5nIGNoYW5nZSBldmVudCBkdWUgdG8gVGlueU1DRSBub3QgZmlyaW5nIGV2ZW50ICZcbiAgICAgICAgICAgIC8vIGJlY29taW5nIG91dCBvZiBzeW5jIGZvciBjaGFuZ2UgY2FsbGJhY2tzXG4gICAgICAgICAgICB0aW55SW5zdGFuY2UuZmlyZSgnY2hhbmdlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGF0dHJzLiRvYnNlcnZlKCdkaXNhYmxlZCcsIHRvZ2dsZURpc2FibGUpO1xuXG4gICAgICAgIC8vIFRoaXMgYmxvY2sgaXMgYmVjYXVzZSBvZiBUaW55TUNFIG5vdCBwbGF5aW5nIHdlbGwgd2l0aCByZW1vdmFsIGFuZFxuICAgICAgICAvLyByZWNyZWF0aW9uIG9mIGluc3RhbmNlcywgcmVxdWlyaW5nIGluc3RhbmNlcyB0byBoYXZlIGRpZmZlcmVudFxuICAgICAgICAvLyBzZWxlY3RvcnMgaW4gb3JkZXIgdG8gcmVuZGVyIG5ldyBpbnN0YW5jZXMgcHJvcGVybHlcbiAgICAgICAgc2NvcGUuJG9uKCckdGlueW1jZTpyZWZyZXNoJywgZnVuY3Rpb24oZSwgaWQpIHtcbiAgICAgICAgICB2YXIgZWlkID0gYXR0cnMuaWQ7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoaWQpIHx8IGlkID09PSBlaWQpIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnRFbGVtZW50ID0gZWxlbWVudC5wYXJlbnQoKTtcbiAgICAgICAgICAgIHZhciBjbG9uZWRFbGVtZW50ID0gZWxlbWVudC5jbG9uZSgpO1xuICAgICAgICAgICAgY2xvbmVkRWxlbWVudC5yZW1vdmVBdHRyKCdpZCcpO1xuICAgICAgICAgICAgY2xvbmVkRWxlbWVudC5yZW1vdmVBdHRyKCdzdHlsZScpO1xuICAgICAgICAgICAgY2xvbmVkRWxlbWVudC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpO1xuICAgICAgICAgICAgdGlueW1jZS5leGVjQ29tbWFuZCgnbWNlUmVtb3ZlRWRpdG9yJywgZmFsc2UsIGVpZCk7XG4gICAgICAgICAgICBwYXJlbnRFbGVtZW50LmFwcGVuZCgkY29tcGlsZShjbG9uZWRFbGVtZW50KShzY29wZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVuc3VyZUluc3RhbmNlKCk7XG5cbiAgICAgICAgICBpZiAodGlueUluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aW55SW5zdGFuY2UucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aW55SW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gZW5zdXJlSW5zdGFuY2UoKSB7XG4gICAgICAgICAgaWYgKCF0aW55SW5zdGFuY2UpIHtcbiAgICAgICAgICAgIHRpbnlJbnN0YW5jZSA9IHRpbnltY2UuZ2V0KGF0dHJzLmlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XSk7XG5cbihmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIGFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi53aWRnZXQuY29tbW9uLnVybC1maWVsZFwiLCBbXG4gICAgXCJyaXNldmlzaW9uLmNvbW1vbi5pMThuXCIsXG4gICAgXCJyaXNldmlzaW9uLndpZGdldC5jb21tb24udG9vbHRpcFwiXG4gIF0pXG4gICAgLmRpcmVjdGl2ZShcInVybEZpZWxkXCIsIFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIFwiJGxvZ1wiLCBmdW5jdGlvbiAoJHRlbXBsYXRlQ2FjaGUsICRsb2cpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgICAgcmVxdWlyZTogXCI/bmdNb2RlbFwiLFxuICAgICAgICBzY29wZToge1xuICAgICAgICAgIHVybDogXCI9XCIsXG4gICAgICAgICAgaGlkZUxhYmVsOiBcIkBcIixcbiAgICAgICAgICBmaWxlVHlwZTogXCJAXCJcbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGxhdGU6ICR0ZW1wbGF0ZUNhY2hlLmdldChcIl9hbmd1bGFyL3VybC1maWVsZC91cmwtZmllbGQuaHRtbFwiKSxcbiAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybCkge1xuXG4gICAgICAgICAgZnVuY3Rpb24gaGFzVmFsaWRFeHRlbnNpb24odXJsLCBmaWxlVHlwZSkge1xuICAgICAgICAgICAgdmFyIHRlc3RVcmwgPSB1cmwudG9Mb3dlckNhc2UoKSxcbiAgICAgICAgICAgICAgZXh0ZW5zaW9ucztcblxuICAgICAgICAgICAgc3dpdGNoKGZpbGVUeXBlKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJpbWFnZVwiOlxuICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMgPSBbXCIuanBnXCIsIFwiLmpwZWdcIiwgXCIucG5nXCIsIFwiLmJtcFwiLCBcIi5zdmdcIiwgXCIuZ2lmXCJdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidmlkZW9cIjpcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zID0gW1wiLndlYm1cIiwgXCIubXA0XCIsIFwiLm9ndlwiLCBcIi5vZ2dcIl07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9ucyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXh0ZW5zaW9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICBpZiAodGVzdFVybC5pbmRleE9mKGV4dGVuc2lvbnNbaV0pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZSBVUkwgcG9pbnRzIHRvIGEgdmFsaWQgaW1hZ2UgZmlsZS5cbiAgICAgICAgICBmdW5jdGlvbiB0ZXN0SW1hZ2UoKSB7XG4gICAgICAgICAgICBpZiAoKHNjb3BlLmZpbGVUeXBlICE9PSBcInVuZGVmaW5lZFwiKSAmJiAoc2NvcGUudXJsICE9PSBcInVuZGVmaW5lZFwiKSkge1xuICAgICAgICAgICAgICBpZiAoc2NvcGUuZmlsZVR5cGUgPT09IFwiaW1hZ2VcIikge1xuICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICBzY29wZS52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgc2NvcGUudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLmludmFsaWRUeXBlID0gc2NvcGUuZmlsZVR5cGU7XG4gICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gc2NvcGUudXJsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gdGVzdFVybCh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHVybFJlZ0V4cCxcbiAgICAgICAgICAgICAgaXNWYWxpZDtcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICBEaXNjdXNzaW9uXG4gICAgICAgICAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zNzY4NC9ob3ctdG8tcmVwbGFjZS1wbGFpbi11cmxzLXdpdGgtbGlua3MjMjE5MjU0OTFcblxuICAgICAgICAgICAgIFVzaW5nXG4gICAgICAgICAgICAgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZHBlcmluaS83MjkyOTRcbiAgICAgICAgICAgICBSZWFzb25pbmdcbiAgICAgICAgICAgICBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9kZW1vL3VybC1yZWdleCAqL1xuXG4gICAgICAgICAgICB1cmxSZWdFeHAgPSAvXig/Oig/Omh0dHBzP3xmdHApOlxcL1xcLykoPzpcXFMrKD86OlxcUyopP0ApPyg/Oig/ISg/OjEwfDEyNykoPzpcXC5cXGR7MSwzfSl7M30pKD8hKD86MTY5XFwuMjU0fDE5MlxcLjE2OCkoPzpcXC5cXGR7MSwzfSl7Mn0pKD8hMTcyXFwuKD86MVs2LTldfDJcXGR8M1swLTFdKSg/OlxcLlxcZHsxLDN9KXsyfSkoPzpbMS05XVxcZD98MVxcZFxcZHwyWzAxXVxcZHwyMlswLTNdKSg/OlxcLig/OjE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pKXsyfSg/OlxcLig/OlsxLTldXFxkP3wxXFxkXFxkfDJbMC00XVxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rLT8pKlthLXpcXHUwMGExLVxcdWZmZmYwLTldKykoPzpcXC4oPzpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSstPykqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSooPzpcXC4oPzpbYS16XFx1MDBhMS1cXHVmZmZmXXsyLH0pKSkoPzo6XFxkezIsNX0pPyg/OlxcL1teXFxzXSopPyQvaTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbiAgICAgICAgICAgIC8vIEFkZCBodHRwOi8vIGlmIG5vIHByb3RvY29sIHBhcmFtZXRlciBleGlzdHNcbiAgICAgICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKFwiOi8vXCIpID09PSAtMSkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IFwiaHR0cDovL1wiICsgdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlzVmFsaWQgPSB1cmxSZWdFeHAudGVzdCh2YWx1ZSk7XG5cbiAgICAgICAgICAgIGlmIChpc1ZhbGlkICYmIHR5cGVvZiBzY29wZS5maWxlVHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICBpc1ZhbGlkID0gaGFzVmFsaWRFeHRlbnNpb24odmFsdWUsIHNjb3BlLmZpbGVUeXBlKTtcbiAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuaW52YWxpZFR5cGUgPSBzY29wZS5maWxlVHlwZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NvcGUuaW52YWxpZFR5cGUgPSBcInVybFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgICB0ZXN0SW1hZ2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQnkgZGVmYXVsdCBlbmZvcmNlIHZhbGlkYXRpb25cbiAgICAgICAgICBzY29wZS5kb1ZhbGlkYXRpb24gPSB0cnVlO1xuICAgICAgICAgIC8vIEEgZmxhZyB0byBzZXQgaWYgdGhlIHVzZXIgdHVybmVkIG9mZiB2YWxpZGF0aW9uXG4gICAgICAgICAgc2NvcGUuZm9yY2VkVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAvLyBWYWxpZGF0aW9uIHN0YXRlXG4gICAgICAgICAgc2NvcGUudmFsaWQgPSB0cnVlO1xuXG4gICAgICAgICAgc2NvcGUuaW52YWxpZFR5cGUgPSBcInVybFwiO1xuXG4gICAgICAgICAgc2NvcGUuYWxsb3dJbml0RW1wdHkgPSAodHlwZW9mIGF0dHJzLmluaXRFbXB0eSAhPT0gXCJ1bmRlZmluZWRcIik7XG5cbiAgICAgICAgICBzY29wZS5ibHVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzY29wZS4kZW1pdChcInVybEZpZWxkQmx1clwiKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKFwidXJsXCIsIGZ1bmN0aW9uICh1cmwpIHtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cmwgIT09IFwidW5kZWZpbmVkXCIgJiYgdXJsICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICAgaWYgKHVybCAhPT0gXCJcIiAmJiBzY29wZS5hbGxvd0luaXRFbXB0eSkge1xuICAgICAgICAgICAgICAgIC8vIGVuc3VyZSBhbiBlbXB0eSBcIlwiIHZhbHVlIG5vdyBnZXRzIHZhbGlkYXRlZFxuICAgICAgICAgICAgICAgIHNjb3BlLmFsbG93SW5pdEVtcHR5ID0gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoc2NvcGUuZG9WYWxpZGF0aW9uICYmICFzY29wZS5hbGxvd0luaXRFbXB0eSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLnZhbGlkID0gdGVzdFVybChzY29wZS51cmwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzY29wZS4kd2F0Y2goXCJ2YWxpZFwiLCBmdW5jdGlvbiAodmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChjdHJsKSB7XG4gICAgICAgICAgICAgICRsb2cuaW5mbyhcIkNhbGxpbmcgJHNldFZhbGlkaXR5KCkgb24gcGFyZW50IGNvbnRyb2xsZXJcIik7XG4gICAgICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KFwidmFsaWRcIiwgdmFsaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKFwiZG9WYWxpZGF0aW9uXCIsIGZ1bmN0aW9uIChkb1ZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIGlmKHR5cGVvZiBzY29wZS51cmwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgaWYgKGRvVmFsaWRhdGlvbikge1xuICAgICAgICAgICAgICAgIHNjb3BlLmZvcmNlZFZhbGlkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXNjb3BlLmFsbG93SW5pdEVtcHR5KSB7XG4gICAgICAgICAgICAgICAgICBzY29wZS52YWxpZCA9IHRlc3RVcmwoc2NvcGUudXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuZm9yY2VkVmFsaWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNjb3BlLnZhbGlkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfV0pO1xufSgpKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHsgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLndpZGdldC5jb21tb24udXJsLWZpZWxkXCIpOyB9XG5jYXRjaChlcnIpIHsgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLndpZGdldC5jb21tb24udXJsLWZpZWxkXCIsIFtdKTsgfVxubW9kdWxlLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICBcInVzZSBzdHJpY3RcIjtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KFwiX2FuZ3VsYXIvdXJsLWZpZWxkL3VybC1maWVsZC5odG1sXCIsXG4gICAgXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIiA+XFxuXCIgK1xuICAgIFwiICA8bGFiZWwgbmctaWY9XFxcIiFoaWRlTGFiZWxcXFwiPnt7IFxcXCJ1cmwubGFiZWxcXFwiIHwgdHJhbnNsYXRlIH19PC9sYWJlbD5cXG5cIiArXG4gICAgXCIgIDxkaXY+XFxuXCIgK1xuICAgIFwiICAgIDxpbnB1dCBuYW1lPVxcXCJ1cmxcXFwiIHR5cGU9XFxcInRleHRcXFwiIG5nLW1vZGVsPVxcXCJ1cmxcXFwiIG5nLWJsdXI9XFxcImJsdXIoKVxcXCIgY2xhc3M9XFxcImZvcm0tY29udHJvbFxcXCIgcGxhY2Vob2xkZXI9XFxcImh0dHA6Ly9cXFwiPlxcblwiICtcbiAgICBcIiAgPC9kaXY+XFxuXCIgK1xuICAgIFwiICA8cCBuZy1pZj1cXFwiIXZhbGlkICYmIGludmFsaWRUeXBlID09PSAndXJsJ1xcXCIgY2xhc3M9XFxcInRleHQtZGFuZ2VyXFxcIj57eyBcXFwidXJsLmVycm9ycy51cmxcXFwiIHwgdHJhbnNsYXRlIH19PC9wPlxcblwiICtcbiAgICBcIiAgPHAgbmctaWY9XFxcIiF2YWxpZCAmJiBpbnZhbGlkVHlwZSA9PT0gJ2ltYWdlJ1xcXCIgY2xhc3M9XFxcInRleHQtZGFuZ2VyXFxcIj57eyBcXFwidXJsLmVycm9ycy5pbWFnZVxcXCIgfCB0cmFuc2xhdGUgfX08L3A+XFxuXCIgK1xuICAgIFwiICA8cCBuZy1pZj1cXFwiIXZhbGlkICYmIGludmFsaWRUeXBlID09PSAndmlkZW8nXFxcIiBjbGFzcz1cXFwidGV4dC1kYW5nZXJcXFwiPnt7IFxcXCJ1cmwuZXJyb3JzLnZpZGVvXFxcIiB8IHRyYW5zbGF0ZSB9fTwvcD5cXG5cIiArXG4gICAgXCIgIDxkaXYgY2xhc3M9XFxcImNoZWNrYm94XFxcIiBuZy1zaG93PVxcXCJmb3JjZWRWYWxpZCB8fCAhdmFsaWRcXFwiPlxcblwiICtcbiAgICBcIiAgICA8bGFiZWw+XFxuXCIgK1xuICAgIFwiICAgICAgPGlucHV0IG5hbWU9XFxcInZhbGlkYXRlLXVybFxcXCIgbmctY2xpY2s9XFxcImRvVmFsaWRhdGlvbiA9ICFkb1ZhbGlkYXRpb25cXFwiIHR5cGU9XFxcImNoZWNrYm94XFxcIlxcblwiICtcbiAgICBcIiAgICAgICAgICAgICB2YWx1ZT1cXFwidmFsaWRhdGUtdXJsXFxcIj4ge3tcXFwidXJsLnZhbGlkYXRlLmxhYmVsXFxcIiB8IHRyYW5zbGF0ZX19XFxuXCIgK1xuICAgIFwiICAgIDwvbGFiZWw+XFxuXCIgK1xuICAgIFwiICA8L2Rpdj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBhbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vbi53aWRnZXQtYnV0dG9uLXRvb2xiYXJcIiwgW1wicmlzZXZpc2lvbi5jb21tb24uaTE4blwiXSlcbiAgICAuZGlyZWN0aXZlKFwid2lkZ2V0QnV0dG9uVG9vbGJhclwiLCBbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbiAoJHRlbXBsYXRlQ2FjaGUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHJlc3RyaWN0OiBcIkVcIixcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICBzYXZlOiBcIiZcIixcbiAgICAgICAgICBjYW5jZWw6IFwiJlwiLFxuICAgICAgICAgIGRpc2FibGVTYXZlOiBcIiZcIlxuICAgICAgICB9LFxuICAgICAgICB0ZW1wbGF0ZTogJHRlbXBsYXRlQ2FjaGUuZ2V0KFwiX2FuZ3VsYXIvd2lkZ2V0LWJ1dHRvbi10b29sYmFyL3dpZGdldC1idXR0b24tdG9vbGJhci5odG1sXCIpXG4gICAgICB9O1xuICAgIH1dKTtcbn0oKSk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7IG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi53aWRnZXQuY29tbW9uLndpZGdldC1idXR0b24tdG9vbGJhclwiKTsgfVxuY2F0Y2goZXJyKSB7IG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi53aWRnZXQuY29tbW9uLndpZGdldC1idXR0b24tdG9vbGJhclwiLCBbXSk7IH1cbm1vZHVsZS5ydW4oW1wiJHRlbXBsYXRlQ2FjaGVcIiwgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dChcIl9hbmd1bGFyL3dpZGdldC1idXR0b24tdG9vbGJhci93aWRnZXQtYnV0dG9uLXRvb2xiYXIuaHRtbFwiLFxuICAgIFwiPGRpdiBjbGFzcz1cXFwicHVsbC1yaWdodFxcXCI+XFxuXCIgK1xuICAgIFwiICA8YnV0dG9uIGlkPVxcXCJzYXZlXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1maXhlZC13aWR0aFxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBuZy1jbGljaz1cXFwic2F2ZSgpXFxcIiBuZy1kaXNhYmxlZD1cXFwiZGlzYWJsZVNhdmUoKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxzcGFuPnt7XFxcImNvbW1vbi5zYXZlXFxcIiB8IHRyYW5zbGF0ZX19PC9zcGFuPlxcblwiICtcbiAgICBcIiAgICA8aSBjbGFzcz1cXFwiZmEgZmEtd2hpdGUgZmEtY2hlY2sgaWNvbi1yaWdodFxcXCI+PC9pPlxcblwiICtcbiAgICBcIiAgPC9idXR0b24+XFxuXCIgK1xuICAgIFwiICA8YnV0dG9uIGlkPVxcXCJjYW5jZWxcXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRlZmF1bHQgYnRuLWZpeGVkLXdpZHRoXFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIG5nLWNsaWNrPVxcXCJjYW5jZWwoKVxcXCI+XFxuXCIgK1xuICAgIFwiICAgIDxzcGFuPnt7XFxcImNvbW1vbi5jYW5jZWxcXFwiIHwgdHJhbnNsYXRlfX08L3NwYW4+XFxuXCIgK1xuICAgIFwiICAgIDxpIGNsYXNzPVxcXCJmYSBmYS13aGl0ZSBmYS10aW1lcyBpY29uLXJpZ2h0XFxcIj48L2k+XFxuXCIgK1xuICAgIFwiICA8L2J1dHRvbj5cXG5cIiArXG4gICAgXCI8L2Rpdj5cXG5cIiArXG4gICAgXCJcIik7XG59XSk7XG59KSgpO1xuXG5hbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LnRleHQuc2V0dGluZ3NcIiwgW1xuICBcImFuZ3VsYXJMb2FkXCIsXG4gIFwicmlzZXZpc2lvbi5jb21tb24uaTE4blwiLFxuICBcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vblwiLFxuICBcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vbi53aWRnZXQtYnV0dG9uLXRvb2xiYXJcIixcbiAgXCJyaXNldmlzaW9uLndpZGdldC5jb21tb24udG9vbHRpcFwiLFxuICBcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vbi5zY3JvbGwtc2V0dGluZ1wiLFxuICBcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vbi51cmwtZmllbGRcIixcbiAgXCJ1aS50aW55bWNlXCJcbl0pO1xuXG4vKiBleHBvcnRlZCBjb25maWcgKi9cbmlmICh0eXBlb2YgYW5ndWxhciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICBhbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24uY29tbW9uLmkxOG4uY29uZmlnXCIsIFtdKVxuICAgIC5jb25zdGFudChcIkxPQ0FMRVNfUFJFRklYXCIsIFwibG9jYWxlcy90cmFuc2xhdGlvbl9cIilcbiAgICAuY29uc3RhbnQoXCJMT0NBTEVTX1NVRklYXCIsIFwiLmpzb25cIik7XG59XG5cbnZhciBjb25maWcgPSB7fTtcblxuXG5hbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vblwiLCBbXSk7XG5cbmFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi53aWRnZXQuY29tbW9uXCIpXG4gIC5jb250cm9sbGVyKFwic2V0dGluZ3NDb250cm9sbGVyXCIsIFtcIiRzY29wZVwiLCBcInNldHRpbmdzU2F2ZXJcIiwgXCJzZXR0aW5nc0dldHRlclwiLCBcInNldHRpbmdzQ2xvc2VyXCIsXG4gICAgZnVuY3Rpb24gKCRzY29wZSwgc2V0dGluZ3NTYXZlciwgc2V0dGluZ3NHZXR0ZXIsIHNldHRpbmdzQ2xvc2VyKSB7XG5cbiAgICAkc2NvcGUuc2V0dGluZ3MgPSB7IHBhcmFtczoge30sIGFkZGl0aW9uYWxQYXJhbXM6IHt9fTtcbiAgICAkc2NvcGUuYWxlcnRzID0gW107XG5cbiAgICAkc2NvcGUuZ2V0QWRkaXRpb25hbFBhcmFtID0gZnVuY3Rpb24gKG5hbWUsIGRlZmF1bHRWYWwpIHtcbiAgICAgIHZhciB2YWwgPSAkc2NvcGUuc2V0dGluZ3MuYWRkaXRpb25hbFBhcmFtc1tuYW1lXTtcbiAgICAgIGlmKGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsKSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbDtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICAkc2NvcGUuc2V0QWRkaXRpb25hbFBhcmFtID0gZnVuY3Rpb24gKG5hbWUsIHZhbCkge1xuICAgICAgJHNjb3BlLnNldHRpbmdzLmFkZGl0aW9uYWxQYXJhbXNbbmFtZV0gPSB2YWw7XG4gICAgfTtcblxuICAgICRzY29wZS5sb2FkQWRkaXRpb25hbFBhcmFtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldHRpbmdzR2V0dGVyLmdldEFkZGl0aW9uYWxQYXJhbXMoKS50aGVuKGZ1bmN0aW9uIChhZGRpdGlvbmFsUGFyYW1zKSB7XG4gICAgICAgICRzY29wZS5zZXR0aW5ncy5hZGRpdGlvbmFsUGFyYW1zID0gYWRkaXRpb25hbFBhcmFtcztcbiAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoXCJsb2FkQWRkaXRpb25hbFBhcmFtc1wiLCBhZGRpdGlvbmFsUGFyYW1zKTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZXJyKSB7YWxlcnQgKGVycik7IH0pO1xuICAgIH07XG5cbiAgICAkc2NvcGUuc2V0QWRkaXRpb25hbFBhcmFtcyA9IGZ1bmN0aW9uIChuYW1lLCB2YWwpIHtcbiAgICAgICRzY29wZS5zZXR0aW5ncy5hZGRpdGlvbmFsUGFyYW1zW25hbWVdID0gdmFsO1xuICAgIH07XG5cbiAgICAkc2NvcGUuc2F2ZVNldHRpbmdzID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy9jbGVhciBvdXQgcHJldmlvdXMgYWxlcnRzLCBpZiBhbnlcbiAgICAgICRzY29wZS5hbGVydHMgPSBbXTtcblxuICAgICAgJHNjb3BlLiRicm9hZGNhc3QoXCJjb2xsZWN0QWRkaXRpb25hbFBhcmFtc1wiKTtcblxuICAgICAgc2V0dGluZ3NTYXZlci5zYXZlU2V0dGluZ3MoJHNjb3BlLnNldHRpbmdzKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9UT0RPOiBwZXJoYXBzIHNob3cgc29tZSBpbmRpY2F0b3IgaW4gVUk/XG4gICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICRzY29wZS5hbGVydHMgPSBlcnIuYWxlcnRzO1xuICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgJHNjb3BlLmNsb3NlU2V0dGluZ3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIHNldHRpbmdzQ2xvc2VyLmNsb3NlU2V0dGluZ3MoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy9UT0RPOlxuICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAkc2NvcGUuYWxlcnRzID0gZXJyLmFsZXJ0cztcbiAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgICRzY29wZS5zZXR0aW5ncy5wYXJhbXMgPSBzZXR0aW5nc0dldHRlci5nZXRQYXJhbXMoKTtcbiAgICAkc2NvcGUubG9hZEFkZGl0aW9uYWxQYXJhbXMoKTtcbiAgfV0pXG5cbiAgLmRpcmVjdGl2ZShcInNjcm9sbE9uQWxlcnRzXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogXCJBXCIsIC8vcmVzdHJpY3RzIHRvIGF0dHJpYnV0ZXNcbiAgICAgIHNjb3BlOiBmYWxzZSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsbSkge1xuICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihcImFsZXJ0c1wiLCBmdW5jdGlvbiAobmV3QWxlcnRzLCBvbGRBbGVydHMpIHtcbiAgICAgICAgICBpZihuZXdBbGVydHMubGVuZ3RoID4gMCAmJiBvbGRBbGVydHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAkKFwiYm9keVwiKS5hbmltYXRlKHtzY3JvbGxUb3A6ICRlbG0ub2Zmc2V0KCkudG9wfSwgXCJmYXN0XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbn0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vblwiKVxuICAuY29uc3RhbnQoXCJTVE9SQUdFX0ZJTEVfVVJMX0JBU0VcIiwgXCJzdG9yYWdlLmdvb2dsZWFwaXMuY29tL3Jpc2VtZWRpYWxpYnJhcnktXCIpXG4gIC5jb25zdGFudChcIlNUT1JBR0VfRk9MREVSX1VSTF9CQVNFXCIsIFwiZ29vZ2xlYXBpcy5jb20vc3RvcmFnZS9cIilcbiAgLmZhY3RvcnkoXCJjb21tb25TZXR0aW5nc1wiLCBbXCIkbG9nXCIsIFwiU1RPUkFHRV9GSUxFX1VSTF9CQVNFXCIsIFwiU1RPUkFHRV9GT0xERVJfVVJMX0JBU0VcIixcbiAgICBmdW5jdGlvbiAoJGxvZywgU1RPUkFHRV9GSUxFX1VSTF9CQVNFLCBTVE9SQUdFX0ZPTERFUl9VUkxfQkFTRSkge1xuXG4gICAgdmFyIGZhY3RvcnkgPSB7XG4gICAgICBnZXRTdG9yYWdlVXJsRGF0YTogZnVuY3Rpb24gKHVybCkge1xuICAgICAgICB2YXIgc3RvcmFnZSA9IHt9LFxuICAgICAgICAgIHN0ciwgYXJyLCBwYXJhbXMsIHBhaXI7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0U3RvcmFnZVR5cGUoc3RvcmFnZVVybCkge1xuICAgICAgICAgIGlmIChzdG9yYWdlVXJsLmluZGV4T2YoU1RPUkFHRV9GSUxFX1VSTF9CQVNFKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBcImZpbGVcIjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RvcmFnZVVybC5pbmRleE9mKFNUT1JBR0VfRk9MREVSX1VSTF9CQVNFKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHJldHVybiBcImZvbGRlclwiO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0Q29tcGFueUlkKHN0b3JhZ2VVcmwpIHtcbiAgICAgICAgICB2YXIgcCA9IHN0b3JhZ2VVcmwuc3BsaXQoXCJyaXNlbWVkaWFsaWJyYXJ5LVwiKTtcblxuICAgICAgICAgIHJldHVybiBwWzFdLnNsaWNlKDAsIHBbMV0uaW5kZXhPZihcIi9cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdldFN0b3JhZ2VUeXBlKHVybCkgPT09IFwiZmlsZVwiKSB7XG4gICAgICAgICAgc3RyID0gdXJsLnNwbGl0KFNUT1JBR0VfRklMRV9VUkxfQkFTRSlbMV07XG4gICAgICAgICAgc3RyID0gZGVjb2RlVVJJQ29tcG9uZW50KHN0ci5zbGljZShzdHIuaW5kZXhPZihcIi9cIikgKyAxKSk7XG4gICAgICAgICAgYXJyID0gc3RyLnNwbGl0KFwiL1wiKTtcblxuICAgICAgICAgIHN0b3JhZ2UuY29tcGFueUlkID0gZ2V0Q29tcGFueUlkKHVybCk7XG4gICAgICAgICAgc3RvcmFnZS5maWxlTmFtZSA9IGFyci5wb3AoKTtcbiAgICAgICAgICBzdG9yYWdlLmZvbGRlciA9IGFyci5sZW5ndGggPiAwID8gYXJyLmpvaW4oXCIvXCIpIDogXCJcIjtcblxuICAgICAgICAgIGlmIChzdG9yYWdlLmZvbGRlciAhPT0gXCJcIikge1xuICAgICAgICAgICAgLy8gYWRkIGVuZGluZyBcIi9cIiB0byB0aGUgZm9sZGVyIHBhdGhcbiAgICAgICAgICAgIHN0b3JhZ2UuZm9sZGVyICs9IFwiL1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChnZXRTdG9yYWdlVHlwZSh1cmwpID09PSBcImZvbGRlclwiKSB7XG4gICAgICAgICAgcGFyYW1zID0gdXJsLnNwbGl0KFwiP1wiKTtcblxuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyYW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFyYW1zW2ldLnNwbGl0KFwiPVwiKTtcblxuICAgICAgICAgICAgaWYgKHBhaXJbMF0gPT09IFwicHJlZml4XCIgJiYgdHlwZW9mIHBhaXJbMV0gIT09IFwidW5kZWZpbmVkXCIgJiYgcGFpclsxXSAhPT0gXCJcIikge1xuICAgICAgICAgICAgICBzdG9yYWdlLmNvbXBhbnlJZCA9IGdldENvbXBhbnlJZCh1cmwpO1xuICAgICAgICAgICAgICBzdG9yYWdlLmZvbGRlciA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICAgICAgICAgICAgc3RvcmFnZS5maWxlTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdG9yYWdlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZmFjdG9yeTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vblwiKVxuICAuZmFjdG9yeShcImdhZGdldHNBcGlcIiwgW1wiJHdpbmRvd1wiLCBmdW5jdGlvbiAoJHdpbmRvdykge1xuICAgIHJldHVybiAkd2luZG93LmdhZGdldHM7XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLndpZGdldC5jb21tb25cIilcbiAgLmZhY3RvcnkoXCJnb29nbGVGb250TG9hZGVyXCIsIFtcIiRodHRwXCIsIFwiYW5ndWxhckxvYWRcIiwgZnVuY3Rpb24gKCRodHRwLCBhbmd1bGFyTG9hZCkge1xuXG4gICAgdmFyIGZhY3RvcnkgPSB7fSxcbiAgICAgIGFsbEZvbnRzID0gW107XG5cbiAgICBmYWN0b3J5LmdldEdvb2dsZUZvbnRzID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoYWxsRm9udHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIEdldCBsaXN0IG9mIEdvb2dsZSBmb250cyBzb3J0ZWQgYWxwaGFiZXRpY2FsbHkuXG4gICAgICAgIHJldHVybiAkaHR0cC5nZXQoXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS93ZWJmb250cy92MS93ZWJmb250cz9rZXk9QUl6YVN5Qlh4VktfSU9WN0xOUU11VlZvX2w3WnZONTNlak44NnpZJnNvcnQ9YWxwaGFcIiwgeyBjYWNoZTogdHJ1ZSB9KVxuICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKHJlc3AuZGF0YSAmJiByZXNwLmRhdGEuaXRlbXMpIHtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IHJlc3AuZGF0YS5pdGVtcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGl0ZW0gPSByZXNwLmRhdGEuaXRlbXNbaV07XG5cbiAgICAgICAgICAgICAgICAvLyBEb24ndCByZXR1cm4gdGhvc2UgZm9udHMgdGhhdCBoYXZlIGEgc3Vic2V0IG9mIFwia2htZXJcIi5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5zdWJzZXRzICYmIChpdGVtLnN1YnNldHMubGVuZ3RoID09PSAxKSAmJlxuICAgICAgICAgICAgICAgICAgKGl0ZW0uc3Vic2V0c1swXS50b0xvd2VyQ2FzZSgpID09PSBcImtobWVyXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFsbEZvbnRzLnB1c2goaXRlbS5mYW1pbHkpO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGxvYWRGb250cygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBsb2FkRm9udHMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLyogRmlsdGVyIGxpc3Qgb2YgZm9udHMgdG8gb25seSByZXR1cm4gdGhvc2UgdGhhdCBhcmUgR29vZ2xlIGZvbnRzLiAqL1xuICAgIGZhY3RvcnkuZ2V0Rm9udHNVc2VkID0gZnVuY3Rpb24oZmFtaWx5TGlzdCkge1xuICAgICAgdmFyIGZvbnRzVXNlZCA9IFtdO1xuXG4gICAgICBhbmd1bGFyLmZvckVhY2goYWxsRm9udHMsIGZ1bmN0aW9uIChmYW1pbHkpIHtcbiAgICAgICAgaWYgKGZhbWlseUxpc3QuaW5kZXhPZihmYW1pbHkpICE9PSAtMSkge1xuICAgICAgICAgIGZvbnRzVXNlZC5wdXNoKGZhbWlseSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZm9udHNVc2VkO1xuICAgIH07XG5cbiAgICAvKiBMb2FkIHRoZSBHb29nbGUgZm9udHMuICovXG4gICAgZnVuY3Rpb24gbG9hZEZvbnRzKCkge1xuICAgICAgdmFyIGZhbWlseSA9IFwiXCIsXG4gICAgICAgIGZvbnRzID0gXCJcIixcbiAgICAgICAgdXJsID0gXCJcIixcbiAgICAgICAgdXJscyA9IFtdLFxuICAgICAgICBzcGFjZXMgPSBmYWxzZSxcbiAgICAgICAgZmFsbGJhY2sgPSBcIixzYW5zLXNlcmlmO1wiLFxuICAgICAgICBmb250QmFzZVVybCA9IFwiLy9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVwiLFxuICAgICAgICBleGNsdWRlID0gW1wiQnVkYVwiLCBcIkNvZGEgQ2FwdGlvblwiLCBcIk9wZW4gU2FucyBDb25kZW5zZWRcIiwgXCJVbmlmcmFrdHVyQ29va1wiLCBcIk1vbGxlXCJdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbEZvbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZhbWlseSA9IGFsbEZvbnRzW2ldO1xuXG4gICAgICAgIGlmIChleGNsdWRlLmluZGV4T2YoZmFtaWx5KSA9PT0gLTEpIHtcbiAgICAgICAgICB1cmwgPSBmb250QmFzZVVybCArIGZhbWlseTtcblxuICAgICAgICAgIGFuZ3VsYXJMb2FkLmxvYWRDU1ModXJsKTtcbiAgICAgICAgICB1cmxzLnB1c2godXJsKTtcblxuICAgICAgICAgIC8vIGNoZWNrIGZvciBzcGFjZXMgaW4gZmFtaWx5IG5hbWVcbiAgICAgICAgICBpZiAoL1xccy8udGVzdChmYW1pbHkpKSB7XG4gICAgICAgICAgICBzcGFjZXMgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzcGFjZXMpIHtcbiAgICAgICAgICAgIC8vIHdyYXAgZmFtaWx5IG5hbWUgaW4gc2luZ2xlIHF1b3Rlc1xuICAgICAgICAgICAgZm9udHMgKz0gZmFtaWx5ICsgXCI9J1wiICsgZmFtaWx5ICsgXCInXCIgKyBmYWxsYmFjaztcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb250cyArPSBmYW1pbHkgKyBcIj1cIiArIGZhbWlseSArIGZhbGxiYWNrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4geyBmb250czogZm9udHMsIHVybHM6IHVybHMgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFjdG9yeTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vblwiKVxuICAuc2VydmljZShcImkxOG5Mb2FkZXJcIiwgW1wiJHdpbmRvd1wiLCBcIiRxXCIsIGZ1bmN0aW9uICgkd2luZG93LCAkcSkge1xuICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAkd2luZG93LmkxOG4uaW5pdCh7IFxuICAgICAgZmFsbGJhY2tMbmc6IFwiZW5cIixcbiAgICAgIHJlc0dldFBhdGg6IFwibG9jYWxlcy9fX25zX19fX19sbmdfXy5qc29uXCJcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKCR3aW5kb3cuaTE4bik7XG4gICAgfSk7XG5cbiAgICB0aGlzLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH07XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLndpZGdldC5jb21tb25cIilcbiAgLmZhY3RvcnkoXCJpbWFnZVZhbGlkYXRvclwiLCBbXCIkcVwiLCBmdW5jdGlvbiAoJHEpIHtcbiAgICB2YXIgZmFjdG9yeSA9IHtcbiAgICAgIC8vIFZlcmlmeSB0aGF0IFVSTCBpcyBhIHZhbGlkIGltYWdlIGZpbGUuXG4gICAgICBpc0ltYWdlOiBmdW5jdGlvbihzcmMpIHtcbiAgICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKSxcbiAgICAgICAgICBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW1hZ2Uub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGltYWdlLnNyYyA9IHNyYztcblxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZhY3Rvcnk7XG4gIH1dKTtcblxuYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLndpZGdldC5jb21tb25cIilcbiAgLnNlcnZpY2UoXCJzZXR0aW5nc1NhdmVyXCIsIFtcIiRxXCIsIFwiJGxvZ1wiLCBcImdhZGdldHNBcGlcIiwgXCJzZXR0aW5nc1BhcnNlclwiLFxuICBmdW5jdGlvbiAoJHEsICRsb2csIGdhZGdldHNBcGksIHNldHRpbmdzUGFyc2VyKSB7XG5cbiAgICB0aGlzLnNhdmVTZXR0aW5ncyA9IGZ1bmN0aW9uIChzZXR0aW5ncywgdmFsaWRhdG9yKSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIGFsZXJ0cyA9IFtdLCBzdHIgPSBcIlwiO1xuXG4gICAgICBzZXR0aW5ncyA9IHByb2Nlc3NTZXR0aW5ncyhzZXR0aW5ncyk7XG5cbiAgICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgICAgYWxlcnRzID0gdmFsaWRhdG9yKHNldHRpbmdzKTtcbiAgICAgIH1cblxuICAgICAgaWYoYWxlcnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJGxvZy5kZWJ1ZyhcIlZhbGlkYXRpb24gZmFpbGVkLlwiLCBhbGVydHMpO1xuICAgICAgICBkZWZlcnJlZC5yZWplY3Qoe2FsZXJ0czogYWxlcnRzfSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZXR0aW5ncy5wYXJhbXMuaGFzT3duUHJvcGVydHkoXCJsYXlvdXRVUkxcIikpIHtcbiAgICAgICAgLy8gZW5zdXJlIHRoZSB1cmwgaXMgdGhlIHN0YXJ0IG9mIHRoZSBzdHJpbmdcbiAgICAgICAgc3RyICs9IHNldHRpbmdzLnBhcmFtcy5sYXlvdXRVUkwgKyBcIj9cIjtcbiAgICAgICAgLy8gZGVsZXRlIHRoaXMgcHJvcGVydHkgc28gaXRzIG5vdCBpbmNsdWRlZCBiZWxvdyBpbiBlbmNvZGVQYXJhbXMgY2FsbFxuICAgICAgICBkZWxldGUgc2V0dGluZ3MucGFyYW1zLmxheW91dFVSTDtcbiAgICAgIH1cblxuICAgICAgc3RyICs9IHNldHRpbmdzUGFyc2VyLmVuY29kZVBhcmFtcyhzZXR0aW5ncy5wYXJhbXMpO1xuXG4gICAgICB2YXIgYWRkaXRpb25hbFBhcmFtc1N0ciA9XG4gICAgICAgIHNldHRpbmdzUGFyc2VyLmVuY29kZUFkZGl0aW9uYWxQYXJhbXMoc2V0dGluZ3MuYWRkaXRpb25hbFBhcmFtcyk7XG5cbiAgICAgIGdhZGdldHNBcGkucnBjLmNhbGwoXCJcIiwgXCJyc2NtZF9zYXZlU2V0dGluZ3NcIiwgZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAkbG9nLmRlYnVnKFwiZW5jb2RlZCBzZXR0aW5nc1wiLCBKU09OLnN0cmluZ2lmeShyZXN1bHQpKTtcbiAgICAgICAgJGxvZy5kZWJ1ZyhcIlNldHRpbmdzIHNhdmVkLiBcIiwgc2V0dGluZ3MpO1xuXG4gICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgIH0sIHtcbiAgICAgICAgcGFyYW1zOiBzdHIsXG4gICAgICAgIGFkZGl0aW9uYWxQYXJhbXM6IGFkZGl0aW9uYWxQYXJhbXNTdHJcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1NldHRpbmdzKHNldHRpbmdzKSB7XG4gICAgICB2YXIgbmV3U2V0dGluZ3MgPSBhbmd1bGFyLmNvcHkoc2V0dGluZ3MpO1xuXG4gICAgICBkZWxldGUgbmV3U2V0dGluZ3MucGFyYW1zLmlkO1xuICAgICAgZGVsZXRlIG5ld1NldHRpbmdzLnBhcmFtcy5jb21wYW55SWQ7XG4gICAgICBkZWxldGUgbmV3U2V0dGluZ3MucGFyYW1zLnJzVztcbiAgICAgIGRlbGV0ZSBuZXdTZXR0aW5ncy5wYXJhbXMucnNIO1xuXG4gICAgICByZXR1cm4gbmV3U2V0dGluZ3M7XG4gICAgfVxuXG4gIH1dKVxuXG4gIC5zZXJ2aWNlKFwic2V0dGluZ3NHZXR0ZXJcIiwgW1wiJHFcIiwgXCJnYWRnZXRzQXBpXCIsIFwiJGxvZ1wiLCBcInNldHRpbmdzUGFyc2VyXCIsIFwiJHdpbmRvd1wiLCBcImRlZmF1bHRTZXR0aW5nc1wiLFxuICAgIGZ1bmN0aW9uICgkcSwgZ2FkZ2V0c0FwaSwgJGxvZywgc2V0dGluZ3NQYXJzZXIsICR3aW5kb3csIGRlZmF1bHRTZXR0aW5ncykge1xuXG4gICAgICB0aGlzLmdldEFkZGl0aW9uYWxQYXJhbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gICAgICAgIHZhciBkZWZhdWx0QWRkaXRpb25hbFBhcmFtcyA9IGRlZmF1bHRTZXR0aW5ncy5hZGRpdGlvbmFsUGFyYW1zIHx8IHt9O1xuXG4gICAgICAgIGdhZGdldHNBcGkucnBjLmNhbGwoXCJcIiwgXCJyc2NtZF9nZXRBZGRpdGlvbmFsUGFyYW1zXCIsIGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICByZXN1bHQgPSBzZXR0aW5nc1BhcnNlci5wYXJzZUFkZGl0aW9uYWxQYXJhbXMocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgPSB7fTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAkbG9nLmRlYnVnKFwiZ2V0QWRkaXRpb25hbFBhcmFtcyByZXR1cm5zIFwiLCByZXN1bHQpO1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJC5leHRlbmQodHJ1ZSwgZGVmYXVsdEFkZGl0aW9uYWxQYXJhbXMsIHJlc3VsdCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuZ2V0UGFyYW1zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGVmYXVsdFBhcmFtcyA9IGRlZmF1bHRTZXR0aW5ncy5wYXJhbXMgfHwge307XG4gICAgICAgIHJldHVybiBhbmd1bGFyLmV4dGVuZChkZWZhdWx0UGFyYW1zLFxuICAgICAgICAgIHNldHRpbmdzUGFyc2VyLnBhcnNlUGFyYW1zKCR3aW5kb3cubG9jYXRpb24uc2VhcmNoKSk7XG4gICAgICB9O1xuICB9XSlcblxuICAuc2VydmljZShcInNldHRpbmdzUGFyc2VyXCIsIFtmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5wYXJzZUFkZGl0aW9uYWxQYXJhbXMgPSBmdW5jdGlvbiAoYWRkaXRpb25hbFBhcmFtc1N0cikge1xuICAgICAgaWYoYWRkaXRpb25hbFBhcmFtc1N0cikge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShhZGRpdGlvbmFsUGFyYW1zU3RyKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuZW5jb2RlQWRkaXRpb25hbFBhcmFtcyA9IGZ1bmN0aW9uIChhZGRpdGlvbmFsUGFyYW1zKSB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYWRkaXRpb25hbFBhcmFtcyk7XG4gICAgfTtcblxuICAgIHRoaXMuZW5jb2RlUGFyYW1zID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgdmFyIHN0ciA9IFtdO1xuICAgICAgZm9yKHZhciBwIGluIHBhcmFtcykge1xuICAgICAgICBpZiAocGFyYW1zLmhhc093blByb3BlcnR5KHApKSB7XG4gICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgIGlmICh0eXBlb2YgcGFyYW1zW3BdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHBhcmFtc1twXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBwYXJhbXNbcF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHN0ci5wdXNoKFwidXBfXCIgKyBlbmNvZGVVUklDb21wb25lbnQocCkgKyBcIj1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHIuam9pbihcIiZcIik7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHN0cmlwUHJlZml4KG5hbWUpIHtcbiAgICAgIGlmKG5hbWUuaW5kZXhPZihcInVwX1wiKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbmFtZS5zbGljZSgzKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnBhcnNlUGFyYW1zID0gZnVuY3Rpb24gKHBhcmFtc1N0cikge1xuICAgICAgLy9nZXQgcmlkIG9mIHByZWNlZWRpbmcgXCI/XCJcbiAgICAgIGlmKHBhcmFtc1N0clswXSA9PT0gXCI/XCIpIHtcbiAgICAgICAgcGFyYW1zU3RyID0gcGFyYW1zU3RyLnNsaWNlKDEpO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgdmFyIHZhcnMgPSBwYXJhbXNTdHIuc3BsaXQoXCImXCIpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwYWlyID0gdmFyc1tpXS5zcGxpdChcIj1cIik7XG4gICAgICAgIHZhciBuYW1lID0gc3RyaXBQcmVmaXgoZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pKTtcbiAgICAgICAgLy9zYXZlIHNldHRpbmdzIG9ubHkgaWYgaXQgaGFzIHVwXyBwcmVmaXguIElnbm9yZSBvdGhlcndpc2VcbiAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gSlNPTi5wYXJzZShkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gIH1dKVxuXG4gIC5zZXJ2aWNlKFwic2V0dGluZ3NDbG9zZXJcIiwgW1wiJHFcIiwgXCIkbG9nXCIsIFwiZ2FkZ2V0c0FwaVwiLFxuICBmdW5jdGlvbiAoJHEsICRsb2csIGdhZGdldHNBcGkpIHtcblxuICAgIHRoaXMuY2xvc2VTZXR0aW5ncyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG5cbiAgICAgIGdhZGdldHNBcGkucnBjLmNhbGwoXCJcIiwgXCJyc2NtZF9jbG9zZVNldHRpbmdzXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgICB9O1xuXG4gIH1dKVxuXG4gIC52YWx1ZShcImRlZmF1bHRTZXR0aW5nc1wiLCB7fSk7XG5cbihmdW5jdGlvbiAoYW5ndWxhcikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBhbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LmNvbW1vbi52aXN1YWxpemF0aW9uXCIsIFtdKVxuICAgIC5mYWN0b3J5KFwidmlzdWFsaXphdGlvbkFwaVwiLCBbXCIkcVwiLCBcIiR3aW5kb3dcIiwgZnVuY3Rpb24gKCRxLCAkd2luZG93KSB7XG4gICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuICAgICAgdmFyIHByb21pc2U7XG5cbiAgICAgIHZhciBmYWN0b3J5ID0ge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoIXByb21pc2UpIHtcbiAgICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuICAgICAgICAgICAgaWYgKCEkd2luZG93Lmdvb2dsZS52aXN1YWxpemF0aW9uKSB7XG4gICAgICAgICAgICAgICR3aW5kb3cuZ29vZ2xlLnNldE9uTG9hZENhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCR3aW5kb3cuZ29vZ2xlLnZpc3VhbGl6YXRpb24pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKCR3aW5kb3cuZ29vZ2xlLnZpc3VhbGl6YXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBmYWN0b3J5O1xuXG4gICAgfV0pO1xuXG59KShhbmd1bGFyKTtcblxuLyogZ2xvYmFsIGdhZGdldHMgKi9cblxuYW5ndWxhci5tb2R1bGUoXCJyaXNldmlzaW9uLndpZGdldC50ZXh0LnNldHRpbmdzXCIpXG4gIC5jb250cm9sbGVyKFwidGV4dFNldHRpbmdzQ29udHJvbGxlclwiLCBbXCIkc2NvcGVcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJGxvZ1wiLCBcIiR3aW5kb3dcIiwgXCIkdGltZW91dFwiLCBcImdvb2dsZUZvbnRMb2FkZXJcIiwgXCJGT05UX1NJWkVTXCIsIFwiRk9OVF9GQU1JTElFU1wiLFxuICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRsb2csICR3aW5kb3csICR0aW1lb3V0LCBnb29nbGVGb250TG9hZGVyLCBGT05UX1NJWkVTLCBGT05UX0ZBTUlMSUVTKSB7XG5cbiAgICAgIHZhciBfaXNMb2FkaW5nID0gdHJ1ZSxcbiAgICAgICAgX2dvb2dsZUZvbnRzID0gXCJcIixcbiAgICAgICAgX2dvb2dsZUZvbnRVcmxzID0gW10sXG4gICAgICAgIF9jdXN0b21Gb250VG9TZWxlY3QgPSBcIlwiLFxuICAgICAgICBfbGluZUhlaWdodFRvb2wgPSBudWxsLFxuICAgICAgICBfcHJlZnMgPSBuZXcgZ2FkZ2V0cy5QcmVmcygpO1xuXG4gICAgICAvLyBIYW5kbGUgdG9vbGJhciBpbnRlcmFjdGlvbnMuXG4gICAgICBmdW5jdGlvbiBpbml0Q29tbWFuZHMoZWRpdG9yLCBhcmdzKSB7XG4gICAgICAgIHN3aXRjaChhcmdzLmNvbW1hbmQpIHtcbiAgICAgICAgICBjYXNlIFwiRm9udE5hbWVcIjpcbiAgICAgICAgICAgIGlmIChfaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGFyZ3MudmFsdWUgPT09IFwiY3VzdG9tXCIpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KFwic2hvd0N1c3RvbVwiKTtcblxuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseUxpbmVIZWlnaHQoZWRpdG9yLCB2YWx1ZSkge1xuICAgICAgICBlZGl0b3IuZm9jdXMoKTtcbiAgICAgICAgZWRpdG9yLmZvcm1hdHRlci50b2dnbGUoXCJsaW5lSGVpZ2h0XCIsIHt2YWx1ZTogdmFsdWV9KTtcbiAgICAgICAgZWRpdG9yLm5vZGVDaGFuZ2VkKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUxpbmVIZWlnaHQoZWRpdG9yKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IG51bGwsXG4gICAgICAgICAgc2VsZWN0ZWROb2RlLFxuICAgICAgICAgIHNlbGVjdGVkTm9kZVBhcmVudHM7XG5cbiAgICAgICAgc2VsZWN0ZWROb2RlID0gZWRpdG9yLnNlbGVjdGlvbi5nZXROb2RlKCk7XG5cbiAgICAgICAgLy8gb25seSBjaGVjayA8c3Bhbj4gZWxlbWVudHNcbiAgICAgICAgaWYgKCFfaXNMb2FkaW5nICYmIHNlbGVjdGVkTm9kZS5ub2RlTmFtZSA9PT0gXCJTUEFOXCIgJiYgX2xpbmVIZWlnaHRUb29sKSB7XG5cbiAgICAgICAgICB2YWx1ZSA9IGVkaXRvci5kb20uZ2V0U3R5bGUoc2VsZWN0ZWROb2RlLCBcImxpbmUtaGVpZ2h0XCIpO1xuXG4gICAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgLy8gdHJhdmVyc2UgdXAgdGhlIG5vZGVzIHBhcmVudHMgdG8gZmluZCB0aGUgcm9vdCA8c3Bhbj4gbm9kZSB0aGF0IGRvZXMgaGF2ZSBsaW5lIGhlaWdodCBhcHBsaWVkXG4gICAgICAgICAgICBzZWxlY3RlZE5vZGVQYXJlbnRzID0gZWRpdG9yLmRvbS5nZXRQYXJlbnRzKHNlbGVjdGVkTm9kZSk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWROb2RlUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWROb2RlUGFyZW50c1tpXS5ub2RlTmFtZSA9PT0gXCJTUEFOXCIgJiYgZWRpdG9yLmRvbS5nZXRTdHlsZShzZWxlY3RlZE5vZGVQYXJlbnRzW2ldLCBcImxpbmUtaGVpZ2h0XCIpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBlZGl0b3IuZG9tLmdldFN0eWxlKHNlbGVjdGVkTm9kZVBhcmVudHNbaV0sIFwibGluZS1oZWlnaHRcIik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBsaW5lIGhlaWdodCB0b29sIHNlbGVjdGlvblxuICAgICAgICAgICAgX2xpbmVIZWlnaHRUb29sLnZhbHVlKHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEluaXRpYWxpemUgVGlueU1DRS5cbiAgICAgIGZ1bmN0aW9uIGluaXRUaW55TUNFKCkge1xuICAgICAgICAkc2NvcGUudGlueW1jZU9wdGlvbnMgPSB7XG4gICAgICAgICAgcGx1Z2luczogXCJjb2RlIGNvbG9ycGlja2VyIHRleHRjb2xvciB3b3JkY291bnRcIixcbiAgICAgICAgICBza2luX3VybDogXCIvL3MzLmFtYXpvbmF3cy5jb20vcmlzZS1jb21tb24vc3R5bGVzL3RpbnltY2UvcmlzZVwiLFxuICAgICAgICAgIGZvbnRfZm9ybWF0czogZ2V0Rm9udEZvcm1hdHMoKSxcbiAgICAgICAgICBmb3JtYXRzOiB7XG4gICAgICAgICAgICBmb250c2l6ZTogeyBpbmxpbmU6IFwic3BhblwiLCBzcGxpdDogZmFsc2UsIHN0eWxlczogeyBmb250U2l6ZTogXCIldmFsdWVcIiB9IH0sXG4gICAgICAgICAgICBsaW5lSGVpZ2h0OiB7IGlubGluZTogXCJzcGFuXCIsIHN0eWxlczogeyBsaW5lSGVpZ2h0OiBcIiV2YWx1ZVwiIH0gfSxcbiAgICAgICAgICAgIHBhcmFncmFwaDogeyBibG9jazogXCJwXCIsIHN0eWxlczogeyBtYXJnaW46IFwiMFwiIH0gfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29udGVudF9jc3M6IF9nb29nbGVGb250VXJscyxcbiAgICAgICAgICBzdHlsZV9mb3JtYXRzX21lcmdlOiB0cnVlLFxuICAgICAgICAgIGZvbnRzaXplX2Zvcm1hdHM6IEZPTlRfU0laRVMsXG4gICAgICAgICAgbWluX2hlaWdodDogMTc1LFxuICAgICAgICAgIG1lbnViYXI6IGZhbHNlLFxuICAgICAgICAgIHRvb2xiYXIxOiBcImZvbnRzZWxlY3QgZm9udHNpemVzZWxlY3QgfCBcIiArXG4gICAgICAgICAgICBcImZvcmVjb2xvciBiYWNrY29sb3IgfCBcIiArXG4gICAgICAgICAgICBcImJvbGQgaXRhbGljIHVuZGVybGluZSB8IFwiICtcbiAgICAgICAgICAgIFwiYWxpZ25sZWZ0IGFsaWduY2VudGVyIGFsaWducmlnaHQgYWxpZ25qdXN0aWZ5IHwgXCIgK1xuICAgICAgICAgICAgXCJidWxsaXN0IG51bWxpc3QgaW5kZW50IG91dGRlbnQgbGluZWhlaWdodCB8IFwiICtcbiAgICAgICAgICAgIFwicmVtb3ZlZm9ybWF0IGNvZGVcIixcbiAgICAgICAgICBzZXR1cDogZnVuY3Rpb24oZWRpdG9yKSB7XG4gICAgICAgICAgICAvLyBhZGQgdGhlIExpbmUgSGVpZ2h0IGxpc3QgYm94XG4gICAgICAgICAgICBlZGl0b3IuYWRkQnV0dG9uKFwibGluZWhlaWdodFwiLCB7XG4gICAgICAgICAgICAgIHR5cGU6IFwibGlzdGJveFwiLFxuICAgICAgICAgICAgICB0ZXh0OiBcIkxpbmUgSGVpZ2h0XCIsXG4gICAgICAgICAgICAgIHRpdGxlOiBcIkxpbmUgSGVpZ2h0XCIsXG4gICAgICAgICAgICAgIGljb246IGZhbHNlLFxuICAgICAgICAgICAgICB2YWx1ZXM6IFtcbiAgICAgICAgICAgICAgICB7dGV4dDpcIlNpbmdsZVwiLCB2YWx1ZTogXCIxXCJ9LFxuICAgICAgICAgICAgICAgIHt0ZXh0OlwiRG91YmxlXCIsIHZhbHVlOiBcIjJcIn1cbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgb25zZWxlY3Q6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBhcHBseUxpbmVIZWlnaHQoZWRpdG9yLCB0aGlzLnZhbHVlKCkpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvblBvc3RSZW5kZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBzYXZlIGEgcmVmZXJlbmNlIHRvIHRoZSBjdXN0b20gbGluZSBoZWlnaHQgbGlzdGJveFxuICAgICAgICAgICAgICAgIF9saW5lSGVpZ2h0VG9vbCA9IHRoaXM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBlZGl0b3Iub24oXCJpbml0XCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAvLyBTZXQgd2lkdGggb2YgZWRpdGFibGUgYXJlYSB0byBiZSB0aGUgc2FtZSBhcyB0aGF0IG9mIHRoZSBQbGFjZWhvbGRlci5cbiAgICAgICAgICAgICAgdmFyIG1jZUNvbnRhaW5lckRpdldpZHRoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tY2UtY29udGFpbmVyLWJvZHlcIikub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICAgIHZhciBwbGFjZWhvbGRlcldpZHRoID0gX3ByZWZzLmdldEludChcInJzV1wiKTtcblxuICAgICAgICAgICAgICBpZiAocGxhY2Vob2xkZXJXaWR0aCA+IG1jZUNvbnRhaW5lckRpdldpZHRoKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tY2UtZWRpdC1hcmVhIGlmcmFtZVwiKS5jb250ZW50RG9jdW1lbnQuYm9keS5zdHlsZS53aWR0aCA9IHBsYWNlaG9sZGVyV2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tY2UtZWRpdC1hcmVhIGlmcmFtZVwiKS5zdHlsZS53aWR0aCA9IHBsYWNlaG9sZGVyV2lkdGggKyBcInB4XCI7XG4gICAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICAgIC8vIGVuc3VyZSBjdXN0b20gZm9udHMgYXJlIGFkZGVkIHRvIGZyYW1lIHdpdGggZXZlcnkgZWRpdG9yIGluaXQoKSBjYWxsIHRvIGFjY291bnQgZm9yIGVkaXRvciByZWZyZXNoXG4gICAgICAgICAgICAgIGFkZEN1c3RvbUZvbnRzVG9GcmFtZShlZGl0b3IpO1xuXG4gICAgICAgICAgICAgIGlmIChfaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gb25seSBjYWxsIHRoaXMgd2hlbiBpbml0aWFsbHkgbG9hZGluZywgaXQgbG9hZHMgYWxsIHByZXZpb3VzbHkgc2F2ZWQgY3VzdG9tIGZvbnRzXG4gICAgICAgICAgICAgICAgYWRkQ3VzdG9tRm9udHNUb0RvY3VtZW50KCRzY29wZS5zZXR0aW5ncy5hZGRpdGlvbmFsUGFyYW1zLmN1c3RvbUZvbnRzLmZvbnRzKTtcblxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIGZvbnRzZWxlY3QgYW5kIGZvbnRzaXplIHRvb2xzIHRvIHNlbGVjdCBkZWZhdWx0c1xuICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZChcIkZvbnROYW1lXCIsIGZhbHNlLCBcInZlcmRhbmEsZ2VuZXZhLHNhbnMtc2VyaWZcIik7XG4gICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKFwiRm9udFNpemVcIiwgZmFsc2UsIFwiMjRweFwiKTtcblxuICAgICAgICAgICAgICAgIC8vIEFwcGx5aW5nIG5vIG1hcmdpbiBvciBwYWRkaW5nIGZvciBhbGwgcGFyYWdyYXBoc1xuICAgICAgICAgICAgICAgIGVkaXRvci5mb3JtYXR0ZXIuYXBwbHkoXCJwYXJhZ3JhcGhcIik7XG5cbiAgICAgICAgICAgICAgICAvLyBSZWdpc3RlciBhcHBseWluZyBsaW5lLWhlaWdodCBzdHlsaW5nIG9uIGFsbCA8c3Bhbj4gZWxlbWVudHNcbiAgICAgICAgICAgICAgICBlZGl0b3IuZm9ybWF0dGVyLnJlZ2lzdGVyKFwibGluZUhlaWdodFwiLCB7aW5saW5lIDogXCJzcGFuXCIsIHN0eWxlcyA6IHtsaW5lSGVpZ2h0IDogXCIldmFsdWVcIn19KTtcblxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIGxpbmUgaGVpZ2h0IHNlbGVjdGlvbiB0byBub3QganVzdCBkZWZhdWx0IG9uIFNpbmdsZSwgYnV0IGRpc3BsYXkgU2luZ2xlIGluIHRvb2wgdGV4dFxuICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gZmlyc3QgY2hhbmdlIHNlbGVjdGlvbiwgdGhlbiBjaGFuZ2UgYmFja1xuICAgICAgICAgICAgICAgIF9saW5lSGVpZ2h0VG9vbC52YWx1ZShcIjJcIik7XG4gICAgICAgICAgICAgICAgX2xpbmVIZWlnaHRUb29sLnZhbHVlKFwiMVwiKTtcblxuICAgICAgICAgICAgICAgIC8vIGZvcmNlIGVkaXRvciB0byBhcHBseSBzaW5nbGUgc3BhY2luZyBhcyBkZWZhdWx0XG4gICAgICAgICAgICAgICAgYXBwbHlMaW5lSGVpZ2h0KGVkaXRvciwgXCIxXCIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaGFwcGVucyB3aGVuIGEgY3VzdG9tIGZvbnQgd2FzIGxvYWRlZCBhbmQgYSByZWZyZXNoIG9mIGVkaXRvciBvY2N1cnJlZFxuXG4gICAgICAgICAgICAgICAgLy8gZm9jdXMgY3Vyc29yIHRvIHRoZSBlbmQgb2YgdGhlIHRleHRcbiAgICAgICAgICAgICAgICBlZGl0b3Iuc2VsZWN0aW9uLnNlbGVjdChlZGl0b3IuZ2V0Qm9keSgpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBlZGl0b3Iuc2VsZWN0aW9uLmNvbGxhcHNlKGZhbHNlKTtcblxuICAgICAgICAgICAgICAgIGlmIChfY3VzdG9tRm9udFRvU2VsZWN0KSB7XG4gICAgICAgICAgICAgICAgICAvLyBzZWxlY3QgdGhlIGN1c3RvbSBmb250IGluIGZvbnRzZWxlY3QgbGlzdFxuICAgICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKFwiRm9udE5hbWVcIiwgZmFsc2UsIF9jdXN0b21Gb250VG9TZWxlY3QucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpLnRvTG93ZXJDYXNlKCkgKyBcIixzYW5zLXNlcmlmXCIpO1xuICAgICAgICAgICAgICAgICAgX2N1c3RvbUZvbnRUb1NlbGVjdCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgX2lzTG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGVkaXRvci5vbihcIkV4ZWNDb21tYW5kXCIsIGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICAgICAgaW5pdENvbW1hbmRzKGVkaXRvciwgYXJncyk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZWRpdG9yLm9uKFwiTm9kZUNoYW5nZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gTm9kZUNoYW5nZSBmaXJlcyB3aGVuIHRoZSBzZWxlY3Rpb24gaXMgbW92ZWQgdG8gYSBuZXcgbG9jYXRpb24gb3IgdGhlIERPTSBpcyB1cGRhdGVkIGJ5IHNvbWUgY29tbWFuZFxuICAgICAgICAgICAgICAvLyBVcGRhdGUgd2hpY2ggc2VsZWN0aW9uIHNob3dzIGluIGxpbmUgaGVpZ2h0IHRvb2xcbiAgICAgICAgICAgICAgdXBkYXRlTGluZUhlaWdodChlZGl0b3IpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICB9LFxuICAgICAgICAgIGluaXRfaW5zdGFuY2VfY2FsbGJhY2s6IGZ1bmN0aW9uKGVkaXRvcikge1xuICAgICAgICAgICAgdmFyIG9sZEFwcGx5ID0gZWRpdG9yLmZvcm1hdHRlci5hcHBseSxcbiAgICAgICAgICAgICAgb2xkUmVtb3ZlID0gZWRpdG9yLmZvcm1hdHRlci5yZW1vdmU7XG5cbiAgICAgICAgICAgIC8vIFJlZmVyZW5jZSAtIGh0dHA6Ly9nb28uZ2wvNTVJaFdJXG4gICAgICAgICAgICBlZGl0b3IuZm9ybWF0dGVyLmFwcGx5ID0gZnVuY3Rpb24gYXBwbHkobmFtZSwgdmFycywgbm9kZSkge1xuICAgICAgICAgICAgICB2YXIgYXJncyA9IHtcbiAgICAgICAgICAgICAgICBjb21tYW5kOiBuYW1lLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YXJzLnZhbHVlXG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgb2xkQXBwbHkobmFtZSwgdmFycywgbm9kZSk7XG4gICAgICAgICAgICAgIGVkaXRvci5maXJlKFwiRXhlY0NvbW1hbmRcIiwgYXJncyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBlZGl0b3IuZm9ybWF0dGVyLnJlbW92ZSA9IGZ1bmN0aW9uIHJlbW92ZShuYW1lLCB2YXJzLCBub2RlKSB7XG4gICAgICAgICAgICAgIHZhciBhcmdzID0ge1xuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IG5hbWUsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICh2YXJzICYmIHZhcnMudmFsdWUpID8gdmFycy52YWx1ZSA6IG51bGxcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBvbGRSZW1vdmUobmFtZSwgdmFycywgbm9kZSk7XG4gICAgICAgICAgICAgIGVkaXRvci5maXJlKFwiRXhlY0NvbW1hbmRcIiwgYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gSW5pdGlhbGl6ZSBUaW55TUNFIHRvb2xiYXIuXG4gICAgICBmdW5jdGlvbiBhZGRDdXN0b21Gb250c1RvRnJhbWUoZWRpdG9yKSB7XG4gICAgICAgIHZhciBkb2MgPSBlZGl0b3IuZ2V0RG9jKCk7XG5cbiAgICAgICAgaWYgKCRzY29wZS5zZXR0aW5ncy5hZGRpdGlvbmFsUGFyYW1zLmN1c3RvbUZvbnRzLmZvbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiBnZXRTaGVldCgpIHtcbiAgICAgICAgICAgIHZhciBzaGVldCA9IGRvYy5zdHlsZVNoZWV0c1swXTtcblxuICAgICAgICAgICAgaWYgKHNoZWV0KSB7XG4gICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuc2V0dGluZ3MuYWRkaXRpb25hbFBhcmFtcy5jdXN0b21Gb250cy5mb250cywgZnVuY3Rpb24gKGZvbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgcnVsZSA9IFwiZm9udC1mYW1pbHk6IFwiICsgZm9udC5mYW1pbHkucmVwbGFjZSgvJy9nLCBcIlwiKSArIFwiOyBcIiArXG4gICAgICAgICAgICAgICAgICBcInNyYzogdXJsKCdcIiArIGZvbnQudXJsLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKSArIFwiJyk7XCI7XG5cbiAgICAgICAgICAgICAgICAvLyBsb2FkIGZvbnRcbiAgICAgICAgICAgICAgICBzaGVldC5hZGRSdWxlKFwiQGZvbnQtZmFjZVwiLCBydWxlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgZ2V0U2hlZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gYWRkQ3VzdG9tRm9udHNUb0RvY3VtZW50KGZvbnRzLCBjYikge1xuXG4gICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICAgIGlmIChjYiAmJiB0eXBlb2YgY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgY2IoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShmb250cykgJiYgZm9udHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uIGdldFNoZWV0KCkge1xuICAgICAgICAgICAgdmFyIHNoZWV0ID0gZG9jdW1lbnQuc3R5bGVTaGVldHNbMF07XG5cbiAgICAgICAgICAgIGlmIChzaGVldCkge1xuICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZm9udHMsIGZ1bmN0aW9uIChmb250KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBcImZvbnQtZmFtaWx5OiBcIiArIGZvbnQuZmFtaWx5LnJlcGxhY2UoLycvZywgXCJcIikudG9Mb3dlckNhc2UoKSArIFwiOyBcIiArXG4gICAgICAgICAgICAgICAgICBcInNyYzogdXJsKCdcIiArIGZvbnQudXJsLnJlcGxhY2UoLycvZywgXCJcXFxcJ1wiKSArIFwiJyk7XCI7XG5cbiAgICAgICAgICAgICAgICAvLyBsb2FkIGZvbnRcbiAgICAgICAgICAgICAgICBzaGVldC5hZGRSdWxlKFwiQGZvbnQtZmFjZVwiLCBydWxlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgZ2V0U2hlZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRDdXN0b21Gb250Rm9ybWF0cygpIHtcbiAgICAgICAgdmFyIGZvcm1hdHMgPSBcIlwiO1xuXG4gICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuc2V0dGluZ3MuYWRkaXRpb25hbFBhcmFtcy5jdXN0b21Gb250cy5mb250cywgZnVuY3Rpb24gKGZvbnQpIHtcbiAgICAgICAgICBmb3JtYXRzICs9IGZvbnQuZmFtaWx5ICsgXCI9XCIgKyBmb250LmZhbWlseS5yZXBsYWNlKC8nL2csIFwiXCIpLnRvTG93ZXJDYXNlKCkgKyBcIixzYW5zLXNlcmlmO1wiO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0cztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0Rm9udEZvcm1hdHMoKSB7XG4gICAgICAgIHJldHVybiBcIkFkZCBDdXN0b20gRm9udD1jdXN0b207XCIgKyBnZXRDdXN0b21Gb250Rm9ybWF0cygpICsgRk9OVF9GQU1JTElFUyArIF9nb29nbGVGb250cztcbiAgICAgIH1cblxuICAgICAgJHNjb3BlLnByb2Nlc3NGb250cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgICAgIGZhbWlsaWVzID0gXCJcIixcbiAgICAgICAgICAkd3JhcHBlcjtcblxuICAgICAgICB3cmFwcGVyLmlubmVySFRNTCA9ICRzY29wZS5zZXR0aW5ncy5hZGRpdGlvbmFsUGFyYW1zLmRhdGE7XG4gICAgICAgICR3cmFwcGVyID0gJCh3cmFwcGVyKTtcblxuICAgICAgICAvLyBnbyB0aHJvdWdoIGZvbnRzIGFwcGxpZWQgaW4gaHRtbCB0byBwcmVwYXJlIGEgbGlzdCB0byBmaW5kIG91dCB3aGljaCBvbmVzIGFyZSBnb29nbGUgZm9udHNcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCR3cmFwcGVyLmZpbmQoXCJzcGFuXCIpLCBmdW5jdGlvbihzcGFuKSB7XG4gICAgICAgICAgdmFyIGZhbWlseSA9ICQoc3BhbikuY3NzKFwiZm9udC1mYW1pbHlcIik7XG4gICAgICAgICAgLy8gcmVtb3ZlIHNpbmdsZSBxdW90ZXMgKGlmIGFwcGxpZWQpIGFuZCBmYWxsYmFjayBmb250c1xuICAgICAgICAgIGZhbWlseSA9IGZhbWlseS5yZXBsYWNlKC9bJ10vZywgXCJcIikuc3BsaXQoXCIsXCIpWzBdO1xuXG4gICAgICAgICAgaWYgKGZhbWlsaWVzLmluZGV4T2YoZmFtaWx5KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIGFkZCBmb250IGZhbWlseSB0byB0aGUgbGlzdFxuICAgICAgICAgICAgZmFtaWxpZXMgKz0gZmFtaWx5ICsgXCIsXCI7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBzYXZlIHdoaWNoIGdvb2dsZSBmb250cyB3ZXJlIHVzZWRcbiAgICAgICAgJHNjb3BlLnNldHRpbmdzLmFkZGl0aW9uYWxQYXJhbXMuZ29vZ2xlRm9udHMgPSBnb29nbGVGb250TG9hZGVyLmdldEZvbnRzVXNlZChmYW1pbGllcyk7XG5cbiAgICAgICAgLy8gcHJvY2VlZCB3aXRoIHNhdmluZyBzZXR0aW5nc1xuICAgICAgICAkc2NvcGUuJHBhcmVudC5zYXZlU2V0dGluZ3MoKTtcbiAgICAgIH07XG5cbiAgICAgICRzY29wZS4kd2F0Y2goXCJ0aW55bWNlT3B0aW9ucy5mb250X2Zvcm1hdHNcIiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpZiAoIV9pc0xvYWRpbmcpIHtcbiAgICAgICAgICAgIC8vIGxldmVyYWdlIHVpLXRpbnltY2Ugd29ya2Fyb3VuZCBvZiByZWZyZXNoaW5nIGVkaXRvclxuICAgICAgICAgICAgJHNjb3BlLiRicm9hZGNhc3QoXCIkdGlueW1jZTpyZWZyZXNoXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS4kd2F0Y2goXCJzZXR0aW5ncy5hZGRpdGlvbmFsUGFyYW1zLmN1c3RvbUZvbnRzLmZvbnRzXCIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaWYgKF9pc0xvYWRpbmcpIHtcblxuICAgICAgICAgICAgLy8gTG9hZCBHb29nbGUgZm9udHMuXG4gICAgICAgICAgICBnb29nbGVGb250TG9hZGVyLmdldEdvb2dsZUZvbnRzKCkudGhlbihmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgIGlmIChkYXRhICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgX2dvb2dsZUZvbnRzID0gZGF0YS5mb250cztcbiAgICAgICAgICAgICAgICBfZ29vZ2xlRm9udFVybHMgPSBkYXRhLnVybHM7XG5cbiAgICAgICAgICAgICAgICAvLyBraWNrIG9mZiBpbml0aWFsaXphdGlvbiBub3cgdGhhdCBjdXN0b21Gb250cy5mb250cyBoYXMgYSB2YWx1ZSBhbmQgZ29vZ2xlIGZvbnRzIGhhdmUgYmVlbiBsb2FkZWRcbiAgICAgICAgICAgICAgICBpbml0VGlueU1DRSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgJGxvZy53YXJuKGVycm9yKTtcbiAgICAgICAgICAgICAgLy8ga2ljayBvZmYgaW5pdGlhbGl6YXRpb24gbm93IHRoYXQgY3VzdG9tRm9udHMuZm9udHMgaGFzIGEgdmFsdWUsIGRpc3JlZ2FyZCBubyBnb29nbGUgZm9udHNcbiAgICAgICAgICAgICAgaW5pdFRpbnlNQ0UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgICRzY29wZS4kb24oXCJjdXN0b21Gb250TG9hZGVkXCIsIGZ1bmN0aW9uIChlLCBkYXRhKSB7XG4gICAgICAgIGFkZEN1c3RvbUZvbnRzVG9Eb2N1bWVudChbZGF0YV0pO1xuXG4gICAgICAgIF9jdXN0b21Gb250VG9TZWxlY3QgPSBkYXRhLmZhbWlseS5yZXBsYWNlKC8nL2csIFwiXCIpO1xuXG4gICAgICAgICRzY29wZS5zZXR0aW5ncy5hZGRpdGlvbmFsUGFyYW1zLmN1c3RvbUZvbnRzLmZvbnRzLnB1c2goZGF0YSk7XG5cbiAgICAgICAgLy8gdXBkYXRlIHZhbHVlIG9mIGZvbnRfZm9ybWF0c1xuICAgICAgICAkc2NvcGUudGlueW1jZU9wdGlvbnMuZm9udF9mb3JtYXRzID0gZ2V0Rm9udEZvcm1hdHMoKTtcbiAgICAgIH0pO1xuXG4gICAgfV0pXG4gIC52YWx1ZShcImRlZmF1bHRTZXR0aW5nc1wiLCB7XG4gICAgXCJwYXJhbXNcIjoge30sXG4gICAgXCJhZGRpdGlvbmFsUGFyYW1zXCI6IHtcbiAgICAgIFwiZGF0YVwiOiBcIlwiLFxuICAgICAgXCJjdXN0b21Gb250c1wiOiB7XG4gICAgICAgIFwiZm9ybWF0c1wiOiBcIlwiLCAvLyBsZWdhY3ksIGJhY2t3YXJkcyBjb21wYXRpYmxlXG4gICAgICAgIFwiZm9udHNcIjogW11cbiAgICAgIH0sXG4gICAgICBcImdvb2dsZUZvbnRzXCI6IFtdLFxuICAgICAgXCJzY3JvbGxcIjoge31cbiAgICB9XG4gIH0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LnRleHQuc2V0dGluZ3NcIilcbiAgLmRpcmVjdGl2ZShcImN1c3RvbUZvbnRcIiwgW1wiJGxvZ1wiLFxuICAgIGZ1bmN0aW9uICgvKiRsb2cqLykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcmVzdHJpY3Q6IFwiQVwiLFxuICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCBlbGVtKSB7XG4gICAgICAgICAgdmFyICRlbCA9ICQoZWxlbSk7XG5cbiAgICAgICAgICAkc2NvcGUudXJsID0gXCJcIjtcblxuICAgICAgICAgIC8vIEV4dHJhY3QgZm9udCBuYW1lIGZyb20gZm9udCBVUkwuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0RmFtaWx5KCkge1xuICAgICAgICAgICAgdmFyIGZhbWlseSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmICgkc2NvcGUudXJsKSB7XG4gICAgICAgICAgICAgIC8vIGRlY29kZSBlc2NhcGUgc2VxdWVuY2VzIHRvIGFjY291bnQgZm9yIHNwYWNlcyBpbiBmb250IG5hbWVcbiAgICAgICAgICAgICAgZmFtaWx5ID0gZGVjb2RlVVJJKCRzY29wZS51cmwudHJpbSgpKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbWlseS5zcGxpdChcIi9cIikucG9wKCkuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBcHBseSBjdXN0b20gZm9udCB0byBwcmV2aWV3IHRleHQuXG4gICAgICAgICAgJHNjb3BlLmFkZEZvbnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBmYW1pbHkgPSBnZXRGYW1pbHkoKSxcbiAgICAgICAgICAgICAgdXJsO1xuXG4gICAgICAgICAgICBpZiAoZmFtaWx5KSB7XG4gICAgICAgICAgICAgIHVybCA9ICRzY29wZS51cmwudHJpbSgpO1xuICAgICAgICAgICAgICAvLyBicm9hZGNhc3QgY3VzdG9tIGZvbnQgbG9hZGVkXG4gICAgICAgICAgICAgICRzY29wZS4kZW1pdChcImN1c3RvbUZvbnRMb2FkZWRcIiwge2ZhbWlseTpmYW1pbHksIHVybDp1cmx9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJGVsLm1vZGFsKFwiaGlkZVwiKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgJHNjb3BlLiRvbihcInNob3dDdXN0b21cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgJGVsLm1vZGFsKFwic2hvd1wiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgfV0pO1xuXG5hbmd1bGFyLm1vZHVsZShcInJpc2V2aXNpb24ud2lkZ2V0LnRleHQuc2V0dGluZ3NcIilcbiAgLmNvbnN0YW50KFwiRk9OVF9GQU1JTElFU1wiLFxuICAgIFwiQW5kYWxlIE1vbm89YW5kYWxlIG1vbm8sbW9ub3NwYWNlO1wiICtcbiAgICBcIkFyaWFsPWFyaWFsLGhlbHZldGljYSxzYW5zLXNlcmlmO1wiICtcbiAgICBcIkFyaWFsIEJsYWNrPWFyaWFsIGJsYWNrLHNhbnMtc2VyaWY7XCIgK1xuICAgIFwiQm9vayBBbnRpcXVhPWJvb2sgYW50aXF1YSxwYWxhdGlubyxzZXJpZjtcIiArXG4gICAgXCJDb21pYyBTYW5zIE1TPWNvbWljIHNhbnMgbXMsc2Fucy1zZXJpZjtcIiArXG4gICAgXCJDb3VyaWVyIE5ldz1jb3VyaWVyIG5ldyxjb3VyaWVyLG1vbm9zcGFjZTtcIiArXG4gICAgXCJHZW9yZ2lhPWdlb3JnaWEscGFsYXRpbm8sc2VyaWY7XCIgK1xuICAgIFwiSGVsdmV0aWNhPWhlbHZldGljYSxhcmlhbCxzYW5zLXNlcmlmO1wiICtcbiAgICBcIkltcGFjdD1pbXBhY3Qsc2Fucy1zZXJpZjtcIiArXG4gICAgXCJTeW1ib2w9c3ltYm9sO1wiICtcbiAgICBcIlRhaG9tYT10YWhvbWEsYXJpYWwsaGVsdmV0aWNhLHNhbnMtc2VyaWY7XCIgK1xuICAgIFwiVGVybWluYWw9dGVybWluYWwsbW9uYWNvLG1vbm9zcGFjZTtcIiArXG4gICAgXCJUaW1lcyBOZXcgUm9tYW49dGltZXMgbmV3IHJvbWFuLHRpbWVzLHNlcmlmO1wiICtcbiAgICBcIlRyZWJ1Y2hldCBNUz10cmVidWNoZXQgbXMsZ2VuZXZhLHNhbnMtc2VyaWY7XCIgK1xuICAgIFwiVmVyZGFuYT12ZXJkYW5hLGdlbmV2YSxzYW5zLXNlcmlmO1wiICtcbiAgICBcIldlYmRpbmdzPXdlYmRpbmdzO1wiICtcbiAgICBcIldpbmdkaW5ncz13aW5nZGluZ3MsemFwZiBkaW5nYmF0cztcIilcbiAgLmNvbnN0YW50KFwiRk9OVF9TSVpFU1wiLFxuICAgIFwiOHB4IDlweCAxMHB4IDExcHggMTJweCAxNHB4IDE4cHggMjRweCAzMHB4IDM2cHggNDhweCA2MHB4IDcycHggOTZweFwiKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
