angular.module("pascalprecht.translate",["ng"]).run(["$translate",function(t){var e=t.storageKey(),n=t.storage(),a=function(){var a=t.preferredLanguage();angular.isString(a)?t.use(a):n.put(e,t.use())};n?n.get(e)?t.use(n.get(e))["catch"](a):a():angular.isString(t.preferredLanguage())&&t.use(t.preferredLanguage())}]),angular.module("pascalprecht.translate").provider("$translate",["$STORAGE_KEY",function(t){var e,n,a,i,o,r,s,l,c,u,d,p,f,h,g,m={},v=[],b=t,y=[],$=!1,w="translate-cloak",k=!1,x=".",C="2.5.2",T=function(){var t,e,n=window.navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(t=0;t<n.languages.length;t++)if(e=n.languages[t],e&&e.length)return e;for(t=0;t<a.length;t++)if(e=n[a[t]],e&&e.length)return e;return null};T.displayName="angular-translate/service: getFirstBrowserLanguage";var E=function(){return(T()||"").split("-").join("_")};E.displayName="angular-translate/service: getLocale";var D=function(t,e){for(var n=0,a=t.length;a>n;n++)if(t[n]===e)return n;return-1},S=function(){return this.replace(/^\s+|\s+$/g,"")},O=function(t){for(var e=[],a=angular.lowercase(t),i=0,o=v.length;o>i;i++)e.push(angular.lowercase(v[i]));if(D(e,a)>-1)return t;if(n){var r;for(var s in n){var l=!1,c=Object.prototype.hasOwnProperty.call(n,s)&&angular.lowercase(s)===angular.lowercase(t);if("*"===s.slice(-1)&&(l=s.slice(0,-1)===t.slice(0,s.length-1)),(c||l)&&(r=n[s],D(e,angular.lowercase(r))>-1))return r}}var u=t.split("_");return u.length>1&&D(e,angular.lowercase(u[0]))>-1?u[0]:t},A=function(t,e){if(!t&&!e)return m;if(t&&!e){if(angular.isString(t))return m[t]}else angular.isObject(m[t])||(m[t]={}),angular.extend(m[t],M(e));return this};this.translations=A,this.cloakClassName=function(t){return t?(w=t,this):w};var M=function(t,e,n,a){var i,o,r,s;e||(e=[]),n||(n={});for(i in t)Object.prototype.hasOwnProperty.call(t,i)&&(s=t[i],angular.isObject(s)?M(s,e.concat(i),n,i):(o=e.length?""+e.join(x)+x+i:i,e.length&&i===a&&(r=""+e.join(x),n[r]="@:"+o),n[o]=s));return n};this.addInterpolation=function(t){return y.push(t),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(t){return u=t,this},this.useSanitizeValueStrategy=function(t){return $=t,this},this.preferredLanguage=function(t){return P(t),this};var P=function(t){return t&&(e=t),e};this.translationNotFoundIndicator=function(t){return this.translationNotFoundIndicatorLeft(t),this.translationNotFoundIndicatorRight(t),this},this.translationNotFoundIndicatorLeft=function(t){return t?(f=t,this):f},this.translationNotFoundIndicatorRight=function(t){return t?(h=t,this):h},this.fallbackLanguage=function(t){return L(t),this};var L=function(t){return t?(angular.isString(t)?(i=!0,a=[t]):angular.isArray(t)&&(i=!1,a=t),angular.isString(e)&&D(a,e)<0&&a.push(e),this):i?a[0]:a};this.use=function(t){if(t){if(!m[t]&&!d)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+t+"'");return o=t,this}return o};var I=function(t){return t?(b=t,void 0):l?l+b:b};this.storageKey=I,this.useUrlLoader=function(t,e){return this.useLoader("$translateUrlLoader",angular.extend({url:t},e))},this.useStaticFilesLoader=function(t){return this.useLoader("$translateStaticFilesLoader",t)},this.useLoader=function(t,e){return d=t,p=e||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(t){return s=t,this},this.storagePrefix=function(t){return t?(l=t,this):t},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(t){return c=t,this},this.usePostCompiling=function(t){return k=!!t,this},this.determinePreferredLanguage=function(t){var n=t&&angular.isFunction(t)?t():E();return e=v.length?O(n):n,this},this.registerAvailableLanguageKeys=function(t,e){return t?(v=t,e&&(n=e),this):v},this.useLoaderCache=function(t){return t===!1?g=void 0:t===!0?g=!0:"undefined"==typeof t?g="$translationCache":t&&(g=t),this},this.$get=["$log","$injector","$rootScope","$q",function(t,n,l,v){var x,T,E,F=n.get(u||"$translateDefaultInterpolation"),V=!1,_={},j={},U=function(t,n,i){if(angular.isArray(t)){var r=function(t){for(var e={},a=[],o=function(t){var a=v.defer(),o=function(n){e[t]=n,a.resolve([t,n])};return U(t,n,i).then(o,o),a.promise},r=0,s=t.length;s>r;r++)a.push(o(t[r]));return v.all(a).then(function(){return e})};return r(t)}var l=v.defer();t&&(t=S.apply(t));var c=function(){var t=e?j[e]:j[o];if(T=0,s&&!t){var n=x.get(b);if(t=j[n],a&&a.length){var i=D(a,n);T=0===i?1:0,D(a,e)<0&&a.push(e)}}return t}();return c?c.then(function(){Z(t,n,i).then(l.resolve,l.reject)},l.reject):Z(t,n,i).then(l.resolve,l.reject),l.promise},N=function(t){return f&&(t=[f,t].join(" ")),h&&(t=[t,h].join(" ")),t},H=function(t){o=t,l.$emit("$translateChangeSuccess",{language:t}),s&&x.put(U.storageKey(),o),F.setLocale(o),angular.forEach(_,function(t,e){_[e].setLocale(o)}),l.$emit("$translateChangeEnd",{language:t})},R=function(t){if(!t)throw"No language key specified for loading.";var e=v.defer();l.$emit("$translateLoadingStart",{language:t}),V=!0;var a=g;"string"==typeof a&&(a=n.get(a));var i=angular.extend({},p,{key:t,$http:angular.extend({},{cache:a},p.$http)});return n.get(d)(i).then(function(n){var a={};l.$emit("$translateLoadingSuccess",{language:t}),angular.isArray(n)?angular.forEach(n,function(t){angular.extend(a,M(t))}):angular.extend(a,M(n)),V=!1,e.resolve({key:t,table:a}),l.$emit("$translateLoadingEnd",{language:t})},function(t){l.$emit("$translateLoadingError",{language:t}),e.reject(t),l.$emit("$translateLoadingEnd",{language:t})}),e.promise};if(s&&(x=n.get(s),!x.get||!x.put))throw new Error("Couldn't use storage '"+s+"', missing get() or put() method!");angular.isFunction(F.useSanitizeValueStrategy)&&F.useSanitizeValueStrategy($),y.length&&angular.forEach(y,function(t){var a=n.get(t);a.setLocale(e||o),angular.isFunction(a.useSanitizeValueStrategy)&&a.useSanitizeValueStrategy($),_[a.getInterpolationIdentifier()]=a});var q=function(t){var e=v.defer();return Object.prototype.hasOwnProperty.call(m,t)?e.resolve(m[t]):j[t]?j[t].then(function(t){A(t.key,t.table),e.resolve(t.table)},e.reject):e.reject(),e.promise},z=function(t,e,n,a){var i=v.defer();return q(t).then(function(r){Object.prototype.hasOwnProperty.call(r,e)?(a.setLocale(t),i.resolve(a.interpolate(r[e],n)),a.setLocale(o)):i.reject()},i.reject),i.promise},B=function(t,e,n,a){var i,r=m[t];return r&&Object.prototype.hasOwnProperty.call(r,e)&&(a.setLocale(t),i=a.interpolate(r[e],n),a.setLocale(o)),i},W=function(t){if(c){var e=n.get(c)(t,o);return void 0!==e?e:t}return t},Y=function(t,e,n,i){var o=v.defer();if(t<a.length){var r=a[t];z(r,e,n,i).then(o.resolve,function(){Y(t+1,e,n,i).then(o.resolve)})}else o.resolve(W(e));return o.promise},G=function(t,e,n,i){var o;if(t<a.length){var r=a[t];o=B(r,e,n,i),o||(o=G(t+1,e,n,i))}return o},K=function(t,e,n){return Y(E>0?E:T,t,e,n)},Q=function(t,e,n){return G(E>0?E:T,t,e,n)},Z=function(t,e,n){var i=v.defer(),r=o?m[o]:m,s=n?_[n]:F;if(r&&Object.prototype.hasOwnProperty.call(r,t)){var l=r[t];"@:"===l.substr(0,2)?U(l.substr(2),e,n).then(i.resolve,i.reject):i.resolve(s.interpolate(l,e))}else{var u;c&&!V&&(u=W(t)),o&&a&&a.length?K(t,e,s).then(function(t){i.resolve(t)},function(t){i.reject(N(t))}):c&&!V&&u?i.resolve(u):i.reject(N(t))}return i.promise},J=function(t,e,n){var i,r=o?m[o]:m,s=n?_[n]:F;if(r&&Object.prototype.hasOwnProperty.call(r,t)){var l=r[t];i="@:"===l.substr(0,2)?J(l.substr(2),e,n):s.interpolate(l,e)}else{var u;c&&!V&&(u=W(t)),o&&a&&a.length?(T=0,i=Q(t,e,s)):i=c&&!V&&u?u:N(t)}return i};if(U.preferredLanguage=function(t){return t&&P(t),e},U.cloakClassName=function(){return w},U.fallbackLanguage=function(t){if(void 0!==t&&null!==t){if(L(t),d&&a&&a.length)for(var e=0,n=a.length;n>e;e++)j[a[e]]||(j[a[e]]=R(a[e]));U.use(U.use())}return i?a[0]:a},U.useFallbackLanguage=function(t){if(void 0!==t&&null!==t)if(t){var e=D(a,t);e>-1&&(E=e)}else E=0},U.proposedLanguage=function(){return r},U.storage=function(){return x},U.use=function(t){if(!t)return o;var e=v.defer();l.$emit("$translateChangeStart",{language:t});var n=O(t);return n&&(t=n),m[t]||!d||j[t]?(e.resolve(t),H(t)):(r=t,j[t]=R(t).then(function(n){return A(n.key,n.table),e.resolve(n.key),H(n.key),r===t&&(r=void 0),n},function(t){r===t&&(r=void 0),l.$emit("$translateChangeError",{language:t}),e.reject(t),l.$emit("$translateChangeEnd",{language:t})})),e.promise},U.storageKey=function(){return I()},U.isPostCompilingEnabled=function(){return k},U.refresh=function(t){function e(){i.resolve(),l.$emit("$translateRefreshEnd",{language:t})}function n(){i.reject(),l.$emit("$translateRefreshEnd",{language:t})}if(!d)throw new Error("Couldn't refresh translation table, no loader registered!");var i=v.defer();if(l.$emit("$translateRefreshStart",{language:t}),t)m[t]?R(t).then(function(n){A(n.key,n.table),t===o&&H(o),e()},n):n();else{var r=[],s={};if(a&&a.length)for(var c=0,u=a.length;u>c;c++)r.push(R(a[c])),s[a[c]]=!0;o&&!s[o]&&r.push(R(o)),v.all(r).then(function(t){angular.forEach(t,function(t){m[t.key]&&delete m[t.key],A(t.key,t.table)}),o&&H(o),e()})}return i.promise},U.instant=function(t,n,i){if(null===t||angular.isUndefined(t))return t;if(angular.isArray(t)){for(var r={},s=0,l=t.length;l>s;s++)r[t[s]]=U.instant(t[s],n,i);return r}if(angular.isString(t)&&t.length<1)return t;t&&(t=S.apply(t));var u,d=[];e&&d.push(e),o&&d.push(o),a&&a.length&&(d=d.concat(a));for(var p=0,f=d.length;f>p;p++){var h=d[p];if(m[h]&&"undefined"!=typeof m[h][t]&&(u=J(t,n,i)),"undefined"!=typeof u)break}return u||""===u||(u=F.interpolate(t,n),c&&!V&&(u=W(t))),u},U.versionInfo=function(){return C},U.loaderCache=function(){return g},d&&(angular.equals(m,{})&&U.use(U.use()),a&&a.length))for(var X=function(t){return A(t.key,t.table),l.$emit("$translateChangeEnd",{language:t.key}),t},te=0,ee=a.length;ee>te;te++)j[a[te]]=R(a[te]).then(X);return U}]}]),angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",["$interpolate",function(t){var e,n={},a="default",i=null,o={escaped:function(t){var e={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=angular.element("<div></div>").text(t[n]).html());return e}},r=function(t){var e;return e=angular.isFunction(o[i])?o[i](t):t};return n.setLocale=function(t){e=t},n.getInterpolationIdentifier=function(){return a},n.useSanitizeValueStrategy=function(t){return i=t,this},n.interpolate=function(e,n){return i&&(n=r(n)),t(e)(n||{})},n}]),angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",["$translate","$q","$interpolate","$compile","$parse","$rootScope",function(t,e,n,a,i,o){return{restrict:"AE",scope:!0,compile:function(e,r){var s=r.translateValues?r.translateValues:void 0,l=r.translateInterpolation?r.translateInterpolation:void 0,c=e[0].outerHTML.match(/translate-value-+/i),u="^(.*)("+n.startSymbol()+".*"+n.endSymbol()+")(.*)",d="^(.*)"+n.startSymbol()+"(.*)"+n.endSymbol()+"(.*)";return function(e,p,f){e.interpolateParams={},e.preText="",e.postText="";var h={},g=function(t){if(angular.equals(t,"")||!angular.isDefined(t)){var a=p.text().match(u);angular.isArray(a)?(e.preText=a[1],e.postText=a[3],h.translate=n(a[2])(e.$parent),watcherMatches=p.text().match(d),angular.isArray(watcherMatches)&&watcherMatches[2]&&watcherMatches[2].length&&e.$watch(watcherMatches[2],function(t){h.translate=t,$()})):h.translate=p.text().replace(/^\s+|\s+$/g,"")}else h.translate=t;$()},m=function(t){f.$observe(t,function(e){h[t]=e,$()})};f.$observe("translate",function(t){g(t)});for(var v in f)f.hasOwnProperty(v)&&"translateAttr"===v.substr(0,13)&&m(v);if(f.$observe("translateDefault",function(t){e.defaultText=t}),s&&f.$observe("translateValues",function(t){t&&e.$parent.$watch(function(){angular.extend(e.interpolateParams,i(t)(e.$parent))})}),c){var b=function(t){f.$observe(t,function(n){var a=angular.lowercase(t.substr(14,1))+t.substr(15);e.interpolateParams[a]=n})};for(var y in f)Object.prototype.hasOwnProperty.call(f,y)&&"translateValue"===y.substr(0,14)&&"translateValues"!==y&&b(y)}var $=function(){for(var t in h)h.hasOwnProperty(t)&&h[t]&&w(t,h[t],e,e.interpolateParams)},w=function(e,n,a,i){t(n,i,l).then(function(t){k(t,a,!0,e)},function(t){k(t,a,!1,e)})},k=function(e,n,i,o){if("translate"===o){i||"undefined"==typeof n.defaultText||(e=n.defaultText),p.html(n.preText+e+n.postText);var s=t.isPostCompilingEnabled(),l="undefined"!=typeof r.translateCompile,c=l&&"false"!==r.translateCompile;(s&&!l||c)&&a(p.contents())(n)}else{i||"undefined"==typeof n.defaultText||(e=n.defaultText);var u=f.$attr[o].substr(15);p.attr(u,e)}};e.$watch("interpolateParams",$,!0);var x=o.$on("$translateChangeSuccess",$);p.text().length&&g(""),$(),e.$on("$destroy",x)}}}}]),angular.module("pascalprecht.translate").directive("translateCloak",["$rootScope","$translate",function(t,e){return{compile:function(n){var a=function(){n.addClass(e.cloakClassName())},i=function(){n.removeClass(e.cloakClassName())},o=t.$on("$translateChangeEnd",function(){i(),o(),o=null});return a(),function(t,n,o){o.translateCloak&&o.translateCloak.length&&o.$observe("translateCloak",function(t){e(t).then(i,a)})}}}}]),angular.module("pascalprecht.translate").filter("translate",["$parse","$translate",function(t,e){var n=function(n,a,i){return angular.isObject(a)||(a=t(a)(this)),e.instant(n,a,i)};return n.$stateful=!0,n}]),function(t,e){"use strict";function n(){this.$get=["$$sanitizeUri",function(t){return function(e){var n=[];return o(e,l(n,function(e,n){return!/^unsafe/.test(t(e,n))})),n.join("")}}]}function a(t){var n=[],a=l(n,e.noop);return a.chars(t),n.join("")}function i(t){var e,n={},a=t.split(",");for(e=0;e<a.length;e++)n[a[e]]=!0;return n}function o(t,n){function a(t,a,o,s){if(a=e.lowercase(a),C[a])for(;y.last()&&T[y.last()];)i("",y.last());x[a]&&y.last()==a&&i("",a),s=$[a]||!!s,s||y.push(a);var l={};o.replace(p,function(t,e,n,a,i){var o=n||a||i||"";l[e]=r(o)}),n.start&&n.start(a,l,s)}function i(t,a){var i,o=0;if(a=e.lowercase(a))for(o=y.length-1;o>=0&&y[o]!=a;o--);if(o>=0){for(i=y.length-1;i>=o;i--)n.end&&n.end(y[i]);y.length=o}}"string"!=typeof t&&(t=null===t||"undefined"==typeof t?"":""+t);var o,s,l,b,y=[],w=t;for(y.last=function(){return y[y.length-1]};t;){if(b="",s=!0,y.last()&&D[y.last()]?(t=t.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*"+y.last()+"[^>]*>","i"),function(t,e){return e=e.replace(g,"$1").replace(v,"$1"),n.chars&&n.chars(r(e)),""}),i("",y.last())):(0===t.indexOf("<!--")?(o=t.indexOf("--",4),o>=0&&t.lastIndexOf("-->",o)===o&&(n.comment&&n.comment(t.substring(4,o)),t=t.substring(o+3),s=!1)):m.test(t)?(l=t.match(m),l&&(t=t.replace(l[0],""),s=!1)):h.test(t)?(l=t.match(d),l&&(t=t.substring(l[0].length),l[0].replace(d,i),s=!1)):f.test(t)&&(l=t.match(u),l?(l[4]&&(t=t.substring(l[0].length),l[0].replace(u,a)),s=!1):(b+="<",t=t.substring(1))),s&&(o=t.indexOf("<"),b+=0>o?t:t.substring(0,o),t=0>o?"":t.substring(o),n.chars&&n.chars(r(b)))),t==w)throw c("badparse","The sanitizer was unable to parse the following block of html: {0}",t);w=t}i()}function r(t){return t?(L.innerHTML=t.replace(/</g,"&lt;"),L.textContent):""}function s(t){return t.replace(/&/g,"&amp;").replace(b,function(t){var e=t.charCodeAt(0),n=t.charCodeAt(1);return"&#"+(1024*(e-55296)+(n-56320)+65536)+";"}).replace(y,function(t){return"&#"+t.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function l(t,n){var a=!1,i=e.bind(t,t.push);return{start:function(t,o,r){t=e.lowercase(t),!a&&D[t]&&(a=t),a||S[t]!==!0||(i("<"),i(t),e.forEach(o,function(a,o){var r=e.lowercase(o),l="img"===t&&"src"===r||"background"===r;P[r]!==!0||O[r]===!0&&!n(a,l)||(i(" "),i(o),i('="'),i(s(a)),i('"'))}),i(r?"/>":">"))},end:function(t){t=e.lowercase(t),a||S[t]!==!0||(i("</"),i(t),i(">")),t==a&&(a=!1)},chars:function(t){a||i(s(t))}}}var c=e.$$minErr("$sanitize"),u=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,d=/^<\/\s*([\w:-]+)[^>]*>/,p=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,f=/^</,h=/^<\//,g=/<!--(.*?)-->/g,m=/<!DOCTYPE([^>]*?)>/i,v=/<!\[CDATA\[(.*?)]]>/g,b=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,y=/([^\#-~| |!])/g,$=i("area,br,col,hr,img,wbr"),w=i("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),k=i("rp,rt"),x=e.extend({},k,w),C=e.extend({},w,i("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),T=e.extend({},k,i("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),E=i("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),D=i("script,style"),S=e.extend({},$,C,T,x,E),O=i("background,cite,href,longdesc,src,usemap,xlink:href"),A=i("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),M=i("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),P=e.extend({},O,M,A),L=document.createElement("pre");e.module("ngSanitize",[]).provider("$sanitize",n),e.module("ngSanitize").filter("linky",["$sanitize",function(t){var n=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/i,i=/^mailto:/i;return function(o,r){function s(t){t&&f.push(a(t))}function l(t,n){f.push("<a "),e.isDefined(r)&&f.push('target="',r,'" '),f.push('href="',t.replace(/"/g,"&quot;"),'">'),s(n),f.push("</a>")}if(!o)return o;for(var c,u,d,p=o,f=[];c=p.match(n);)u=c[0],c[2]||c[4]||(u=(c[3]?"http://":"mailto:")+u),d=c.index,s(p.substr(0,d)),l(u,c[0].replace(i,"")),p=p.substring(d+c[0].length);return s(p),t(f.join(""))}}])}(window,window.angular),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(t,e){return function(n){if(!n||!angular.isString(n.prefix)||!angular.isString(n.suffix))throw new Error("Couldn't load static files, no prefix or suffix specified!");var a=t.defer();return e(angular.extend({url:[n.prefix,n.key,n.suffix].join(""),method:"GET",params:""},n.$http)).success(function(t){a.resolve(t)}).error(function(){a.reject(n.key)}),a.promise}}]),angular.module("pascalprecht.translate").factory("$translateStaticFilesLoader",["$q","$http",function(t,e){function n(t,a){e(angular.extend({url:[t.prefix,t.key.toLowerCase(),t.suffix].join(""),method:"GET",params:""},t.$http)).success(function(t){a.resolve(t)}).error(function(){if(t.key.indexOf("_")>=0){var e=t.key.substr(0,t.key.lastIndexOf("_")),i=angular.extend({},t,{key:e});n(i,a)}else a.resolve("{}")})}return function(e){if(!e||!angular.isString(e.prefix)||!angular.isString(e.suffix))throw new Error('Couldn"t load static files, no prefix or suffix specified!');var a=t.defer();return n(e,a),a.promise}}]),angular.module("risevision.common.i18n",["pascalprecht.translate","risevision.common.i18n.config"]).config(["$translateProvider","LOCALES_PREFIX","LOCALES_SUFIX",function(t,e,n){t.useStaticFilesLoader({prefix:e,suffix:n}),t.determinePreferredLanguage().fallbackLanguage("en")}]),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.affix"),o="object"==typeof e&&e;i||a.data("bs.affix",i=new n(this,o)),"string"==typeof e&&i[e]()})}var n=function(e,a){this.options=t.extend({},n.DEFAULTS,a),this.$target=t(this.options.target).on("scroll.bs.affix.data-api",t.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",t.proxy(this.checkPositionWithEventLoop,this)),this.$element=t(e),this.affixed=this.unpin=this.pinnedOffset=null,this.checkPosition()};n.VERSION="3.2.0",n.RESET="affix affix-top affix-bottom",n.DEFAULTS={offset:0,target:window},n.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(n.RESET).addClass("affix");var t=this.$target.scrollTop(),e=this.$element.offset();return this.pinnedOffset=e.top-t},n.prototype.checkPositionWithEventLoop=function(){setTimeout(t.proxy(this.checkPosition,this),1)},n.prototype.checkPosition=function(){if(this.$element.is(":visible")){var e=t(document).height(),a=this.$target.scrollTop(),i=this.$element.offset(),o=this.options.offset,r=o.top,s=o.bottom;"object"!=typeof o&&(s=r=o),"function"==typeof r&&(r=o.top(this.$element)),"function"==typeof s&&(s=o.bottom(this.$element));var l=null!=this.unpin&&a+this.unpin<=i.top?!1:null!=s&&i.top+this.$element.height()>=e-s?"bottom":null!=r&&r>=a?"top":!1;if(this.affixed!==l){null!=this.unpin&&this.$element.css("top","");var c="affix"+(l?"-"+l:""),u=t.Event(c+".bs.affix");this.$element.trigger(u),u.isDefaultPrevented()||(this.affixed=l,this.unpin="bottom"==l?this.getPinnedOffset():null,this.$element.removeClass(n.RESET).addClass(c).trigger(t.Event(c.replace("affix","affixed"))),"bottom"==l&&this.$element.offset({top:e-this.$element.height()-s}))}}};var a=t.fn.affix;t.fn.affix=e,t.fn.affix.Constructor=n,t.fn.affix.noConflict=function(){return t.fn.affix=a,this},t(window).on("load",function(){t('[data-spy="affix"]').each(function(){var n=t(this),a=n.data();a.offset=a.offset||{},a.offsetBottom&&(a.offset.bottom=a.offsetBottom),a.offsetTop&&(a.offset.top=a.offsetTop),e.call(n,a)})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var n=t(this),i=n.data("bs.alert");i||n.data("bs.alert",i=new a(this)),"string"==typeof e&&i[e].call(n)})}var n='[data-dismiss="alert"]',a=function(e){t(e).on("click",n,this.close)};a.VERSION="3.2.0",a.prototype.close=function(e){function n(){o.detach().trigger("closed.bs.alert").remove()}var a=t(this),i=a.attr("data-target");i||(i=a.attr("href"),i=i&&i.replace(/.*(?=#[^\s]*$)/,""));var o=t(i);e&&e.preventDefault(),o.length||(o=a.hasClass("alert")?a:a.parent()),o.trigger(e=t.Event("close.bs.alert")),e.isDefaultPrevented()||(o.removeClass("in"),t.support.transition&&o.hasClass("fade")?o.one("bsTransitionEnd",n).emulateTransitionEnd(150):n())};var i=t.fn.alert;t.fn.alert=e,t.fn.alert.Constructor=a,t.fn.alert.noConflict=function(){return t.fn.alert=i,this},t(document).on("click.bs.alert.data-api",n,a.prototype.close)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.button"),o="object"==typeof e&&e;i||a.data("bs.button",i=new n(this,o)),"toggle"==e?i.toggle():e&&i.setState(e)})}var n=function(e,a){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,a),this.isLoading=!1};n.VERSION="3.2.0",n.DEFAULTS={loadingText:"loading..."},n.prototype.setState=function(e){var n="disabled",a=this.$element,i=a.is("input")?"val":"html",o=a.data();e+="Text",null==o.resetText&&a.data("resetText",a[i]()),a[i](null==o[e]?this.options[e]:o[e]),setTimeout(t.proxy(function(){"loadingText"==e?(this.isLoading=!0,a.addClass(n).attr(n,n)):this.isLoading&&(this.isLoading=!1,a.removeClass(n).removeAttr(n))},this),0)},n.prototype.toggle=function(){var t=!0,e=this.$element.closest('[data-toggle="buttons"]');if(e.length){var n=this.$element.find("input");"radio"==n.prop("type")&&(n.prop("checked")&&this.$element.hasClass("active")?t=!1:e.find(".active").removeClass("active")),t&&n.prop("checked",!this.$element.hasClass("active")).trigger("change")}t&&this.$element.toggleClass("active")};var a=t.fn.button;t.fn.button=e,t.fn.button.Constructor=n,t.fn.button.noConflict=function(){return t.fn.button=a,this},t(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(n){var a=t(n.target);a.hasClass("btn")||(a=a.closest(".btn")),e.call(a,"toggle"),n.preventDefault()})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.carousel"),o=t.extend({},n.DEFAULTS,a.data(),"object"==typeof e&&e),r="string"==typeof e?e:o.slide;i||a.data("bs.carousel",i=new n(this,o)),"number"==typeof e?i.to(e):r?i[r]():o.interval&&i.pause().cycle()})}var n=function(e,n){this.$element=t(e).on("keydown.bs.carousel",t.proxy(this.keydown,this)),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=this.sliding=this.interval=this.$active=this.$items=null,"hover"==this.options.pause&&this.$element.on("mouseenter.bs.carousel",t.proxy(this.pause,this)).on("mouseleave.bs.carousel",t.proxy(this.cycle,this))};n.VERSION="3.2.0",n.DEFAULTS={interval:5e3,pause:"hover",wrap:!0},n.prototype.keydown=function(t){switch(t.which){case 37:this.prev();break;case 39:this.next();break;default:return}t.preventDefault()},n.prototype.cycle=function(e){return e||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(t.proxy(this.next,this),this.options.interval)),this},n.prototype.getItemIndex=function(t){return this.$items=t.parent().children(".item"),this.$items.index(t||this.$active)},n.prototype.to=function(e){var n=this,a=this.getItemIndex(this.$active=this.$element.find(".item.active"));return e>this.$items.length-1||0>e?void 0:this.sliding?this.$element.one("slid.bs.carousel",function(){n.to(e)}):a==e?this.pause().cycle():this.slide(e>a?"next":"prev",t(this.$items[e]))},n.prototype.pause=function(e){return e||(this.paused=!0),this.$element.find(".next, .prev").length&&t.support.transition&&(this.$element.trigger(t.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},n.prototype.next=function(){return this.sliding?void 0:this.slide("next")},n.prototype.prev=function(){return this.sliding?void 0:this.slide("prev")},n.prototype.slide=function(e,n){var a=this.$element.find(".item.active"),i=n||a[e](),o=this.interval,r="next"==e?"left":"right",s="next"==e?"first":"last",l=this;if(!i.length){if(!this.options.wrap)return;i=this.$element.find(".item")[s]()}if(i.hasClass("active"))return this.sliding=!1;var c=i[0],u=t.Event("slide.bs.carousel",{relatedTarget:c,direction:r});if(this.$element.trigger(u),!u.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var d=t(this.$indicators.children()[this.getItemIndex(i)]);d&&d.addClass("active")}var p=t.Event("slid.bs.carousel",{relatedTarget:c,direction:r});return t.support.transition&&this.$element.hasClass("slide")?(i.addClass(e),i[0].offsetWidth,a.addClass(r),i.addClass(r),a.one("bsTransitionEnd",function(){i.removeClass([e,r].join(" ")).addClass("active"),a.removeClass(["active",r].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(p)},0)}).emulateTransitionEnd(1e3*a.css("transition-duration").slice(0,-1))):(a.removeClass("active"),i.addClass("active"),this.sliding=!1,this.$element.trigger(p)),o&&this.cycle(),this}};var a=t.fn.carousel;t.fn.carousel=e,t.fn.carousel.Constructor=n,t.fn.carousel.noConflict=function(){return t.fn.carousel=a,this},t(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",function(n){var a,i=t(this),o=t(i.attr("data-target")||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""));if(o.hasClass("carousel")){var r=t.extend({},o.data(),i.data()),s=i.attr("data-slide-to");s&&(r.interval=!1),e.call(o,r),s&&o.data("bs.carousel").to(s),n.preventDefault()}}),t(window).on("load",function(){t('[data-ride="carousel"]').each(function(){var n=t(this);e.call(n,n.data())})})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.collapse"),o=t.extend({},n.DEFAULTS,a.data(),"object"==typeof e&&e);!i&&o.toggle&&"show"==e&&(e=!e),i||a.data("bs.collapse",i=new n(this,o)),"string"==typeof e&&i[e]()})}var n=function(e,a){this.$element=t(e),this.options=t.extend({},n.DEFAULTS,a),this.transitioning=null,this.options.parent&&(this.$parent=t(this.options.parent)),this.options.toggle&&this.toggle()};n.VERSION="3.2.0",n.DEFAULTS={toggle:!0},n.prototype.dimension=function(){var t=this.$element.hasClass("width");return t?"width":"height"},n.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n=t.Event("show.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var a=this.$parent&&this.$parent.find("> .panel > .in");if(a&&a.length){var i=a.data("bs.collapse");if(i&&i.transitioning)return;e.call(a,"hide"),i||a.data("bs.collapse",null)}var o=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[o](0),this.transitioning=1;var r=function(){this.$element.removeClass("collapsing").addClass("collapse in")[o](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!t.support.transition)return r.call(this);var s=t.camelCase(["scroll",o].join("-"));this.$element.one("bsTransitionEnd",t.proxy(r,this)).emulateTransitionEnd(350)[o](this.$element[0][s])}}},n.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var e=t.Event("hide.bs.collapse");if(this.$element.trigger(e),!e.isDefaultPrevented()){var n=this.dimension();this.$element[n](this.$element[n]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse").removeClass("in"),this.transitioning=1;var a=function(){this.transitioning=0,this.$element.trigger("hidden.bs.collapse").removeClass("collapsing").addClass("collapse")};return t.support.transition?(this.$element[n](0).one("bsTransitionEnd",t.proxy(a,this)).emulateTransitionEnd(350),void 0):a.call(this)}}},n.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()};var a=t.fn.collapse;t.fn.collapse=e,t.fn.collapse.Constructor=n,t.fn.collapse.noConflict=function(){return t.fn.collapse=a,this},t(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(n){var a,i=t(this),o=i.attr("data-target")||n.preventDefault()||(a=i.attr("href"))&&a.replace(/.*(?=#[^\s]+$)/,""),r=t(o),s=r.data("bs.collapse"),l=s?"toggle":i.data(),c=i.attr("data-parent"),u=c&&t(c);s&&s.transitioning||(u&&u.find('[data-toggle="collapse"][data-parent="'+c+'"]').not(i).addClass("collapsed"),i[r.hasClass("in")?"addClass":"removeClass"]("collapsed")),e.call(r,l)})}(jQuery),+function(t){"use strict";function e(e){e&&3===e.which||(t(i).remove(),t(o).each(function(){var a=n(t(this)),i={relatedTarget:this};a.hasClass("open")&&(a.trigger(e=t.Event("hide.bs.dropdown",i)),e.isDefaultPrevented()||a.removeClass("open").trigger("hidden.bs.dropdown",i))
}))}function n(e){var n=e.attr("data-target");n||(n=e.attr("href"),n=n&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var a=n&&t(n);return a&&a.length?a:e.parent()}function a(e){return this.each(function(){var n=t(this),a=n.data("bs.dropdown");a||n.data("bs.dropdown",a=new r(this)),"string"==typeof e&&a[e].call(n)})}var i=".dropdown-backdrop",o='[data-toggle="dropdown"]',r=function(e){t(e).on("click.bs.dropdown",this.toggle)};r.VERSION="3.2.0",r.prototype.toggle=function(a){var i=t(this);if(!i.is(".disabled, :disabled")){var o=n(i),r=o.hasClass("open");if(e(),!r){"ontouchstart"in document.documentElement&&!o.closest(".navbar-nav").length&&t('<div class="dropdown-backdrop"/>').insertAfter(t(this)).on("click",e);var s={relatedTarget:this};if(o.trigger(a=t.Event("show.bs.dropdown",s)),a.isDefaultPrevented())return;i.trigger("focus"),o.toggleClass("open").trigger("shown.bs.dropdown",s)}return!1}},r.prototype.keydown=function(e){if(/(38|40|27)/.test(e.keyCode)){var a=t(this);if(e.preventDefault(),e.stopPropagation(),!a.is(".disabled, :disabled")){var i=n(a),r=i.hasClass("open");if(!r||r&&27==e.keyCode)return 27==e.which&&i.find(o).trigger("focus"),a.trigger("click");var s=" li:not(.divider):visible a",l=i.find('[role="menu"]'+s+', [role="listbox"]'+s);if(l.length){var c=l.index(l.filter(":focus"));38==e.keyCode&&c>0&&c--,40==e.keyCode&&c<l.length-1&&c++,~c||(c=0),l.eq(c).trigger("focus")}}}};var s=t.fn.dropdown;t.fn.dropdown=a,t.fn.dropdown.Constructor=r,t.fn.dropdown.noConflict=function(){return t.fn.dropdown=s,this},t(document).on("click.bs.dropdown.data-api",e).on("click.bs.dropdown.data-api",".dropdown form",function(t){t.stopPropagation()}).on("click.bs.dropdown.data-api",o,r.prototype.toggle).on("keydown.bs.dropdown.data-api",o+', [role="menu"], [role="listbox"]',r.prototype.keydown)}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.tab");i||a.data("bs.tab",i=new n(this)),"string"==typeof e&&i[e]()})}var n=function(e){this.element=t(e)};n.VERSION="3.2.0",n.prototype.show=function(){var e=this.element,n=e.closest("ul:not(.dropdown-menu)"),a=e.data("target");if(a||(a=e.attr("href"),a=a&&a.replace(/.*(?=#[^\s]*$)/,"")),!e.parent("li").hasClass("active")){var i=n.find(".active:last a")[0],o=t.Event("show.bs.tab",{relatedTarget:i});if(e.trigger(o),!o.isDefaultPrevented()){var r=t(a);this.activate(e.closest("li"),n),this.activate(r,r.parent(),function(){e.trigger({type:"shown.bs.tab",relatedTarget:i})})}}},n.prototype.activate=function(e,n,a){function i(){o.removeClass("active").find("> .dropdown-menu > .active").removeClass("active"),e.addClass("active"),r?(e[0].offsetWidth,e.addClass("in")):e.removeClass("fade"),e.parent(".dropdown-menu")&&e.closest("li.dropdown").addClass("active"),a&&a()}var o=n.find("> .active"),r=a&&t.support.transition&&o.hasClass("fade");r?o.one("bsTransitionEnd",i).emulateTransitionEnd(150):i(),o.removeClass("in")};var a=t.fn.tab;t.fn.tab=e,t.fn.tab.Constructor=n,t.fn.tab.noConflict=function(){return t.fn.tab=a,this},t(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"]',function(n){n.preventDefault(),e.call(t(this),"show")})}(jQuery),+function(t){"use strict";function e(){var t=document.createElement("bootstrap"),e={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in e)if(void 0!==t.style[n])return{end:e[n]};return!1}t.fn.emulateTransitionEnd=function(e){var n=!1,a=this;t(this).one("bsTransitionEnd",function(){n=!0});var i=function(){n||t(a).trigger(t.support.transition.end)};return setTimeout(i,e),this},t(function(){t.support.transition=e(),t.support.transition&&(t.event.special.bsTransitionEnd={bindType:t.support.transition.end,delegateType:t.support.transition.end,handle:function(e){return t(e.target).is(this)?e.handleObj.handler.apply(this,arguments):void 0}})})}(jQuery),+function(t){"use strict";function e(n,a){var i=t.proxy(this.process,this);this.$body=t("body"),this.$scrollElement=t(n).is("body")?t(window):t(n),this.options=t.extend({},e.DEFAULTS,a),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",i),this.refresh(),this.process()}function n(n){return this.each(function(){var a=t(this),i=a.data("bs.scrollspy"),o="object"==typeof n&&n;i||a.data("bs.scrollspy",i=new e(this,o)),"string"==typeof n&&i[n]()})}e.VERSION="3.2.0",e.DEFAULTS={offset:10},e.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},e.prototype.refresh=function(){var e="offset",n=0;t.isWindow(this.$scrollElement[0])||(e="position",n=this.$scrollElement.scrollTop()),this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight();var a=this;this.$body.find(this.selector).map(function(){var a=t(this),i=a.data("target")||a.attr("href"),o=/^#./.test(i)&&t(i);return o&&o.length&&o.is(":visible")&&[[o[e]().top+n,i]]||null}).sort(function(t,e){return t[0]-e[0]}).each(function(){a.offsets.push(this[0]),a.targets.push(this[1])})},e.prototype.process=function(){var t,e=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),a=this.options.offset+n-this.$scrollElement.height(),i=this.offsets,o=this.targets,r=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),e>=a)return r!=(t=o[o.length-1])&&this.activate(t);if(r&&e<=i[0])return r!=(t=o[0])&&this.activate(t);for(t=i.length;t--;)r!=o[t]&&e>=i[t]&&(!i[t+1]||e<=i[t+1])&&this.activate(o[t])},e.prototype.activate=function(e){this.activeTarget=e,t(this.selector).parentsUntil(this.options.target,".active").removeClass("active");var n=this.selector+'[data-target="'+e+'"],'+this.selector+'[href="'+e+'"]',a=t(n).parents("li").addClass("active");a.parent(".dropdown-menu").length&&(a=a.closest("li.dropdown").addClass("active")),a.trigger("activate.bs.scrollspy")};var a=t.fn.scrollspy;t.fn.scrollspy=n,t.fn.scrollspy.Constructor=e,t.fn.scrollspy.noConflict=function(){return t.fn.scrollspy=a,this},t(window).on("load.bs.scrollspy.data-api",function(){t('[data-spy="scroll"]').each(function(){var e=t(this);n.call(e,e.data())})})}(jQuery),+function(t){"use strict";function e(e,a){return this.each(function(){var i=t(this),o=i.data("bs.modal"),r=t.extend({},n.DEFAULTS,i.data(),"object"==typeof e&&e);o||i.data("bs.modal",o=new n(this,r)),"string"==typeof e?o[e](a):r.show&&o.show(a)})}var n=function(e,n){this.options=n,this.$body=t(document.body),this.$element=t(e),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,t.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};n.VERSION="3.2.0",n.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},n.prototype.toggle=function(t){return this.isShown?this.hide():this.show(t)},n.prototype.show=function(e){var n=this,a=t.Event("show.bs.modal",{relatedTarget:e});this.$element.trigger(a),this.isShown||a.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.$body.addClass("modal-open"),this.setScrollbar(),this.escape(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',t.proxy(this.hide,this)),this.backdrop(function(){var a=t.support.transition&&n.$element.hasClass("fade");n.$element.parent().length||n.$element.appendTo(n.$body),n.$element.show().scrollTop(0),a&&n.$element[0].offsetWidth,n.$element.addClass("in").attr("aria-hidden",!1),n.enforceFocus();var i=t.Event("shown.bs.modal",{relatedTarget:e});a?n.$element.find(".modal-dialog").one("bsTransitionEnd",function(){n.$element.trigger("focus").trigger(i)}).emulateTransitionEnd(300):n.$element.trigger("focus").trigger(i)}))},n.prototype.hide=function(e){e&&e.preventDefault(),e=t.Event("hide.bs.modal"),this.$element.trigger(e),this.isShown&&!e.isDefaultPrevented()&&(this.isShown=!1,this.$body.removeClass("modal-open"),this.resetScrollbar(),this.escape(),t(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),t.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",t.proxy(this.hideModal,this)).emulateTransitionEnd(300):this.hideModal())},n.prototype.enforceFocus=function(){t(document).off("focusin.bs.modal").on("focusin.bs.modal",t.proxy(function(t){this.$element[0]===t.target||this.$element.has(t.target).length||this.$element.trigger("focus")},this))},n.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keyup.dismiss.bs.modal",t.proxy(function(t){27==t.which&&this.hide()},this)):this.isShown||this.$element.off("keyup.dismiss.bs.modal")},n.prototype.hideModal=function(){var t=this;this.$element.hide(),this.backdrop(function(){t.$element.trigger("hidden.bs.modal")})},n.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},n.prototype.backdrop=function(e){var n=this,a=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var i=t.support.transition&&a;if(this.$backdrop=t('<div class="modal-backdrop '+a+'" />').appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",t.proxy(function(t){t.target===t.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),i&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!e)return;i?this.$backdrop.one("bsTransitionEnd",e).emulateTransitionEnd(150):e()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){n.removeBackdrop(),e&&e()};t.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(150):o()}else e&&e()},n.prototype.checkScrollbar=function(){document.body.clientWidth>=window.innerWidth||(this.scrollbarWidth=this.scrollbarWidth||this.measureScrollbar())},n.prototype.setScrollbar=function(){var t=parseInt(this.$body.css("padding-right")||0,10);this.scrollbarWidth&&this.$body.css("padding-right",t+this.scrollbarWidth)},n.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},n.prototype.measureScrollbar=function(){var t=document.createElement("div");t.className="modal-scrollbar-measure",this.$body.append(t);var e=t.offsetWidth-t.clientWidth;return this.$body[0].removeChild(t),e};var a=t.fn.modal;t.fn.modal=e,t.fn.modal.Constructor=n,t.fn.modal.noConflict=function(){return t.fn.modal=a,this},t(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(n){var a=t(this),i=a.attr("href"),o=t(a.attr("data-target")||i&&i.replace(/.*(?=#[^\s]+$)/,"")),r=o.data("bs.modal")?"toggle":t.extend({remote:!/#/.test(i)&&i},o.data(),a.data());a.is("a")&&n.preventDefault(),o.one("show.bs.modal",function(t){t.isDefaultPrevented()||o.one("hidden.bs.modal",function(){a.is(":visible")&&a.trigger("focus")})}),e.call(o,r,this)})}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.tooltip"),o="object"==typeof e&&e;(i||"destroy"!=e)&&(i||a.data("bs.tooltip",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.type=this.options=this.enabled=this.timeout=this.hoverState=this.$element=null,this.init("tooltip",t,e)};n.VERSION="3.2.0",n.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},n.prototype.init=function(e,n,a){this.enabled=!0,this.type=e,this.$element=t(n),this.options=this.getOptions(a),this.$viewport=this.options.viewport&&t(this.options.viewport.selector||this.options.viewport);for(var i=this.options.trigger.split(" "),o=i.length;o--;){var r=i[o];if("click"==r)this.$element.on("click."+this.type,this.options.selector,t.proxy(this.toggle,this));else if("manual"!=r){var s="hover"==r?"mouseenter":"focusin",l="hover"==r?"mouseleave":"focusout";this.$element.on(s+"."+this.type,this.options.selector,t.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,t.proxy(this.leave,this))}}this.options.selector?this._options=t.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.getOptions=function(e){return e=t.extend({},this.getDefaults(),this.$element.data(),e),e.delay&&"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),e},n.prototype.getDelegateOptions=function(){var e={},n=this.getDefaults();return this._options&&t.each(this._options,function(t,a){n[t]!=a&&(e[t]=a)}),e},n.prototype.enter=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="in",n.options.delay&&n.options.delay.show?(n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show),void 0):n.show()},n.prototype.leave=function(e){var n=e instanceof this.constructor?e:t(e.currentTarget).data("bs."+this.type);return n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n)),clearTimeout(n.timeout),n.hoverState="out",n.options.delay&&n.options.delay.hide?(n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide),void 0):n.hide()},n.prototype.show=function(){var e=t.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(e);var n=t.contains(document.documentElement,this.$element[0]);if(e.isDefaultPrevented()||!n)return;var a=this,i=this.tip(),o=this.getUID(this.type);this.setContent(),i.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&i.addClass("fade");var r="function"==typeof this.options.placement?this.options.placement.call(this,i[0],this.$element[0]):this.options.placement,s=/\s?auto?\s?/i,l=s.test(r);l&&(r=r.replace(s,"")||"top"),i.detach().css({top:0,left:0,display:"block"}).addClass(r).data("bs."+this.type,this),this.options.container?i.appendTo(this.options.container):i.insertAfter(this.$element);var c=this.getPosition(),u=i[0].offsetWidth,d=i[0].offsetHeight;if(l){var p=r,f=this.$element.parent(),h=this.getPosition(f);r="bottom"==r&&c.top+c.height+d-h.scroll>h.height?"top":"top"==r&&c.top-h.scroll-d<0?"bottom":"right"==r&&c.right+u>h.width?"left":"left"==r&&c.left-u<h.left?"right":r,i.removeClass(p).addClass(r)}var g=this.getCalculatedOffset(r,c,u,d);this.applyPlacement(g,r);var m=function(){a.$element.trigger("shown.bs."+a.type),a.hoverState=null};t.support.transition&&this.$tip.hasClass("fade")?i.one("bsTransitionEnd",m).emulateTransitionEnd(150):m()}},n.prototype.applyPlacement=function(e,n){var a=this.tip(),i=a[0].offsetWidth,o=a[0].offsetHeight,r=parseInt(a.css("margin-top"),10),s=parseInt(a.css("margin-left"),10);isNaN(r)&&(r=0),isNaN(s)&&(s=0),e.top=e.top+r,e.left=e.left+s,t.offset.setOffset(a[0],t.extend({using:function(t){a.css({top:Math.round(t.top),left:Math.round(t.left)})}},e),0),a.addClass("in");var l=a[0].offsetWidth,c=a[0].offsetHeight;"top"==n&&c!=o&&(e.top=e.top+o-c);var u=this.getViewportAdjustedDelta(n,e,l,c);u.left?e.left+=u.left:e.top+=u.top;var d=u.left?2*u.left-i+l:2*u.top-o+c,p=u.left?"left":"top",f=u.left?"offsetWidth":"offsetHeight";a.offset(e),this.replaceArrow(d,a[0][f],p)},n.prototype.replaceArrow=function(t,e,n){this.arrow().css(n,t?50*(1-t/e)+"%":"")},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle();t.find(".tooltip-inner")[this.options.html?"html":"text"](e),t.removeClass("fade in top bottom left right")},n.prototype.hide=function(){function e(){"in"!=n.hoverState&&a.detach(),n.$element.trigger("hidden.bs."+n.type)}var n=this,a=this.tip(),i=t.Event("hide.bs."+this.type);return this.$element.removeAttr("aria-describedby"),this.$element.trigger(i),i.isDefaultPrevented()?void 0:(a.removeClass("in"),t.support.transition&&this.$tip.hasClass("fade")?a.one("bsTransitionEnd",e).emulateTransitionEnd(150):e(),this.hoverState=null,this)},n.prototype.fixTitle=function(){var t=this.$element;(t.attr("title")||"string"!=typeof t.attr("data-original-title"))&&t.attr("data-original-title",t.attr("title")||"").attr("title","")},n.prototype.hasContent=function(){return this.getTitle()},n.prototype.getPosition=function(e){e=e||this.$element;var n=e[0],a="BODY"==n.tagName;return t.extend({},"function"==typeof n.getBoundingClientRect?n.getBoundingClientRect():null,{scroll:a?document.documentElement.scrollTop||document.body.scrollTop:e.scrollTop(),width:a?t(window).width():e.outerWidth(),height:a?t(window).height():e.outerHeight()},a?{top:0,left:0}:e.offset())},n.prototype.getCalculatedOffset=function(t,e,n,a){return"bottom"==t?{top:e.top+e.height,left:e.left+e.width/2-n/2}:"top"==t?{top:e.top-a,left:e.left+e.width/2-n/2}:"left"==t?{top:e.top+e.height/2-a/2,left:e.left-n}:{top:e.top+e.height/2-a/2,left:e.left+e.width}},n.prototype.getViewportAdjustedDelta=function(t,e,n,a){var i={top:0,left:0};if(!this.$viewport)return i;var o=this.options.viewport&&this.options.viewport.padding||0,r=this.getPosition(this.$viewport);if(/right|left/.test(t)){var s=e.top-o-r.scroll,l=e.top+o-r.scroll+a;s<r.top?i.top=r.top-s:l>r.top+r.height&&(i.top=r.top+r.height-l)}else{var c=e.left-o,u=e.left+o+n;c<r.left?i.left=r.left-c:u>r.width&&(i.left=r.left+r.width-u)}return i},n.prototype.getTitle=function(){var t,e=this.$element,n=this.options;return t=e.attr("data-original-title")||("function"==typeof n.title?n.title.call(e[0]):n.title)},n.prototype.getUID=function(t){do t+=~~(1e6*Math.random());while(document.getElementById(t));return t},n.prototype.tip=function(){return this.$tip=this.$tip||t(this.options.template)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},n.prototype.validate=function(){this.$element[0].parentNode||(this.hide(),this.$element=null,this.options=null)},n.prototype.enable=function(){this.enabled=!0},n.prototype.disable=function(){this.enabled=!1},n.prototype.toggleEnabled=function(){this.enabled=!this.enabled},n.prototype.toggle=function(e){var n=this;e&&(n=t(e.currentTarget).data("bs."+this.type),n||(n=new this.constructor(e.currentTarget,this.getDelegateOptions()),t(e.currentTarget).data("bs."+this.type,n))),n.tip().hasClass("in")?n.leave(n):n.enter(n)},n.prototype.destroy=function(){clearTimeout(this.timeout),this.hide().$element.off("."+this.type).removeData("bs."+this.type)};var a=t.fn.tooltip;t.fn.tooltip=e,t.fn.tooltip.Constructor=n,t.fn.tooltip.noConflict=function(){return t.fn.tooltip=a,this}}(jQuery),+function(t){"use strict";function e(e){return this.each(function(){var a=t(this),i=a.data("bs.popover"),o="object"==typeof e&&e;(i||"destroy"!=e)&&(i||a.data("bs.popover",i=new n(this,o)),"string"==typeof e&&i[e]())})}var n=function(t,e){this.init("popover",t,e)};if(!t.fn.tooltip)throw new Error("Popover requires tooltip.js");n.VERSION="3.2.0",n.DEFAULTS=t.extend({},t.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),n.prototype=t.extend({},t.fn.tooltip.Constructor.prototype),n.prototype.constructor=n,n.prototype.getDefaults=function(){return n.DEFAULTS},n.prototype.setContent=function(){var t=this.tip(),e=this.getTitle(),n=this.getContent();t.find(".popover-title")[this.options.html?"html":"text"](e),t.find(".popover-content").empty()[this.options.html?"string"==typeof n?"html":"append":"text"](n),t.removeClass("fade top bottom left right in"),t.find(".popover-title").html()||t.find(".popover-title").hide()},n.prototype.hasContent=function(){return this.getTitle()||this.getContent()},n.prototype.getContent=function(){var t=this.$element,e=this.options;return t.attr("data-content")||("function"==typeof e.content?e.content.call(t[0]):e.content)},n.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")},n.prototype.tip=function(){return this.$tip||(this.$tip=t(this.options.template)),this.$tip};var a=t.fn.popover;t.fn.popover=e,t.fn.popover.Constructor=n,t.fn.popover.noConflict=function(){return t.fn.popover=a,this}}(jQuery),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.transition","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.transition",[]).factory("$transition",["$q","$timeout","$rootScope",function(t,e,n){function a(t){for(var e in t)if(void 0!==o.style[e])return t[e]}var i=function(a,o,r){r=r||{};var s=t.defer(),l=i[r.animation?"animationEndEventName":"transitionEndEventName"],c=function(){n.$apply(function(){a.unbind(l,c),s.resolve(a)})};return l&&a.bind(l,c),e(function(){angular.isString(o)?a.addClass(o):angular.isFunction(o)?o(a):angular.isObject(o)&&a.css(o),l||s.resolve(a)}),s.promise.cancel=function(){l&&a.unbind(l,c),s.reject("Transition cancelled")},s.promise},o=document.createElement("trans"),r={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"},s={WebkitTransition:"webkitAnimationEnd",MozTransition:"animationend",OTransition:"oAnimationEnd",transition:"animationend"};return i.transitionEndEventName=a(r),i.animationEndEventName=a(s),i}]),angular.module("ui.bootstrap.collapse",["ui.bootstrap.transition"]).directive("collapse",["$transition",function(t){return{link:function(e,n,a){function i(e){function a(){c===i&&(c=void 0)}var i=t(n,e);return c&&c.cancel(),c=i,i.then(a,a),i}function o(){u?(u=!1,r()):(n.removeClass("collapse").addClass("collapsing"),i({height:n[0].scrollHeight+"px"}).then(r))}function r(){n.removeClass("collapsing"),n.addClass("collapse in"),n.css({height:"auto"})}function s(){if(u)u=!1,l(),n.css({height:0});else{n.css({height:n[0].scrollHeight+"px"});{n[0].offsetWidth}n.removeClass("collapse in").addClass("collapsing"),i({height:0}).then(l)}}function l(){n.removeClass("collapsing"),n.addClass("collapse")}var c,u=!0;e.$watch(a.collapse,function(t){t?s():o()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("accordionConfig",{closeOthers:!0}).controller("AccordionController",["$scope","$attrs","accordionConfig",function(t,e,n){this.groups=[],this.closeOthers=function(a){var i=angular.isDefined(e.closeOthers)?t.$eval(e.closeOthers):n.closeOthers;i&&angular.forEach(this.groups,function(t){t!==a&&(t.isOpen=!1)})},this.addGroup=function(t){var e=this;this.groups.push(t),t.$on("$destroy",function(){e.removeGroup(t)})},this.removeGroup=function(t){var e=this.groups.indexOf(t);-1!==e&&this.groups.splice(e,1)}}]).directive("accordion",function(){return{restrict:"EA",controller:"AccordionController",transclude:!0,replace:!1,templateUrl:"template/accordion/accordion.html"}}).directive("accordionGroup",function(){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/accordion/accordion-group.html",scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(t){this.heading=t}},link:function(t,e,n,a){a.addGroup(t),t.$watch("isOpen",function(e){e&&a.closeOthers(t)}),t.toggleOpen=function(){t.isDisabled||(t.isOpen=!t.isOpen)}}}}).directive("accordionHeading",function(){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(t,e,n,a,i){a.setHeading(i(t,function(){}))}}}).directive("accordionTransclude",function(){return{require:"^accordionGroup",link:function(t,e,n,a){t.$watch(function(){return a[n.accordionTransclude]},function(t){t&&(e.html(""),e.append(t))})}}}),angular.module("ui.bootstrap.alert",[]).controller("AlertController",["$scope","$attrs",function(t,e){t.closeable="close"in e}]).directive("alert",function(){return{restrict:"EA",controller:"AlertController",templateUrl:"template/alert/alert.html",transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.bindHtml",[]).directive("bindHtmlUnsafe",function(){return function(t,e,n){e.addClass("ng-binding").data("$binding",n.bindHtmlUnsafe),t.$watch(n.bindHtmlUnsafe,function(t){e.html(t||"")})}}),angular.module("ui.bootstrap.buttons",[]).constant("buttonConfig",{activeClass:"active",toggleEvent:"click"}).controller("ButtonsController",["buttonConfig",function(t){this.activeClass=t.activeClass||"active",this.toggleEvent=t.toggleEvent||"click"}]).directive("btnRadio",function(){return{require:["btnRadio","ngModel"],controller:"ButtonsController",link:function(t,e,n,a){var i=a[0],o=a[1];o.$render=function(){e.toggleClass(i.activeClass,angular.equals(o.$modelValue,t.$eval(n.btnRadio)))},e.bind(i.toggleEvent,function(){var a=e.hasClass(i.activeClass);(!a||angular.isDefined(n.uncheckable))&&t.$apply(function(){o.$setViewValue(a?null:t.$eval(n.btnRadio)),o.$render()})})}}}).directive("btnCheckbox",function(){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",link:function(t,e,n,a){function i(){return r(n.btnCheckboxTrue,!0)}function o(){return r(n.btnCheckboxFalse,!1)}function r(e,n){var a=t.$eval(e);return angular.isDefined(a)?a:n}var s=a[0],l=a[1];l.$render=function(){e.toggleClass(s.activeClass,angular.equals(l.$modelValue,i()))},e.bind(s.toggleEvent,function(){t.$apply(function(){l.$setViewValue(e.hasClass(s.activeClass)?o():i()),l.$render()})})}}}),angular.module("ui.bootstrap.carousel",["ui.bootstrap.transition"]).controller("CarouselController",["$scope","$timeout","$transition",function(t,e,n){function a(){i();var n=+t.interval;!isNaN(n)&&n>=0&&(r=e(o,n))}function i(){r&&(e.cancel(r),r=null)}function o(){s?(t.next(),a()):t.pause()}var r,s,l=this,c=l.slides=t.slides=[],u=-1;l.currentSlide=null;var d=!1;l.select=t.select=function(i,o){function r(){if(!d){if(l.currentSlide&&angular.isString(o)&&!t.noTransition&&i.$element){i.$element.addClass(o);{i.$element[0].offsetWidth}angular.forEach(c,function(t){angular.extend(t,{direction:"",entering:!1,leaving:!1,active:!1})}),angular.extend(i,{direction:o,active:!0,entering:!0}),angular.extend(l.currentSlide||{},{direction:o,leaving:!0}),t.$currentTransition=n(i.$element,{}),function(e,n){t.$currentTransition.then(function(){s(e,n)},function(){s(e,n)})}(i,l.currentSlide)}else s(i,l.currentSlide);l.currentSlide=i,u=p,a()}}function s(e,n){angular.extend(e,{direction:"",active:!0,leaving:!1,entering:!1}),angular.extend(n||{},{direction:"",active:!1,leaving:!1,entering:!1}),t.$currentTransition=null}var p=c.indexOf(i);void 0===o&&(o=p>u?"next":"prev"),i&&i!==l.currentSlide&&(t.$currentTransition?(t.$currentTransition.cancel(),e(r)):r())},t.$on("$destroy",function(){d=!0}),l.indexOfSlide=function(t){return c.indexOf(t)},t.next=function(){var e=(u+1)%c.length;return t.$currentTransition?void 0:l.select(c[e],"next")},t.prev=function(){var e=0>u-1?c.length-1:u-1;return t.$currentTransition?void 0:l.select(c[e],"prev")},t.isActive=function(t){return l.currentSlide===t},t.$watch("interval",a),t.$on("$destroy",i),t.play=function(){s||(s=!0,a())},t.pause=function(){t.noPause||(s=!1,i())},l.addSlide=function(e,n){e.$element=n,c.push(e),1===c.length||e.active?(l.select(c[c.length-1]),1==c.length&&t.play()):e.active=!1},l.removeSlide=function(t){var e=c.indexOf(t);c.splice(e,1),c.length>0&&t.active?e>=c.length?l.select(c[e-1]):l.select(c[e]):u>e&&u--}}]).directive("carousel",[function(){return{restrict:"EA",transclude:!0,replace:!0,controller:"CarouselController",require:"carousel",templateUrl:"template/carousel/carousel.html",scope:{interval:"=",noTransition:"=",noPause:"="}}}]).directive("slide",function(){return{require:"^carousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:"template/carousel/slide.html",scope:{active:"=?"},link:function(t,e,n,a){a.addSlide(t,e),t.$on("$destroy",function(){a.removeSlide(t)}),t.$watch("active",function(e){e&&a.select(t)})}}}),angular.module("ui.bootstrap.dateparser",[]).service("dateParser",["$locale","orderByFilter",function(t,e){function n(t){var n=[],a=t.split("");return angular.forEach(i,function(e,i){var o=t.indexOf(i);if(o>-1){t=t.split(""),a[o]="("+e.regex+")",t[o]="$";for(var r=o+1,s=o+i.length;s>r;r++)a[r]="",t[r]="$";t=t.join(""),n.push({index:o,apply:e.apply})}}),{regex:new RegExp("^"+a.join("")+"$"),map:e(n,"index")}}function a(t,e,n){return 1===e&&n>28?29===n&&(t%4===0&&t%100!==0||t%400===0):3===e||5===e||8===e||10===e?31>n:!0}this.parsers={};var i={yyyy:{regex:"\\d{4}",apply:function(t){this.year=+t}},yy:{regex:"\\d{2}",apply:function(t){this.year=+t+2e3}},y:{regex:"\\d{1,4}",apply:function(t){this.year=+t}},MMMM:{regex:t.DATETIME_FORMATS.MONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.MONTH.indexOf(e)}},MMM:{regex:t.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(e){this.month=t.DATETIME_FORMATS.SHORTMONTH.indexOf(e)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(t){this.month=t-1}},M:{regex:"[1-9]|1[0-2]",apply:function(t){this.month=t-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(t){this.date=+t}},EEEE:{regex:t.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:t.DATETIME_FORMATS.SHORTDAY.join("|")}};this.parse=function(e,i){if(!angular.isString(e)||!i)return e;i=t.DATETIME_FORMATS[i]||i,this.parsers[i]||(this.parsers[i]=n(i));var o=this.parsers[i],r=o.regex,s=o.map,l=e.match(r);if(l&&l.length){for(var c,u={year:1900,month:0,date:1,hours:0},d=1,p=l.length;p>d;d++){var f=s[d-1];f.apply&&f.apply.call(u,l[d])}return a(u.year,u.month,u.date)&&(c=new Date(u.year,u.month,u.date,u.hours)),c}}}]),angular.module("ui.bootstrap.position",[]).factory("$position",["$document","$window",function(t,e){function n(t,n){return t.currentStyle?t.currentStyle[n]:e.getComputedStyle?e.getComputedStyle(t)[n]:t.style[n]}function a(t){return"static"===(n(t,"position")||"static")}var i=function(e){for(var n=t[0],i=e.offsetParent||n;i&&i!==n&&a(i);)i=i.offsetParent;return i||n};return{position:function(e){var n=this.offset(e),a={top:0,left:0},o=i(e[0]);o!=t[0]&&(a=this.offset(angular.element(o)),a.top+=o.clientTop-o.scrollTop,a.left+=o.clientLeft-o.scrollLeft);var r=e[0].getBoundingClientRect();return{width:r.width||e.prop("offsetWidth"),height:r.height||e.prop("offsetHeight"),top:n.top-a.top,left:n.left-a.left}},offset:function(n){var a=n[0].getBoundingClientRect();return{width:a.width||n.prop("offsetWidth"),height:a.height||n.prop("offsetHeight"),top:a.top+(e.pageYOffset||t[0].documentElement.scrollTop),left:a.left+(e.pageXOffset||t[0].documentElement.scrollLeft)}
},positionElements:function(t,e,n,a){var i,o,r,s,l=n.split("-"),c=l[0],u=l[1]||"center";i=a?this.offset(t):this.position(t),o=e.prop("offsetWidth"),r=e.prop("offsetHeight");var d={center:function(){return i.left+i.width/2-o/2},left:function(){return i.left},right:function(){return i.left+i.width}},p={center:function(){return i.top+i.height/2-r/2},top:function(){return i.top},bottom:function(){return i.top+i.height}};switch(c){case"right":s={top:p[u](),left:d[c]()};break;case"left":s={top:p[u](),left:i.left-o};break;case"bottom":s={top:p[c](),left:d[u]()};break;default:s={top:i.top-r,left:d[u]()}}return s}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).constant("datepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null}).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$timeout","$log","dateFilter","datepickerConfig",function(t,e,n,a,i,o,r,s){var l=this,c={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","minMode","maxMode","showWeeks","startingDay","yearRange"],function(n,i){l[n]=angular.isDefined(e[n])?8>i?a(e[n])(t.$parent):t.$parent.$eval(e[n]):s[n]}),angular.forEach(["minDate","maxDate"],function(a){e[a]?t.$parent.$watch(n(e[a]),function(t){l[a]=t?new Date(t):null,l.refreshView()}):l[a]=s[a]?new Date(s[a]):null}),t.datepickerMode=t.datepickerMode||s.datepickerMode,t.uniqueId="datepicker-"+t.$id+"-"+Math.floor(1e4*Math.random()),this.activeDate=angular.isDefined(e.initDate)?t.$parent.$eval(e.initDate):new Date,t.isActive=function(e){return 0===l.compare(e.date,l.activeDate)?(t.activeDateId=e.uid,!0):!1},this.init=function(t){c=t,c.$render=function(){l.render()}},this.render=function(){if(c.$modelValue){var t=new Date(c.$modelValue),e=!isNaN(t);e?this.activeDate=t:o.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.'),c.$setValidity("date",e)}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var t=c.$modelValue?new Date(c.$modelValue):null;c.$setValidity("date-disabled",!t||this.element&&!this.isDisabled(t))}},this.createDateObject=function(t,e){var n=c.$modelValue?new Date(c.$modelValue):null;return{date:t,label:r(t,e),selected:n&&0===this.compare(t,n),disabled:this.isDisabled(t),current:0===this.compare(t,new Date)}},this.isDisabled=function(n){return this.minDate&&this.compare(n,this.minDate)<0||this.maxDate&&this.compare(n,this.maxDate)>0||e.dateDisabled&&t.dateDisabled({date:n,mode:t.datepickerMode})},this.split=function(t,e){for(var n=[];t.length>0;)n.push(t.splice(0,e));return n},t.select=function(e){if(t.datepickerMode===l.minMode){var n=c.$modelValue?new Date(c.$modelValue):new Date(0,0,0,0,0,0,0);n.setFullYear(e.getFullYear(),e.getMonth(),e.getDate()),c.$setViewValue(n),c.$render()}else l.activeDate=e,t.datepickerMode=l.modes[l.modes.indexOf(t.datepickerMode)-1]},t.move=function(t){var e=l.activeDate.getFullYear()+t*(l.step.years||0),n=l.activeDate.getMonth()+t*(l.step.months||0);l.activeDate.setFullYear(e,n,1),l.refreshView()},t.toggleMode=function(e){e=e||1,t.datepickerMode===l.maxMode&&1===e||t.datepickerMode===l.minMode&&-1===e||(t.datepickerMode=l.modes[l.modes.indexOf(t.datepickerMode)+e])},t.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var u=function(){i(function(){l.element[0].focus()},0,!1)};t.$on("datepicker.focus",u),t.keydown=function(e){var n=t.keys[e.which];if(n&&!e.shiftKey&&!e.altKey)if(e.preventDefault(),e.stopPropagation(),"enter"===n||"space"===n){if(l.isDisabled(l.activeDate))return;t.select(l.activeDate),u()}else!e.ctrlKey||"up"!==n&&"down"!==n?(l.handleKeyDown(n,e),l.refreshView()):(t.toggleMode("up"===n?1:-1),u())}}]).directive("datepicker",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/datepicker.html",scope:{datepickerMode:"=?",dateDisabled:"&"},require:["datepicker","?^ngModel"],controller:"DatepickerController",link:function(t,e,n,a){var i=a[0],o=a[1];o&&i.init(o)}}}).directive("daypicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/day.html",require:"^datepicker",link:function(e,n,a,i){function o(t,e){return 1!==e||t%4!==0||t%100===0&&t%400!==0?l[e]:29}function r(t,e){var n=new Array(e),a=new Date(t),i=0;for(a.setHours(12);e>i;)n[i++]=new Date(a),a.setDate(a.getDate()+1);return n}function s(t){var e=new Date(t);e.setDate(e.getDate()+4-(e.getDay()||7));var n=e.getTime();return e.setMonth(0),e.setDate(1),Math.floor(Math.round((n-e)/864e5)/7)+1}e.showWeeks=i.showWeeks,i.step={months:1},i.element=n;var l=[31,28,31,30,31,30,31,31,30,31,30,31];i._refreshView=function(){var n=i.activeDate.getFullYear(),a=i.activeDate.getMonth(),o=new Date(n,a,1),l=i.startingDay-o.getDay(),c=l>0?7-l:-l,u=new Date(o);c>0&&u.setDate(-c+1);for(var d=r(u,42),p=0;42>p;p++)d[p]=angular.extend(i.createDateObject(d[p],i.formatDay),{secondary:d[p].getMonth()!==a,uid:e.uniqueId+"-"+p});e.labels=new Array(7);for(var f=0;7>f;f++)e.labels[f]={abbr:t(d[f].date,i.formatDayHeader),full:t(d[f].date,"EEEE")};if(e.title=t(i.activeDate,i.formatDayTitle),e.rows=i.split(d,7),e.showWeeks){e.weekNumbers=[];for(var h=s(e.rows[0][0].date),g=e.rows.length;e.weekNumbers.push(h++)<g;);}},i.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth(),t.getDate())-new Date(e.getFullYear(),e.getMonth(),e.getDate())},i.handleKeyDown=function(t){var e=i.activeDate.getDate();if("left"===t)e-=1;else if("up"===t)e-=7;else if("right"===t)e+=1;else if("down"===t)e+=7;else if("pageup"===t||"pagedown"===t){var n=i.activeDate.getMonth()+("pageup"===t?-1:1);i.activeDate.setMonth(n,1),e=Math.min(o(i.activeDate.getFullYear(),i.activeDate.getMonth()),e)}else"home"===t?e=1:"end"===t&&(e=o(i.activeDate.getFullYear(),i.activeDate.getMonth()));i.activeDate.setDate(e)},i.refreshView()}}}]).directive("monthpicker",["dateFilter",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/month.html",require:"^datepicker",link:function(e,n,a,i){i.step={years:1},i.element=n,i._refreshView=function(){for(var n=new Array(12),a=i.activeDate.getFullYear(),o=0;12>o;o++)n[o]=angular.extend(i.createDateObject(new Date(a,o,1),i.formatMonth),{uid:e.uniqueId+"-"+o});e.title=t(i.activeDate,i.formatMonthTitle),e.rows=i.split(n,3)},i.compare=function(t,e){return new Date(t.getFullYear(),t.getMonth())-new Date(e.getFullYear(),e.getMonth())},i.handleKeyDown=function(t){var e=i.activeDate.getMonth();if("left"===t)e-=1;else if("up"===t)e-=3;else if("right"===t)e+=1;else if("down"===t)e+=3;else if("pageup"===t||"pagedown"===t){var n=i.activeDate.getFullYear()+("pageup"===t?-1:1);i.activeDate.setFullYear(n)}else"home"===t?e=0:"end"===t&&(e=11);i.activeDate.setMonth(e)},i.refreshView()}}}]).directive("yearpicker",["dateFilter",function(){return{restrict:"EA",replace:!0,templateUrl:"template/datepicker/year.html",require:"^datepicker",link:function(t,e,n,a){function i(t){return parseInt((t-1)/o,10)*o+1}var o=a.yearRange;a.step={years:o},a.element=e,a._refreshView=function(){for(var e=new Array(o),n=0,r=i(a.activeDate.getFullYear());o>n;n++)e[n]=angular.extend(a.createDateObject(new Date(r+n,0,1),a.formatYear),{uid:t.uniqueId+"-"+n});t.title=[e[0].label,e[o-1].label].join(" - "),t.rows=a.split(e,5)},a.compare=function(t,e){return t.getFullYear()-e.getFullYear()},a.handleKeyDown=function(t){var e=a.activeDate.getFullYear();"left"===t?e-=1:"up"===t?e-=5:"right"===t?e+=1:"down"===t?e+=5:"pageup"===t||"pagedown"===t?e+=("pageup"===t?-1:1)*a.step.years:"home"===t?e=i(a.activeDate.getFullYear()):"end"===t&&(e=i(a.activeDate.getFullYear())+o-1),a.activeDate.setFullYear(e)},a.refreshView()}}}]).constant("datepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0}).directive("datepickerPopup",["$compile","$parse","$document","$position","dateFilter","dateParser","datepickerPopupConfig",function(t,e,n,a,i,o,r){return{restrict:"EA",require:"ngModel",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&"},link:function(s,l,c,u){function d(t){return t.replace(/([A-Z])/g,function(t){return"-"+t.toLowerCase()})}function p(t){if(t){if(angular.isDate(t)&&!isNaN(t))return u.$setValidity("date",!0),t;if(angular.isString(t)){var e=o.parse(t,f)||new Date(t);return isNaN(e)?(u.$setValidity("date",!1),void 0):(u.$setValidity("date",!0),e)}return u.$setValidity("date",!1),void 0}return u.$setValidity("date",!0),null}var f,h=angular.isDefined(c.closeOnDateSelection)?s.$parent.$eval(c.closeOnDateSelection):r.closeOnDateSelection,g=angular.isDefined(c.datepickerAppendToBody)?s.$parent.$eval(c.datepickerAppendToBody):r.appendToBody;s.showButtonBar=angular.isDefined(c.showButtonBar)?s.$parent.$eval(c.showButtonBar):r.showButtonBar,s.getText=function(t){return s[t+"Text"]||r[t+"Text"]},c.$observe("datepickerPopup",function(t){f=t||r.datepickerPopup,u.$render()});var m=angular.element("<div datepicker-popup-wrap><div datepicker></div></div>");m.attr({"ng-model":"date","ng-change":"dateSelection()"});var v=angular.element(m.children()[0]);c.datepickerOptions&&angular.forEach(s.$parent.$eval(c.datepickerOptions),function(t,e){v.attr(d(e),t)}),s.watchData={},angular.forEach(["minDate","maxDate","datepickerMode"],function(t){if(c[t]){var n=e(c[t]);if(s.$parent.$watch(n,function(e){s.watchData[t]=e}),v.attr(d(t),"watchData."+t),"datepickerMode"===t){var a=n.assign;s.$watch("watchData."+t,function(t,e){t!==e&&a(s.$parent,t)})}}}),c.dateDisabled&&v.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),u.$parsers.unshift(p),s.dateSelection=function(t){angular.isDefined(t)&&(s.date=t),u.$setViewValue(s.date),u.$render(),h&&(s.isOpen=!1,l[0].focus())},l.bind("input change keyup",function(){s.$apply(function(){s.date=u.$modelValue})}),u.$render=function(){var t=u.$viewValue?i(u.$viewValue,f):"";l.val(t),s.date=p(u.$modelValue)};var b=function(t){s.isOpen&&t.target!==l[0]&&s.$apply(function(){s.isOpen=!1})},y=function(t){s.keydown(t)};l.bind("keydown",y),s.keydown=function(t){27===t.which?(t.preventDefault(),t.stopPropagation(),s.close()):40!==t.which||s.isOpen||(s.isOpen=!0)},s.$watch("isOpen",function(t){t?(s.$broadcast("datepicker.focus"),s.position=g?a.offset(l):a.position(l),s.position.top=s.position.top+l.prop("offsetHeight"),n.bind("click",b)):n.unbind("click",b)}),s.select=function(t){if("today"===t){var e=new Date;angular.isDate(u.$modelValue)?(t=new Date(u.$modelValue),t.setFullYear(e.getFullYear(),e.getMonth(),e.getDate())):t=new Date(e.setHours(0,0,0,0))}s.dateSelection(t)},s.close=function(){s.isOpen=!1,l[0].focus()};var $=t(m)(s);m.remove(),g?n.find("body").append($):l.after($),s.$on("$destroy",function(){$.remove(),l.unbind("keydown",y),n.unbind("click",b)})}}}]).directive("datepickerPopupWrap",function(){return{restrict:"EA",replace:!0,transclude:!0,templateUrl:"template/datepicker/popup.html",link:function(t,e){e.bind("click",function(t){t.preventDefault(),t.stopPropagation()})}}}),angular.module("ui.bootstrap.dropdown",[]).constant("dropdownConfig",{openClass:"open"}).service("dropdownService",["$document",function(t){var e=null;this.open=function(i){e||(t.bind("click",n),t.bind("keydown",a)),e&&e!==i&&(e.isOpen=!1),e=i},this.close=function(i){e===i&&(e=null,t.unbind("click",n),t.unbind("keydown",a))};var n=function(t){var n=e.getToggleElement();t&&n&&n[0].contains(t.target)||e.$apply(function(){e.isOpen=!1})},a=function(t){27===t.which&&(e.focusToggleElement(),n())}}]).controller("DropdownController",["$scope","$attrs","$parse","dropdownConfig","dropdownService","$animate",function(t,e,n,a,i,o){var r,s=this,l=t.$new(),c=a.openClass,u=angular.noop,d=e.onToggle?n(e.onToggle):angular.noop;this.init=function(a){s.$element=a,e.isOpen&&(r=n(e.isOpen),u=r.assign,t.$watch(r,function(t){l.isOpen=!!t}))},this.toggle=function(t){return l.isOpen=arguments.length?!!t:!l.isOpen},this.isOpen=function(){return l.isOpen},l.getToggleElement=function(){return s.toggleElement},l.focusToggleElement=function(){s.toggleElement&&s.toggleElement[0].focus()},l.$watch("isOpen",function(e,n){o[e?"addClass":"removeClass"](s.$element,c),e?(l.focusToggleElement(),i.open(l)):i.close(l),u(t,e),angular.isDefined(e)&&e!==n&&d(t,{open:!!e})}),t.$on("$locationChangeSuccess",function(){l.isOpen=!1}),t.$on("$destroy",function(){l.$destroy()})}]).directive("dropdown",function(){return{restrict:"CA",controller:"DropdownController",link:function(t,e,n,a){a.init(e)}}}).directive("dropdownToggle",function(){return{restrict:"CA",require:"?^dropdown",link:function(t,e,n,a){if(a){a.toggleElement=e;var i=function(i){i.preventDefault(),e.hasClass("disabled")||n.disabled||t.$apply(function(){a.toggle()})};e.bind("click",i),e.attr({"aria-haspopup":!0,"aria-expanded":!1}),t.$watch(a.isOpen,function(t){e.attr("aria-expanded",!!t)}),t.$on("$destroy",function(){e.unbind("click",i)})}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.transition"]).factory("$$stackedMap",function(){return{createNew:function(){var t=[];return{add:function(e,n){t.push({key:e,value:n})},get:function(e){for(var n=0;n<t.length;n++)if(e==t[n].key)return t[n]},keys:function(){for(var e=[],n=0;n<t.length;n++)e.push(t[n].key);return e},top:function(){return t[t.length-1]},remove:function(e){for(var n=-1,a=0;a<t.length;a++)if(e==t[a].key){n=a;break}return t.splice(n,1)[0]},removeTop:function(){return t.splice(t.length-1,1)[0]},length:function(){return t.length}}}}}).directive("modalBackdrop",["$timeout",function(t){return{restrict:"EA",replace:!0,templateUrl:"template/modal/backdrop.html",link:function(e,n,a){e.backdropClass=a.backdropClass||"",e.animate=!1,t(function(){e.animate=!0})}}}]).directive("modalWindow",["$modalStack","$timeout",function(t,e){return{restrict:"EA",scope:{index:"@",animate:"="},replace:!0,transclude:!0,templateUrl:function(t,e){return e.templateUrl||"template/modal/window.html"},link:function(n,a,i){a.addClass(i.windowClass||""),n.size=i.size,e(function(){n.animate=!0,a[0].querySelectorAll("[autofocus]").length||a[0].focus()}),n.close=function(e){var n=t.getTop();n&&n.value.backdrop&&"static"!=n.value.backdrop&&e.target===e.currentTarget&&(e.preventDefault(),e.stopPropagation(),t.dismiss(n.key,"backdrop click"))}}}}]).directive("modalTransclude",function(){return{link:function(t,e,n,a,i){i(t.$parent,function(t){e.empty(),e.append(t)})}}}).factory("$modalStack",["$transition","$timeout","$document","$compile","$rootScope","$$stackedMap",function(t,e,n,a,i,o){function r(){for(var t=-1,e=f.keys(),n=0;n<e.length;n++)f.get(e[n]).value.backdrop&&(t=n);return t}function s(t){var e=n.find("body").eq(0),a=f.get(t).value;f.remove(t),c(a.modalDomEl,a.modalScope,300,function(){a.modalScope.$destroy(),e.toggleClass(p,f.length()>0),l()})}function l(){if(u&&-1==r()){var t=d;c(u,d,150,function(){t.$destroy(),t=null}),u=void 0,d=void 0}}function c(n,a,i,o){function r(){r.done||(r.done=!0,n.remove(),o&&o())}a.animate=!1;var s=t.transitionEndEventName;if(s){var l=e(r,i);n.bind(s,function(){e.cancel(l),r(),a.$apply()})}else e(r)}var u,d,p="modal-open",f=o.createNew(),h={};return i.$watch(r,function(t){d&&(d.index=t)}),n.bind("keydown",function(t){var e;27===t.which&&(e=f.top(),e&&e.value.keyboard&&(t.preventDefault(),i.$apply(function(){h.dismiss(e.key,"escape key press")})))}),h.open=function(t,e){f.add(t,{deferred:e.deferred,modalScope:e.scope,backdrop:e.backdrop,keyboard:e.keyboard});var o=n.find("body").eq(0),s=r();if(s>=0&&!u){d=i.$new(!0),d.index=s;var l=angular.element("<div modal-backdrop></div>");l.attr("backdrop-class",e.backdropClass),u=a(l)(d),o.append(u)}var c=angular.element("<div modal-window></div>");c.attr({"template-url":e.windowTemplateUrl,"window-class":e.windowClass,size:e.size,index:f.length()-1,animate:"animate"}).html(e.content);var h=a(c)(e.scope);f.top().value.modalDomEl=h,o.append(h),o.addClass(p)},h.close=function(t,e){var n=f.get(t);n&&(n.value.deferred.resolve(e),s(t))},h.dismiss=function(t,e){var n=f.get(t);n&&(n.value.deferred.reject(e),s(t))},h.dismissAll=function(t){for(var e=this.getTop();e;)this.dismiss(e.key,t),e=this.getTop()},h.getTop=function(){return f.top()},h}]).provider("$modal",function(){var t={options:{backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$http","$templateCache","$controller","$modalStack",function(e,n,a,i,o,r,s){function l(t){return t.template?a.when(t.template):i.get(angular.isFunction(t.templateUrl)?t.templateUrl():t.templateUrl,{cache:o}).then(function(t){return t.data})}function c(t){var n=[];return angular.forEach(t,function(t){(angular.isFunction(t)||angular.isArray(t))&&n.push(a.when(e.invoke(t)))}),n}var u={};return u.open=function(e){var i=a.defer(),o=a.defer(),u={result:i.promise,opened:o.promise,close:function(t){s.close(u,t)},dismiss:function(t){s.dismiss(u,t)}};if(e=angular.extend({},t.options,e),e.resolve=e.resolve||{},!e.template&&!e.templateUrl)throw new Error("One of template or templateUrl options is required.");var d=a.all([l(e)].concat(c(e.resolve)));return d.then(function(t){var a=(e.scope||n).$new();a.$close=u.close,a.$dismiss=u.dismiss;var o,l={},c=1;e.controller&&(l.$scope=a,l.$modalInstance=u,angular.forEach(e.resolve,function(e,n){l[n]=t[c++]}),o=r(e.controller,l),e.controllerAs&&(a[e.controllerAs]=o)),s.open(u,{scope:a,deferred:i,content:t[0],backdrop:e.backdrop,keyboard:e.keyboard,backdropClass:e.backdropClass,windowClass:e.windowClass,windowTemplateUrl:e.windowTemplateUrl,size:e.size})},function(t){i.reject(t)}),d.then(function(){o.resolve(!0)},function(){o.reject(!1)}),u},u}]};return t}),angular.module("ui.bootstrap.pagination",[]).controller("PaginationController",["$scope","$attrs","$parse",function(t,e,n){var a=this,i={$setViewValue:angular.noop},o=e.numPages?n(e.numPages).assign:angular.noop;this.init=function(o,r){i=o,this.config=r,i.$render=function(){a.render()},e.itemsPerPage?t.$parent.$watch(n(e.itemsPerPage),function(e){a.itemsPerPage=parseInt(e,10),t.totalPages=a.calculateTotalPages()}):this.itemsPerPage=r.itemsPerPage},this.calculateTotalPages=function(){var e=this.itemsPerPage<1?1:Math.ceil(t.totalItems/this.itemsPerPage);return Math.max(e||0,1)},this.render=function(){t.page=parseInt(i.$viewValue,10)||1},t.selectPage=function(e){t.page!==e&&e>0&&e<=t.totalPages&&(i.$setViewValue(e),i.$render())},t.getText=function(e){return t[e+"Text"]||a.config[e+"Text"]},t.noPrevious=function(){return 1===t.page},t.noNext=function(){return t.page===t.totalPages},t.$watch("totalItems",function(){t.totalPages=a.calculateTotalPages()}),t.$watch("totalPages",function(e){o(t.$parent,e),t.page>e?t.selectPage(e):i.$render()})}]).constant("paginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("pagination",["$parse","paginationConfig",function(t,e){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@"},require:["pagination","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pagination.html",replace:!0,link:function(n,a,i,o){function r(t,e,n){return{number:t,text:e,active:n}}function s(t,e){var n=[],a=1,i=e,o=angular.isDefined(u)&&e>u;o&&(d?(a=Math.max(t-Math.floor(u/2),1),i=a+u-1,i>e&&(i=e,a=i-u+1)):(a=(Math.ceil(t/u)-1)*u+1,i=Math.min(a+u-1,e)));for(var s=a;i>=s;s++){var l=r(s,s,s===t);n.push(l)}if(o&&!d){if(a>1){var c=r(a-1,"...",!1);n.unshift(c)}if(e>i){var p=r(i+1,"...",!1);n.push(p)}}return n}var l=o[0],c=o[1];if(c){var u=angular.isDefined(i.maxSize)?n.$parent.$eval(i.maxSize):e.maxSize,d=angular.isDefined(i.rotate)?n.$parent.$eval(i.rotate):e.rotate;n.boundaryLinks=angular.isDefined(i.boundaryLinks)?n.$parent.$eval(i.boundaryLinks):e.boundaryLinks,n.directionLinks=angular.isDefined(i.directionLinks)?n.$parent.$eval(i.directionLinks):e.directionLinks,l.init(c,e),i.maxSize&&n.$parent.$watch(t(i.maxSize),function(t){u=parseInt(t,10),l.render()});var p=l.render;l.render=function(){p(),n.page>0&&n.page<=n.totalPages&&(n.pages=s(n.page,n.totalPages))}}}}}]).constant("pagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("pager",["pagerConfig",function(t){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@"},require:["pager","?ngModel"],controller:"PaginationController",templateUrl:"template/pagination/pager.html",replace:!0,link:function(e,n,a,i){var o=i[0],r=i[1];r&&(e.align=angular.isDefined(a.align)?e.$parent.$eval(a.align):t.align,o.init(r,t))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).provider("$tooltip",function(){function t(t){var e=/[A-Z]/g,n="-";return t.replace(e,function(t,e){return(e?n:"")+t.toLowerCase()})}var e={placement:"top",animation:!0,popupDelay:0},n={mouseenter:"mouseleave",click:"click",focus:"blur"},a={};this.options=function(t){angular.extend(a,t)},this.setTriggers=function(t){angular.extend(n,t)},this.$get=["$window","$compile","$timeout","$parse","$document","$position","$interpolate",function(i,o,r,s,l,c,u){return function(i,d,p){function f(t){var e=t||h.trigger||p,a=n[e]||e;return{show:e,hide:a}}var h=angular.extend({},e,a),g=t(i),m=u.startSymbol(),v=u.endSymbol(),b="<div "+g+'-popup title="'+m+"tt_title"+v+'" content="'+m+"tt_content"+v+'" placement="'+m+"tt_placement"+v+'" animation="tt_animation" is-open="tt_isOpen"></div>';return{restrict:"EA",scope:!0,compile:function(){var t=o(b);return function(e,n,a){function o(){e.tt_isOpen?p():u()}function u(){(!C||e.$eval(a[d+"Enable"]))&&(e.tt_popupDelay?w||(w=r(g,e.tt_popupDelay,!1),w.then(function(t){t()})):g()())}function p(){e.$apply(function(){m()})}function g(){return w=null,$&&(r.cancel($),$=null),e.tt_content?(v(),y.css({top:0,left:0,display:"block"}),k?l.find("body").append(y):n.after(y),T(),e.tt_isOpen=!0,e.$digest(),T):angular.noop}function m(){e.tt_isOpen=!1,r.cancel(w),w=null,e.tt_animation?$||($=r(b,500)):b()}function v(){y&&b(),y=t(e,function(){}),e.$digest()}function b(){$=null,y&&(y.remove(),y=null)}var y,$,w,k=angular.isDefined(h.appendToBody)?h.appendToBody:!1,x=f(void 0),C=angular.isDefined(a[d+"Enable"]),T=function(){var t=c.positionElements(n,y,e.tt_placement,k);t.top+="px",t.left+="px",y.css(t)};e.tt_isOpen=!1,a.$observe(i,function(t){e.tt_content=t,!t&&e.tt_isOpen&&m()}),a.$observe(d+"Title",function(t){e.tt_title=t}),a.$observe(d+"Placement",function(t){e.tt_placement=angular.isDefined(t)?t:h.placement}),a.$observe(d+"PopupDelay",function(t){var n=parseInt(t,10);e.tt_popupDelay=isNaN(n)?h.popupDelay:n});var E=function(){n.unbind(x.show,u),n.unbind(x.hide,p)};a.$observe(d+"Trigger",function(t){E(),x=f(t),x.show===x.hide?n.bind(x.show,o):(n.bind(x.show,u),n.bind(x.hide,p))});var D=e.$eval(a[d+"Animation"]);e.tt_animation=angular.isDefined(D)?!!D:h.animation,a.$observe(d+"AppendToBody",function(t){k=angular.isDefined(t)?s(t)(e):k}),k&&e.$on("$locationChangeSuccess",function(){e.tt_isOpen&&m()}),e.$on("$destroy",function(){r.cancel($),r.cancel(w),E(),b()})}}}}}]}).directive("tooltipPopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html"}}).directive("tooltip",["$tooltip",function(t){return t("tooltip","tooltip","mouseenter")}]).directive("tooltipHtmlUnsafePopup",function(){return{restrict:"EA",replace:!0,scope:{content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-unsafe-popup.html"}}).directive("tooltipHtmlUnsafe",["$tooltip",function(t){return t("tooltipHtmlUnsafe","tooltip","mouseenter")}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("popoverPopup",function(){return{restrict:"EA",replace:!0,scope:{title:"@",content:"@",placement:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html"}}).directive("popover",["$tooltip",function(t){return t("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("progressConfig",{animate:!0,max:100}).controller("ProgressController",["$scope","$attrs","progressConfig",function(t,e,n){var a=this,i=angular.isDefined(e.animate)?t.$parent.$eval(e.animate):n.animate;this.bars=[],t.max=angular.isDefined(e.max)?t.$parent.$eval(e.max):n.max,this.addBar=function(e,n){i||n.css({transition:"none"}),this.bars.push(e),e.$watch("value",function(n){e.percent=+(100*n/t.max).toFixed(2)}),e.$on("$destroy",function(){n=null,a.removeBar(e)})},this.removeBar=function(t){this.bars.splice(this.bars.indexOf(t),1)}}]).directive("progress",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{},templateUrl:"template/progressbar/progress.html"}}).directive("bar",function(){return{restrict:"EA",replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(t,e,n,a){a.addBar(t,e)}}}).directive("progressbar",function(){return{restrict:"EA",replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(t,e,n,a){a.addBar(t,angular.element(e.children()[0]))}}}),angular.module("ui.bootstrap.rating",[]).constant("ratingConfig",{max:5,stateOn:null,stateOff:null}).controller("RatingController",["$scope","$attrs","ratingConfig",function(t,e,n){var a={$setViewValue:angular.noop};this.init=function(i){a=i,a.$render=this.render,this.stateOn=angular.isDefined(e.stateOn)?t.$parent.$eval(e.stateOn):n.stateOn,this.stateOff=angular.isDefined(e.stateOff)?t.$parent.$eval(e.stateOff):n.stateOff;var o=angular.isDefined(e.ratingStates)?t.$parent.$eval(e.ratingStates):new Array(angular.isDefined(e.max)?t.$parent.$eval(e.max):n.max);t.range=this.buildTemplateObjects(o)},this.buildTemplateObjects=function(t){for(var e=0,n=t.length;n>e;e++)t[e]=angular.extend({index:e},{stateOn:this.stateOn,stateOff:this.stateOff},t[e]);return t},t.rate=function(e){!t.readonly&&e>=0&&e<=t.range.length&&(a.$setViewValue(e),a.$render())},t.enter=function(e){t.readonly||(t.value=e),t.onHover({value:e})},t.reset=function(){t.value=a.$viewValue,t.onLeave()},t.onKeydown=function(e){/(37|38|39|40)/.test(e.which)&&(e.preventDefault(),e.stopPropagation(),t.rate(t.value+(38===e.which||39===e.which?1:-1)))},this.render=function(){t.value=a.$viewValue}}]).directive("rating",function(){return{restrict:"EA",require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(t,e,n,a){var i=a[0],o=a[1];o&&i.init(o)}}}),angular.module("ui.bootstrap.tabs",[]).controller("TabsetController",["$scope",function(t){var e=this,n=e.tabs=t.tabs=[];e.select=function(t){angular.forEach(n,function(e){e.active&&e!==t&&(e.active=!1,e.onDeselect())}),t.active=!0,t.onSelect()},e.addTab=function(t){n.push(t),1===n.length?t.active=!0:t.active&&e.select(t)},e.removeTab=function(t){var a=n.indexOf(t);if(t.active&&n.length>1){var i=a==n.length-1?a-1:a+1;e.select(n[i])}n.splice(a,1)}}]).directive("tabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(t,e,n){t.vertical=angular.isDefined(n.vertical)?t.$parent.$eval(n.vertical):!1,t.justified=angular.isDefined(n.justified)?t.$parent.$eval(n.justified):!1}}}).directive("tab",["$parse",function(t){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},compile:function(e,n,a){return function(e,n,i,o){e.$watch("active",function(t){t&&o.select(e)}),e.disabled=!1,i.disabled&&e.$parent.$watch(t(i.disabled),function(t){e.disabled=!!t}),e.select=function(){e.disabled||(e.active=!0)},o.addTab(e),e.$on("$destroy",function(){o.removeTab(e)}),e.$transcludeFn=a}}}}]).directive("tabHeadingTransclude",[function(){return{restrict:"A",require:"^tab",link:function(t,e){t.$watch("headingElement",function(t){t&&(e.html(""),e.append(t))})}}}]).directive("tabContentTransclude",function(){function t(t){return t.tagName&&(t.hasAttribute("tab-heading")||t.hasAttribute("data-tab-heading")||"tab-heading"===t.tagName.toLowerCase()||"data-tab-heading"===t.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(e,n,a){var i=e.$eval(a.tabContentTransclude);i.$transcludeFn(i.$parent,function(e){angular.forEach(e,function(e){t(e)?i.headingElement=e:n.append(e)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("timepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0}).controller("TimepickerController",["$scope","$attrs","$parse","$log","$locale","timepickerConfig",function(t,e,n,a,i,o){function r(){var e=parseInt(t.hours,10),n=t.showMeridian?e>0&&13>e:e>=0&&24>e;return n?(t.showMeridian&&(12===e&&(e=0),t.meridian===g[1]&&(e+=12)),e):void 0}function s(){var e=parseInt(t.minutes,10);return e>=0&&60>e?e:void 0}function l(t){return angular.isDefined(t)&&t.toString().length<2?"0"+t:t}function c(t){u(),h.$setViewValue(new Date(f)),d(t)}function u(){h.$setValidity("time",!0),t.invalidHours=!1,t.invalidMinutes=!1}function d(e){var n=f.getHours(),a=f.getMinutes();t.showMeridian&&(n=0===n||12===n?12:n%12),t.hours="h"===e?n:l(n),t.minutes="m"===e?a:l(a),t.meridian=f.getHours()<12?g[0]:g[1]}function p(t){var e=new Date(f.getTime()+6e4*t);f.setHours(e.getHours(),e.getMinutes()),c()}var f=new Date,h={$setViewValue:angular.noop},g=angular.isDefined(e.meridians)?t.$parent.$eval(e.meridians):o.meridians||i.DATETIME_FORMATS.AMPMS;this.init=function(n,a){h=n,h.$render=this.render;var i=a.eq(0),r=a.eq(1),s=angular.isDefined(e.mousewheel)?t.$parent.$eval(e.mousewheel):o.mousewheel;s&&this.setupMousewheelEvents(i,r),t.readonlyInput=angular.isDefined(e.readonlyInput)?t.$parent.$eval(e.readonlyInput):o.readonlyInput,this.setupInputEvents(i,r)};var m=o.hourStep;e.hourStep&&t.$parent.$watch(n(e.hourStep),function(t){m=parseInt(t,10)});var v=o.minuteStep;e.minuteStep&&t.$parent.$watch(n(e.minuteStep),function(t){v=parseInt(t,10)}),t.showMeridian=o.showMeridian,e.showMeridian&&t.$parent.$watch(n(e.showMeridian),function(e){if(t.showMeridian=!!e,h.$error.time){var n=r(),a=s();angular.isDefined(n)&&angular.isDefined(a)&&(f.setHours(n),c())}else d()}),this.setupMousewheelEvents=function(e,n){var a=function(t){t.originalEvent&&(t=t.originalEvent);var e=t.wheelDelta?t.wheelDelta:-t.deltaY;return t.detail||e>0};e.bind("mousewheel wheel",function(e){t.$apply(a(e)?t.incrementHours():t.decrementHours()),e.preventDefault()}),n.bind("mousewheel wheel",function(e){t.$apply(a(e)?t.incrementMinutes():t.decrementMinutes()),e.preventDefault()})},this.setupInputEvents=function(e,n){if(t.readonlyInput)return t.updateHours=angular.noop,t.updateMinutes=angular.noop,void 0;var a=function(e,n){h.$setViewValue(null),h.$setValidity("time",!1),angular.isDefined(e)&&(t.invalidHours=e),angular.isDefined(n)&&(t.invalidMinutes=n)};t.updateHours=function(){var t=r();angular.isDefined(t)?(f.setHours(t),c("h")):a(!0)},e.bind("blur",function(){!t.invalidHours&&t.hours<10&&t.$apply(function(){t.hours=l(t.hours)})}),t.updateMinutes=function(){var t=s();angular.isDefined(t)?(f.setMinutes(t),c("m")):a(void 0,!0)},n.bind("blur",function(){!t.invalidMinutes&&t.minutes<10&&t.$apply(function(){t.minutes=l(t.minutes)})})},this.render=function(){var t=h.$modelValue?new Date(h.$modelValue):null;
isNaN(t)?(h.$setValidity("time",!1),a.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(t&&(f=t),u(),d())},t.incrementHours=function(){p(60*m)},t.decrementHours=function(){p(60*-m)},t.incrementMinutes=function(){p(v)},t.decrementMinutes=function(){p(-v)},t.toggleMeridian=function(){p(720*(f.getHours()<12?1:-1))}}]).directive("timepicker",function(){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",replace:!0,scope:{},templateUrl:"template/timepicker/timepicker.html",link:function(t,e,n,a){var i=a[0],o=a[1];o&&i.init(o,e.find("input"))}}}),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position","ui.bootstrap.bindHtml"]).factory("typeaheadParser",["$parse",function(t){var e=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(n){var a=n.match(e);if(!a)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+n+'".');return{itemName:a[3],source:t(a[4]),viewMapper:t(a[2]||a[1]),modelMapper:t(a[1])}}}}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$position","typeaheadParser",function(t,e,n,a,i,o,r){var s=[9,13,27,38,40];return{require:"ngModel",link:function(l,c,u,d){var p,f=l.$eval(u.typeaheadMinLength)||1,h=l.$eval(u.typeaheadWaitMs)||0,g=l.$eval(u.typeaheadEditable)!==!1,m=e(u.typeaheadLoading).assign||angular.noop,v=e(u.typeaheadOnSelect),b=u.typeaheadInputFormatter?e(u.typeaheadInputFormatter):void 0,y=u.typeaheadAppendToBody?l.$eval(u.typeaheadAppendToBody):!1,$=e(u.ngModel).assign,w=r.parse(u.typeahead),k=l.$new();l.$on("$destroy",function(){k.$destroy()});var x="typeahead-"+k.$id+"-"+Math.floor(1e4*Math.random());c.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":x});var C=angular.element("<div typeahead-popup></div>");C.attr({id:x,matches:"matches",active:"activeIdx",select:"select(activeIdx)",query:"query",position:"position"}),angular.isDefined(u.typeaheadTemplateUrl)&&C.attr("template-url",u.typeaheadTemplateUrl);var T=function(){k.matches=[],k.activeIdx=-1,c.attr("aria-expanded",!1)},E=function(t){return x+"-option-"+t};k.$watch("activeIdx",function(t){0>t?c.removeAttr("aria-activedescendant"):c.attr("aria-activedescendant",E(t))});var D=function(t){var e={$viewValue:t};m(l,!0),n.when(w.source(l,e)).then(function(n){var a=t===d.$viewValue;if(a&&p)if(n.length>0){k.activeIdx=0,k.matches.length=0;for(var i=0;i<n.length;i++)e[w.itemName]=n[i],k.matches.push({id:E(i),label:w.viewMapper(k,e),model:n[i]});k.query=t,k.position=y?o.offset(c):o.position(c),k.position.top=k.position.top+c.prop("offsetHeight"),c.attr("aria-expanded",!0)}else T();a&&m(l,!1)},function(){T(),m(l,!1)})};T(),k.query=void 0;var S,O=function(t){S=a(function(){D(t)},h)},A=function(){S&&a.cancel(S)};d.$parsers.unshift(function(t){return p=!0,t&&t.length>=f?h>0?(A(),O(t)):D(t):(m(l,!1),A(),T()),g?t:t?(d.$setValidity("editable",!1),void 0):(d.$setValidity("editable",!0),t)}),d.$formatters.push(function(t){var e,n,a={};return b?(a.$model=t,b(l,a)):(a[w.itemName]=t,e=w.viewMapper(l,a),a[w.itemName]=void 0,n=w.viewMapper(l,a),e!==n?e:t)}),k.select=function(t){var e,n,i={};i[w.itemName]=n=k.matches[t].model,e=w.modelMapper(l,i),$(l,e),d.$setValidity("editable",!0),v(l,{$item:n,$model:e,$label:w.viewMapper(l,i)}),T(),a(function(){c[0].focus()},0,!1)},c.bind("keydown",function(t){0!==k.matches.length&&-1!==s.indexOf(t.which)&&(t.preventDefault(),40===t.which?(k.activeIdx=(k.activeIdx+1)%k.matches.length,k.$digest()):38===t.which?(k.activeIdx=(k.activeIdx?k.activeIdx:k.matches.length)-1,k.$digest()):13===t.which||9===t.which?k.$apply(function(){k.select(k.activeIdx)}):27===t.which&&(t.stopPropagation(),T(),k.$digest()))}),c.bind("blur",function(){p=!1});var M=function(t){c[0]!==t.target&&(T(),k.$digest())};i.bind("click",M),l.$on("$destroy",function(){i.unbind("click",M)});var P=t(C)(k);y?i.find("body").append(P):c.after(P)}}}]).directive("typeaheadPopup",function(){return{restrict:"EA",scope:{matches:"=",query:"=",active:"=",position:"=",select:"&"},replace:!0,templateUrl:"template/typeahead/typeahead-popup.html",link:function(t,e,n){t.templateUrl=n.templateUrl,t.isOpen=function(){return t.matches.length>0},t.isActive=function(e){return t.active==e},t.selectActive=function(e){t.active=e},t.selectMatch=function(e){t.select({activeIdx:e})}}}}).directive("typeaheadMatch",["$http","$templateCache","$compile","$parse",function(t,e,n,a){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(i,o,r){var s=a(r.templateUrl)(i.$parent)||"template/typeahead/typeahead-match.html";t.get(s,{cache:e}).success(function(t){o.replaceWith(n(t.trim())(i))})}}}]).filter("typeaheadHighlight",function(){function t(t){return t.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}return function(e,n){return n?(""+e).replace(new RegExp(t(n),"gi"),"<strong>$&</strong>"):e}}),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion-group.html",'<div class="panel panel-default">\n  <div class="panel-heading">\n    <h4 class="panel-title">\n      <a class="accordion-toggle" ng-click="toggleOpen()" accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse" collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function(t){t.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function(t){t.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissable\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close()">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function(t){t.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n    <ol class="carousel-indicators" ng-show="slides.length > 1">\n        <li ng-repeat="slide in slides track by $index" ng-class="{active: isActive(slide)}" ng-click="select(slide)"></li>\n    </ol>\n    <div class="carousel-inner" ng-transclude></div>\n    <a class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-left"></span></a>\n    <a class="right carousel-control" ng-click="next()" ng-show="slides.length > 1"><span class="glyphicon glyphicon-chevron-right"></span></a>\n</div>\n')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function(t){t.put("template/carousel/slide.html","<div ng-class=\"{\n    'active': leaving || (active && !entering),\n    'prev': (next || active) && direction=='prev',\n    'next': (next || active) && direction=='next',\n    'right': direction=='prev',\n    'left': direction=='next'\n  }\" class=\"item text-center\" ng-transclude></div>\n")}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <daypicker ng-switch-when="day" tabindex="0"></daypicker>\n  <monthpicker ng-switch-when="month" tabindex="0"></monthpicker>\n  <yearpicker ng-switch-when="year" tabindex="0"></yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{5 + showWeeks}}"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-show="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in labels track by $index" class="text-center"><small aria-label="{{label.full}}">{{label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-show="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/popup.html",'<ul class="dropdown-menu" ng-style="{display: (isOpen && \'block\') || \'none\', top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function(t){t.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{dt.uid}}" aria-disabled="{{!!dt.disabled}}">\n        <button type="button" style="width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="{\'text-info\': dt.current}">{{dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function(t){t.put("template/modal/backdrop.html",'<div class="modal-backdrop fade {{ backdropClass }}"\n     ng-class="{in: animate}"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function(t){t.put("template/modal/window.html",'<div tabindex="-1" role="dialog" class="modal fade" ng-class="{in: animate}" ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}" ng-click="close($event)">\n    <div class="modal-dialog" ng-class="{\'modal-sm\': size == \'sm\', \'modal-lg\': size == \'lg\'}"><div class="modal-content" modal-transclude></div></div>\n</div>')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious(), previous: align}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext(), next: align}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n</ul>')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function(t){t.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="boundaryLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(1)">{{getText(\'first\')}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noPrevious()}"><a href ng-click="selectPage(page - 1)">{{getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active}"><a href ng-click="selectPage(page.number)">{{page.text}}</a></li>\n  <li ng-if="directionLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(page + 1)">{{getText(\'next\')}}</a></li>\n  <li ng-if="boundaryLinks" ng-class="{disabled: noNext()}"><a href ng-click="selectPage(totalPages)">{{getText(\'last\')}}</a></li>\n</ul>')}]),angular.module("template/tooltip/tooltip-html-unsafe-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-html-unsafe-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" bind-html-unsafe="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(t){t.put("template/tooltip/tooltip-popup.html",'<div class="tooltip {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function(t){t.put("template/popover/popover.html",'<div class="popover {{placement}}" ng-class="{ in: isOpen(), fade: animation() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-show="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progress.html",'<div class="progress" ng-transclude></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function(t){t.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: percent + \'%\'}" aria-valuetext="{{percent | number:0}}%" ng-transclude></div>\n</div>')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function(t){t.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <i ng-repeat="r in range track by $index" ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')">\n        <span class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    </i>\n</span>')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a ng-click="select()" tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function(t){t.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function(t){t.put("template/timepicker/timepicker.html",'<table>\n	<tbody>\n		<tr class="text-center">\n			<td><a ng-click="incrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="incrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n		<tr>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidHours}">\n				<input type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-mousewheel="incrementHours()" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td>:</td>\n			<td style="width:50px;" class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n				<input type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2">\n			</td>\n			<td ng-show="showMeridian"><button type="button" class="btn btn-default text-center" ng-click="toggleMeridian()">{{meridian}}</button></td>\n		</tr>\n		<tr class="text-center">\n			<td><a ng-click="decrementHours()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td>&nbsp;</td>\n			<td><a ng-click="decrementMinutes()" class="btn btn-link"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n			<td ng-show="showMeridian"></td>\n		</tr>\n	</tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-match.html",'<a tabindex="-1" bind-html-unsafe="match.label | typeaheadHighlight:query"></a>')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(t){t.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen()" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{match.id}}">\n        <div typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),function(){"use strict";angular.module("risevision.widget.common.tooltip",["ui.bootstrap"]).directive("rvTooltip",[function(){return{restrict:"A",link:function(t,e){e.addClass("fa"),e.addClass("fa-question-circle"),e.addClass("fa-lg")}}}])}(),function(){"use strict";angular.module("risevision.widget.common.scroll-setting",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("scrollSetting",["$templateCache",function(t){return{restrict:"E",scope:{scroll:"="},template:t.get("_angular/scroll-setting/scroll-setting.html"),transclude:!1,link:function(t){t.defaultSetting={by:"none",speed:"medium",pause:5,pud:10},t.defaults=function(t){if(t)for(var e=1,n=arguments.length;n>e;e++){var a=arguments[e];for(var i in a)void 0===t[i]&&(t[i]=a[i])}return t},t.$watch("scroll",function(e){t.defaults(e,t.defaultSetting)})}}}])}(),function(t){try{t=angular.module("risevision.widget.common.scroll-setting")}catch(e){t=angular.module("risevision.widget.common.scroll-setting",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/scroll-setting/scroll-setting.html",'<div class="row">\n  <div class="col-md-3">\n    <div class="form-group">\n      <label class="control-label">{{"scroll.heading" | translate}}</label>\n      <select id="scroll-by" ng-model="scroll.by" class="form-control">\n        <option value="none">{{\'scroll.by.none\' | translate}}</option>\n        <option value="continuous">{{\'scroll.by.continuous\' | translate}}</option>\n        <option value="page">{{\'scroll.by.page\' | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-3" ng-show="scroll.by != \'none\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.speed.label\' | translate}}</label>\n      <select id="scroll-speed" ng-model="scroll.speed" class="form-control">\n        <option value="slowest">{{\'scroll.speed.slowest\' | translate}}</option>\n        <option value="slow">{{\'scroll.speed.slow\' | translate}}</option>\n        <option value="medium">{{\'scroll.speed.medium\' | translate}}</option>\n        <option value="fast">{{\'scroll.speed.fast\' | translate}}</option>\n        <option value="fastest">{{\'scroll.speed.fastest\' | translate}}</option>\n      </select>\n    </div>\n  </div>\n  <div class="col-md-3" ng-show="scroll.by != \'none\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.pause.label\' | translate}}</label>\n      <div class="input-group">\n        <input id="scroll-pause" type="number" ng-model="scroll.pause" class="form-control" />\n        <span class="input-group-addon">{{\'common.units.seconds\' | translate}}</span>\n      </div>\n    </div>\n  </div>\n  <div class="col-md-3" ng-show="scroll.by != \'none\'">\n    <div class="form-group">\n      <label class="control-label">{{\'scroll.pud.label\' | translate}}</label>\n      <span popover="{{\'scroll.pud.tooltip\' | translate}}" popover-trigger="click"\n        popover-placement="right" rv-tooltip></span>\n      <div class="input-group">\n        <input id="scroll-pud" type="number" ng-model="scroll.pud" class="form-control" />\n        <span class="input-group-addon">{{\'common.units.seconds\' | translate}}</span>\n      </div>\n    </div>\n  </div>\n</div>\n')}])}(),angular.module("ui.tinymce",[]).value("uiTinymceConfig",{}).directive("uiTinymce",["$rootScope","$compile","$timeout","$window","$sce","uiTinymceConfig",function(t,e,n,a,i,o){o=o||{};var r=0,s="ui-tinymce";return o.baseUrl&&(tinymce.baseURL=o.baseUrl),{require:["ngModel","^?form"],link:function(l,c,u,d){function p(t){t?(f(),g&&g.getBody().setAttribute("contenteditable",!1)):(f(),g&&!g.settings.readonly&&g.getBody().setAttribute("contenteditable",!0))}function f(){g||(g=tinymce.get(u.id))}if(a.tinymce){var h,g,m=d[0],v=d[1]||null,b={},y=function(e){var n=e.getContent({format:b.format}).trim();n=i.trustAsHtml(n),m.$setViewValue(n),t.$$phase||l.$apply()};u.$set("id",s+"-"+r++),h={},angular.extend(h,l.$eval(u.uiTinymce));var $={setup:function(t){t.on("init",function(){m.$render(),m.$setPristine(),v&&v.$setPristine()}),t.on("ExecCommand",function(){t.save(),y(t)}),t.on("change NodeChange",function(){t.save(),y(t)}),t.on("blur",function(){c[0].blur()}),t.on("ObjectResized",function(){t.save(),y(t)}),t.on("remove",function(){c.remove()}),h.setup&&h.setup(t,{updateView:y})},format:h.format||"html",selector:"#"+u.id};angular.extend(b,o,h,$),n(function(){b.baseURL&&(tinymce.baseURL=b.baseURL),tinymce.init(b),p(l.$eval(u.ngDisabled))}),m.$formatters.unshift(function(t){return t?i.trustAsHtml(t):""}),m.$parsers.unshift(function(t){return t?i.getTrustedHtml(t):""}),m.$render=function(){f();var t=m.$viewValue?i.getTrustedHtml(m.$viewValue):"";g&&g.getDoc()&&(g.setContent(t),g.fire("change"))},u.$observe("disabled",p),l.$on("$tinymce:refresh",function(t,n){var a=u.id;if(angular.isUndefined(n)||n===a){var i=c.parent(),o=c.clone();o.removeAttr("id"),o.removeAttr("style"),o.removeAttr("aria-hidden"),tinymce.execCommand("mceRemoveEditor",!1,a),i.append(e(o)(l))}}),l.$on("$destroy",function(){f(),g&&(g.remove(),g=null)})}}}}]),function(){"use strict";angular.module("risevision.widget.common.url-field",["risevision.common.i18n","risevision.widget.common.tooltip"]).directive("urlField",["$templateCache","$log",function(t,e){return{restrict:"E",require:"?ngModel",scope:{url:"=",hideLabel:"@",fileType:"@"},template:t.get("_angular/url-field/url-field.html"),link:function(t,n,a,i){function o(t,e){var n,a=t.toLowerCase();switch(e){case"image":n=[".jpg",".jpeg",".png",".bmp",".svg",".gif"];break;case"video":n=[".webm",".mp4",".ogv",".ogg"];break;default:n=[]}for(var i=0,o=n.length;o>i;i++)if(-1!==a.indexOf(n[i]))return!0;return!1}function r(){if("undefined"!==t.fileType&&"undefined"!==t.url&&"image"===t.fileType){var e=new Image;e.onload=function(){t.valid=!0,t.$apply()},e.onerror=function(){t.valid=!1,t.invalidType=t.fileType,t.$apply()},e.src=t.url}}function s(e){var n,a;return n=/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i,-1===e.indexOf("://")&&(e="http://"+e),a=n.test(e),a&&"undefined"!=typeof t.fileType?(a=o(e,t.fileType),a||(t.invalidType=t.fileType)):t.invalidType="url",a&&r(),a}t.doValidation=!0,t.forcedValid=!1,t.valid=!0,t.invalidType="url",t.allowInitEmpty="undefined"!=typeof a.initEmpty,t.blur=function(){t.$emit("urlFieldBlur")},t.$watch("url",function(e){"undefined"!=typeof e&&null!==e&&(""!==e&&t.allowInitEmpty&&(t.allowInitEmpty=!1),t.doValidation&&!t.allowInitEmpty&&(t.valid=s(t.url)))}),t.$watch("valid",function(t){i&&(e.info("Calling $setValidity() on parent controller"),i.$setValidity("valid",t))}),t.$watch("doValidation",function(e){"undefined"!=typeof t.url&&(e?(t.forcedValid=!1,t.allowInitEmpty||(t.valid=s(t.url))):(t.forcedValid=!0,t.valid=!0))})}}}])}(),function(t){try{t=angular.module("risevision.widget.common.url-field")}catch(e){t=angular.module("risevision.widget.common.url-field",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/url-field/url-field.html",'<div class="form-group" >\n  <label ng-if="!hideLabel">{{ "url.label" | translate }}</label>\n  <div>\n    <input name="url" type="text" ng-model="url" ng-blur="blur()" class="form-control" placeholder="http://">\n  </div>\n  <p ng-if="!valid && invalidType === \'url\'" class="text-danger">{{ "url.errors.url" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'image\'" class="text-danger">{{ "url.errors.image" | translate }}</p>\n  <p ng-if="!valid && invalidType === \'video\'" class="text-danger">{{ "url.errors.video" | translate }}</p>\n  <div class="checkbox" ng-show="forcedValid || !valid">\n    <label>\n      <input name="validate-url" ng-click="doValidation = !doValidation" type="checkbox"\n             value="validate-url"> {{"url.validate.label" | translate}}\n    </label>\n  </div>\n</div>\n')}])}(),function(){"use strict";angular.module("risevision.widget.common.widget-button-toolbar",["risevision.common.i18n"]).directive("widgetButtonToolbar",["$templateCache",function(t){return{restrict:"E",scope:{save:"&",cancel:"&",disableSave:"&"},template:t.get("_angular/widget-button-toolbar/widget-button-toolbar.html")}}])}(),function(t){try{t=angular.module("risevision.widget.common.widget-button-toolbar")}catch(e){t=angular.module("risevision.widget.common.widget-button-toolbar",[])}t.run(["$templateCache",function(t){"use strict";t.put("_angular/widget-button-toolbar/widget-button-toolbar.html",'<div class="pull-right">\n  <button id="save" class="btn btn-primary btn-fixed-width" type="button" ng-click="save()" ng-disabled="disableSave()">\n    <span>{{"common.save" | translate}}</span>\n    <i class="fa fa-white fa-check icon-right"></i>\n  </button>\n  <button id="cancel" class="btn btn-default btn-fixed-width" type="button" ng-click="cancel()">\n    <span>{{"common.cancel" | translate}}</span>\n    <i class="fa fa-white fa-times icon-right"></i>\n  </button>\n</div>\n')}])}(),angular.module("risevision.widget.text.settings",["risevision.common.i18n","risevision.widget.common","risevision.widget.common.widget-button-toolbar","risevision.widget.common.tooltip","risevision.widget.common.scroll-setting","risevision.widget.common.url-field","ui.tinymce"]),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={};angular.module("risevision.widget.common",[]),angular.module("risevision.widget.common").controller("settingsController",["$scope","settingsSaver","settingsGetter","settingsCloser",function(t,e,n,a){t.settings={params:{},additionalParams:{}},t.alerts=[],t.getAdditionalParam=function(e,n){var a=t.settings.additionalParams[e];return angular.isUndefined(a)?n:a},t.setAdditionalParam=function(e,n){t.settings.additionalParams[e]=n},t.loadAdditionalParams=function(){n.getAdditionalParams().then(function(e){t.settings.additionalParams=e,t.$broadcast("loadAdditionalParams",e)},function(t){alert(t)})},t.setAdditionalParams=function(e,n){t.settings.additionalParams[e]=n},t.saveSettings=function(){t.alerts=[],t.$broadcast("collectAdditionalParams"),e.saveSettings(t.settings).then(function(){},function(e){t.alerts=e.alerts})},t.closeSettings=function(){a.closeSettings().then(function(){},function(e){t.alerts=e.alerts})},t.settings.params=n.getParams(),t.loadAdditionalParams()}]).directive("scrollOnAlerts",function(){return{restrict:"A",scope:!1,link:function(t,e){t.$watchCollection("alerts",function(t,n){t.length>0&&0===n.length&&$("body").animate({scrollTop:e.offset().top},"fast")
})}}}),angular.module("risevision.widget.common").constant("STORAGE_FILE_URL_BASE","storage.googleapis.com/risemedialibrary-").constant("STORAGE_FOLDER_URL_BASE","googleapis.com/storage/").factory("commonSettings",["$log","STORAGE_FILE_URL_BASE","STORAGE_FOLDER_URL_BASE",function(t,e,n){var a={getStorageUrlData:function(t){function a(t){return-1!==t.indexOf(e)?"file":-1!==t.indexOf(n)?"folder":null}function i(t){var e=t.split("risemedialibrary-");return e[1].slice(0,e[1].indexOf("/"))}var o,r,s,l,c={};if("file"===a(t))o=t.split(e)[1],o=decodeURIComponent(o.slice(o.indexOf("/")+1)),r=o.split("/"),c.companyId=i(t),c.fileName=r.pop(),c.folder=r.length>0?r.join("/"):"",""!==c.folder&&(c.folder+="/");else if("folder"===a(t)){s=t.split("?");for(var u=0;u<s.length;u++)if(l=s[u].split("="),"prefix"===l[0]&&"undefined"!=typeof l[1]&&""!==l[1]){c.companyId=i(t),c.folder=decodeURIComponent(l[1]),c.fileName="";break}}return c}};return a}]),angular.module("risevision.widget.common").factory("gadgetsApi",["$window",function(t){return t.gadgets}]),angular.module("risevision.widget.common").service("i18nLoader",["$window","$q",function(t,e){var n=e.defer();t.i18n.init({fallbackLng:"en",resGetPath:"locales/__ns_____lng__.json"},function(){n.resolve(t.i18n)}),this.get=function(){return n.promise}}]),angular.module("risevision.widget.common").factory("imageValidator",["$q",function(t){var e={isImage:function(e){var n=t.defer(),a=new Image;return a.onload=function(){n.resolve(!0)},a.onerror=function(){n.resolve(!1)},a.src=e,n.promise}};return e}]),angular.module("risevision.widget.common").service("settingsSaver",["$q","$log","gadgetsApi","settingsParser",function(t,e,n,a){function i(t){var e=angular.copy(t);return delete e.params.id,delete e.params.companyId,delete e.params.rsW,delete e.params.rsH,e}this.saveSettings=function(o,r){var s=t.defer(),l=[],c="";o=i(o),r&&(l=r(o)),l.length>0&&(e.debug("Validation failed.",l),s.reject({alerts:l})),o.params.hasOwnProperty("layoutURL")&&(c+=o.params.layoutURL+"?",delete o.params.layoutURL),c+=a.encodeParams(o.params);var u=a.encodeAdditionalParams(o.additionalParams);return n.rpc.call("","rscmd_saveSettings",function(t){e.debug("encoded settings",JSON.stringify(t)),e.debug("Settings saved. ",o),s.resolve(t)},{params:c,additionalParams:u}),s.promise}}]).service("settingsGetter",["$q","gadgetsApi","$log","settingsParser","$window","defaultSettings",function(t,e,n,a,i,o){this.getAdditionalParams=function(){var i=t.defer(),r=o.additionalParams||{};return e.rpc.call("","rscmd_getAdditionalParams",function(t){t=t?a.parseAdditionalParams(t):{},n.debug("getAdditionalParams returns ",t),i.resolve(angular.extend(r,t))}),i.promise},this.getParams=function(){var t=o.params||{};return angular.extend(t,a.parseParams(i.location.search))}}]).service("settingsParser",[function(){function t(t){return 0===t.indexOf("up_")?t.slice(3):null}this.parseAdditionalParams=function(t){return t?JSON.parse(t):{}},this.encodeAdditionalParams=function(t){return JSON.stringify(t)},this.encodeParams=function(t){var e=[];for(var n in t)if(t.hasOwnProperty(n)){var a;a="object"==typeof t[n]?JSON.stringify(t[n]):t[n],e.push("up_"+encodeURIComponent(n)+"="+encodeURIComponent(a))}return e.join("&")},this.parseParams=function(e){"?"===e[0]&&(e=e.slice(1));for(var n={},a=e.split("&"),i=0;i<a.length;i++){var o=a[i].split("="),r=t(decodeURIComponent(o[0]));if(r)try{n[r]=JSON.parse(decodeURIComponent(o[1]))}catch(s){n[r]=decodeURIComponent(o[1])}}return n}}]).service("settingsCloser",["$q","$log","gadgetsApi",function(t,e,n){this.closeSettings=function(){var e=t.defer();return n.rpc.call("","rscmd_closeSettings",function(){e.resolve(!0)}),e.promise}}]).value("defaultSettings",{}),function(t){"use strict";t.module("risevision.widget.common.visualization",[]).factory("visualizationApi",["$q","$window",function(t,e){var n,a=t.defer(),i={get:function(){return n||(n=a.promise,e.google.visualization?a.resolve(e.google.visualization):e.google.setOnLoadCallback(function(){a.resolve(e.google.visualization)})),n}};return i}])}(angular),angular.module("risevision.widget.text.settings").controller("textSettingsController",["$scope","$rootScope","$log","$window","$timeout","googleFonts","FONT_SIZES","FONT_FAMILIES",function(t,e,n,a,i,o,r,s){function l(t,n){switch(n.command){case"FontName":if(f)return;if("custom"===n.value)return e.$broadcast("showCustom"),void 0}}function c(e){var n=e.getDoc();t.settings.additionalParams.customFonts.length>0&&i(function a(){var e=n.styleSheets[0];e?angular.forEach(t.settings.additionalParams.customFonts,function(t){var n="font-family: "+t.family.replace(/'/g,"")+"; src: url('"+t.url.replace(/'/g,"\\'")+"');";e.addRule("@font-face",n)}):a()},200)}function u(t,e){function n(){e&&"function"==typeof e&&e()}Array.isArray(t)&&t.length>0?i(function a(){var e=document.styleSheets[0];e?angular.forEach(t,function(t){var n="font-family: "+t.family.replace(/'/g,"").toLowerCase()+"; src: url('"+t.url.replace(/'/g,"\\'")+"');";e.addRule("@font-face",n)}):a()},200):n()}function d(){var e="";return angular.forEach(t.settings.additionalParams.customFonts,function(t){e+=t.family+"="+t.family.replace(/'/g,"").toLowerCase()+",sans-serif;"}),e}function p(){t.tinymceOptions={plugins:"code colorpicker textcolor wordcount",skin_url:"//s3.amazonaws.com/rise-common/styles/tinymce/rise",font_formats:"Add Custom Font=custom;"+d()+s+h,formats:{fontsize:{inline:"span",split:!1,styles:{fontSize:"%value"}}},content_css:g,style_formats_merge:!0,fontsize_formats:r,min_height:175,menubar:!1,toolbar1:"fontselect fontsizeselect | forecolor backcolor | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist indent outdent | removeformat code",setup:function(e){e.on("init",function(){c(e),f?(u(t.settings.additionalParams.customFonts),e.execCommand("FontName",!1,"verdana,geneva,sans-serif"),e.execCommand("FontSize",!1,"24px")):(e.selection.select(e.getBody(),!0),e.selection.collapse(!1),m&&(e.execCommand("FontName",!1,m.replace(/'/g,"\\'").toLowerCase()+",sans-serif"),m="")),f=!1}),e.on("ExecCommand",function(t){l(e,t)})},init_instance_callback:function(t){var e=t.formatter.apply,n=t.formatter.remove;t.formatter.apply=function(n,a,i){var o={command:n,value:a.value};e(n,a,i),t.fire("ExecCommand",o)},t.formatter.remove=function(e,a,i){var o={command:e,value:a&&a.value?a.value:null};n(e,a,i),t.fire("ExecCommand",o)}}}}var f=!0,h="",g=[],m="";t.processFonts=function(){var e,n=document.createElement("div"),a="";n.innerHTML=t.settings.additionalParams.data,e=$(n),angular.forEach(e.find("span"),function(t){var e=$(t).css("font-family");e=e.replace(/[']/g,"").split(",")[0],-1===a.indexOf(e)&&(a+=e+",")}),t.settings.additionalParams.googleFonts=o.getFontsUsed(a),t.$parent.saveSettings()},t.$watch("tinymceOptions.font_formats",function(e){"undefined"!=typeof e&&(f||t.$broadcast("$tinymce:refresh"))}),t.$watch("settings.additionalParams.customFonts",function(t){"undefined"!=typeof t&&f&&o.getFonts().then(function(t){h=t.fonts,g=t.urls,p()},function(t){n.warn(t),p()},function(t){n.debug(t)})}),t.$on("customFontLoaded",function(e,n){u([n]),m=n.family.replace(/'/g,""),t.settings.additionalParams.customFonts.push(n),t.tinymceOptions.font_formats="Add Custom Font=custom;"+d()+s+h})}]).value("defaultSettings",{params:{},additionalParams:{data:"",customFonts:[],googleFonts:[],scroll:{}}}),angular.module("risevision.widget.text.settings").directive("customFont",["$log",function(){return{restrict:"A",link:function(t,e){function n(){var e=null;return t.url?(e=decodeURI(t.url.trim()),e.split("/").pop().split(".")[0]):null}var a=$(e);t.url="",t.addFont=function(){var e,i=n();i&&(e=t.url.trim(),t.$emit("customFontLoaded",{family:i,url:e})),a.modal("hide")},t.$on("showCustom",function(){a.modal("show")})}}}]),angular.module("risevision.widget.text.settings").constant("FONT_FAMILIES","Andale Mono=andale mono,monospace;Arial=arial,helvetica,sans-serif;Arial Black=arial black,sans-serif;Book Antiqua=book antiqua,palatino,serif;Comic Sans MS=comic sans ms,sans-serif;Courier New=courier new,courier,monospace;Georgia=georgia,palatino,serif;Helvetica=helvetica,arial,sans-serif;Impact=impact,sans-serif;Symbol=symbol;Tahoma=tahoma,arial,helvetica,sans-serif;Terminal=terminal,monaco,monospace;Times New Roman=times new roman,times,serif;Trebuchet MS=trebuchet ms,geneva,sans-serif;Verdana=verdana,geneva,sans-serif;Webdings=webdings;Wingdings=wingdings,zapf dingbats;").constant("GOOGLE_FONT_FAMILIES",["Abril Fatface","Alegreya","Alegreya Sans","Anonymous Pro","Archivo Narrow","Arvo","Bitter","Cardo","Chivo","Crimson Text","Domine","Droid Sans","Fira Sans","Inconsolata","Josefin Slab","Karla","Lato","Libre Baskerville","Lora","Merriweather","Montserrat","Neuton","Old Standard TT","Open Sans","Playfair Display","Poppins","PT Sans","PT Serif","Roboto","Source Sans Pro","Source Serif Pro","Ubuntu","Varela Round","Vollkorn","Work Sans"]).constant("FONT_SIZES","8px 9px 10px 11px 12px 14px 18px 24px 30px 36px 48px 60px 72px 96px"),angular.module("risevision.widget.text.settings").factory("googleFonts",["$log","$q","$window","GOOGLE_FONT_FAMILIES",function(t,e,n,a){var i=",sans-serif",o="",r=[],s={},l=[];return s.getFonts=function(){var s=e.defer();return n.WebFont.load({google:{families:a},timeout:2e3,active:function(){angular.forEach(a,function(t){-1===l.indexOf(t)&&(r.push("//fonts.googleapis.com/css?family="+t),o+=t+"="+t+i+";")}),s.resolve({fonts:o,urls:r})},inactive:function(){s.reject("No google fonts were loaded")},fontinactive:function(e){l.push(e),t.warn("Google font '"+e+"' failed to load")},loading:function(){s.notify("Loading google fonts")}}),s.promise},s.getFontsUsed=function(t){var e=[];return angular.forEach(a,function(n){-1!==t.indexOf(n)&&e.push(n)}),e},s}]);
//# sourceMappingURL=data:application/json;base64,
